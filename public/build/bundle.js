
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
var app = (function () {
	'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function createCommonjsModule(fn, basedir, module) {
		return module = {
		  path: basedir,
		  exports: {},
		  require: function (path, base) {
	      return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
	    }
		}, fn(module, module.exports), module.exports;
	}

	function commonjsRequire () {
		throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
	}

	var check = function (it) {
	  return it && it.Math == Math && it;
	};

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global_1 =
	  // eslint-disable-next-line no-undef
	  check(typeof globalThis == 'object' && globalThis) ||
	  check(typeof window == 'object' && window) ||
	  check(typeof self == 'object' && self) ||
	  check(typeof commonjsGlobal == 'object' && commonjsGlobal) ||
	  // eslint-disable-next-line no-new-func
	  Function('return this')();

	var fails = function (exec) {
	  try {
	    return !!exec();
	  } catch (error) {
	    return true;
	  }
	};

	// Thank's IE8 for his funny defineProperty
	var descriptors = !fails(function () {
	  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
	});

	var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
	var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

	// Nashorn ~ JDK8 bug
	var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);

	// `Object.prototype.propertyIsEnumerable` method implementation
	// https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable
	var f = NASHORN_BUG ? function propertyIsEnumerable(V) {
	  var descriptor = getOwnPropertyDescriptor(this, V);
	  return !!descriptor && descriptor.enumerable;
	} : nativePropertyIsEnumerable;

	var objectPropertyIsEnumerable = {
		f: f
	};

	var createPropertyDescriptor = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

	var toString = {}.toString;

	var classofRaw = function (it) {
	  return toString.call(it).slice(8, -1);
	};

	var split = ''.split;

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var indexedObject = fails(function () {
	  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
	  // eslint-disable-next-line no-prototype-builtins
	  return !Object('z').propertyIsEnumerable(0);
	}) ? function (it) {
	  return classofRaw(it) == 'String' ? split.call(it, '') : Object(it);
	} : Object;

	// `RequireObjectCoercible` abstract operation
	// https://tc39.github.io/ecma262/#sec-requireobjectcoercible
	var requireObjectCoercible = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on " + it);
	  return it;
	};

	// toObject with fallback for non-array-like ES3 strings



	var toIndexedObject = function (it) {
	  return indexedObject(requireObjectCoercible(it));
	};

	var isObject = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

	// `ToPrimitive` abstract operation
	// https://tc39.github.io/ecma262/#sec-toprimitive
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	var toPrimitive = function (input, PREFERRED_STRING) {
	  if (!isObject(input)) return input;
	  var fn, val;
	  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
	  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
	  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};

	var hasOwnProperty = {}.hasOwnProperty;

	var has = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};

	var document$1 = global_1.document;
	// typeof document.createElement is 'object' in old IE
	var EXISTS = isObject(document$1) && isObject(document$1.createElement);

	var documentCreateElement = function (it) {
	  return EXISTS ? document$1.createElement(it) : {};
	};

	// Thank's IE8 for his funny defineProperty
	var ie8DomDefine = !descriptors && !fails(function () {
	  return Object.defineProperty(documentCreateElement('div'), 'a', {
	    get: function () { return 7; }
	  }).a != 7;
	});

	var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

	// `Object.getOwnPropertyDescriptor` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
	var f$1 = descriptors ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
	  O = toIndexedObject(O);
	  P = toPrimitive(P, true);
	  if (ie8DomDefine) try {
	    return nativeGetOwnPropertyDescriptor(O, P);
	  } catch (error) { /* empty */ }
	  if (has(O, P)) return createPropertyDescriptor(!objectPropertyIsEnumerable.f.call(O, P), O[P]);
	};

	var objectGetOwnPropertyDescriptor = {
		f: f$1
	};

	var anObject = function (it) {
	  if (!isObject(it)) {
	    throw TypeError(String(it) + ' is not an object');
	  } return it;
	};

	var nativeDefineProperty = Object.defineProperty;

	// `Object.defineProperty` method
	// https://tc39.github.io/ecma262/#sec-object.defineproperty
	var f$2 = descriptors ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if (ie8DomDefine) try {
	    return nativeDefineProperty(O, P, Attributes);
	  } catch (error) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};

	var objectDefineProperty = {
		f: f$2
	};

	var createNonEnumerableProperty = descriptors ? function (object, key, value) {
	  return objectDefineProperty.f(object, key, createPropertyDescriptor(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

	var setGlobal = function (key, value) {
	  try {
	    createNonEnumerableProperty(global_1, key, value);
	  } catch (error) {
	    global_1[key] = value;
	  } return value;
	};

	var SHARED = '__core-js_shared__';
	var store = global_1[SHARED] || setGlobal(SHARED, {});

	var sharedStore = store;

	var functionToString = Function.toString;

	// this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper
	if (typeof sharedStore.inspectSource != 'function') {
	  sharedStore.inspectSource = function (it) {
	    return functionToString.call(it);
	  };
	}

	var inspectSource = sharedStore.inspectSource;

	var WeakMap = global_1.WeakMap;

	var nativeWeakMap = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));

	var shared = createCommonjsModule(function (module) {
	(module.exports = function (key, value) {
	  return sharedStore[key] || (sharedStore[key] = value !== undefined ? value : {});
	})('versions', []).push({
	  version: '3.6.5',
	  mode:  'global',
	  copyright: 'Â© 2020 Denis Pushkarev (zloirock.ru)'
	});
	});

	var id = 0;
	var postfix = Math.random();

	var uid = function (key) {
	  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
	};

	var keys = shared('keys');

	var sharedKey = function (key) {
	  return keys[key] || (keys[key] = uid(key));
	};

	var hiddenKeys = {};

	var WeakMap$1 = global_1.WeakMap;
	var set, get, has$1;

	var enforce = function (it) {
	  return has$1(it) ? get(it) : set(it, {});
	};

	var getterFor = function (TYPE) {
	  return function (it) {
	    var state;
	    if (!isObject(it) || (state = get(it)).type !== TYPE) {
	      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
	    } return state;
	  };
	};

	if (nativeWeakMap) {
	  var store$1 = new WeakMap$1();
	  var wmget = store$1.get;
	  var wmhas = store$1.has;
	  var wmset = store$1.set;
	  set = function (it, metadata) {
	    wmset.call(store$1, it, metadata);
	    return metadata;
	  };
	  get = function (it) {
	    return wmget.call(store$1, it) || {};
	  };
	  has$1 = function (it) {
	    return wmhas.call(store$1, it);
	  };
	} else {
	  var STATE = sharedKey('state');
	  hiddenKeys[STATE] = true;
	  set = function (it, metadata) {
	    createNonEnumerableProperty(it, STATE, metadata);
	    return metadata;
	  };
	  get = function (it) {
	    return has(it, STATE) ? it[STATE] : {};
	  };
	  has$1 = function (it) {
	    return has(it, STATE);
	  };
	}

	var internalState = {
	  set: set,
	  get: get,
	  has: has$1,
	  enforce: enforce,
	  getterFor: getterFor
	};

	var redefine = createCommonjsModule(function (module) {
	var getInternalState = internalState.get;
	var enforceInternalState = internalState.enforce;
	var TEMPLATE = String(String).split('String');

	(module.exports = function (O, key, value, options) {
	  var unsafe = options ? !!options.unsafe : false;
	  var simple = options ? !!options.enumerable : false;
	  var noTargetGet = options ? !!options.noTargetGet : false;
	  if (typeof value == 'function') {
	    if (typeof key == 'string' && !has(value, 'name')) createNonEnumerableProperty(value, 'name', key);
	    enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');
	  }
	  if (O === global_1) {
	    if (simple) O[key] = value;
	    else setGlobal(key, value);
	    return;
	  } else if (!unsafe) {
	    delete O[key];
	  } else if (!noTargetGet && O[key]) {
	    simple = true;
	  }
	  if (simple) O[key] = value;
	  else createNonEnumerableProperty(O, key, value);
	// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	})(Function.prototype, 'toString', function toString() {
	  return typeof this == 'function' && getInternalState(this).source || inspectSource(this);
	});
	});

	var path = global_1;

	var aFunction = function (variable) {
	  return typeof variable == 'function' ? variable : undefined;
	};

	var getBuiltIn = function (namespace, method) {
	  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global_1[namespace])
	    : path[namespace] && path[namespace][method] || global_1[namespace] && global_1[namespace][method];
	};

	var ceil = Math.ceil;
	var floor = Math.floor;

	// `ToInteger` abstract operation
	// https://tc39.github.io/ecma262/#sec-tointeger
	var toInteger = function (argument) {
	  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
	};

	var min = Math.min;

	// `ToLength` abstract operation
	// https://tc39.github.io/ecma262/#sec-tolength
	var toLength = function (argument) {
	  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
	};

	var max = Math.max;
	var min$1 = Math.min;

	// Helper for a popular repeating case of the spec:
	// Let integer be ? ToInteger(index).
	// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
	var toAbsoluteIndex = function (index, length) {
	  var integer = toInteger(index);
	  return integer < 0 ? max(integer + length, 0) : min$1(integer, length);
	};

	// `Array.prototype.{ indexOf, includes }` methods implementation
	var createMethod = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIndexedObject($this);
	    var length = toLength(O.length);
	    var index = toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) {
	      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

	var arrayIncludes = {
	  // `Array.prototype.includes` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.includes
	  includes: createMethod(true),
	  // `Array.prototype.indexOf` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
	  indexOf: createMethod(false)
	};

	var indexOf = arrayIncludes.indexOf;


	var objectKeysInternal = function (object, names) {
	  var O = toIndexedObject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (has(O, key = names[i++])) {
	    ~indexOf(result, key) || result.push(key);
	  }
	  return result;
	};

	// IE8- don't enum bug keys
	var enumBugKeys = [
	  'constructor',
	  'hasOwnProperty',
	  'isPrototypeOf',
	  'propertyIsEnumerable',
	  'toLocaleString',
	  'toString',
	  'valueOf'
	];

	var hiddenKeys$1 = enumBugKeys.concat('length', 'prototype');

	// `Object.getOwnPropertyNames` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertynames
	var f$3 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return objectKeysInternal(O, hiddenKeys$1);
	};

	var objectGetOwnPropertyNames = {
		f: f$3
	};

	var f$4 = Object.getOwnPropertySymbols;

	var objectGetOwnPropertySymbols = {
		f: f$4
	};

	// all object keys, includes non-enumerable and symbols
	var ownKeys = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
	  var keys = objectGetOwnPropertyNames.f(anObject(it));
	  var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
	  return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
	};

	var copyConstructorProperties = function (target, source) {
	  var keys = ownKeys(source);
	  var defineProperty = objectDefineProperty.f;
	  var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
	  }
	};

	var replacement = /#|\.prototype\./;

	var isForced = function (feature, detection) {
	  var value = data[normalize(feature)];
	  return value == POLYFILL ? true
	    : value == NATIVE ? false
	    : typeof detection == 'function' ? fails(detection)
	    : !!detection;
	};

	var normalize = isForced.normalize = function (string) {
	  return String(string).replace(replacement, '.').toLowerCase();
	};

	var data = isForced.data = {};
	var NATIVE = isForced.NATIVE = 'N';
	var POLYFILL = isForced.POLYFILL = 'P';

	var isForced_1 = isForced;

	var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;






	/*
	  options.target      - name of the target object
	  options.global      - target is the global object
	  options.stat        - export as static methods of target
	  options.proto       - export as prototype methods of target
	  options.real        - real prototype method for the `pure` version
	  options.forced      - export even if the native feature is available
	  options.bind        - bind methods to the target, required for the `pure` version
	  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
	  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
	  options.sham        - add a flag to not completely full polyfills
	  options.enumerable  - export as enumerable property
	  options.noTargetGet - prevent calling a getter on target
	*/
	var _export = function (options, source) {
	  var TARGET = options.target;
	  var GLOBAL = options.global;
	  var STATIC = options.stat;
	  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
	  if (GLOBAL) {
	    target = global_1;
	  } else if (STATIC) {
	    target = global_1[TARGET] || setGlobal(TARGET, {});
	  } else {
	    target = (global_1[TARGET] || {}).prototype;
	  }
	  if (target) for (key in source) {
	    sourceProperty = source[key];
	    if (options.noTargetGet) {
	      descriptor = getOwnPropertyDescriptor$1(target, key);
	      targetProperty = descriptor && descriptor.value;
	    } else targetProperty = target[key];
	    FORCED = isForced_1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
	    // contained in target
	    if (!FORCED && targetProperty !== undefined) {
	      if (typeof sourceProperty === typeof targetProperty) continue;
	      copyConstructorProperties(sourceProperty, targetProperty);
	    }
	    // add a flag to not completely full polyfills
	    if (options.sham || (targetProperty && targetProperty.sham)) {
	      createNonEnumerableProperty(sourceProperty, 'sham', true);
	    }
	    // extend global
	    redefine(target, key, sourceProperty, options);
	  }
	};

	var aFunction$1 = function (it) {
	  if (typeof it != 'function') {
	    throw TypeError(String(it) + ' is not a function');
	  } return it;
	};

	// optional / simple context binding
	var functionBindContext = function (fn, that, length) {
	  aFunction$1(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 0: return function () {
	      return fn.call(that);
	    };
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};

	// `ToObject` abstract operation
	// https://tc39.github.io/ecma262/#sec-toobject
	var toObject = function (argument) {
	  return Object(requireObjectCoercible(argument));
	};

	// `IsArray` abstract operation
	// https://tc39.github.io/ecma262/#sec-isarray
	var isArray = Array.isArray || function isArray(arg) {
	  return classofRaw(arg) == 'Array';
	};

	var nativeSymbol = !!Object.getOwnPropertySymbols && !fails(function () {
	  // Chrome 38 Symbol has incorrect toString conversion
	  // eslint-disable-next-line no-undef
	  return !String(Symbol());
	});

	var useSymbolAsUid = nativeSymbol
	  // eslint-disable-next-line no-undef
	  && !Symbol.sham
	  // eslint-disable-next-line no-undef
	  && typeof Symbol.iterator == 'symbol';

	var WellKnownSymbolsStore = shared('wks');
	var Symbol$1 = global_1.Symbol;
	var createWellKnownSymbol = useSymbolAsUid ? Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid;

	var wellKnownSymbol = function (name) {
	  if (!has(WellKnownSymbolsStore, name)) {
	    if (nativeSymbol && has(Symbol$1, name)) WellKnownSymbolsStore[name] = Symbol$1[name];
	    else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
	  } return WellKnownSymbolsStore[name];
	};

	var SPECIES = wellKnownSymbol('species');

	// `ArraySpeciesCreate` abstract operation
	// https://tc39.github.io/ecma262/#sec-arrayspeciescreate
	var arraySpeciesCreate = function (originalArray, length) {
	  var C;
	  if (isArray(originalArray)) {
	    C = originalArray.constructor;
	    // cross-realm fallback
	    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
	    else if (isObject(C)) {
	      C = C[SPECIES];
	      if (C === null) C = undefined;
	    }
	  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
	};

	var push = [].push;

	// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation
	var createMethod$1 = function (TYPE) {
	  var IS_MAP = TYPE == 1;
	  var IS_FILTER = TYPE == 2;
	  var IS_SOME = TYPE == 3;
	  var IS_EVERY = TYPE == 4;
	  var IS_FIND_INDEX = TYPE == 6;
	  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
	  return function ($this, callbackfn, that, specificCreate) {
	    var O = toObject($this);
	    var self = indexedObject(O);
	    var boundFunction = functionBindContext(callbackfn, that, 3);
	    var length = toLength(self.length);
	    var index = 0;
	    var create = specificCreate || arraySpeciesCreate;
	    var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
	    var value, result;
	    for (;length > index; index++) if (NO_HOLES || index in self) {
	      value = self[index];
	      result = boundFunction(value, index, O);
	      if (TYPE) {
	        if (IS_MAP) target[index] = result; // map
	        else if (result) switch (TYPE) {
	          case 3: return true;              // some
	          case 5: return value;             // find
	          case 6: return index;             // findIndex
	          case 2: push.call(target, value); // filter
	        } else if (IS_EVERY) return false;  // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
	  };
	};

	var arrayIteration = {
	  // `Array.prototype.forEach` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
	  forEach: createMethod$1(0),
	  // `Array.prototype.map` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.map
	  map: createMethod$1(1),
	  // `Array.prototype.filter` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.filter
	  filter: createMethod$1(2),
	  // `Array.prototype.some` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.some
	  some: createMethod$1(3),
	  // `Array.prototype.every` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.every
	  every: createMethod$1(4),
	  // `Array.prototype.find` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.find
	  find: createMethod$1(5),
	  // `Array.prototype.findIndex` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
	  findIndex: createMethod$1(6)
	};

	var arrayMethodIsStrict = function (METHOD_NAME, argument) {
	  var method = [][METHOD_NAME];
	  return !!method && fails(function () {
	    // eslint-disable-next-line no-useless-call,no-throw-literal
	    method.call(null, argument || function () { throw 1; }, 1);
	  });
	};

	var defineProperty = Object.defineProperty;
	var cache = {};

	var thrower = function (it) { throw it; };

	var arrayMethodUsesToLength = function (METHOD_NAME, options) {
	  if (has(cache, METHOD_NAME)) return cache[METHOD_NAME];
	  if (!options) options = {};
	  var method = [][METHOD_NAME];
	  var ACCESSORS = has(options, 'ACCESSORS') ? options.ACCESSORS : false;
	  var argument0 = has(options, 0) ? options[0] : thrower;
	  var argument1 = has(options, 1) ? options[1] : undefined;

	  return cache[METHOD_NAME] = !!method && !fails(function () {
	    if (ACCESSORS && !descriptors) return true;
	    var O = { length: -1 };

	    if (ACCESSORS) defineProperty(O, 1, { enumerable: true, get: thrower });
	    else O[1] = 1;

	    method.call(O, argument0, argument1);
	  });
	};

	var $forEach = arrayIteration.forEach;



	var STRICT_METHOD = arrayMethodIsStrict('forEach');
	var USES_TO_LENGTH = arrayMethodUsesToLength('forEach');

	// `Array.prototype.forEach` method implementation
	// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
	var arrayForEach = (!STRICT_METHOD || !USES_TO_LENGTH) ? function forEach(callbackfn /* , thisArg */) {
	  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	} : [].forEach;

	// `Array.prototype.forEach` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
	_export({ target: 'Array', proto: true, forced: [].forEach != arrayForEach }, {
	  forEach: arrayForEach
	});

	var $indexOf = arrayIncludes.indexOf;



	var nativeIndexOf = [].indexOf;

	var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;
	var STRICT_METHOD$1 = arrayMethodIsStrict('indexOf');
	var USES_TO_LENGTH$1 = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });

	// `Array.prototype.indexOf` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.indexof
	_export({ target: 'Array', proto: true, forced: NEGATIVE_ZERO || !STRICT_METHOD$1 || !USES_TO_LENGTH$1 }, {
	  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
	    return NEGATIVE_ZERO
	      // convert -0 to +0
	      ? nativeIndexOf.apply(this, arguments) || 0
	      : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var createProperty = function (object, key, value) {
	  var propertyKey = toPrimitive(key);
	  if (propertyKey in object) objectDefineProperty.f(object, propertyKey, createPropertyDescriptor(0, value));
	  else object[propertyKey] = value;
	};

	var engineUserAgent = getBuiltIn('navigator', 'userAgent') || '';

	var process = global_1.process;
	var versions = process && process.versions;
	var v8 = versions && versions.v8;
	var match, version;

	if (v8) {
	  match = v8.split('.');
	  version = match[0] + match[1];
	} else if (engineUserAgent) {
	  match = engineUserAgent.match(/Edge\/(\d+)/);
	  if (!match || match[1] >= 74) {
	    match = engineUserAgent.match(/Chrome\/(\d+)/);
	    if (match) version = match[1];
	  }
	}

	var engineV8Version = version && +version;

	var SPECIES$1 = wellKnownSymbol('species');

	var arrayMethodHasSpeciesSupport = function (METHOD_NAME) {
	  // We can't use this feature detection in V8 since it causes
	  // deoptimization and serious performance degradation
	  // https://github.com/zloirock/core-js/issues/677
	  return engineV8Version >= 51 || !fails(function () {
	    var array = [];
	    var constructor = array.constructor = {};
	    constructor[SPECIES$1] = function () {
	      return { foo: 1 };
	    };
	    return array[METHOD_NAME](Boolean).foo !== 1;
	  });
	};

	var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('slice');
	var USES_TO_LENGTH$2 = arrayMethodUsesToLength('slice', { ACCESSORS: true, 0: 0, 1: 2 });

	var SPECIES$2 = wellKnownSymbol('species');
	var nativeSlice = [].slice;
	var max$1 = Math.max;

	// `Array.prototype.slice` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.slice
	// fallback for not array-like ES3 strings and DOM objects
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH$2 }, {
	  slice: function slice(start, end) {
	    var O = toIndexedObject(this);
	    var length = toLength(O.length);
	    var k = toAbsoluteIndex(start, length);
	    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
	    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
	    var Constructor, result, n;
	    if (isArray(O)) {
	      Constructor = O.constructor;
	      // cross-realm fallback
	      if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {
	        Constructor = undefined;
	      } else if (isObject(Constructor)) {
	        Constructor = Constructor[SPECIES$2];
	        if (Constructor === null) Constructor = undefined;
	      }
	      if (Constructor === Array || Constructor === undefined) {
	        return nativeSlice.call(O, k, fin);
	      }
	    }
	    result = new (Constructor === undefined ? Array : Constructor)(max$1(fin - k, 0));
	    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);
	    result.length = n;
	    return result;
	  }
	});

	var defineProperty$1 = objectDefineProperty.f;

	var FunctionPrototype = Function.prototype;
	var FunctionPrototypeToString = FunctionPrototype.toString;
	var nameRE = /^\s*function ([^ (]*)/;
	var NAME = 'name';

	// Function instances `.name` property
	// https://tc39.github.io/ecma262/#sec-function-instances-name
	if (descriptors && !(NAME in FunctionPrototype)) {
	  defineProperty$1(FunctionPrototype, NAME, {
	    configurable: true,
	    get: function () {
	      try {
	        return FunctionPrototypeToString.call(this).match(nameRE)[1];
	      } catch (error) {
	        return '';
	      }
	    }
	  });
	}

	// `Object.keys` method
	// https://tc39.github.io/ecma262/#sec-object.keys
	var objectKeys = Object.keys || function keys(O) {
	  return objectKeysInternal(O, enumBugKeys);
	};

	var FAILS_ON_PRIMITIVES = fails(function () { objectKeys(1); });

	// `Object.keys` method
	// https://tc39.github.io/ecma262/#sec-object.keys
	_export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
	  keys: function keys(it) {
	    return objectKeys(toObject(it));
	  }
	});

	// iterable DOM collections
	// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
	var domIterables = {
	  CSSRuleList: 0,
	  CSSStyleDeclaration: 0,
	  CSSValueList: 0,
	  ClientRectList: 0,
	  DOMRectList: 0,
	  DOMStringList: 0,
	  DOMTokenList: 1,
	  DataTransferItemList: 0,
	  FileList: 0,
	  HTMLAllCollection: 0,
	  HTMLCollection: 0,
	  HTMLFormElement: 0,
	  HTMLSelectElement: 0,
	  MediaList: 0,
	  MimeTypeArray: 0,
	  NamedNodeMap: 0,
	  NodeList: 1,
	  PaintRequestList: 0,
	  Plugin: 0,
	  PluginArray: 0,
	  SVGLengthList: 0,
	  SVGNumberList: 0,
	  SVGPathSegList: 0,
	  SVGPointList: 0,
	  SVGStringList: 0,
	  SVGTransformList: 0,
	  SourceBufferList: 0,
	  StyleSheetList: 0,
	  TextTrackCueList: 0,
	  TextTrackList: 0,
	  TouchList: 0
	};

	for (var COLLECTION_NAME in domIterables) {
	  var Collection = global_1[COLLECTION_NAME];
	  var CollectionPrototype = Collection && Collection.prototype;
	  // some Chrome versions have non-configurable methods on DOMTokenList
	  if (CollectionPrototype && CollectionPrototype.forEach !== arrayForEach) try {
	    createNonEnumerableProperty(CollectionPrototype, 'forEach', arrayForEach);
	  } catch (error) {
	    CollectionPrototype.forEach = arrayForEach;
	  }
	}

	function _typeof(obj) {
	  "@babel/helpers - typeof";

	  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
	    _typeof = function (obj) {
	      return typeof obj;
	    };
	  } else {
	    _typeof = function (obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	    };
	  }

	  return _typeof(obj);
	}

	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
	  try {
	    var info = gen[key](arg);
	    var value = info.value;
	  } catch (error) {
	    reject(error);
	    return;
	  }

	  if (info.done) {
	    resolve(value);
	  } else {
	    Promise.resolve(value).then(_next, _throw);
	  }
	}

	function _asyncToGenerator(fn) {
	  return function () {
	    var self = this,
	        args = arguments;
	    return new Promise(function (resolve, reject) {
	      var gen = fn.apply(self, args);

	      function _next(value) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
	      }

	      function _throw(err) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
	      }

	      _next(undefined);
	    });
	  };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  return Constructor;
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function ownKeys$1(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    if (enumerableOnly) symbols = symbols.filter(function (sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    });
	    keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread2(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};

	    if (i % 2) {
	      ownKeys$1(Object(source), true).forEach(function (key) {
	        _defineProperty(target, key, source[key]);
	      });
	    } else if (Object.getOwnPropertyDescriptors) {
	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
	    } else {
	      ownKeys$1(Object(source)).forEach(function (key) {
	        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	      });
	    }
	  }

	  return target;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf(subClass, superClass);
	}

	function _getPrototypeOf(o) {
	  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf(o);
	}

	function _setPrototypeOf(o, p) {
	  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf(o, p);
	}

	function _isNativeReflectConstruct() {
	  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	  if (Reflect.construct.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	function _possibleConstructorReturn(self, call) {
	  if (call && (typeof call === "object" || typeof call === "function")) {
	    return call;
	  }

	  return _assertThisInitialized(self);
	}

	function _createSuper(Derived) {
	  var hasNativeReflectConstruct = _isNativeReflectConstruct();

	  return function _createSuperInternal() {
	    var Super = _getPrototypeOf(Derived),
	        result;

	    if (hasNativeReflectConstruct) {
	      var NewTarget = _getPrototypeOf(this).constructor;

	      result = Reflect.construct(Super, arguments, NewTarget);
	    } else {
	      result = Super.apply(this, arguments);
	    }

	    return _possibleConstructorReturn(this, result);
	  };
	}

	function _superPropBase(object, property) {
	  while (!Object.prototype.hasOwnProperty.call(object, property)) {
	    object = _getPrototypeOf(object);
	    if (object === null) break;
	  }

	  return object;
	}

	function _get(target, property, receiver) {
	  if (typeof Reflect !== "undefined" && Reflect.get) {
	    _get = Reflect.get;
	  } else {
	    _get = function _get(target, property, receiver) {
	      var base = _superPropBase(target, property);

	      if (!base) return;
	      var desc = Object.getOwnPropertyDescriptor(base, property);

	      if (desc.get) {
	        return desc.get.call(receiver);
	      }

	      return desc.value;
	    };
	  }

	  return _get(target, property, receiver || target);
	}

	function _taggedTemplateLiteral(strings, raw) {
	  if (!raw) {
	    raw = strings.slice(0);
	  }

	  return Object.freeze(Object.defineProperties(strings, {
	    raw: {
	      value: Object.freeze(raw)
	    }
	  }));
	}

	function _slicedToArray(arr, i) {
	  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
	}

	function _toConsumableArray(arr) {
	  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
	}

	function _arrayWithoutHoles(arr) {
	  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
	}

	function _arrayWithHoles(arr) {
	  if (Array.isArray(arr)) return arr;
	}

	function _iterableToArray(iter) {
	  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
	}

	function _iterableToArrayLimit(arr, i) {
	  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
	  var _arr = [];
	  var _n = true;
	  var _d = false;
	  var _e = undefined;

	  try {
	    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);

	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }

	  return _arr;
	}

	function _unsupportedIterableToArray(o, minLen) {
	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
	  var n = Object.prototype.toString.call(o).slice(8, -1);
	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return Array.from(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
	}

	function _arrayLikeToArray(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

	  return arr2;
	}

	function _nonIterableSpread() {
	  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	function _nonIterableRest() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	function _createForOfIteratorHelper(o, allowArrayLike) {
	  var it;

	  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
	    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
	      if (it) o = it;
	      var i = 0;

	      var F = function () {};

	      return {
	        s: F,
	        n: function () {
	          if (i >= o.length) return {
	            done: true
	          };
	          return {
	            done: false,
	            value: o[i++]
	          };
	        },
	        e: function (e) {
	          throw e;
	        },
	        f: F
	      };
	    }

	    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	  }

	  var normalCompletion = true,
	      didErr = false,
	      err;
	  return {
	    s: function () {
	      it = o[Symbol.iterator]();
	    },
	    n: function () {
	      var step = it.next();
	      normalCompletion = step.done;
	      return step;
	    },
	    e: function (e) {
	      didErr = true;
	      err = e;
	    },
	    f: function () {
	      try {
	        if (!normalCompletion && it.return != null) it.return();
	      } finally {
	        if (didErr) throw err;
	      }
	    }
	  };
	}

	// `Object.defineProperties` method
	// https://tc39.github.io/ecma262/#sec-object.defineproperties
	var objectDefineProperties = descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject(O);
	  var keys = objectKeys(Properties);
	  var length = keys.length;
	  var index = 0;
	  var key;
	  while (length > index) objectDefineProperty.f(O, key = keys[index++], Properties[key]);
	  return O;
	};

	var html = getBuiltIn('document', 'documentElement');

	var GT = '>';
	var LT = '<';
	var PROTOTYPE = 'prototype';
	var SCRIPT = 'script';
	var IE_PROTO = sharedKey('IE_PROTO');

	var EmptyConstructor = function () { /* empty */ };

	var scriptTag = function (content) {
	  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
	};

	// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
	var NullProtoObjectViaActiveX = function (activeXDocument) {
	  activeXDocument.write(scriptTag(''));
	  activeXDocument.close();
	  var temp = activeXDocument.parentWindow.Object;
	  activeXDocument = null; // avoid memory leak
	  return temp;
	};

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var NullProtoObjectViaIFrame = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = documentCreateElement('iframe');
	  var JS = 'java' + SCRIPT + ':';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  html.appendChild(iframe);
	  // https://github.com/zloirock/core-js/issues/475
	  iframe.src = String(JS);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(scriptTag('document.F=Object'));
	  iframeDocument.close();
	  return iframeDocument.F;
	};

	// Check for document.domain and active x support
	// No need to use active x approach when document.domain is not set
	// see https://github.com/es-shims/es5-shim/issues/150
	// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
	// avoid IE GC bug
	var activeXDocument;
	var NullProtoObject = function () {
	  try {
	    /* global ActiveXObject */
	    activeXDocument = document.domain && new ActiveXObject('htmlfile');
	  } catch (error) { /* ignore */ }
	  NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();
	  var length = enumBugKeys.length;
	  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
	  return NullProtoObject();
	};

	hiddenKeys[IE_PROTO] = true;

	// `Object.create` method
	// https://tc39.github.io/ecma262/#sec-object.create
	var objectCreate = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    EmptyConstructor[PROTOTYPE] = anObject(O);
	    result = new EmptyConstructor();
	    EmptyConstructor[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = NullProtoObject();
	  return Properties === undefined ? result : objectDefineProperties(result, Properties);
	};

	var nativeGetOwnPropertyNames = objectGetOwnPropertyNames.f;

	var toString$1 = {}.toString;

	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];

	var getWindowNames = function (it) {
	  try {
	    return nativeGetOwnPropertyNames(it);
	  } catch (error) {
	    return windowNames.slice();
	  }
	};

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var f$5 = function getOwnPropertyNames(it) {
	  return windowNames && toString$1.call(it) == '[object Window]'
	    ? getWindowNames(it)
	    : nativeGetOwnPropertyNames(toIndexedObject(it));
	};

	var objectGetOwnPropertyNamesExternal = {
		f: f$5
	};

	var f$6 = wellKnownSymbol;

	var wellKnownSymbolWrapped = {
		f: f$6
	};

	var defineProperty$2 = objectDefineProperty.f;

	var defineWellKnownSymbol = function (NAME) {
	  var Symbol = path.Symbol || (path.Symbol = {});
	  if (!has(Symbol, NAME)) defineProperty$2(Symbol, NAME, {
	    value: wellKnownSymbolWrapped.f(NAME)
	  });
	};

	var defineProperty$3 = objectDefineProperty.f;



	var TO_STRING_TAG = wellKnownSymbol('toStringTag');

	var setToStringTag = function (it, TAG, STATIC) {
	  if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
	    defineProperty$3(it, TO_STRING_TAG, { configurable: true, value: TAG });
	  }
	};

	var $forEach$1 = arrayIteration.forEach;

	var HIDDEN = sharedKey('hidden');
	var SYMBOL = 'Symbol';
	var PROTOTYPE$1 = 'prototype';
	var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
	var setInternalState = internalState.set;
	var getInternalState = internalState.getterFor(SYMBOL);
	var ObjectPrototype = Object[PROTOTYPE$1];
	var $Symbol = global_1.Symbol;
	var $stringify = getBuiltIn('JSON', 'stringify');
	var nativeGetOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;
	var nativeDefineProperty$1 = objectDefineProperty.f;
	var nativeGetOwnPropertyNames$1 = objectGetOwnPropertyNamesExternal.f;
	var nativePropertyIsEnumerable$1 = objectPropertyIsEnumerable.f;
	var AllSymbols = shared('symbols');
	var ObjectPrototypeSymbols = shared('op-symbols');
	var StringToSymbolRegistry = shared('string-to-symbol-registry');
	var SymbolToStringRegistry = shared('symbol-to-string-registry');
	var WellKnownSymbolsStore$1 = shared('wks');
	var QObject = global_1.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var USE_SETTER = !QObject || !QObject[PROTOTYPE$1] || !QObject[PROTOTYPE$1].findChild;

	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDescriptor = descriptors && fails(function () {
	  return objectCreate(nativeDefineProperty$1({}, 'a', {
	    get: function () { return nativeDefineProperty$1(this, 'a', { value: 7 }).a; }
	  })).a != 7;
	}) ? function (O, P, Attributes) {
	  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor$1(ObjectPrototype, P);
	  if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];
	  nativeDefineProperty$1(O, P, Attributes);
	  if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
	    nativeDefineProperty$1(ObjectPrototype, P, ObjectPrototypeDescriptor);
	  }
	} : nativeDefineProperty$1;

	var wrap = function (tag, description) {
	  var symbol = AllSymbols[tag] = objectCreate($Symbol[PROTOTYPE$1]);
	  setInternalState(symbol, {
	    type: SYMBOL,
	    tag: tag,
	    description: description
	  });
	  if (!descriptors) symbol.description = description;
	  return symbol;
	};

	var isSymbol = useSymbolAsUid ? function (it) {
	  return typeof it == 'symbol';
	} : function (it) {
	  return Object(it) instanceof $Symbol;
	};

	var $defineProperty = function defineProperty(O, P, Attributes) {
	  if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
	  anObject(O);
	  var key = toPrimitive(P, true);
	  anObject(Attributes);
	  if (has(AllSymbols, key)) {
	    if (!Attributes.enumerable) {
	      if (!has(O, HIDDEN)) nativeDefineProperty$1(O, HIDDEN, createPropertyDescriptor(1, {}));
	      O[HIDDEN][key] = true;
	    } else {
	      if (has(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
	      Attributes = objectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
	    } return setSymbolDescriptor(O, key, Attributes);
	  } return nativeDefineProperty$1(O, key, Attributes);
	};

	var $defineProperties = function defineProperties(O, Properties) {
	  anObject(O);
	  var properties = toIndexedObject(Properties);
	  var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
	  $forEach$1(keys, function (key) {
	    if (!descriptors || $propertyIsEnumerable.call(properties, key)) $defineProperty(O, key, properties[key]);
	  });
	  return O;
	};

	var $create = function create(O, Properties) {
	  return Properties === undefined ? objectCreate(O) : $defineProperties(objectCreate(O), Properties);
	};

	var $propertyIsEnumerable = function propertyIsEnumerable(V) {
	  var P = toPrimitive(V, true);
	  var enumerable = nativePropertyIsEnumerable$1.call(this, P);
	  if (this === ObjectPrototype && has(AllSymbols, P) && !has(ObjectPrototypeSymbols, P)) return false;
	  return enumerable || !has(this, P) || !has(AllSymbols, P) || has(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
	};

	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
	  var it = toIndexedObject(O);
	  var key = toPrimitive(P, true);
	  if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;
	  var descriptor = nativeGetOwnPropertyDescriptor$1(it, key);
	  if (descriptor && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) {
	    descriptor.enumerable = true;
	  }
	  return descriptor;
	};

	var $getOwnPropertyNames = function getOwnPropertyNames(O) {
	  var names = nativeGetOwnPropertyNames$1(toIndexedObject(O));
	  var result = [];
	  $forEach$1(names, function (key) {
	    if (!has(AllSymbols, key) && !has(hiddenKeys, key)) result.push(key);
	  });
	  return result;
	};

	var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
	  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
	  var names = nativeGetOwnPropertyNames$1(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
	  var result = [];
	  $forEach$1(names, function (key) {
	    if (has(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype, key))) {
	      result.push(AllSymbols[key]);
	    }
	  });
	  return result;
	};

	// `Symbol` constructor
	// https://tc39.github.io/ecma262/#sec-symbol-constructor
	if (!nativeSymbol) {
	  $Symbol = function Symbol() {
	    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');
	    var description = !arguments.length || arguments[0] === undefined ? undefined : String(arguments[0]);
	    var tag = uid(description);
	    var setter = function (value) {
	      if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);
	      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
	    };
	    if (descriptors && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });
	    return wrap(tag, description);
	  };

	  redefine($Symbol[PROTOTYPE$1], 'toString', function toString() {
	    return getInternalState(this).tag;
	  });

	  redefine($Symbol, 'withoutSetter', function (description) {
	    return wrap(uid(description), description);
	  });

	  objectPropertyIsEnumerable.f = $propertyIsEnumerable;
	  objectDefineProperty.f = $defineProperty;
	  objectGetOwnPropertyDescriptor.f = $getOwnPropertyDescriptor;
	  objectGetOwnPropertyNames.f = objectGetOwnPropertyNamesExternal.f = $getOwnPropertyNames;
	  objectGetOwnPropertySymbols.f = $getOwnPropertySymbols;

	  wellKnownSymbolWrapped.f = function (name) {
	    return wrap(wellKnownSymbol(name), name);
	  };

	  if (descriptors) {
	    // https://github.com/tc39/proposal-Symbol-description
	    nativeDefineProperty$1($Symbol[PROTOTYPE$1], 'description', {
	      configurable: true,
	      get: function description() {
	        return getInternalState(this).description;
	      }
	    });
	    {
	      redefine(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, { unsafe: true });
	    }
	  }
	}

	_export({ global: true, wrap: true, forced: !nativeSymbol, sham: !nativeSymbol }, {
	  Symbol: $Symbol
	});

	$forEach$1(objectKeys(WellKnownSymbolsStore$1), function (name) {
	  defineWellKnownSymbol(name);
	});

	_export({ target: SYMBOL, stat: true, forced: !nativeSymbol }, {
	  // `Symbol.for` method
	  // https://tc39.github.io/ecma262/#sec-symbol.for
	  'for': function (key) {
	    var string = String(key);
	    if (has(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
	    var symbol = $Symbol(string);
	    StringToSymbolRegistry[string] = symbol;
	    SymbolToStringRegistry[symbol] = string;
	    return symbol;
	  },
	  // `Symbol.keyFor` method
	  // https://tc39.github.io/ecma262/#sec-symbol.keyfor
	  keyFor: function keyFor(sym) {
	    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');
	    if (has(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
	  },
	  useSetter: function () { USE_SETTER = true; },
	  useSimple: function () { USE_SETTER = false; }
	});

	_export({ target: 'Object', stat: true, forced: !nativeSymbol, sham: !descriptors }, {
	  // `Object.create` method
	  // https://tc39.github.io/ecma262/#sec-object.create
	  create: $create,
	  // `Object.defineProperty` method
	  // https://tc39.github.io/ecma262/#sec-object.defineproperty
	  defineProperty: $defineProperty,
	  // `Object.defineProperties` method
	  // https://tc39.github.io/ecma262/#sec-object.defineproperties
	  defineProperties: $defineProperties,
	  // `Object.getOwnPropertyDescriptor` method
	  // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor
	});

	_export({ target: 'Object', stat: true, forced: !nativeSymbol }, {
	  // `Object.getOwnPropertyNames` method
	  // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // `Object.getOwnPropertySymbols` method
	  // https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});

	// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
	// https://bugs.chromium.org/p/v8/issues/detail?id=3443
	_export({ target: 'Object', stat: true, forced: fails(function () { objectGetOwnPropertySymbols.f(1); }) }, {
	  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
	    return objectGetOwnPropertySymbols.f(toObject(it));
	  }
	});

	// `JSON.stringify` method behavior with symbols
	// https://tc39.github.io/ecma262/#sec-json.stringify
	if ($stringify) {
	  var FORCED_JSON_STRINGIFY = !nativeSymbol || fails(function () {
	    var symbol = $Symbol();
	    // MS Edge converts symbol values to JSON as {}
	    return $stringify([symbol]) != '[null]'
	      // WebKit converts symbol values to JSON as null
	      || $stringify({ a: symbol }) != '{}'
	      // V8 throws on boxed symbols
	      || $stringify(Object(symbol)) != '{}';
	  });

	  _export({ target: 'JSON', stat: true, forced: FORCED_JSON_STRINGIFY }, {
	    // eslint-disable-next-line no-unused-vars
	    stringify: function stringify(it, replacer, space) {
	      var args = [it];
	      var index = 1;
	      var $replacer;
	      while (arguments.length > index) args.push(arguments[index++]);
	      $replacer = replacer;
	      if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
	      if (!isArray(replacer)) replacer = function (key, value) {
	        if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
	        if (!isSymbol(value)) return value;
	      };
	      args[1] = replacer;
	      return $stringify.apply(null, args);
	    }
	  });
	}

	// `Symbol.prototype[@@toPrimitive]` method
	// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@toprimitive
	if (!$Symbol[PROTOTYPE$1][TO_PRIMITIVE]) {
	  createNonEnumerableProperty($Symbol[PROTOTYPE$1], TO_PRIMITIVE, $Symbol[PROTOTYPE$1].valueOf);
	}
	// `Symbol.prototype[@@toStringTag]` property
	// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@tostringtag
	setToStringTag($Symbol, SYMBOL);

	hiddenKeys[HIDDEN] = true;

	var defineProperty$4 = objectDefineProperty.f;


	var NativeSymbol = global_1.Symbol;

	if (descriptors && typeof NativeSymbol == 'function' && (!('description' in NativeSymbol.prototype) ||
	  // Safari 12 bug
	  NativeSymbol().description !== undefined
	)) {
	  var EmptyStringDescriptionStore = {};
	  // wrap Symbol constructor for correct work with undefined description
	  var SymbolWrapper = function Symbol() {
	    var description = arguments.length < 1 || arguments[0] === undefined ? undefined : String(arguments[0]);
	    var result = this instanceof SymbolWrapper
	      ? new NativeSymbol(description)
	      // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
	      : description === undefined ? NativeSymbol() : NativeSymbol(description);
	    if (description === '') EmptyStringDescriptionStore[result] = true;
	    return result;
	  };
	  copyConstructorProperties(SymbolWrapper, NativeSymbol);
	  var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;
	  symbolPrototype.constructor = SymbolWrapper;

	  var symbolToString = symbolPrototype.toString;
	  var native = String(NativeSymbol('test')) == 'Symbol(test)';
	  var regexp = /^Symbol\((.*)\)[^)]+$/;
	  defineProperty$4(symbolPrototype, 'description', {
	    configurable: true,
	    get: function description() {
	      var symbol = isObject(this) ? this.valueOf() : this;
	      var string = symbolToString.call(symbol);
	      if (has(EmptyStringDescriptionStore, symbol)) return '';
	      var desc = native ? string.slice(7, -1) : string.replace(regexp, '$1');
	      return desc === '' ? undefined : desc;
	    }
	  });

	  _export({ global: true, forced: true }, {
	    Symbol: SymbolWrapper
	  });
	}

	// `Symbol.iterator` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.iterator
	defineWellKnownSymbol('iterator');

	var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
	var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
	var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';

	// We can't use this feature detection in V8 since it causes
	// deoptimization and serious performance degradation
	// https://github.com/zloirock/core-js/issues/679
	var IS_CONCAT_SPREADABLE_SUPPORT = engineV8Version >= 51 || !fails(function () {
	  var array = [];
	  array[IS_CONCAT_SPREADABLE] = false;
	  return array.concat()[0] !== array;
	});

	var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

	var isConcatSpreadable = function (O) {
	  if (!isObject(O)) return false;
	  var spreadable = O[IS_CONCAT_SPREADABLE];
	  return spreadable !== undefined ? !!spreadable : isArray(O);
	};

	var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

	// `Array.prototype.concat` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.concat
	// with adding support of @@isConcatSpreadable and @@species
	_export({ target: 'Array', proto: true, forced: FORCED }, {
	  concat: function concat(arg) { // eslint-disable-line no-unused-vars
	    var O = toObject(this);
	    var A = arraySpeciesCreate(O, 0);
	    var n = 0;
	    var i, k, length, len, E;
	    for (i = -1, length = arguments.length; i < length; i++) {
	      E = i === -1 ? O : arguments[i];
	      if (isConcatSpreadable(E)) {
	        len = toLength(E.length);
	        if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
	        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
	      } else {
	        if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
	        createProperty(A, n++, E);
	      }
	    }
	    A.length = n;
	    return A;
	  }
	});

	// `Array.prototype.fill` method implementation
	// https://tc39.github.io/ecma262/#sec-array.prototype.fill
	var arrayFill = function fill(value /* , start = 0, end = @length */) {
	  var O = toObject(this);
	  var length = toLength(O.length);
	  var argumentsLength = arguments.length;
	  var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);
	  var end = argumentsLength > 2 ? arguments[2] : undefined;
	  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
	  while (endPos > index) O[index++] = value;
	  return O;
	};

	var UNSCOPABLES = wellKnownSymbol('unscopables');
	var ArrayPrototype = Array.prototype;

	// Array.prototype[@@unscopables]
	// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
	if (ArrayPrototype[UNSCOPABLES] == undefined) {
	  objectDefineProperty.f(ArrayPrototype, UNSCOPABLES, {
	    configurable: true,
	    value: objectCreate(null)
	  });
	}

	// add a key to Array.prototype[@@unscopables]
	var addToUnscopables = function (key) {
	  ArrayPrototype[UNSCOPABLES][key] = true;
	};

	// `Array.prototype.fill` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.fill
	_export({ target: 'Array', proto: true }, {
	  fill: arrayFill
	});

	// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables('fill');

	var $filter = arrayIteration.filter;



	var HAS_SPECIES_SUPPORT$1 = arrayMethodHasSpeciesSupport('filter');
	// Edge 14- issue
	var USES_TO_LENGTH$3 = arrayMethodUsesToLength('filter');

	// `Array.prototype.filter` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.filter
	// with adding support of @@species
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$1 || !USES_TO_LENGTH$3 }, {
	  filter: function filter(callbackfn /* , thisArg */) {
	    return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	// call something on iterator step with safe closing on error
	var callWithSafeIterationClosing = function (iterator, fn, value, ENTRIES) {
	  try {
	    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch (error) {
	    var returnMethod = iterator['return'];
	    if (returnMethod !== undefined) anObject(returnMethod.call(iterator));
	    throw error;
	  }
	};

	var iterators = {};

	var ITERATOR = wellKnownSymbol('iterator');
	var ArrayPrototype$1 = Array.prototype;

	// check on default Array iterator
	var isArrayIteratorMethod = function (it) {
	  return it !== undefined && (iterators.Array === it || ArrayPrototype$1[ITERATOR] === it);
	};

	var TO_STRING_TAG$1 = wellKnownSymbol('toStringTag');
	var test = {};

	test[TO_STRING_TAG$1] = 'z';

	var toStringTagSupport = String(test) === '[object z]';

	var TO_STRING_TAG$2 = wellKnownSymbol('toStringTag');
	// ES3 wrong here
	var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (error) { /* empty */ }
	};

	// getting tag from ES6+ `Object.prototype.toString`
	var classof = toStringTagSupport ? classofRaw : function (it) {
	  var O, tag, result;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG$2)) == 'string' ? tag
	    // builtinTag case
	    : CORRECT_ARGUMENTS ? classofRaw(O)
	    // ES3 arguments fallback
	    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
	};

	var ITERATOR$1 = wellKnownSymbol('iterator');

	var getIteratorMethod = function (it) {
	  if (it != undefined) return it[ITERATOR$1]
	    || it['@@iterator']
	    || iterators[classof(it)];
	};

	// `Array.from` method implementation
	// https://tc39.github.io/ecma262/#sec-array.from
	var arrayFrom = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
	  var O = toObject(arrayLike);
	  var C = typeof this == 'function' ? this : Array;
	  var argumentsLength = arguments.length;
	  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
	  var mapping = mapfn !== undefined;
	  var iteratorMethod = getIteratorMethod(O);
	  var index = 0;
	  var length, result, step, iterator, next, value;
	  if (mapping) mapfn = functionBindContext(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);
	  // if the target is not iterable or it's an array with the default iterator - use a simple case
	  if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
	    iterator = iteratorMethod.call(O);
	    next = iterator.next;
	    result = new C();
	    for (;!(step = next.call(iterator)).done; index++) {
	      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
	      createProperty(result, index, value);
	    }
	  } else {
	    length = toLength(O.length);
	    result = new C(length);
	    for (;length > index; index++) {
	      value = mapping ? mapfn(O[index], index) : O[index];
	      createProperty(result, index, value);
	    }
	  }
	  result.length = index;
	  return result;
	};

	var ITERATOR$2 = wellKnownSymbol('iterator');
	var SAFE_CLOSING = false;

	try {
	  var called = 0;
	  var iteratorWithReturn = {
	    next: function () {
	      return { done: !!called++ };
	    },
	    'return': function () {
	      SAFE_CLOSING = true;
	    }
	  };
	  iteratorWithReturn[ITERATOR$2] = function () {
	    return this;
	  };
	  // eslint-disable-next-line no-throw-literal
	  Array.from(iteratorWithReturn, function () { throw 2; });
	} catch (error) { /* empty */ }

	var checkCorrectnessOfIteration = function (exec, SKIP_CLOSING) {
	  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
	  var ITERATION_SUPPORT = false;
	  try {
	    var object = {};
	    object[ITERATOR$2] = function () {
	      return {
	        next: function () {
	          return { done: ITERATION_SUPPORT = true };
	        }
	      };
	    };
	    exec(object);
	  } catch (error) { /* empty */ }
	  return ITERATION_SUPPORT;
	};

	var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (iterable) {
	  Array.from(iterable);
	});

	// `Array.from` method
	// https://tc39.github.io/ecma262/#sec-array.from
	_export({ target: 'Array', stat: true, forced: INCORRECT_ITERATION }, {
	  from: arrayFrom
	});

	var correctPrototypeGetter = !fails(function () {
	  function F() { /* empty */ }
	  F.prototype.constructor = null;
	  return Object.getPrototypeOf(new F()) !== F.prototype;
	});

	var IE_PROTO$1 = sharedKey('IE_PROTO');
	var ObjectPrototype$1 = Object.prototype;

	// `Object.getPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-object.getprototypeof
	var objectGetPrototypeOf = correctPrototypeGetter ? Object.getPrototypeOf : function (O) {
	  O = toObject(O);
	  if (has(O, IE_PROTO$1)) return O[IE_PROTO$1];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectPrototype$1 : null;
	};

	var ITERATOR$3 = wellKnownSymbol('iterator');
	var BUGGY_SAFARI_ITERATORS = false;

	var returnThis = function () { return this; };

	// `%IteratorPrototype%` object
	// https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object
	var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

	if ([].keys) {
	  arrayIterator = [].keys();
	  // Safari 8 has buggy iterators w/o `next`
	  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
	  else {
	    PrototypeOfArrayIteratorPrototype = objectGetPrototypeOf(objectGetPrototypeOf(arrayIterator));
	    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
	  }
	}

	if (IteratorPrototype == undefined) IteratorPrototype = {};

	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	if ( !has(IteratorPrototype, ITERATOR$3)) {
	  createNonEnumerableProperty(IteratorPrototype, ITERATOR$3, returnThis);
	}

	var iteratorsCore = {
	  IteratorPrototype: IteratorPrototype,
	  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
	};

	var IteratorPrototype$1 = iteratorsCore.IteratorPrototype;





	var returnThis$1 = function () { return this; };

	var createIteratorConstructor = function (IteratorConstructor, NAME, next) {
	  var TO_STRING_TAG = NAME + ' Iterator';
	  IteratorConstructor.prototype = objectCreate(IteratorPrototype$1, { next: createPropertyDescriptor(1, next) });
	  setToStringTag(IteratorConstructor, TO_STRING_TAG, false);
	  iterators[TO_STRING_TAG] = returnThis$1;
	  return IteratorConstructor;
	};

	var aPossiblePrototype = function (it) {
	  if (!isObject(it) && it !== null) {
	    throw TypeError("Can't set " + String(it) + ' as a prototype');
	  } return it;
	};

	// `Object.setPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-object.setprototypeof
	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {} ? function () {
	  var CORRECT_SETTER = false;
	  var test = {};
	  var setter;
	  try {
	    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
	    setter.call(test, []);
	    CORRECT_SETTER = test instanceof Array;
	  } catch (error) { /* empty */ }
	  return function setPrototypeOf(O, proto) {
	    anObject(O);
	    aPossiblePrototype(proto);
	    if (CORRECT_SETTER) setter.call(O, proto);
	    else O.__proto__ = proto;
	    return O;
	  };
	}() : undefined);

	var IteratorPrototype$2 = iteratorsCore.IteratorPrototype;
	var BUGGY_SAFARI_ITERATORS$1 = iteratorsCore.BUGGY_SAFARI_ITERATORS;
	var ITERATOR$4 = wellKnownSymbol('iterator');
	var KEYS = 'keys';
	var VALUES = 'values';
	var ENTRIES = 'entries';

	var returnThis$2 = function () { return this; };

	var defineIterator = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
	  createIteratorConstructor(IteratorConstructor, NAME, next);

	  var getIterationMethod = function (KIND) {
	    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
	    if (!BUGGY_SAFARI_ITERATORS$1 && KIND in IterablePrototype) return IterablePrototype[KIND];
	    switch (KIND) {
	      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
	      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
	      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
	    } return function () { return new IteratorConstructor(this); };
	  };

	  var TO_STRING_TAG = NAME + ' Iterator';
	  var INCORRECT_VALUES_NAME = false;
	  var IterablePrototype = Iterable.prototype;
	  var nativeIterator = IterablePrototype[ITERATOR$4]
	    || IterablePrototype['@@iterator']
	    || DEFAULT && IterablePrototype[DEFAULT];
	  var defaultIterator = !BUGGY_SAFARI_ITERATORS$1 && nativeIterator || getIterationMethod(DEFAULT);
	  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
	  var CurrentIteratorPrototype, methods, KEY;

	  // fix native
	  if (anyNativeIterator) {
	    CurrentIteratorPrototype = objectGetPrototypeOf(anyNativeIterator.call(new Iterable()));
	    if (IteratorPrototype$2 !== Object.prototype && CurrentIteratorPrototype.next) {
	      if ( objectGetPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype$2) {
	        if (objectSetPrototypeOf) {
	          objectSetPrototypeOf(CurrentIteratorPrototype, IteratorPrototype$2);
	        } else if (typeof CurrentIteratorPrototype[ITERATOR$4] != 'function') {
	          createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR$4, returnThis$2);
	        }
	      }
	      // Set @@toStringTag to native iterators
	      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true);
	    }
	  }

	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
	    INCORRECT_VALUES_NAME = true;
	    defaultIterator = function values() { return nativeIterator.call(this); };
	  }

	  // define iterator
	  if ( IterablePrototype[ITERATOR$4] !== defaultIterator) {
	    createNonEnumerableProperty(IterablePrototype, ITERATOR$4, defaultIterator);
	  }
	  iterators[NAME] = defaultIterator;

	  // export additional methods
	  if (DEFAULT) {
	    methods = {
	      values: getIterationMethod(VALUES),
	      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
	      entries: getIterationMethod(ENTRIES)
	    };
	    if (FORCED) for (KEY in methods) {
	      if (BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
	        redefine(IterablePrototype, KEY, methods[KEY]);
	      }
	    } else _export({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME }, methods);
	  }

	  return methods;
	};

	var ARRAY_ITERATOR = 'Array Iterator';
	var setInternalState$1 = internalState.set;
	var getInternalState$1 = internalState.getterFor(ARRAY_ITERATOR);

	// `Array.prototype.entries` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.entries
	// `Array.prototype.keys` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.keys
	// `Array.prototype.values` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.values
	// `Array.prototype[@@iterator]` method
	// https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator
	// `CreateArrayIterator` internal method
	// https://tc39.github.io/ecma262/#sec-createarrayiterator
	var es_array_iterator = defineIterator(Array, 'Array', function (iterated, kind) {
	  setInternalState$1(this, {
	    type: ARRAY_ITERATOR,
	    target: toIndexedObject(iterated), // target
	    index: 0,                          // next index
	    kind: kind                         // kind
	  });
	// `%ArrayIteratorPrototype%.next` method
	// https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next
	}, function () {
	  var state = getInternalState$1(this);
	  var target = state.target;
	  var kind = state.kind;
	  var index = state.index++;
	  if (!target || index >= target.length) {
	    state.target = undefined;
	    return { value: undefined, done: true };
	  }
	  if (kind == 'keys') return { value: index, done: false };
	  if (kind == 'values') return { value: target[index], done: false };
	  return { value: [index, target[index]], done: false };
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values%
	// https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject
	// https://tc39.github.io/ecma262/#sec-createmappedargumentsobject
	iterators.Arguments = iterators.Array;

	// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

	var nativeJoin = [].join;

	var ES3_STRINGS = indexedObject != Object;
	var STRICT_METHOD$2 = arrayMethodIsStrict('join', ',');

	// `Array.prototype.join` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.join
	_export({ target: 'Array', proto: true, forced: ES3_STRINGS || !STRICT_METHOD$2 }, {
	  join: function join(separator) {
	    return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);
	  }
	});

	var $map = arrayIteration.map;



	var HAS_SPECIES_SUPPORT$2 = arrayMethodHasSpeciesSupport('map');
	// FF49- issue
	var USES_TO_LENGTH$4 = arrayMethodUsesToLength('map');

	// `Array.prototype.map` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.map
	// with adding support of @@species
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$2 || !USES_TO_LENGTH$4 }, {
	  map: function map(callbackfn /* , thisArg */) {
	    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var HAS_SPECIES_SUPPORT$3 = arrayMethodHasSpeciesSupport('splice');
	var USES_TO_LENGTH$5 = arrayMethodUsesToLength('splice', { ACCESSORS: true, 0: 0, 1: 2 });

	var max$2 = Math.max;
	var min$2 = Math.min;
	var MAX_SAFE_INTEGER$1 = 0x1FFFFFFFFFFFFF;
	var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';

	// `Array.prototype.splice` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.splice
	// with adding support of @@species
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$3 || !USES_TO_LENGTH$5 }, {
	  splice: function splice(start, deleteCount /* , ...items */) {
	    var O = toObject(this);
	    var len = toLength(O.length);
	    var actualStart = toAbsoluteIndex(start, len);
	    var argumentsLength = arguments.length;
	    var insertCount, actualDeleteCount, A, k, from, to;
	    if (argumentsLength === 0) {
	      insertCount = actualDeleteCount = 0;
	    } else if (argumentsLength === 1) {
	      insertCount = 0;
	      actualDeleteCount = len - actualStart;
	    } else {
	      insertCount = argumentsLength - 2;
	      actualDeleteCount = min$2(max$2(toInteger(deleteCount), 0), len - actualStart);
	    }
	    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER$1) {
	      throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
	    }
	    A = arraySpeciesCreate(O, actualDeleteCount);
	    for (k = 0; k < actualDeleteCount; k++) {
	      from = actualStart + k;
	      if (from in O) createProperty(A, k, O[from]);
	    }
	    A.length = actualDeleteCount;
	    if (insertCount < actualDeleteCount) {
	      for (k = actualStart; k < len - actualDeleteCount; k++) {
	        from = k + actualDeleteCount;
	        to = k + insertCount;
	        if (from in O) O[to] = O[from];
	        else delete O[to];
	      }
	      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];
	    } else if (insertCount > actualDeleteCount) {
	      for (k = len - actualDeleteCount; k > actualStart; k--) {
	        from = k + actualDeleteCount - 1;
	        to = k + insertCount - 1;
	        if (from in O) O[to] = O[from];
	        else delete O[to];
	      }
	    }
	    for (k = 0; k < insertCount; k++) {
	      O[k + actualStart] = arguments[k + 2];
	    }
	    O.length = len - actualDeleteCount + insertCount;
	    return A;
	  }
	});

	var freezing = !fails(function () {
	  return Object.isExtensible(Object.preventExtensions({}));
	});

	var internalMetadata = createCommonjsModule(function (module) {
	var defineProperty = objectDefineProperty.f;



	var METADATA = uid('meta');
	var id = 0;

	var isExtensible = Object.isExtensible || function () {
	  return true;
	};

	var setMetadata = function (it) {
	  defineProperty(it, METADATA, { value: {
	    objectID: 'O' + ++id, // object ID
	    weakData: {}          // weak collections IDs
	  } });
	};

	var fastKey = function (it, create) {
	  // return a primitive with prefix
	  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!has(it, METADATA)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return 'F';
	    // not necessary to add metadata
	    if (!create) return 'E';
	    // add missing metadata
	    setMetadata(it);
	  // return object ID
	  } return it[METADATA].objectID;
	};

	var getWeakData = function (it, create) {
	  if (!has(it, METADATA)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return true;
	    // not necessary to add metadata
	    if (!create) return false;
	    // add missing metadata
	    setMetadata(it);
	  // return the store of weak collections IDs
	  } return it[METADATA].weakData;
	};

	// add metadata on freeze-family methods calling
	var onFreeze = function (it) {
	  if (freezing && meta.REQUIRED && isExtensible(it) && !has(it, METADATA)) setMetadata(it);
	  return it;
	};

	var meta = module.exports = {
	  REQUIRED: false,
	  fastKey: fastKey,
	  getWeakData: getWeakData,
	  onFreeze: onFreeze
	};

	hiddenKeys[METADATA] = true;
	});

	var iterate_1 = createCommonjsModule(function (module) {
	var Result = function (stopped, result) {
	  this.stopped = stopped;
	  this.result = result;
	};

	var iterate = module.exports = function (iterable, fn, that, AS_ENTRIES, IS_ITERATOR) {
	  var boundFunction = functionBindContext(fn, that, AS_ENTRIES ? 2 : 1);
	  var iterator, iterFn, index, length, result, next, step;

	  if (IS_ITERATOR) {
	    iterator = iterable;
	  } else {
	    iterFn = getIteratorMethod(iterable);
	    if (typeof iterFn != 'function') throw TypeError('Target is not iterable');
	    // optimisation for array iterators
	    if (isArrayIteratorMethod(iterFn)) {
	      for (index = 0, length = toLength(iterable.length); length > index; index++) {
	        result = AS_ENTRIES
	          ? boundFunction(anObject(step = iterable[index])[0], step[1])
	          : boundFunction(iterable[index]);
	        if (result && result instanceof Result) return result;
	      } return new Result(false);
	    }
	    iterator = iterFn.call(iterable);
	  }

	  next = iterator.next;
	  while (!(step = next.call(iterator)).done) {
	    result = callWithSafeIterationClosing(iterator, boundFunction, step.value, AS_ENTRIES);
	    if (typeof result == 'object' && result && result instanceof Result) return result;
	  } return new Result(false);
	};

	iterate.stop = function (result) {
	  return new Result(true, result);
	};
	});

	var anInstance = function (it, Constructor, name) {
	  if (!(it instanceof Constructor)) {
	    throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
	  } return it;
	};

	// makes subclassing work correct for wrapped built-ins
	var inheritIfRequired = function ($this, dummy, Wrapper) {
	  var NewTarget, NewTargetPrototype;
	  if (
	    // it can work only with native `setPrototypeOf`
	    objectSetPrototypeOf &&
	    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
	    typeof (NewTarget = dummy.constructor) == 'function' &&
	    NewTarget !== Wrapper &&
	    isObject(NewTargetPrototype = NewTarget.prototype) &&
	    NewTargetPrototype !== Wrapper.prototype
	  ) objectSetPrototypeOf($this, NewTargetPrototype);
	  return $this;
	};

	var collection = function (CONSTRUCTOR_NAME, wrapper, common) {
	  var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
	  var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
	  var ADDER = IS_MAP ? 'set' : 'add';
	  var NativeConstructor = global_1[CONSTRUCTOR_NAME];
	  var NativePrototype = NativeConstructor && NativeConstructor.prototype;
	  var Constructor = NativeConstructor;
	  var exported = {};

	  var fixMethod = function (KEY) {
	    var nativeMethod = NativePrototype[KEY];
	    redefine(NativePrototype, KEY,
	      KEY == 'add' ? function add(value) {
	        nativeMethod.call(this, value === 0 ? 0 : value);
	        return this;
	      } : KEY == 'delete' ? function (key) {
	        return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
	      } : KEY == 'get' ? function get(key) {
	        return IS_WEAK && !isObject(key) ? undefined : nativeMethod.call(this, key === 0 ? 0 : key);
	      } : KEY == 'has' ? function has(key) {
	        return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
	      } : function set(key, value) {
	        nativeMethod.call(this, key === 0 ? 0 : key, value);
	        return this;
	      }
	    );
	  };

	  // eslint-disable-next-line max-len
	  if (isForced_1(CONSTRUCTOR_NAME, typeof NativeConstructor != 'function' || !(IS_WEAK || NativePrototype.forEach && !fails(function () {
	    new NativeConstructor().entries().next();
	  })))) {
	    // create collection constructor
	    Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
	    internalMetadata.REQUIRED = true;
	  } else if (isForced_1(CONSTRUCTOR_NAME, true)) {
	    var instance = new Constructor();
	    // early implementations not supports chaining
	    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
	    // V8 ~ Chromium 40- weak-collections throws on primitives, but should return false
	    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
	    // most early implementations doesn't supports iterables, most modern - not close it correctly
	    // eslint-disable-next-line no-new
	    var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function (iterable) { new NativeConstructor(iterable); });
	    // for early implementations -0 and +0 not the same
	    var BUGGY_ZERO = !IS_WEAK && fails(function () {
	      // V8 ~ Chromium 42- fails only with 5+ elements
	      var $instance = new NativeConstructor();
	      var index = 5;
	      while (index--) $instance[ADDER](index, index);
	      return !$instance.has(-0);
	    });

	    if (!ACCEPT_ITERABLES) {
	      Constructor = wrapper(function (dummy, iterable) {
	        anInstance(dummy, Constructor, CONSTRUCTOR_NAME);
	        var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);
	        if (iterable != undefined) iterate_1(iterable, that[ADDER], that, IS_MAP);
	        return that;
	      });
	      Constructor.prototype = NativePrototype;
	      NativePrototype.constructor = Constructor;
	    }

	    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
	      fixMethod('delete');
	      fixMethod('has');
	      IS_MAP && fixMethod('get');
	    }

	    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);

	    // weak collections should not contains .clear method
	    if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;
	  }

	  exported[CONSTRUCTOR_NAME] = Constructor;
	  _export({ global: true, forced: Constructor != NativeConstructor }, exported);

	  setToStringTag(Constructor, CONSTRUCTOR_NAME);

	  if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);

	  return Constructor;
	};

	var redefineAll = function (target, src, options) {
	  for (var key in src) redefine(target, key, src[key], options);
	  return target;
	};

	var SPECIES$3 = wellKnownSymbol('species');

	var setSpecies = function (CONSTRUCTOR_NAME) {
	  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
	  var defineProperty = objectDefineProperty.f;

	  if (descriptors && Constructor && !Constructor[SPECIES$3]) {
	    defineProperty(Constructor, SPECIES$3, {
	      configurable: true,
	      get: function () { return this; }
	    });
	  }
	};

	var defineProperty$5 = objectDefineProperty.f;








	var fastKey = internalMetadata.fastKey;


	var setInternalState$2 = internalState.set;
	var internalStateGetterFor = internalState.getterFor;

	var collectionStrong = {
	  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
	    var C = wrapper(function (that, iterable) {
	      anInstance(that, C, CONSTRUCTOR_NAME);
	      setInternalState$2(that, {
	        type: CONSTRUCTOR_NAME,
	        index: objectCreate(null),
	        first: undefined,
	        last: undefined,
	        size: 0
	      });
	      if (!descriptors) that.size = 0;
	      if (iterable != undefined) iterate_1(iterable, that[ADDER], that, IS_MAP);
	    });

	    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

	    var define = function (that, key, value) {
	      var state = getInternalState(that);
	      var entry = getEntry(that, key);
	      var previous, index;
	      // change existing entry
	      if (entry) {
	        entry.value = value;
	      // create new entry
	      } else {
	        state.last = entry = {
	          index: index = fastKey(key, true),
	          key: key,
	          value: value,
	          previous: previous = state.last,
	          next: undefined,
	          removed: false
	        };
	        if (!state.first) state.first = entry;
	        if (previous) previous.next = entry;
	        if (descriptors) state.size++;
	        else that.size++;
	        // add to index
	        if (index !== 'F') state.index[index] = entry;
	      } return that;
	    };

	    var getEntry = function (that, key) {
	      var state = getInternalState(that);
	      // fast case
	      var index = fastKey(key);
	      var entry;
	      if (index !== 'F') return state.index[index];
	      // frozen object case
	      for (entry = state.first; entry; entry = entry.next) {
	        if (entry.key == key) return entry;
	      }
	    };

	    redefineAll(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear() {
	        var that = this;
	        var state = getInternalState(that);
	        var data = state.index;
	        var entry = state.first;
	        while (entry) {
	          entry.removed = true;
	          if (entry.previous) entry.previous = entry.previous.next = undefined;
	          delete data[entry.index];
	          entry = entry.next;
	        }
	        state.first = state.last = undefined;
	        if (descriptors) state.size = 0;
	        else that.size = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function (key) {
	        var that = this;
	        var state = getInternalState(that);
	        var entry = getEntry(that, key);
	        if (entry) {
	          var next = entry.next;
	          var prev = entry.previous;
	          delete state.index[entry.index];
	          entry.removed = true;
	          if (prev) prev.next = next;
	          if (next) next.previous = prev;
	          if (state.first == entry) state.first = next;
	          if (state.last == entry) state.last = prev;
	          if (descriptors) state.size--;
	          else that.size--;
	        } return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /* , that = undefined */) {
	        var state = getInternalState(this);
	        var boundFunction = functionBindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
	        var entry;
	        while (entry = entry ? entry.next : state.first) {
	          boundFunction(entry.value, entry.key, this);
	          // revert to the last existing entry
	          while (entry && entry.removed) entry = entry.previous;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key) {
	        return !!getEntry(this, key);
	      }
	    });

	    redefineAll(C.prototype, IS_MAP ? {
	      // 23.1.3.6 Map.prototype.get(key)
	      get: function get(key) {
	        var entry = getEntry(this, key);
	        return entry && entry.value;
	      },
	      // 23.1.3.9 Map.prototype.set(key, value)
	      set: function set(key, value) {
	        return define(this, key === 0 ? 0 : key, value);
	      }
	    } : {
	      // 23.2.3.1 Set.prototype.add(value)
	      add: function add(value) {
	        return define(this, value = value === 0 ? 0 : value, value);
	      }
	    });
	    if (descriptors) defineProperty$5(C.prototype, 'size', {
	      get: function () {
	        return getInternalState(this).size;
	      }
	    });
	    return C;
	  },
	  setStrong: function (C, CONSTRUCTOR_NAME, IS_MAP) {
	    var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
	    var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
	    var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
	    // add .keys, .values, .entries, [@@iterator]
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	    defineIterator(C, CONSTRUCTOR_NAME, function (iterated, kind) {
	      setInternalState$2(this, {
	        type: ITERATOR_NAME,
	        target: iterated,
	        state: getInternalCollectionState(iterated),
	        kind: kind,
	        last: undefined
	      });
	    }, function () {
	      var state = getInternalIteratorState(this);
	      var kind = state.kind;
	      var entry = state.last;
	      // revert to the last existing entry
	      while (entry && entry.removed) entry = entry.previous;
	      // get next entry
	      if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
	        // or finish the iteration
	        state.target = undefined;
	        return { value: undefined, done: true };
	      }
	      // return step by kind
	      if (kind == 'keys') return { value: entry.key, done: false };
	      if (kind == 'values') return { value: entry.value, done: false };
	      return { value: [entry.key, entry.value], done: false };
	    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

	    // add [@@species], 23.1.2.2, 23.2.2.2
	    setSpecies(CONSTRUCTOR_NAME);
	  }
	};

	// `Map` constructor
	// https://tc39.github.io/ecma262/#sec-map-objects
	var es_map = collection('Map', function (init) {
	  return function Map() { return init(this, arguments.length ? arguments[0] : undefined); };
	}, collectionStrong);

	var nativeAssign = Object.assign;
	var defineProperty$6 = Object.defineProperty;

	// `Object.assign` method
	// https://tc39.github.io/ecma262/#sec-object.assign
	var objectAssign = !nativeAssign || fails(function () {
	  // should have correct order of operations (Edge bug)
	  if (descriptors && nativeAssign({ b: 1 }, nativeAssign(defineProperty$6({}, 'a', {
	    enumerable: true,
	    get: function () {
	      defineProperty$6(this, 'b', {
	        value: 3,
	        enumerable: false
	      });
	    }
	  }), { b: 2 })).b !== 1) return true;
	  // should work with symbols and should have deterministic property order (V8 bug)
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line no-undef
	  var symbol = Symbol();
	  var alphabet = 'abcdefghijklmnopqrst';
	  A[symbol] = 7;
	  alphabet.split('').forEach(function (chr) { B[chr] = chr; });
	  return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;
	}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
	  var T = toObject(target);
	  var argumentsLength = arguments.length;
	  var index = 1;
	  var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
	  var propertyIsEnumerable = objectPropertyIsEnumerable.f;
	  while (argumentsLength > index) {
	    var S = indexedObject(arguments[index++]);
	    var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) {
	      key = keys[j++];
	      if (!descriptors || propertyIsEnumerable.call(S, key)) T[key] = S[key];
	    }
	  } return T;
	} : nativeAssign;

	// `Object.assign` method
	// https://tc39.github.io/ecma262/#sec-object.assign
	_export({ target: 'Object', stat: true, forced: Object.assign !== objectAssign }, {
	  assign: objectAssign
	});

	// `Object.getOwnPropertyDescriptors` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
	_export({ target: 'Object', stat: true, sham: !descriptors }, {
	  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
	    var O = toIndexedObject(object);
	    var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
	    var keys = ownKeys(O);
	    var result = {};
	    var index = 0;
	    var key, descriptor;
	    while (keys.length > index) {
	      descriptor = getOwnPropertyDescriptor(O, key = keys[index++]);
	      if (descriptor !== undefined) createProperty(result, key, descriptor);
	    }
	    return result;
	  }
	});

	// `Object.prototype.toString` method implementation
	// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
	var objectToString = toStringTagSupport ? {}.toString : function toString() {
	  return '[object ' + classof(this) + ']';
	};

	// `Object.prototype.toString` method
	// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
	if (!toStringTagSupport) {
	  redefine(Object.prototype, 'toString', objectToString, { unsafe: true });
	}

	var nativePromiseConstructor = global_1.Promise;

	var SPECIES$4 = wellKnownSymbol('species');

	// `SpeciesConstructor` abstract operation
	// https://tc39.github.io/ecma262/#sec-speciesconstructor
	var speciesConstructor = function (O, defaultConstructor) {
	  var C = anObject(O).constructor;
	  var S;
	  return C === undefined || (S = anObject(C)[SPECIES$4]) == undefined ? defaultConstructor : aFunction$1(S);
	};

	var engineIsIos = /(iphone|ipod|ipad).*applewebkit/i.test(engineUserAgent);

	var location = global_1.location;
	var set$1 = global_1.setImmediate;
	var clear = global_1.clearImmediate;
	var process$1 = global_1.process;
	var MessageChannel = global_1.MessageChannel;
	var Dispatch = global_1.Dispatch;
	var counter = 0;
	var queue = {};
	var ONREADYSTATECHANGE = 'onreadystatechange';
	var defer, channel, port;

	var run = function (id) {
	  // eslint-disable-next-line no-prototype-builtins
	  if (queue.hasOwnProperty(id)) {
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};

	var runner = function (id) {
	  return function () {
	    run(id);
	  };
	};

	var listener = function (event) {
	  run(event.data);
	};

	var post = function (id) {
	  // old engines have not location.origin
	  global_1.postMessage(id + '', location.protocol + '//' + location.host);
	};

	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if (!set$1 || !clear) {
	  set$1 = function setImmediate(fn) {
	    var args = [];
	    var i = 1;
	    while (arguments.length > i) args.push(arguments[i++]);
	    queue[++counter] = function () {
	      // eslint-disable-next-line no-new-func
	      (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clear = function clearImmediate(id) {
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if (classofRaw(process$1) == 'process') {
	    defer = function (id) {
	      process$1.nextTick(runner(id));
	    };
	  // Sphere (JS game engine) Dispatch API
	  } else if (Dispatch && Dispatch.now) {
	    defer = function (id) {
	      Dispatch.now(runner(id));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  // except iOS - https://github.com/zloirock/core-js/issues/624
	  } else if (MessageChannel && !engineIsIos) {
	    channel = new MessageChannel();
	    port = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = functionBindContext(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if (
	    global_1.addEventListener &&
	    typeof postMessage == 'function' &&
	    !global_1.importScripts &&
	    !fails(post) &&
	    location.protocol !== 'file:'
	  ) {
	    defer = post;
	    global_1.addEventListener('message', listener, false);
	  // IE8-
	  } else if (ONREADYSTATECHANGE in documentCreateElement('script')) {
	    defer = function (id) {
	      html.appendChild(documentCreateElement('script'))[ONREADYSTATECHANGE] = function () {
	        html.removeChild(this);
	        run(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function (id) {
	      setTimeout(runner(id), 0);
	    };
	  }
	}

	var task = {
	  set: set$1,
	  clear: clear
	};

	var getOwnPropertyDescriptor$2 = objectGetOwnPropertyDescriptor.f;

	var macrotask = task.set;


	var MutationObserver = global_1.MutationObserver || global_1.WebKitMutationObserver;
	var process$2 = global_1.process;
	var Promise$1 = global_1.Promise;
	var IS_NODE = classofRaw(process$2) == 'process';
	// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
	var queueMicrotaskDescriptor = getOwnPropertyDescriptor$2(global_1, 'queueMicrotask');
	var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

	var flush, head, last, notify, toggle, node, promise, then;

	// modern engines have queueMicrotask method
	if (!queueMicrotask) {
	  flush = function () {
	    var parent, fn;
	    if (IS_NODE && (parent = process$2.domain)) parent.exit();
	    while (head) {
	      fn = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch (error) {
	        if (head) notify();
	        else last = undefined;
	        throw error;
	      }
	    } last = undefined;
	    if (parent) parent.enter();
	  };

	  // Node.js
	  if (IS_NODE) {
	    notify = function () {
	      process$2.nextTick(flush);
	    };
	  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
	  } else if (MutationObserver && !engineIsIos) {
	    toggle = true;
	    node = document.createTextNode('');
	    new MutationObserver(flush).observe(node, { characterData: true });
	    notify = function () {
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if (Promise$1 && Promise$1.resolve) {
	    // Promise.resolve without an argument throws an error in LG WebOS 2
	    promise = Promise$1.resolve(undefined);
	    then = promise.then;
	    notify = function () {
	      then.call(promise, flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function () {
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(global_1, flush);
	    };
	  }
	}

	var microtask = queueMicrotask || function (fn) {
	  var task = { fn: fn, next: undefined };
	  if (last) last.next = task;
	  if (!head) {
	    head = task;
	    notify();
	  } last = task;
	};

	var PromiseCapability = function (C) {
	  var resolve, reject;
	  this.promise = new C(function ($$resolve, $$reject) {
	    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject = $$reject;
	  });
	  this.resolve = aFunction$1(resolve);
	  this.reject = aFunction$1(reject);
	};

	// 25.4.1.5 NewPromiseCapability(C)
	var f$7 = function (C) {
	  return new PromiseCapability(C);
	};

	var newPromiseCapability = {
		f: f$7
	};

	var promiseResolve = function (C, x) {
	  anObject(C);
	  if (isObject(x) && x.constructor === C) return x;
	  var promiseCapability = newPromiseCapability.f(C);
	  var resolve = promiseCapability.resolve;
	  resolve(x);
	  return promiseCapability.promise;
	};

	var hostReportErrors = function (a, b) {
	  var console = global_1.console;
	  if (console && console.error) {
	    arguments.length === 1 ? console.error(a) : console.error(a, b);
	  }
	};

	var perform = function (exec) {
	  try {
	    return { error: false, value: exec() };
	  } catch (error) {
	    return { error: true, value: error };
	  }
	};

	var task$1 = task.set;










	var SPECIES$5 = wellKnownSymbol('species');
	var PROMISE = 'Promise';
	var getInternalState$2 = internalState.get;
	var setInternalState$3 = internalState.set;
	var getInternalPromiseState = internalState.getterFor(PROMISE);
	var PromiseConstructor = nativePromiseConstructor;
	var TypeError$1 = global_1.TypeError;
	var document$2 = global_1.document;
	var process$3 = global_1.process;
	var $fetch = getBuiltIn('fetch');
	var newPromiseCapability$1 = newPromiseCapability.f;
	var newGenericPromiseCapability = newPromiseCapability$1;
	var IS_NODE$1 = classofRaw(process$3) == 'process';
	var DISPATCH_EVENT = !!(document$2 && document$2.createEvent && global_1.dispatchEvent);
	var UNHANDLED_REJECTION = 'unhandledrejection';
	var REJECTION_HANDLED = 'rejectionhandled';
	var PENDING = 0;
	var FULFILLED = 1;
	var REJECTED = 2;
	var HANDLED = 1;
	var UNHANDLED = 2;
	var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

	var FORCED$1 = isForced_1(PROMISE, function () {
	  var GLOBAL_CORE_JS_PROMISE = inspectSource(PromiseConstructor) !== String(PromiseConstructor);
	  if (!GLOBAL_CORE_JS_PROMISE) {
	    // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
	    // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
	    // We can't detect it synchronously, so just check versions
	    if (engineV8Version === 66) return true;
	    // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    if (!IS_NODE$1 && typeof PromiseRejectionEvent != 'function') return true;
	  }
	  // We can't use @@species feature detection in V8 since it causes
	  // deoptimization and performance degradation
	  // https://github.com/zloirock/core-js/issues/679
	  if (engineV8Version >= 51 && /native code/.test(PromiseConstructor)) return false;
	  // Detect correctness of subclassing with @@species support
	  var promise = PromiseConstructor.resolve(1);
	  var FakePromise = function (exec) {
	    exec(function () { /* empty */ }, function () { /* empty */ });
	  };
	  var constructor = promise.constructor = {};
	  constructor[SPECIES$5] = FakePromise;
	  return !(promise.then(function () { /* empty */ }) instanceof FakePromise);
	});

	var INCORRECT_ITERATION$1 = FORCED$1 || !checkCorrectnessOfIteration(function (iterable) {
	  PromiseConstructor.all(iterable)['catch'](function () { /* empty */ });
	});

	// helpers
	var isThenable = function (it) {
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};

	var notify$1 = function (promise, state, isReject) {
	  if (state.notified) return;
	  state.notified = true;
	  var chain = state.reactions;
	  microtask(function () {
	    var value = state.value;
	    var ok = state.state == FULFILLED;
	    var index = 0;
	    // variable length - can't use forEach
	    while (chain.length > index) {
	      var reaction = chain[index++];
	      var handler = ok ? reaction.ok : reaction.fail;
	      var resolve = reaction.resolve;
	      var reject = reaction.reject;
	      var domain = reaction.domain;
	      var result, then, exited;
	      try {
	        if (handler) {
	          if (!ok) {
	            if (state.rejection === UNHANDLED) onHandleUnhandled(promise, state);
	            state.rejection = HANDLED;
	          }
	          if (handler === true) result = value;
	          else {
	            if (domain) domain.enter();
	            result = handler(value); // can throw
	            if (domain) {
	              domain.exit();
	              exited = true;
	            }
	          }
	          if (result === reaction.promise) {
	            reject(TypeError$1('Promise-chain cycle'));
	          } else if (then = isThenable(result)) {
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch (error) {
	        if (domain && !exited) domain.exit();
	        reject(error);
	      }
	    }
	    state.reactions = [];
	    state.notified = false;
	    if (isReject && !state.rejection) onUnhandled(promise, state);
	  });
	};

	var dispatchEvent = function (name, promise, reason) {
	  var event, handler;
	  if (DISPATCH_EVENT) {
	    event = document$2.createEvent('Event');
	    event.promise = promise;
	    event.reason = reason;
	    event.initEvent(name, false, true);
	    global_1.dispatchEvent(event);
	  } else event = { promise: promise, reason: reason };
	  if (handler = global_1['on' + name]) handler(event);
	  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
	};

	var onUnhandled = function (promise, state) {
	  task$1.call(global_1, function () {
	    var value = state.value;
	    var IS_UNHANDLED = isUnhandled(state);
	    var result;
	    if (IS_UNHANDLED) {
	      result = perform(function () {
	        if (IS_NODE$1) {
	          process$3.emit('unhandledRejection', value, promise);
	        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      state.rejection = IS_NODE$1 || isUnhandled(state) ? UNHANDLED : HANDLED;
	      if (result.error) throw result.value;
	    }
	  });
	};

	var isUnhandled = function (state) {
	  return state.rejection !== HANDLED && !state.parent;
	};

	var onHandleUnhandled = function (promise, state) {
	  task$1.call(global_1, function () {
	    if (IS_NODE$1) {
	      process$3.emit('rejectionHandled', promise);
	    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
	  });
	};

	var bind = function (fn, promise, state, unwrap) {
	  return function (value) {
	    fn(promise, state, value, unwrap);
	  };
	};

	var internalReject = function (promise, state, value, unwrap) {
	  if (state.done) return;
	  state.done = true;
	  if (unwrap) state = unwrap;
	  state.value = value;
	  state.state = REJECTED;
	  notify$1(promise, state, true);
	};

	var internalResolve = function (promise, state, value, unwrap) {
	  if (state.done) return;
	  state.done = true;
	  if (unwrap) state = unwrap;
	  try {
	    if (promise === value) throw TypeError$1("Promise can't be resolved itself");
	    var then = isThenable(value);
	    if (then) {
	      microtask(function () {
	        var wrapper = { done: false };
	        try {
	          then.call(value,
	            bind(internalResolve, promise, wrapper, state),
	            bind(internalReject, promise, wrapper, state)
	          );
	        } catch (error) {
	          internalReject(promise, wrapper, error, state);
	        }
	      });
	    } else {
	      state.value = value;
	      state.state = FULFILLED;
	      notify$1(promise, state, false);
	    }
	  } catch (error) {
	    internalReject(promise, { done: false }, error, state);
	  }
	};

	// constructor polyfill
	if (FORCED$1) {
	  // 25.4.3.1 Promise(executor)
	  PromiseConstructor = function Promise(executor) {
	    anInstance(this, PromiseConstructor, PROMISE);
	    aFunction$1(executor);
	    Internal.call(this);
	    var state = getInternalState$2(this);
	    try {
	      executor(bind(internalResolve, this, state), bind(internalReject, this, state));
	    } catch (error) {
	      internalReject(this, state, error);
	    }
	  };
	  // eslint-disable-next-line no-unused-vars
	  Internal = function Promise(executor) {
	    setInternalState$3(this, {
	      type: PROMISE,
	      done: false,
	      notified: false,
	      parent: false,
	      reactions: [],
	      rejection: false,
	      state: PENDING,
	      value: undefined
	    });
	  };
	  Internal.prototype = redefineAll(PromiseConstructor.prototype, {
	    // `Promise.prototype.then` method
	    // https://tc39.github.io/ecma262/#sec-promise.prototype.then
	    then: function then(onFulfilled, onRejected) {
	      var state = getInternalPromiseState(this);
	      var reaction = newPromiseCapability$1(speciesConstructor(this, PromiseConstructor));
	      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail = typeof onRejected == 'function' && onRejected;
	      reaction.domain = IS_NODE$1 ? process$3.domain : undefined;
	      state.parent = true;
	      state.reactions.push(reaction);
	      if (state.state != PENDING) notify$1(this, state, false);
	      return reaction.promise;
	    },
	    // `Promise.prototype.catch` method
	    // https://tc39.github.io/ecma262/#sec-promise.prototype.catch
	    'catch': function (onRejected) {
	      return this.then(undefined, onRejected);
	    }
	  });
	  OwnPromiseCapability = function () {
	    var promise = new Internal();
	    var state = getInternalState$2(promise);
	    this.promise = promise;
	    this.resolve = bind(internalResolve, promise, state);
	    this.reject = bind(internalReject, promise, state);
	  };
	  newPromiseCapability.f = newPromiseCapability$1 = function (C) {
	    return C === PromiseConstructor || C === PromiseWrapper
	      ? new OwnPromiseCapability(C)
	      : newGenericPromiseCapability(C);
	  };

	  if ( typeof nativePromiseConstructor == 'function') {
	    nativeThen = nativePromiseConstructor.prototype.then;

	    // wrap native Promise#then for native async functions
	    redefine(nativePromiseConstructor.prototype, 'then', function then(onFulfilled, onRejected) {
	      var that = this;
	      return new PromiseConstructor(function (resolve, reject) {
	        nativeThen.call(that, resolve, reject);
	      }).then(onFulfilled, onRejected);
	    // https://github.com/zloirock/core-js/issues/640
	    }, { unsafe: true });

	    // wrap fetch result
	    if (typeof $fetch == 'function') _export({ global: true, enumerable: true, forced: true }, {
	      // eslint-disable-next-line no-unused-vars
	      fetch: function fetch(input /* , init */) {
	        return promiseResolve(PromiseConstructor, $fetch.apply(global_1, arguments));
	      }
	    });
	  }
	}

	_export({ global: true, wrap: true, forced: FORCED$1 }, {
	  Promise: PromiseConstructor
	});

	setToStringTag(PromiseConstructor, PROMISE, false);
	setSpecies(PROMISE);

	PromiseWrapper = getBuiltIn(PROMISE);

	// statics
	_export({ target: PROMISE, stat: true, forced: FORCED$1 }, {
	  // `Promise.reject` method
	  // https://tc39.github.io/ecma262/#sec-promise.reject
	  reject: function reject(r) {
	    var capability = newPromiseCapability$1(this);
	    capability.reject.call(undefined, r);
	    return capability.promise;
	  }
	});

	_export({ target: PROMISE, stat: true, forced:  FORCED$1 }, {
	  // `Promise.resolve` method
	  // https://tc39.github.io/ecma262/#sec-promise.resolve
	  resolve: function resolve(x) {
	    return promiseResolve( this, x);
	  }
	});

	_export({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION$1 }, {
	  // `Promise.all` method
	  // https://tc39.github.io/ecma262/#sec-promise.all
	  all: function all(iterable) {
	    var C = this;
	    var capability = newPromiseCapability$1(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform(function () {
	      var $promiseResolve = aFunction$1(C.resolve);
	      var values = [];
	      var counter = 0;
	      var remaining = 1;
	      iterate_1(iterable, function (promise) {
	        var index = counter++;
	        var alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        $promiseResolve.call(C, promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  },
	  // `Promise.race` method
	  // https://tc39.github.io/ecma262/#sec-promise.race
	  race: function race(iterable) {
	    var C = this;
	    var capability = newPromiseCapability$1(C);
	    var reject = capability.reject;
	    var result = perform(function () {
	      var $promiseResolve = aFunction$1(C.resolve);
	      iterate_1(iterable, function (promise) {
	        $promiseResolve.call(C, promise).then(capability.resolve, reject);
	      });
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  }
	});

	// `RegExp.prototype.flags` getter implementation
	// https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags
	var regexpFlags = function () {
	  var that = anObject(this);
	  var result = '';
	  if (that.global) result += 'g';
	  if (that.ignoreCase) result += 'i';
	  if (that.multiline) result += 'm';
	  if (that.dotAll) result += 's';
	  if (that.unicode) result += 'u';
	  if (that.sticky) result += 'y';
	  return result;
	};

	// babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError,
	// so we use an intermediate function.
	function RE(s, f) {
	  return RegExp(s, f);
	}

	var UNSUPPORTED_Y = fails(function () {
	  // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
	  var re = RE('a', 'y');
	  re.lastIndex = 2;
	  return re.exec('abcd') != null;
	});

	var BROKEN_CARET = fails(function () {
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
	  var re = RE('^r', 'gy');
	  re.lastIndex = 2;
	  return re.exec('str') != null;
	});

	var regexpStickyHelpers = {
		UNSUPPORTED_Y: UNSUPPORTED_Y,
		BROKEN_CARET: BROKEN_CARET
	};

	var nativeExec = RegExp.prototype.exec;
	// This always refers to the native implementation, because the
	// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
	// which loads this file before patching the method.
	var nativeReplace = String.prototype.replace;

	var patchedExec = nativeExec;

	var UPDATES_LAST_INDEX_WRONG = (function () {
	  var re1 = /a/;
	  var re2 = /b*/g;
	  nativeExec.call(re1, 'a');
	  nativeExec.call(re2, 'a');
	  return re1.lastIndex !== 0 || re2.lastIndex !== 0;
	})();

	var UNSUPPORTED_Y$1 = regexpStickyHelpers.UNSUPPORTED_Y || regexpStickyHelpers.BROKEN_CARET;

	// nonparticipating capturing group, copied from es5-shim's String#split patch.
	var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

	var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y$1;

	if (PATCH) {
	  patchedExec = function exec(str) {
	    var re = this;
	    var lastIndex, reCopy, match, i;
	    var sticky = UNSUPPORTED_Y$1 && re.sticky;
	    var flags = regexpFlags.call(re);
	    var source = re.source;
	    var charsAdded = 0;
	    var strCopy = str;

	    if (sticky) {
	      flags = flags.replace('y', '');
	      if (flags.indexOf('g') === -1) {
	        flags += 'g';
	      }

	      strCopy = String(str).slice(re.lastIndex);
	      // Support anchored sticky behavior.
	      if (re.lastIndex > 0 && (!re.multiline || re.multiline && str[re.lastIndex - 1] !== '\n')) {
	        source = '(?: ' + source + ')';
	        strCopy = ' ' + strCopy;
	        charsAdded++;
	      }
	      // ^(? + rx + ) is needed, in combination with some str slicing, to
	      // simulate the 'y' flag.
	      reCopy = new RegExp('^(?:' + source + ')', flags);
	    }

	    if (NPCG_INCLUDED) {
	      reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
	    }
	    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

	    match = nativeExec.call(sticky ? reCopy : re, strCopy);

	    if (sticky) {
	      if (match) {
	        match.input = match.input.slice(charsAdded);
	        match[0] = match[0].slice(charsAdded);
	        match.index = re.lastIndex;
	        re.lastIndex += match[0].length;
	      } else re.lastIndex = 0;
	    } else if (UPDATES_LAST_INDEX_WRONG && match) {
	      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
	    }
	    if (NPCG_INCLUDED && match && match.length > 1) {
	      // Fix browsers whose `exec` methods don't consistently return `undefined`
	      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
	      nativeReplace.call(match[0], reCopy, function () {
	        for (i = 1; i < arguments.length - 2; i++) {
	          if (arguments[i] === undefined) match[i] = undefined;
	        }
	      });
	    }

	    return match;
	  };
	}

	var regexpExec = patchedExec;

	_export({ target: 'RegExp', proto: true, forced: /./.exec !== regexpExec }, {
	  exec: regexpExec
	});

	// `Set` constructor
	// https://tc39.github.io/ecma262/#sec-set-objects
	var es_set = collection('Set', function (init) {
	  return function Set() { return init(this, arguments.length ? arguments[0] : undefined); };
	}, collectionStrong);

	// `String.prototype.{ codePointAt, at }` methods implementation
	var createMethod$2 = function (CONVERT_TO_STRING) {
	  return function ($this, pos) {
	    var S = String(requireObjectCoercible($this));
	    var position = toInteger(pos);
	    var size = S.length;
	    var first, second;
	    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
	    first = S.charCodeAt(position);
	    return first < 0xD800 || first > 0xDBFF || position + 1 === size
	      || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF
	        ? CONVERT_TO_STRING ? S.charAt(position) : first
	        : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
	  };
	};

	var stringMultibyte = {
	  // `String.prototype.codePointAt` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
	  codeAt: createMethod$2(false),
	  // `String.prototype.at` method
	  // https://github.com/mathiasbynens/String.prototype.at
	  charAt: createMethod$2(true)
	};

	var charAt = stringMultibyte.charAt;



	var STRING_ITERATOR = 'String Iterator';
	var setInternalState$4 = internalState.set;
	var getInternalState$3 = internalState.getterFor(STRING_ITERATOR);

	// `String.prototype[@@iterator]` method
	// https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator
	defineIterator(String, 'String', function (iterated) {
	  setInternalState$4(this, {
	    type: STRING_ITERATOR,
	    string: String(iterated),
	    index: 0
	  });
	// `%StringIteratorPrototype%.next` method
	// https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next
	}, function next() {
	  var state = getInternalState$3(this);
	  var string = state.string;
	  var index = state.index;
	  var point;
	  if (index >= string.length) return { value: undefined, done: true };
	  point = charAt(string, index);
	  state.index += point.length;
	  return { value: point, done: false };
	});

	// TODO: Remove from `core-js@4` since it's moved to entry points







	var SPECIES$6 = wellKnownSymbol('species');

	var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
	  // #replace needs built-in support for named groups.
	  // #match works fine because it just return the exec results, even if it has
	  // a "grops" property.
	  var re = /./;
	  re.exec = function () {
	    var result = [];
	    result.groups = { a: '7' };
	    return result;
	  };
	  return ''.replace(re, '$<a>') !== '7';
	});

	// IE <= 11 replaces $0 with the whole match, as if it was $&
	// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0
	var REPLACE_KEEPS_$0 = (function () {
	  return 'a'.replace(/./, '$0') === '$0';
	})();

	var REPLACE = wellKnownSymbol('replace');
	// Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string
	var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {
	  if (/./[REPLACE]) {
	    return /./[REPLACE]('a', '$0') === '';
	  }
	  return false;
	})();

	// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
	// Weex JS has frozen built-in prototypes, so use try / catch wrapper
	var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
	  var re = /(?:)/;
	  var originalExec = re.exec;
	  re.exec = function () { return originalExec.apply(this, arguments); };
	  var result = 'ab'.split(re);
	  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
	});

	var fixRegexpWellKnownSymbolLogic = function (KEY, length, exec, sham) {
	  var SYMBOL = wellKnownSymbol(KEY);

	  var DELEGATES_TO_SYMBOL = !fails(function () {
	    // String methods call symbol-named RegEp methods
	    var O = {};
	    O[SYMBOL] = function () { return 7; };
	    return ''[KEY](O) != 7;
	  });

	  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
	    // Symbol-named RegExp methods call .exec
	    var execCalled = false;
	    var re = /a/;

	    if (KEY === 'split') {
	      // We can't use real regex here since it causes deoptimization
	      // and serious performance degradation in V8
	      // https://github.com/zloirock/core-js/issues/306
	      re = {};
	      // RegExp[@@split] doesn't call the regex's exec method, but first creates
	      // a new one. We need to return the patched regex when creating the new one.
	      re.constructor = {};
	      re.constructor[SPECIES$6] = function () { return re; };
	      re.flags = '';
	      re[SYMBOL] = /./[SYMBOL];
	    }

	    re.exec = function () { execCalled = true; return null; };

	    re[SYMBOL]('');
	    return !execCalled;
	  });

	  if (
	    !DELEGATES_TO_SYMBOL ||
	    !DELEGATES_TO_EXEC ||
	    (KEY === 'replace' && !(
	      REPLACE_SUPPORTS_NAMED_GROUPS &&
	      REPLACE_KEEPS_$0 &&
	      !REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
	    )) ||
	    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
	  ) {
	    var nativeRegExpMethod = /./[SYMBOL];
	    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
	      if (regexp.exec === regexpExec) {
	        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
	          // The native String method already delegates to @@method (this
	          // polyfilled function), leasing to infinite recursion.
	          // We avoid it by directly calling the native @@method method.
	          return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
	        }
	        return { done: true, value: nativeMethod.call(str, regexp, arg2) };
	      }
	      return { done: false };
	    }, {
	      REPLACE_KEEPS_$0: REPLACE_KEEPS_$0,
	      REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
	    });
	    var stringMethod = methods[0];
	    var regexMethod = methods[1];

	    redefine(String.prototype, KEY, stringMethod);
	    redefine(RegExp.prototype, SYMBOL, length == 2
	      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
	      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
	      ? function (string, arg) { return regexMethod.call(string, this, arg); }
	      // 21.2.5.6 RegExp.prototype[@@match](string)
	      // 21.2.5.9 RegExp.prototype[@@search](string)
	      : function (string) { return regexMethod.call(string, this); }
	    );
	  }

	  if (sham) createNonEnumerableProperty(RegExp.prototype[SYMBOL], 'sham', true);
	};

	var charAt$1 = stringMultibyte.charAt;

	// `AdvanceStringIndex` abstract operation
	// https://tc39.github.io/ecma262/#sec-advancestringindex
	var advanceStringIndex = function (S, index, unicode) {
	  return index + (unicode ? charAt$1(S, index).length : 1);
	};

	// `RegExpExec` abstract operation
	// https://tc39.github.io/ecma262/#sec-regexpexec
	var regexpExecAbstract = function (R, S) {
	  var exec = R.exec;
	  if (typeof exec === 'function') {
	    var result = exec.call(R, S);
	    if (typeof result !== 'object') {
	      throw TypeError('RegExp exec method returned something other than an Object or null');
	    }
	    return result;
	  }

	  if (classofRaw(R) !== 'RegExp') {
	    throw TypeError('RegExp#exec called on incompatible receiver');
	  }

	  return regexpExec.call(R, S);
	};

	var max$3 = Math.max;
	var min$3 = Math.min;
	var floor$1 = Math.floor;
	var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d\d?|<[^>]*>)/g;
	var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d\d?)/g;

	var maybeToString = function (it) {
	  return it === undefined ? it : String(it);
	};

	// @@replace logic
	fixRegexpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative, reason) {
	  var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = reason.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE;
	  var REPLACE_KEEPS_$0 = reason.REPLACE_KEEPS_$0;
	  var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';

	  return [
	    // `String.prototype.replace` method
	    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
	    function replace(searchValue, replaceValue) {
	      var O = requireObjectCoercible(this);
	      var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];
	      return replacer !== undefined
	        ? replacer.call(searchValue, O, replaceValue)
	        : nativeReplace.call(String(O), searchValue, replaceValue);
	    },
	    // `RegExp.prototype[@@replace]` method
	    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
	    function (regexp, replaceValue) {
	      if (
	        (!REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE && REPLACE_KEEPS_$0) ||
	        (typeof replaceValue === 'string' && replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1)
	      ) {
	        var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);
	        if (res.done) return res.value;
	      }

	      var rx = anObject(regexp);
	      var S = String(this);

	      var functionalReplace = typeof replaceValue === 'function';
	      if (!functionalReplace) replaceValue = String(replaceValue);

	      var global = rx.global;
	      if (global) {
	        var fullUnicode = rx.unicode;
	        rx.lastIndex = 0;
	      }
	      var results = [];
	      while (true) {
	        var result = regexpExecAbstract(rx, S);
	        if (result === null) break;

	        results.push(result);
	        if (!global) break;

	        var matchStr = String(result[0]);
	        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
	      }

	      var accumulatedResult = '';
	      var nextSourcePosition = 0;
	      for (var i = 0; i < results.length; i++) {
	        result = results[i];

	        var matched = String(result[0]);
	        var position = max$3(min$3(toInteger(result.index), S.length), 0);
	        var captures = [];
	        // NOTE: This is equivalent to
	        //   captures = result.slice(1).map(maybeToString)
	        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
	        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
	        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
	        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
	        var namedCaptures = result.groups;
	        if (functionalReplace) {
	          var replacerArgs = [matched].concat(captures, position, S);
	          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
	          var replacement = String(replaceValue.apply(undefined, replacerArgs));
	        } else {
	          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
	        }
	        if (position >= nextSourcePosition) {
	          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
	          nextSourcePosition = position + matched.length;
	        }
	      }
	      return accumulatedResult + S.slice(nextSourcePosition);
	    }
	  ];

	  // https://tc39.github.io/ecma262/#sec-getsubstitution
	  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
	    var tailPos = position + matched.length;
	    var m = captures.length;
	    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
	    if (namedCaptures !== undefined) {
	      namedCaptures = toObject(namedCaptures);
	      symbols = SUBSTITUTION_SYMBOLS;
	    }
	    return nativeReplace.call(replacement, symbols, function (match, ch) {
	      var capture;
	      switch (ch.charAt(0)) {
	        case '$': return '$';
	        case '&': return matched;
	        case '`': return str.slice(0, position);
	        case "'": return str.slice(tailPos);
	        case '<':
	          capture = namedCaptures[ch.slice(1, -1)];
	          break;
	        default: // \d\d?
	          var n = +ch;
	          if (n === 0) return match;
	          if (n > m) {
	            var f = floor$1(n / 10);
	            if (f === 0) return match;
	            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
	            return match;
	          }
	          capture = captures[n - 1];
	      }
	      return capture === undefined ? '' : capture;
	    });
	  }
	});

	var MATCH = wellKnownSymbol('match');

	// `IsRegExp` abstract operation
	// https://tc39.github.io/ecma262/#sec-isregexp
	var isRegexp = function (it) {
	  var isRegExp;
	  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classofRaw(it) == 'RegExp');
	};

	var arrayPush = [].push;
	var min$4 = Math.min;
	var MAX_UINT32 = 0xFFFFFFFF;

	// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
	var SUPPORTS_Y = !fails(function () { return !RegExp(MAX_UINT32, 'y'); });

	// @@split logic
	fixRegexpWellKnownSymbolLogic('split', 2, function (SPLIT, nativeSplit, maybeCallNative) {
	  var internalSplit;
	  if (
	    'abbc'.split(/(b)*/)[1] == 'c' ||
	    'test'.split(/(?:)/, -1).length != 4 ||
	    'ab'.split(/(?:ab)*/).length != 2 ||
	    '.'.split(/(.?)(.?)/).length != 4 ||
	    '.'.split(/()()/).length > 1 ||
	    ''.split(/.?/).length
	  ) {
	    // based on es5-shim implementation, need to rework it
	    internalSplit = function (separator, limit) {
	      var string = String(requireObjectCoercible(this));
	      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
	      if (lim === 0) return [];
	      if (separator === undefined) return [string];
	      // If `separator` is not a regex, use native split
	      if (!isRegexp(separator)) {
	        return nativeSplit.call(string, separator, lim);
	      }
	      var output = [];
	      var flags = (separator.ignoreCase ? 'i' : '') +
	                  (separator.multiline ? 'm' : '') +
	                  (separator.unicode ? 'u' : '') +
	                  (separator.sticky ? 'y' : '');
	      var lastLastIndex = 0;
	      // Make `global` and avoid `lastIndex` issues by working with a copy
	      var separatorCopy = new RegExp(separator.source, flags + 'g');
	      var match, lastIndex, lastLength;
	      while (match = regexpExec.call(separatorCopy, string)) {
	        lastIndex = separatorCopy.lastIndex;
	        if (lastIndex > lastLastIndex) {
	          output.push(string.slice(lastLastIndex, match.index));
	          if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));
	          lastLength = match[0].length;
	          lastLastIndex = lastIndex;
	          if (output.length >= lim) break;
	        }
	        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
	      }
	      if (lastLastIndex === string.length) {
	        if (lastLength || !separatorCopy.test('')) output.push('');
	      } else output.push(string.slice(lastLastIndex));
	      return output.length > lim ? output.slice(0, lim) : output;
	    };
	  // Chakra, V8
	  } else if ('0'.split(undefined, 0).length) {
	    internalSplit = function (separator, limit) {
	      return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);
	    };
	  } else internalSplit = nativeSplit;

	  return [
	    // `String.prototype.split` method
	    // https://tc39.github.io/ecma262/#sec-string.prototype.split
	    function split(separator, limit) {
	      var O = requireObjectCoercible(this);
	      var splitter = separator == undefined ? undefined : separator[SPLIT];
	      return splitter !== undefined
	        ? splitter.call(separator, O, limit)
	        : internalSplit.call(String(O), separator, limit);
	    },
	    // `RegExp.prototype[@@split]` method
	    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
	    //
	    // NOTE: This cannot be properly polyfilled in engines that don't support
	    // the 'y' flag.
	    function (regexp, limit) {
	      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);
	      if (res.done) return res.value;

	      var rx = anObject(regexp);
	      var S = String(this);
	      var C = speciesConstructor(rx, RegExp);

	      var unicodeMatching = rx.unicode;
	      var flags = (rx.ignoreCase ? 'i' : '') +
	                  (rx.multiline ? 'm' : '') +
	                  (rx.unicode ? 'u' : '') +
	                  (SUPPORTS_Y ? 'y' : 'g');

	      // ^(? + rx + ) is needed, in combination with some S slicing, to
	      // simulate the 'y' flag.
	      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
	      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
	      if (lim === 0) return [];
	      if (S.length === 0) return regexpExecAbstract(splitter, S) === null ? [S] : [];
	      var p = 0;
	      var q = 0;
	      var A = [];
	      while (q < S.length) {
	        splitter.lastIndex = SUPPORTS_Y ? q : 0;
	        var z = regexpExecAbstract(splitter, SUPPORTS_Y ? S : S.slice(q));
	        var e;
	        if (
	          z === null ||
	          (e = min$4(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
	        ) {
	          q = advanceStringIndex(S, q, unicodeMatching);
	        } else {
	          A.push(S.slice(p, q));
	          if (A.length === lim) return A;
	          for (var i = 1; i <= z.length - 1; i++) {
	            A.push(z[i]);
	            if (A.length === lim) return A;
	          }
	          q = p = e;
	        }
	      }
	      A.push(S.slice(p));
	      return A;
	    }
	  ];
	}, !SUPPORTS_Y);

	var quot = /"/g;

	// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
	// https://tc39.github.io/ecma262/#sec-createhtml
	var createHtml = function (string, tag, attribute, value) {
	  var S = String(requireObjectCoercible(string));
	  var p1 = '<' + tag;
	  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
	  return p1 + '>' + S + '</' + tag + '>';
	};

	// check the existence of a method, lowercase
	// of a tag and escaping quotes in arguments
	var stringHtmlForced = function (METHOD_NAME) {
	  return fails(function () {
	    var test = ''[METHOD_NAME]('"');
	    return test !== test.toLowerCase() || test.split('"').length > 3;
	  });
	};

	// `String.prototype.anchor` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.anchor
	_export({ target: 'String', proto: true, forced: stringHtmlForced('anchor') }, {
	  anchor: function anchor(name) {
	    return createHtml(this, 'a', 'name', name);
	  }
	});

	var ITERATOR$5 = wellKnownSymbol('iterator');
	var TO_STRING_TAG$3 = wellKnownSymbol('toStringTag');
	var ArrayValues = es_array_iterator.values;

	for (var COLLECTION_NAME$1 in domIterables) {
	  var Collection$1 = global_1[COLLECTION_NAME$1];
	  var CollectionPrototype$1 = Collection$1 && Collection$1.prototype;
	  if (CollectionPrototype$1) {
	    // some Chrome versions have non-configurable methods on DOMTokenList
	    if (CollectionPrototype$1[ITERATOR$5] !== ArrayValues) try {
	      createNonEnumerableProperty(CollectionPrototype$1, ITERATOR$5, ArrayValues);
	    } catch (error) {
	      CollectionPrototype$1[ITERATOR$5] = ArrayValues;
	    }
	    if (!CollectionPrototype$1[TO_STRING_TAG$3]) {
	      createNonEnumerableProperty(CollectionPrototype$1, TO_STRING_TAG$3, COLLECTION_NAME$1);
	    }
	    if (domIterables[COLLECTION_NAME$1]) for (var METHOD_NAME in es_array_iterator) {
	      // some Chrome versions have non-configurable methods on DOMTokenList
	      if (CollectionPrototype$1[METHOD_NAME] !== es_array_iterator[METHOD_NAME]) try {
	        createNonEnumerableProperty(CollectionPrototype$1, METHOD_NAME, es_array_iterator[METHOD_NAME]);
	      } catch (error) {
	        CollectionPrototype$1[METHOD_NAME] = es_array_iterator[METHOD_NAME];
	      }
	    }
	  }
	}

	function noop() {}

	var identity = function identity(x) {
	  return x;
	};

	function assign(tar, src) {
	  // @ts-ignore
	  for (var k in src) {
	    tar[k] = src[k];
	  }

	  return tar;
	}

	function add_location(element, file, line, column, char) {
	  element.__svelte_meta = {
	    loc: {
	      file: file,
	      line: line,
	      column: column,
	      char: char
	    }
	  };
	}

	function run$1(fn) {
	  return fn();
	}

	function blank_object() {
	  return Object.create(null);
	}

	function run_all(fns) {
	  fns.forEach(run$1);
	}

	function is_function(thing) {
	  return typeof thing === 'function';
	}

	function safe_not_equal(a, b) {
	  return a != a ? b == b : a !== b || a && _typeof(a) === 'object' || typeof a === 'function';
	}

	function is_empty(obj) {
	  return Object.keys(obj).length === 0;
	}

	function validate_store(store, name) {
	  if (store != null && typeof store.subscribe !== 'function') {
	    throw new Error("'".concat(name, "' is not a store with a 'subscribe' method"));
	  }
	}

	function subscribe(store) {
	  if (store == null) {
	    return noop;
	  }

	  for (var _len = arguments.length, callbacks = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    callbacks[_key - 1] = arguments[_key];
	  }

	  var unsub = store.subscribe.apply(store, callbacks);
	  return unsub.unsubscribe ? function () {
	    return unsub.unsubscribe();
	  } : unsub;
	}

	function component_subscribe(component, store, callback) {
	  component.$$.on_destroy.push(subscribe(store, callback));
	}

	function create_slot(definition, ctx, $$scope, fn) {
	  if (definition) {
	    var slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
	    return definition[0](slot_ctx);
	  }
	}

	function get_slot_context(definition, ctx, $$scope, fn) {
	  return definition[1] && fn ? assign($$scope.ctx.slice(), definition[1](fn(ctx))) : $$scope.ctx;
	}

	function get_slot_changes(definition, $$scope, dirty, fn) {
	  if (definition[2] && fn) {
	    var lets = definition[2](fn(dirty));

	    if ($$scope.dirty === undefined) {
	      return lets;
	    }

	    if (_typeof(lets) === 'object') {
	      var merged = [];
	      var len = Math.max($$scope.dirty.length, lets.length);

	      for (var i = 0; i < len; i += 1) {
	        merged[i] = $$scope.dirty[i] | lets[i];
	      }

	      return merged;
	    }

	    return $$scope.dirty | lets;
	  }

	  return $$scope.dirty;
	}

	function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
	  var slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);

	  if (slot_changes) {
	    var slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
	    slot.p(slot_context, slot_changes);
	  }
	}

	function null_to_empty(value) {
	  return value == null ? '' : value;
	}

	function set_store_value(store, ret) {
	  var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ret;
	  store.set(value);
	  return ret;
	}

	function action_destroyer(action_result) {
	  return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
	}

	var is_client = typeof window !== 'undefined';
	var now = is_client ? function () {
	  return window.performance.now();
	} : function () {
	  return Date.now();
	};
	var raf = is_client ? function (cb) {
	  return requestAnimationFrame(cb);
	} : noop; // used internally for testing

	var tasks = new Set();

	function run_tasks(now) {
	  tasks.forEach(function (task) {
	    if (!task.c(now)) {
	      tasks.delete(task);
	      task.f();
	    }
	  });
	  if (tasks.size !== 0) raf(run_tasks);
	}
	/**
	 * Creates a new task that runs on each raf frame
	 * until it returns a falsy value or is aborted
	 */


	function loop(callback) {
	  var task;
	  if (tasks.size === 0) raf(run_tasks);
	  return {
	    promise: new Promise(function (fulfill) {
	      tasks.add(task = {
	        c: callback,
	        f: fulfill
	      });
	    }),
	    abort: function abort() {
	      tasks.delete(task);
	    }
	  };
	}

	function append(target, node) {
	  target.appendChild(node);
	}

	function insert(target, node, anchor) {
	  target.insertBefore(node, anchor || null);
	}

	function detach(node) {
	  node.parentNode.removeChild(node);
	}

	function destroy_each(iterations, detaching) {
	  for (var i = 0; i < iterations.length; i += 1) {
	    if (iterations[i]) iterations[i].d(detaching);
	  }
	}

	function element(name) {
	  return document.createElement(name);
	}

	function svg_element(name) {
	  return document.createElementNS('http://www.w3.org/2000/svg', name);
	}

	function text(data) {
	  return document.createTextNode(data);
	}

	function space() {
	  return text(' ');
	}

	function empty() {
	  return text('');
	}

	function listen(node, event, handler, options) {
	  node.addEventListener(event, handler, options);
	  return function () {
	    return node.removeEventListener(event, handler, options);
	  };
	}

	function stop_propagation(fn) {
	  return function (event) {
	    event.stopPropagation(); // @ts-ignore

	    return fn.call(this, event);
	  };
	}

	function self$1(fn) {
	  return function (event) {
	    // @ts-ignore
	    if (event.target === this) fn.call(this, event);
	  };
	}

	function attr(node, attribute, value) {
	  if (value == null) node.removeAttribute(attribute);else if (node.getAttribute(attribute) !== value) node.setAttribute(attribute, value);
	}

	function set_svg_attributes(node, attributes) {
	  for (var key in attributes) {
	    attr(node, key, attributes[key]);
	  }
	}

	function xlink_attr(node, attribute, value) {
	  node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);
	}

	function children(element) {
	  return Array.from(element.childNodes);
	}

	function set_input_value(input, value) {
	  input.value = value == null ? '' : value;
	}

	function set_style(node, key, value, important) {
	  node.style.setProperty(key, value, important ? 'important' : '');
	}
	// so we cache the result instead


	var crossorigin;

	function is_crossorigin() {
	  if (crossorigin === undefined) {
	    crossorigin = false;

	    try {
	      if (typeof window !== 'undefined' && window.parent) {
	        void window.parent.document;
	      }
	    } catch (error) {
	      crossorigin = true;
	    }
	  }

	  return crossorigin;
	}

	function add_resize_listener(node, fn) {
	  var computed_style = getComputedStyle(node);
	  var z_index = (parseInt(computed_style.zIndex) || 0) - 1;

	  if (computed_style.position === 'static') {
	    node.style.position = 'relative';
	  }

	  var iframe = element('iframe');
	  iframe.setAttribute('style', "display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; " + "overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: ".concat(z_index, ";"));
	  iframe.setAttribute('aria-hidden', 'true');
	  iframe.tabIndex = -1;
	  var crossorigin = is_crossorigin();
	  var unsubscribe;

	  if (crossorigin) {
	    iframe.src = "data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>";
	    unsubscribe = listen(window, 'message', function (event) {
	      if (event.source === iframe.contentWindow) fn();
	    });
	  } else {
	    iframe.src = 'about:blank';

	    iframe.onload = function () {
	      unsubscribe = listen(iframe.contentWindow, 'resize', fn);
	    };
	  }

	  append(node, iframe);
	  return function () {
	    if (crossorigin) {
	      unsubscribe();
	    } else if (unsubscribe && iframe.contentWindow) {
	      unsubscribe();
	    }

	    detach(iframe);
	  };
	}

	function toggle_class(element, name, toggle) {
	  element.classList[toggle ? 'add' : 'remove'](name);
	}

	function custom_event(type, detail) {
	  var e = document.createEvent('CustomEvent');
	  e.initCustomEvent(type, false, false, detail);
	  return e;
	}

	var active_docs = new Set();
	var active = 0; // https://github.com/darkskyapp/string-hash/blob/master/index.js

	function hash(str) {
	  var hash = 5381;
	  var i = str.length;

	  while (i--) {
	    hash = (hash << 5) - hash ^ str.charCodeAt(i);
	  }

	  return hash >>> 0;
	}

	function create_rule(node, a, b, duration, delay, ease, fn) {
	  var uid = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
	  var step = 16.666 / duration;
	  var keyframes = '{\n';

	  for (var p = 0; p <= 1; p += step) {
	    var t = a + (b - a) * ease(p);
	    keyframes += p * 100 + "%{".concat(fn(t, 1 - t), "}\n");
	  }

	  var rule = keyframes + "100% {".concat(fn(b, 1 - b), "}\n}");
	  var name = "__svelte_".concat(hash(rule), "_").concat(uid);
	  var doc = node.ownerDocument;
	  active_docs.add(doc);
	  var stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);
	  var current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});

	  if (!current_rules[name]) {
	    current_rules[name] = true;
	    stylesheet.insertRule("@keyframes ".concat(name, " ").concat(rule), stylesheet.cssRules.length);
	  }

	  var animation = node.style.animation || '';
	  node.style.animation = "".concat(animation ? "".concat(animation, ", ") : "").concat(name, " ").concat(duration, "ms linear ").concat(delay, "ms 1 both");
	  active += 1;
	  return name;
	}

	function delete_rule(node, name) {
	  var previous = (node.style.animation || '').split(', ');
	  var next = previous.filter(name ? function (anim) {
	    return anim.indexOf(name) < 0;
	  } // remove specific animation
	  : function (anim) {
	    return anim.indexOf('__svelte') === -1;
	  } // remove all Svelte animations
	  );
	  var deleted = previous.length - next.length;

	  if (deleted) {
	    node.style.animation = next.join(', ');
	    active -= deleted;
	    if (!active) clear_rules();
	  }
	}

	function clear_rules() {
	  raf(function () {
	    if (active) return;
	    active_docs.forEach(function (doc) {
	      var stylesheet = doc.__svelte_stylesheet;
	      var i = stylesheet.cssRules.length;

	      while (i--) {
	        stylesheet.deleteRule(i);
	      }

	      doc.__svelte_rules = {};
	    });
	    active_docs.clear();
	  });
	}

	var current_component;

	function set_current_component(component) {
	  current_component = component;
	}

	function get_current_component() {
	  if (!current_component) throw new Error("Function called outside component initialization");
	  return current_component;
	}

	function onMount(fn) {
	  get_current_component().$$.on_mount.push(fn);
	}

	function afterUpdate(fn) {
	  get_current_component().$$.after_update.push(fn);
	}

	function createEventDispatcher() {
	  var component = get_current_component();
	  return function (type, detail) {
	    var callbacks = component.$$.callbacks[type];

	    if (callbacks) {
	      // TODO are there situations where events could be dispatched
	      // in a server (non-DOM) environment?
	      var event = custom_event(type, detail);
	      callbacks.slice().forEach(function (fn) {
	        fn.call(component, event);
	      });
	    }
	  };
	}
	// shorthand events, or if we want to implement
	// a real bubbling mechanism


	function bubble(component, event) {
	  var callbacks = component.$$.callbacks[event.type];

	  if (callbacks) {
	    callbacks.slice().forEach(function (fn) {
	      return fn(event);
	    });
	  }
	}

	var dirty_components = [];
	var binding_callbacks = [];
	var render_callbacks = [];
	var flush_callbacks = [];
	var resolved_promise = Promise.resolve();
	var update_scheduled = false;

	function schedule_update() {
	  if (!update_scheduled) {
	    update_scheduled = true;
	    resolved_promise.then(flush$1);
	  }
	}

	function add_render_callback(fn) {
	  render_callbacks.push(fn);
	}

	function add_flush_callback(fn) {
	  flush_callbacks.push(fn);
	}

	var flushing = false;
	var seen_callbacks = new Set();

	function flush$1() {
	  if (flushing) return;
	  flushing = true;

	  do {
	    // first, call beforeUpdate functions
	    // and update components
	    for (var i = 0; i < dirty_components.length; i += 1) {
	      var component = dirty_components[i];
	      set_current_component(component);
	      update(component.$$);
	    }

	    dirty_components.length = 0;

	    while (binding_callbacks.length) {
	      binding_callbacks.pop()();
	    } // then, once components are updated, call
	    // afterUpdate functions. This may cause
	    // subsequent updates...


	    for (var _i = 0; _i < render_callbacks.length; _i += 1) {
	      var callback = render_callbacks[_i];

	      if (!seen_callbacks.has(callback)) {
	        // ...so guard against infinite loops
	        seen_callbacks.add(callback);
	        callback();
	      }
	    }

	    render_callbacks.length = 0;
	  } while (dirty_components.length);

	  while (flush_callbacks.length) {
	    flush_callbacks.pop()();
	  }

	  update_scheduled = false;
	  flushing = false;
	  seen_callbacks.clear();
	}

	function update($$) {
	  if ($$.fragment !== null) {
	    $$.update();
	    run_all($$.before_update);
	    var dirty = $$.dirty;
	    $$.dirty = [-1];
	    $$.fragment && $$.fragment.p($$.ctx, dirty);
	    $$.after_update.forEach(add_render_callback);
	  }
	}

	var promise$1;

	function wait() {
	  if (!promise$1) {
	    promise$1 = Promise.resolve();
	    promise$1.then(function () {
	      promise$1 = null;
	    });
	  }

	  return promise$1;
	}

	function dispatch(node, direction, kind) {
	  node.dispatchEvent(custom_event("".concat(direction ? 'intro' : 'outro').concat(kind)));
	}

	var outroing = new Set();
	var outros;

	function group_outros() {
	  outros = {
	    r: 0,
	    c: [],
	    p: outros // parent group

	  };
	}

	function check_outros() {
	  if (!outros.r) {
	    run_all(outros.c);
	  }

	  outros = outros.p;
	}

	function transition_in(block, local) {
	  if (block && block.i) {
	    outroing.delete(block);
	    block.i(local);
	  }
	}

	function transition_out(block, local, detach, callback) {
	  if (block && block.o) {
	    if (outroing.has(block)) return;
	    outroing.add(block);
	    outros.c.push(function () {
	      outroing.delete(block);

	      if (callback) {
	        if (detach) block.d(1);
	        callback();
	      }
	    });
	    block.o(local);
	  }
	}

	var null_transition = {
	  duration: 0
	};

	function create_in_transition(node, fn, params) {
	  var config = fn(node, params);
	  var running = false;
	  var animation_name;
	  var task;
	  var uid = 0;

	  function cleanup() {
	    if (animation_name) delete_rule(node, animation_name);
	  }

	  function go() {
	    var _ref = config || null_transition,
	        _ref$delay = _ref.delay,
	        delay = _ref$delay === void 0 ? 0 : _ref$delay,
	        _ref$duration = _ref.duration,
	        duration = _ref$duration === void 0 ? 300 : _ref$duration,
	        _ref$easing = _ref.easing,
	        easing = _ref$easing === void 0 ? identity : _ref$easing,
	        _ref$tick = _ref.tick,
	        tick = _ref$tick === void 0 ? noop : _ref$tick,
	        css = _ref.css;

	    if (css) animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
	    tick(0, 1);
	    var start_time = now() + delay;
	    var end_time = start_time + duration;
	    if (task) task.abort();
	    running = true;
	    add_render_callback(function () {
	      return dispatch(node, true, 'start');
	    });
	    task = loop(function (now) {
	      if (running) {
	        if (now >= end_time) {
	          tick(1, 0);
	          dispatch(node, true, 'end');
	          cleanup();
	          return running = false;
	        }

	        if (now >= start_time) {
	          var t = easing((now - start_time) / duration);
	          tick(t, 1 - t);
	        }
	      }

	      return running;
	    });
	  }

	  var started = false;
	  return {
	    start: function start() {
	      if (started) return;
	      delete_rule(node);

	      if (is_function(config)) {
	        config = config();
	        wait().then(go);
	      } else {
	        go();
	      }
	    },
	    invalidate: function invalidate() {
	      started = false;
	    },
	    end: function end() {
	      if (running) {
	        cleanup();
	        running = false;
	      }
	    }
	  };
	}

	function create_out_transition(node, fn, params) {
	  var config = fn(node, params);
	  var running = true;
	  var animation_name;
	  var group = outros;
	  group.r += 1;

	  function go() {
	    var _ref2 = config || null_transition,
	        _ref2$delay = _ref2.delay,
	        delay = _ref2$delay === void 0 ? 0 : _ref2$delay,
	        _ref2$duration = _ref2.duration,
	        duration = _ref2$duration === void 0 ? 300 : _ref2$duration,
	        _ref2$easing = _ref2.easing,
	        easing = _ref2$easing === void 0 ? identity : _ref2$easing,
	        _ref2$tick = _ref2.tick,
	        tick = _ref2$tick === void 0 ? noop : _ref2$tick,
	        css = _ref2.css;

	    if (css) animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
	    var start_time = now() + delay;
	    var end_time = start_time + duration;
	    add_render_callback(function () {
	      return dispatch(node, false, 'start');
	    });
	    loop(function (now) {
	      if (running) {
	        if (now >= end_time) {
	          tick(0, 1);
	          dispatch(node, false, 'end');

	          if (! --group.r) {
	            // this will result in `end()` being called,
	            // so we don't need to clean up here
	            run_all(group.c);
	          }

	          return false;
	        }

	        if (now >= start_time) {
	          var t = easing((now - start_time) / duration);
	          tick(1 - t, t);
	        }
	      }

	      return running;
	    });
	  }

	  if (is_function(config)) {
	    wait().then(function () {
	      // @ts-ignore
	      config = config();
	      go();
	    });
	  } else {
	    go();
	  }

	  return {
	    end: function end(reset) {
	      if (reset && config.tick) {
	        config.tick(1, 0);
	      }

	      if (running) {
	        if (animation_name) delete_rule(node, animation_name);
	        running = false;
	      }
	    }
	  };
	}

	function create_bidirectional_transition(node, fn, params, intro) {
	  var config = fn(node, params);
	  var t = intro ? 0 : 1;
	  var running_program = null;
	  var pending_program = null;
	  var animation_name = null;

	  function clear_animation() {
	    if (animation_name) delete_rule(node, animation_name);
	  }

	  function init(program, duration) {
	    var d = program.b - t;
	    duration *= Math.abs(d);
	    return {
	      a: t,
	      b: program.b,
	      d: d,
	      duration: duration,
	      start: program.start,
	      end: program.start + duration,
	      group: program.group
	    };
	  }

	  function go(b) {
	    var _ref3 = config || null_transition,
	        _ref3$delay = _ref3.delay,
	        delay = _ref3$delay === void 0 ? 0 : _ref3$delay,
	        _ref3$duration = _ref3.duration,
	        duration = _ref3$duration === void 0 ? 300 : _ref3$duration,
	        _ref3$easing = _ref3.easing,
	        easing = _ref3$easing === void 0 ? identity : _ref3$easing,
	        _ref3$tick = _ref3.tick,
	        tick = _ref3$tick === void 0 ? noop : _ref3$tick,
	        css = _ref3.css;

	    var program = {
	      start: now() + delay,
	      b: b
	    };

	    if (!b) {
	      // @ts-ignore todo: improve typings
	      program.group = outros;
	      outros.r += 1;
	    }

	    if (running_program) {
	      pending_program = program;
	    } else {
	      // if this is an intro, and there's a delay, we need to do
	      // an initial tick and/or apply CSS animation immediately
	      if (css) {
	        clear_animation();
	        animation_name = create_rule(node, t, b, duration, delay, easing, css);
	      }

	      if (b) tick(0, 1);
	      running_program = init(program, duration);
	      add_render_callback(function () {
	        return dispatch(node, b, 'start');
	      });
	      loop(function (now) {
	        if (pending_program && now > pending_program.start) {
	          running_program = init(pending_program, duration);
	          pending_program = null;
	          dispatch(node, running_program.b, 'start');

	          if (css) {
	            clear_animation();
	            animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
	          }
	        }

	        if (running_program) {
	          if (now >= running_program.end) {
	            tick(t = running_program.b, 1 - t);
	            dispatch(node, running_program.b, 'end');

	            if (!pending_program) {
	              // we're done
	              if (running_program.b) {
	                // intro â we can tidy up immediately
	                clear_animation();
	              } else {
	                // outro â needs to be coordinated
	                if (! --running_program.group.r) run_all(running_program.group.c);
	              }
	            }

	            running_program = null;
	          } else if (now >= running_program.start) {
	            var p = now - running_program.start;
	            t = running_program.a + running_program.d * easing(p / running_program.duration);
	            tick(t, 1 - t);
	          }
	        }

	        return !!(running_program || pending_program);
	      });
	    }
	  }

	  return {
	    run: function run(b) {
	      if (is_function(config)) {
	        wait().then(function () {
	          // @ts-ignore
	          config = config();
	          go(b);
	        });
	      } else {
	        go(b);
	      }
	    },
	    end: function end() {
	      clear_animation();
	      running_program = pending_program = null;
	    }
	  };
	}

	var globals = typeof window !== 'undefined' ? window : typeof globalThis !== 'undefined' ? globalThis : global;

	function destroy_block(block, lookup) {
	  block.d(1);
	  lookup.delete(block.key);
	}

	function outro_and_destroy_block(block, lookup) {
	  transition_out(block, 1, 1, function () {
	    lookup.delete(block.key);
	  });
	}

	function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
	  var o = old_blocks.length;
	  var n = list.length;
	  var i = o;
	  var old_indexes = {};

	  while (i--) {
	    old_indexes[old_blocks[i].key] = i;
	  }

	  var new_blocks = [];
	  var new_lookup = new Map();
	  var deltas = new Map();
	  i = n;

	  while (i--) {
	    var child_ctx = get_context(ctx, list, i);
	    var key = get_key(child_ctx);
	    var block = lookup.get(key);

	    if (!block) {
	      block = create_each_block(key, child_ctx);
	      block.c();
	    } else if (dynamic) {
	      block.p(child_ctx, dirty);
	    }

	    new_lookup.set(key, new_blocks[i] = block);
	    if (key in old_indexes) deltas.set(key, Math.abs(i - old_indexes[key]));
	  }

	  var will_move = new Set();
	  var did_move = new Set();

	  function insert(block) {
	    transition_in(block, 1);
	    block.m(node, next);
	    lookup.set(block.key, block);
	    next = block.first;
	    n--;
	  }

	  while (o && n) {
	    var new_block = new_blocks[n - 1];
	    var old_block = old_blocks[o - 1];
	    var new_key = new_block.key;
	    var old_key = old_block.key;

	    if (new_block === old_block) {
	      // do nothing
	      next = new_block.first;
	      o--;
	      n--;
	    } else if (!new_lookup.has(old_key)) {
	      // remove old block
	      destroy(old_block, lookup);
	      o--;
	    } else if (!lookup.has(new_key) || will_move.has(new_key)) {
	      insert(new_block);
	    } else if (did_move.has(old_key)) {
	      o--;
	    } else if (deltas.get(new_key) > deltas.get(old_key)) {
	      did_move.add(new_key);
	      insert(new_block);
	    } else {
	      will_move.add(old_key);
	      o--;
	    }
	  }

	  while (o--) {
	    var _old_block = old_blocks[o];
	    if (!new_lookup.has(_old_block.key)) destroy(_old_block, lookup);
	  }

	  while (n) {
	    insert(new_blocks[n - 1]);
	  }

	  return new_blocks;
	}

	function validate_each_keys(ctx, list, get_context, get_key) {
	  var keys = new Set();

	  for (var i = 0; i < list.length; i++) {
	    var key = get_key(get_context(ctx, list, i));

	    if (keys.has(key)) {
	      throw new Error("Cannot have duplicate keys in a keyed each");
	    }

	    keys.add(key);
	  }
	}

	function get_spread_update(levels, updates) {
	  var update = {};
	  var to_null_out = {};
	  var accounted_for = {
	    $$scope: 1
	  };
	  var i = levels.length;

	  while (i--) {
	    var o = levels[i];
	    var n = updates[i];

	    if (n) {
	      for (var key in o) {
	        if (!(key in n)) to_null_out[key] = 1;
	      }

	      for (var _key3 in n) {
	        if (!accounted_for[_key3]) {
	          update[_key3] = n[_key3];
	          accounted_for[_key3] = 1;
	        }
	      }

	      levels[i] = n;
	    } else {
	      for (var _key4 in o) {
	        accounted_for[_key4] = 1;
	      }
	    }
	  }

	  for (var _key5 in to_null_out) {
	    if (!(_key5 in update)) update[_key5] = undefined;
	  }

	  return update;
	}

	function bind$1(component, name, callback) {
	  var index = component.$$.props[name];

	  if (index !== undefined) {
	    component.$$.bound[index] = callback;
	    callback(component.$$.ctx[index]);
	  }
	}

	function create_component(block) {
	  block && block.c();
	}

	function mount_component(component, target, anchor) {
	  var _component$$$ = component.$$,
	      fragment = _component$$$.fragment,
	      on_mount = _component$$$.on_mount,
	      on_destroy = _component$$$.on_destroy,
	      after_update = _component$$$.after_update;
	  fragment && fragment.m(target, anchor); // onMount happens before the initial afterUpdate

	  add_render_callback(function () {
	    var new_on_destroy = on_mount.map(run$1).filter(is_function);

	    if (on_destroy) {
	      on_destroy.push.apply(on_destroy, _toConsumableArray(new_on_destroy));
	    } else {
	      // Edge case - component was destroyed immediately,
	      // most likely as a result of a binding initialising
	      run_all(new_on_destroy);
	    }

	    component.$$.on_mount = [];
	  });
	  after_update.forEach(add_render_callback);
	}

	function destroy_component(component, detaching) {
	  var $$ = component.$$;

	  if ($$.fragment !== null) {
	    run_all($$.on_destroy);
	    $$.fragment && $$.fragment.d(detaching); // TODO null out other refs, including component.$$ (but need to
	    // preserve final state?)

	    $$.on_destroy = $$.fragment = null;
	    $$.ctx = [];
	  }
	}

	function make_dirty(component, i) {
	  if (component.$$.dirty[0] === -1) {
	    dirty_components.push(component);
	    schedule_update();
	    component.$$.dirty.fill(0);
	  }

	  component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
	}

	function init(component, options, instance, create_fragment, not_equal, props) {
	  var dirty = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [-1];
	  var parent_component = current_component;
	  set_current_component(component);
	  var prop_values = options.props || {};
	  var $$ = component.$$ = {
	    fragment: null,
	    ctx: null,
	    // state
	    props: props,
	    update: noop,
	    not_equal: not_equal,
	    bound: blank_object(),
	    // lifecycle
	    on_mount: [],
	    on_destroy: [],
	    before_update: [],
	    after_update: [],
	    context: new Map(parent_component ? parent_component.$$.context : []),
	    // everything else
	    callbacks: blank_object(),
	    dirty: dirty,
	    skip_bound: false
	  };
	  var ready = false;
	  $$.ctx = instance ? instance(component, prop_values, function (i, ret) {
	    var value = (arguments.length <= 2 ? 0 : arguments.length - 2) ? arguments.length <= 2 ? undefined : arguments[2] : ret;

	    if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
	      if (!$$.skip_bound && $$.bound[i]) $$.bound[i](value);
	      if (ready) make_dirty(component, i);
	    }

	    return ret;
	  }) : [];
	  $$.update();
	  ready = true;
	  run_all($$.before_update); // `false` as a special case of no DOM component

	  $$.fragment = create_fragment ? create_fragment($$.ctx) : false;

	  if (options.target) {
	    if (options.hydrate) {
	      var nodes = children(options.target); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

	      $$.fragment && $$.fragment.l(nodes);
	      nodes.forEach(detach);
	    } else {
	      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
	      $$.fragment && $$.fragment.c();
	    }

	    if (options.intro) transition_in(component.$$.fragment);
	    mount_component(component, options.target, options.anchor);
	    flush$1();
	  }

	  set_current_component(parent_component);
	}

	var SvelteComponent = /*#__PURE__*/function () {
	  function SvelteComponent() {
	    _classCallCheck(this, SvelteComponent);
	  }

	  _createClass(SvelteComponent, [{
	    key: "$destroy",
	    value: function $destroy() {
	      destroy_component(this, 1);
	      this.$destroy = noop;
	    }
	  }, {
	    key: "$on",
	    value: function $on(type, callback) {
	      var callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
	      callbacks.push(callback);
	      return function () {
	        var index = callbacks.indexOf(callback);
	        if (index !== -1) callbacks.splice(index, 1);
	      };
	    }
	  }, {
	    key: "$set",
	    value: function $set($$props) {
	      if (this.$$set && !is_empty($$props)) {
	        this.$$.skip_bound = true;
	        this.$$set($$props);
	        this.$$.skip_bound = false;
	      }
	    }
	  }]);

	  return SvelteComponent;
	}();

	function dispatch_dev(type, detail) {
	  document.dispatchEvent(custom_event(type, Object.assign({
	    version: '3.24.1'
	  }, detail)));
	}

	function append_dev(target, node) {
	  dispatch_dev("SvelteDOMInsert", {
	    target: target,
	    node: node
	  });
	  append(target, node);
	}

	function insert_dev(target, node, anchor) {
	  dispatch_dev("SvelteDOMInsert", {
	    target: target,
	    node: node,
	    anchor: anchor
	  });
	  insert(target, node, anchor);
	}

	function detach_dev(node) {
	  dispatch_dev("SvelteDOMRemove", {
	    node: node
	  });
	  detach(node);
	}

	function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
	  var modifiers = options === true ? ["capture"] : options ? Array.from(Object.keys(options)) : [];
	  if (has_prevent_default) modifiers.push('preventDefault');
	  if (has_stop_propagation) modifiers.push('stopPropagation');
	  dispatch_dev("SvelteDOMAddEventListener", {
	    node: node,
	    event: event,
	    handler: handler,
	    modifiers: modifiers
	  });
	  var dispose = listen(node, event, handler, options);
	  return function () {
	    dispatch_dev("SvelteDOMRemoveEventListener", {
	      node: node,
	      event: event,
	      handler: handler,
	      modifiers: modifiers
	    });
	    dispose();
	  };
	}

	function attr_dev(node, attribute, value) {
	  attr(node, attribute, value);
	  if (value == null) dispatch_dev("SvelteDOMRemoveAttribute", {
	    node: node,
	    attribute: attribute
	  });else dispatch_dev("SvelteDOMSetAttribute", {
	    node: node,
	    attribute: attribute,
	    value: value
	  });
	}

	function prop_dev(node, property, value) {
	  node[property] = value;
	  dispatch_dev("SvelteDOMSetProperty", {
	    node: node,
	    property: property,
	    value: value
	  });
	}

	function set_data_dev(text, data) {
	  data = '' + data;
	  if (text.wholeText === data) return;
	  dispatch_dev("SvelteDOMSetData", {
	    node: text,
	    data: data
	  });
	  text.data = data;
	}

	function validate_each_argument(arg) {
	  if (typeof arg !== 'string' && !(arg && _typeof(arg) === 'object' && 'length' in arg)) {
	    var msg = '{#each} only iterates over array-like objects.';

	    if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
	      msg += ' You can use a spread to convert this iterable into an array.';
	    }

	    throw new Error(msg);
	  }
	}

	function validate_slots(name, slot, keys) {
	  for (var _i2 = 0, _Object$keys = Object.keys(slot); _i2 < _Object$keys.length; _i2++) {
	    var slot_key = _Object$keys[_i2];

	    if (!~keys.indexOf(slot_key)) {
	      console.warn("<".concat(name, "> received an unexpected slot \"").concat(slot_key, "\"."));
	    }
	  }
	}

	var SvelteComponentDev = /*#__PURE__*/function (_SvelteComponent) {
	  _inherits(SvelteComponentDev, _SvelteComponent);

	  var _super2 = _createSuper(SvelteComponentDev);

	  function SvelteComponentDev(options) {
	    _classCallCheck(this, SvelteComponentDev);

	    if (!options || !options.target && !options.$$inline) {
	      throw new Error("'target' is a required option");
	    }

	    return _super2.call(this);
	  }

	  _createClass(SvelteComponentDev, [{
	    key: "$destroy",
	    value: function $destroy() {
	      _get(_getPrototypeOf(SvelteComponentDev.prototype), "$destroy", this).call(this);

	      this.$destroy = function () {
	        console.warn("Component was already destroyed"); // eslint-disable-line no-console
	      };
	    }
	  }, {
	    key: "$capture_state",
	    value: function $capture_state() {}
	  }, {
	    key: "$inject_state",
	    value: function $inject_state() {}
	  }]);

	  return SvelteComponentDev;
	}(SvelteComponent);

	var file = "src/Catch.svelte";

	function create_fragment(ctx) {
	  var section;
	  var p;
	  var t0;
	  var t1;
	  var span;
	  var t3;
	  var div;
	  var img;
	  var img_src_value;
	  var mounted;
	  var dispose;
	  var block = {
	    c: function create() {
	      section = element("section");
	      p = element("p");
	      t0 = text(
	      /*content*/
	      ctx[0]);
	      t1 = space();
	      span = element("span");
	      span.textContent = "Send Email with Link";
	      t3 = space();
	      div = element("div");
	      img = element("img");
	      attr_dev(p, "class", "svelte-jw2lzh");
	      add_location(p, file, 12, 2, 374);
	      attr_dev(span, "class", "pseudolink svelte-jw2lzh");
	      add_location(span, file, 13, 2, 393);
	      attr_dev(section, "class", "content catch svelte-jw2lzh");
	      add_location(section, file, 11, 0, 340);
	      if (img.src !== (img_src_value = "images/screenshots/fiat_placeholder.jpg")) attr_dev(img, "src", img_src_value);
	      attr_dev(img, "alt", "Screenshot of the visualization showing red balloons on a timeline.");
	      attr_dev(img, "class", "svelte-jw2lzh");
	      add_location(img, file, 16, 2, 511);
	      attr_dev(div, "class", "placeholder-image svelte-jw2lzh");
	      add_location(div, file, 15, 0, 477);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, section, anchor);
	      append_dev(section, p);
	      append_dev(p, t0);
	      append_dev(section, t1);
	      append_dev(section, span);
	      insert_dev(target, t3, anchor);
	      insert_dev(target, div, anchor);
	      append_dev(div, img);

	      if (!mounted) {
	        dispose = listen_dev(span, "click", sendMail, false, false, false);
	        mounted = true;
	      }
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (dirty &
	      /*content*/
	      1) set_data_dev(t0,
	      /*content*/
	      ctx[0]);
	    },
	    i: noop,
	    o: noop,
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(section);
	      if (detaching) detach_dev(t3);
	      if (detaching) detach_dev(div);
	      mounted = false;
	      dispose();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function sendMail() {
	  var subject = encodeURIComponent("Dino Tracker");
	  var body = encodeURIComponent("I have seen this project on the web:\nhttps://tba.org");
	  window.location.href = "mailto:?subject=".concat(subject, "&body=").concat(body);
	}

	function instance($$self, $$props, $$invalidate) {
	  var _$$props$content = $$props.content,
	      content = _$$props$content === void 0 ? "" : _$$props$content;
	  var writable_props = ["content"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Catch> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Catch", $$slots, []);

	  $$self.$$set = function ($$props) {
	    if ("content" in $$props) $$invalidate(0, content = $$props.content);
	  };

	  $$self.$capture_state = function () {
	    return {
	      content: content,
	      sendMail: sendMail
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("content" in $$props) $$invalidate(0, content = $$props.content);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [content];
	}

	var Catch = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(Catch, _SvelteComponentDev);

	  var _super = _createSuper(Catch);

	  function Catch(options) {
	    var _this;

	    _classCallCheck(this, Catch);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance, create_fragment, safe_not_equal, {
	      content: 0
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "Catch",
	      options: options,
	      id: create_fragment.name
	    });
	    return _this;
	  }

	  _createClass(Catch, [{
	    key: "content",
	    get: function get() {
	      throw new Error("<Catch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Catch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return Catch;
	}(SvelteComponentDev);

	// `FlattenIntoArray` abstract operation
	// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
	var flattenIntoArray = function (target, original, source, sourceLen, start, depth, mapper, thisArg) {
	  var targetIndex = start;
	  var sourceIndex = 0;
	  var mapFn = mapper ? functionBindContext(mapper, thisArg, 3) : false;
	  var element;

	  while (sourceIndex < sourceLen) {
	    if (sourceIndex in source) {
	      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

	      if (depth > 0 && isArray(element)) {
	        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
	      } else {
	        if (targetIndex >= 0x1FFFFFFFFFFFFF) throw TypeError('Exceed the acceptable array length');
	        target[targetIndex] = element;
	      }

	      targetIndex++;
	    }
	    sourceIndex++;
	  }
	  return targetIndex;
	};

	var flattenIntoArray_1 = flattenIntoArray;

	// `Array.prototype.flat` method
	// https://github.com/tc39/proposal-flatMap
	_export({ target: 'Array', proto: true }, {
	  flat: function flat(/* depthArg = 1 */) {
	    var depthArg = arguments.length ? arguments[0] : undefined;
	    var O = toObject(this);
	    var sourceLen = toLength(O.length);
	    var A = arraySpeciesCreate(O, 0);
	    A.length = flattenIntoArray_1(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
	    return A;
	  }
	});

	var test$1 = [];
	var nativeSort = test$1.sort;

	// IE8-
	var FAILS_ON_UNDEFINED = fails(function () {
	  test$1.sort(undefined);
	});
	// V8 bug
	var FAILS_ON_NULL = fails(function () {
	  test$1.sort(null);
	});
	// Old WebKit
	var STRICT_METHOD$3 = arrayMethodIsStrict('sort');

	var FORCED$2 = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD$3;

	// `Array.prototype.sort` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.sort
	_export({ target: 'Array', proto: true, forced: FORCED$2 }, {
	  sort: function sort(comparefn) {
	    return comparefn === undefined
	      ? nativeSort.call(toObject(this))
	      : nativeSort.call(toObject(this), aFunction$1(comparefn));
	  }
	});

	// this method was added to unscopables after implementation
	// in popular engines, so it's moved to a separate module


	addToUnscopables('flat');

	// `SameValue` abstract operation
	// https://tc39.github.io/ecma262/#sec-samevalue
	var sameValue = Object.is || function is(x, y) {
	  // eslint-disable-next-line no-self-compare
	  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
	};

	// @@search logic
	fixRegexpWellKnownSymbolLogic('search', 1, function (SEARCH, nativeSearch, maybeCallNative) {
	  return [
	    // `String.prototype.search` method
	    // https://tc39.github.io/ecma262/#sec-string.prototype.search
	    function search(regexp) {
	      var O = requireObjectCoercible(this);
	      var searcher = regexp == undefined ? undefined : regexp[SEARCH];
	      return searcher !== undefined ? searcher.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
	    },
	    // `RegExp.prototype[@@search]` method
	    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
	    function (regexp) {
	      var res = maybeCallNative(nativeSearch, regexp, this);
	      if (res.done) return res.value;

	      var rx = anObject(regexp);
	      var S = String(this);

	      var previousLastIndex = rx.lastIndex;
	      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
	      var result = regexpExecAbstract(rx, S);
	      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
	      return result === null ? -1 : result.index;
	    }
	  ];
	});

	var runtime_1 = createCommonjsModule(function (module) {
	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var runtime = (function (exports) {

	  var Op = Object.prototype;
	  var hasOwn = Op.hasOwnProperty;
	  var undefined$1; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

	  function define(obj, key, value) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	    return obj[key];
	  }
	  try {
	    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
	    define({}, "");
	  } catch (err) {
	    define = function(obj, key, value) {
	      return obj[key] = value;
	    };
	  }

	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	    var generator = Object.create(protoGenerator.prototype);
	    var context = new Context(tryLocsList || []);

	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);

	    return generator;
	  }
	  exports.wrap = wrap;

	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }

	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";

	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};

	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}

	  // This is a polyfill for %IteratorPrototype% for environments that
	  // don't natively support it.
	  var IteratorPrototype = {};
	  IteratorPrototype[iteratorSymbol] = function () {
	    return this;
	  };

	  var getProto = Object.getPrototypeOf;
	  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
	  if (NativeIteratorPrototype &&
	      NativeIteratorPrototype !== Op &&
	      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	    // This environment has a native %IteratorPrototype%; use it instead
	    // of the polyfill.
	    IteratorPrototype = NativeIteratorPrototype;
	  }

	  var Gp = GeneratorFunctionPrototype.prototype =
	    Generator.prototype = Object.create(IteratorPrototype);
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunction.displayName = define(
	    GeneratorFunctionPrototype,
	    toStringTagSymbol,
	    "GeneratorFunction"
	  );

	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      define(prototype, method, function(arg) {
	        return this._invoke(method, arg);
	      });
	    });
	  }

	  exports.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };

	  exports.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      define(genFun, toStringTagSymbol, "GeneratorFunction");
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };

	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `hasOwn.call(value, "__await")` to determine if the yielded value is
	  // meant to be awaited.
	  exports.awrap = function(arg) {
	    return { __await: arg };
	  };

	  function AsyncIterator(generator, PromiseImpl) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value &&
	            typeof value === "object" &&
	            hasOwn.call(value, "__await")) {
	          return PromiseImpl.resolve(value.__await).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }

	        return PromiseImpl.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration.
	          result.value = unwrapped;
	          resolve(result);
	        }, function(error) {
	          // If a rejected Promise was yielded, throw the rejection back
	          // into the async generator function so it can be handled there.
	          return invoke("throw", error, resolve, reject);
	        });
	      }
	    }

	    var previousPromise;

	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new PromiseImpl(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }

	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }

	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }

	  defineIteratorMethods(AsyncIterator.prototype);
	  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
	    return this;
	  };
	  exports.AsyncIterator = AsyncIterator;

	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
	    if (PromiseImpl === void 0) PromiseImpl = Promise;

	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList),
	      PromiseImpl
	    );

	    return exports.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };

	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;

	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }

	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }

	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }

	      context.method = method;
	      context.arg = arg;

	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          var delegateResult = maybeInvokeDelegate(delegate, context);
	          if (delegateResult) {
	            if (delegateResult === ContinueSentinel) continue;
	            return delegateResult;
	          }
	        }

	        if (context.method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = context.arg;

	        } else if (context.method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw context.arg;
	          }

	          context.dispatchException(context.arg);

	        } else if (context.method === "return") {
	          context.abrupt("return", context.arg);
	        }

	        state = GenStateExecuting;

	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;

	          if (record.arg === ContinueSentinel) {
	            continue;
	          }

	          return {
	            value: record.arg,
	            done: context.done
	          };

	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(context.arg) call above.
	          context.method = "throw";
	          context.arg = record.arg;
	        }
	      }
	    };
	  }

	  // Call delegate.iterator[context.method](context.arg) and handle the
	  // result, either by returning a { value, done } result from the
	  // delegate iterator, or by modifying context.method and context.arg,
	  // setting context.delegate to null, and returning the ContinueSentinel.
	  function maybeInvokeDelegate(delegate, context) {
	    var method = delegate.iterator[context.method];
	    if (method === undefined$1) {
	      // A .throw or .return when the delegate iterator has no .throw
	      // method always terminates the yield* loop.
	      context.delegate = null;

	      if (context.method === "throw") {
	        // Note: ["return"] must be used for ES3 parsing compatibility.
	        if (delegate.iterator["return"]) {
	          // If the delegate iterator has a return method, give it a
	          // chance to clean up.
	          context.method = "return";
	          context.arg = undefined$1;
	          maybeInvokeDelegate(delegate, context);

	          if (context.method === "throw") {
	            // If maybeInvokeDelegate(context) changed context.method from
	            // "return" to "throw", let that override the TypeError below.
	            return ContinueSentinel;
	          }
	        }

	        context.method = "throw";
	        context.arg = new TypeError(
	          "The iterator does not provide a 'throw' method");
	      }

	      return ContinueSentinel;
	    }

	    var record = tryCatch(method, delegate.iterator, context.arg);

	    if (record.type === "throw") {
	      context.method = "throw";
	      context.arg = record.arg;
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    var info = record.arg;

	    if (! info) {
	      context.method = "throw";
	      context.arg = new TypeError("iterator result is not an object");
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    if (info.done) {
	      // Assign the result of the finished delegate to the temporary
	      // variable specified by delegate.resultName (see delegateYield).
	      context[delegate.resultName] = info.value;

	      // Resume execution at the desired location (see delegateYield).
	      context.next = delegate.nextLoc;

	      // If context.method was "throw" but the delegate handled the
	      // exception, let the outer generator proceed normally. If
	      // context.method was "next", forget context.arg since it has been
	      // "consumed" by the delegate iterator. If context.method was
	      // "return", allow the original .return call to continue in the
	      // outer generator.
	      if (context.method !== "return") {
	        context.method = "next";
	        context.arg = undefined$1;
	      }

	    } else {
	      // Re-yield the result returned by the delegate method.
	      return info;
	    }

	    // The delegate iterator is finished, so forget it and continue with
	    // the outer generator.
	    context.delegate = null;
	    return ContinueSentinel;
	  }

	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);

	  define(Gp, toStringTagSymbol, "Generator");

	  // A Generator should always return itself as the iterator object when the
	  // @@iterator function is called on it. Some browsers' implementations of the
	  // iterator prototype chain incorrectly implement this, causing the Generator
	  // object to not be returned from this call. This ensures that doesn't happen.
	  // See https://github.com/facebook/regenerator/issues/274 for more details.
	  Gp[iteratorSymbol] = function() {
	    return this;
	  };

	  Gp.toString = function() {
	    return "[object Generator]";
	  };

	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };

	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }

	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }

	    this.tryEntries.push(entry);
	  }

	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }

	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }

	  exports.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();

	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }

	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };

	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }

	      if (typeof iterable.next === "function") {
	        return iterable;
	      }

	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }

	          next.value = undefined$1;
	          next.done = true;

	          return next;
	        };

	        return next.next = next;
	      }
	    }

	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  exports.values = values;

	  function doneResult() {
	    return { value: undefined$1, done: true };
	  }

	  Context.prototype = {
	    constructor: Context,

	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined$1;
	      this.done = false;
	      this.delegate = null;

	      this.method = "next";
	      this.arg = undefined$1;

	      this.tryEntries.forEach(resetTryEntry);

	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined$1;
	          }
	        }
	      }
	    },

	    stop: function() {
	      this.done = true;

	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }

	      return this.rval;
	    },

	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }

	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;

	        if (caught) {
	          // If the dispatched exception was caught by a catch block,
	          // then let that catch block handle the exception normally.
	          context.method = "next";
	          context.arg = undefined$1;
	        }

	        return !! caught;
	      }

	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;

	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }

	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");

	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }

	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },

	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }

	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }

	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;

	      if (finallyEntry) {
	        this.method = "next";
	        this.next = finallyEntry.finallyLoc;
	        return ContinueSentinel;
	      }

	      return this.complete(record);
	    },

	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }

	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = this.arg = record.arg;
	        this.method = "return";
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }

	      return ContinueSentinel;
	    },

	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },

	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }

	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },

	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };

	      if (this.method === "next") {
	        // Deliberately forget the last sent value so that we don't
	        // accidentally pass it on to the delegate.
	        this.arg = undefined$1;
	      }

	      return ContinueSentinel;
	    }
	  };

	  // Regardless of whether this script is executing as a CommonJS module
	  // or not, return the runtime object so that we can declare the variable
	  // regeneratorRuntime in the outer scope, which allows this module to be
	  // injected easily by `bin/regenerator --include-runtime script.js`.
	  return exports;

	}(
	  // If this script is executing as a CommonJS module, use module.exports
	  // as the regeneratorRuntime namespace. Otherwise create a new empty
	  // object. Either way, the resulting object will be used to initialize
	  // the regeneratorRuntime variable at the top of this file.
	   module.exports 
	));

	try {
	  regeneratorRuntime = runtime;
	} catch (accidentalStrictMode) {
	  // This module should not be running in strict mode, so the above
	  // assignment should always work unless something is misconfigured. Just
	  // in case runtime.js accidentally runs in strict mode, we can escape
	  // strict mode using a global Function call. This could conceivably fail
	  // if a Content Security Policy forbids using Function, but in that case
	  // the proper solution is to fix the accidental strict mode problem. If
	  // you've misconfigured your bundler to force strict mode and applied a
	  // CSP to forbid Function, and you're not willing to fix either of those
	  // problems, please detail your unique predicament in a GitHub issue.
	  Function("r", "regeneratorRuntime = r")(runtime);
	}
	});

	// a string of all valid unicode whitespaces
	// eslint-disable-next-line max-len
	var whitespaces = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

	var whitespace = '[' + whitespaces + ']';
	var ltrim = RegExp('^' + whitespace + whitespace + '*');
	var rtrim = RegExp(whitespace + whitespace + '*$');

	// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
	var createMethod$3 = function (TYPE) {
	  return function ($this) {
	    var string = String(requireObjectCoercible($this));
	    if (TYPE & 1) string = string.replace(ltrim, '');
	    if (TYPE & 2) string = string.replace(rtrim, '');
	    return string;
	  };
	};

	var stringTrim = {
	  // `String.prototype.{ trimLeft, trimStart }` methods
	  // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart
	  start: createMethod$3(1),
	  // `String.prototype.{ trimRight, trimEnd }` methods
	  // https://tc39.github.io/ecma262/#sec-string.prototype.trimend
	  end: createMethod$3(2),
	  // `String.prototype.trim` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.trim
	  trim: createMethod$3(3)
	};

	var getOwnPropertyNames = objectGetOwnPropertyNames.f;
	var getOwnPropertyDescriptor$3 = objectGetOwnPropertyDescriptor.f;
	var defineProperty$7 = objectDefineProperty.f;
	var trim = stringTrim.trim;

	var NUMBER = 'Number';
	var NativeNumber = global_1[NUMBER];
	var NumberPrototype = NativeNumber.prototype;

	// Opera ~12 has broken Object#toString
	var BROKEN_CLASSOF = classofRaw(objectCreate(NumberPrototype)) == NUMBER;

	// `ToNumber` abstract operation
	// https://tc39.github.io/ecma262/#sec-tonumber
	var toNumber = function (argument) {
	  var it = toPrimitive(argument, false);
	  var first, third, radix, maxCode, digits, length, index, code;
	  if (typeof it == 'string' && it.length > 2) {
	    it = trim(it);
	    first = it.charCodeAt(0);
	    if (first === 43 || first === 45) {
	      third = it.charCodeAt(2);
	      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
	    } else if (first === 48) {
	      switch (it.charCodeAt(1)) {
	        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i
	        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i
	        default: return +it;
	      }
	      digits = it.slice(2);
	      length = digits.length;
	      for (index = 0; index < length; index++) {
	        code = digits.charCodeAt(index);
	        // parseInt parses a string to a first unavailable symbol
	        // but ToNumber should return NaN if a string contains unavailable symbols
	        if (code < 48 || code > maxCode) return NaN;
	      } return parseInt(digits, radix);
	    }
	  } return +it;
	};

	// `Number` constructor
	// https://tc39.github.io/ecma262/#sec-number-constructor
	if (isForced_1(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {
	  var NumberWrapper = function Number(value) {
	    var it = arguments.length < 1 ? 0 : value;
	    var dummy = this;
	    return dummy instanceof NumberWrapper
	      // check on 1..constructor(foo) case
	      && (BROKEN_CLASSOF ? fails(function () { NumberPrototype.valueOf.call(dummy); }) : classofRaw(dummy) != NUMBER)
	        ? inheritIfRequired(new NativeNumber(toNumber(it)), dummy, NumberWrapper) : toNumber(it);
	  };
	  for (var keys$1 = descriptors ? getOwnPropertyNames(NativeNumber) : (
	    // ES3:
	    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
	    // ES2015 (in case, if modules with ES2015 Number statics required before):
	    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
	    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
	  ).split(','), j = 0, key; keys$1.length > j; j++) {
	    if (has(NativeNumber, key = keys$1[j]) && !has(NumberWrapper, key)) {
	      defineProperty$7(NumberWrapper, key, getOwnPropertyDescriptor$3(NativeNumber, key));
	    }
	  }
	  NumberWrapper.prototype = NumberPrototype;
	  NumberPrototype.constructor = NumberWrapper;
	  redefine(global_1, NUMBER, NumberWrapper);
	}

	var $some = arrayIteration.some;



	var STRICT_METHOD$4 = arrayMethodIsStrict('some');
	var USES_TO_LENGTH$6 = arrayMethodUsesToLength('some');

	// `Array.prototype.some` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.some
	_export({ target: 'Array', proto: true, forced: !STRICT_METHOD$4 || !USES_TO_LENGTH$6 }, {
	  some: function some(callbackfn /* , thisArg */) {
	    return $some(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var arrayBufferNative = typeof ArrayBuffer !== 'undefined' && typeof DataView !== 'undefined';

	// `ToIndex` abstract operation
	// https://tc39.github.io/ecma262/#sec-toindex
	var toIndex = function (it) {
	  if (it === undefined) return 0;
	  var number = toInteger(it);
	  var length = toLength(number);
	  if (number !== length) throw RangeError('Wrong length or index');
	  return length;
	};

	// IEEE754 conversions based on https://github.com/feross/ieee754
	// eslint-disable-next-line no-shadow-restricted-names
	var Infinity$1 = 1 / 0;
	var abs = Math.abs;
	var pow = Math.pow;
	var floor$2 = Math.floor;
	var log = Math.log;
	var LN2 = Math.LN2;

	var pack = function (number, mantissaLength, bytes) {
	  var buffer = new Array(bytes);
	  var exponentLength = bytes * 8 - mantissaLength - 1;
	  var eMax = (1 << exponentLength) - 1;
	  var eBias = eMax >> 1;
	  var rt = mantissaLength === 23 ? pow(2, -24) - pow(2, -77) : 0;
	  var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;
	  var index = 0;
	  var exponent, mantissa, c;
	  number = abs(number);
	  // eslint-disable-next-line no-self-compare
	  if (number != number || number === Infinity$1) {
	    // eslint-disable-next-line no-self-compare
	    mantissa = number != number ? 1 : 0;
	    exponent = eMax;
	  } else {
	    exponent = floor$2(log(number) / LN2);
	    if (number * (c = pow(2, -exponent)) < 1) {
	      exponent--;
	      c *= 2;
	    }
	    if (exponent + eBias >= 1) {
	      number += rt / c;
	    } else {
	      number += rt * pow(2, 1 - eBias);
	    }
	    if (number * c >= 2) {
	      exponent++;
	      c /= 2;
	    }
	    if (exponent + eBias >= eMax) {
	      mantissa = 0;
	      exponent = eMax;
	    } else if (exponent + eBias >= 1) {
	      mantissa = (number * c - 1) * pow(2, mantissaLength);
	      exponent = exponent + eBias;
	    } else {
	      mantissa = number * pow(2, eBias - 1) * pow(2, mantissaLength);
	      exponent = 0;
	    }
	  }
	  for (; mantissaLength >= 8; buffer[index++] = mantissa & 255, mantissa /= 256, mantissaLength -= 8);
	  exponent = exponent << mantissaLength | mantissa;
	  exponentLength += mantissaLength;
	  for (; exponentLength > 0; buffer[index++] = exponent & 255, exponent /= 256, exponentLength -= 8);
	  buffer[--index] |= sign * 128;
	  return buffer;
	};

	var unpack = function (buffer, mantissaLength) {
	  var bytes = buffer.length;
	  var exponentLength = bytes * 8 - mantissaLength - 1;
	  var eMax = (1 << exponentLength) - 1;
	  var eBias = eMax >> 1;
	  var nBits = exponentLength - 7;
	  var index = bytes - 1;
	  var sign = buffer[index--];
	  var exponent = sign & 127;
	  var mantissa;
	  sign >>= 7;
	  for (; nBits > 0; exponent = exponent * 256 + buffer[index], index--, nBits -= 8);
	  mantissa = exponent & (1 << -nBits) - 1;
	  exponent >>= -nBits;
	  nBits += mantissaLength;
	  for (; nBits > 0; mantissa = mantissa * 256 + buffer[index], index--, nBits -= 8);
	  if (exponent === 0) {
	    exponent = 1 - eBias;
	  } else if (exponent === eMax) {
	    return mantissa ? NaN : sign ? -Infinity$1 : Infinity$1;
	  } else {
	    mantissa = mantissa + pow(2, mantissaLength);
	    exponent = exponent - eBias;
	  } return (sign ? -1 : 1) * mantissa * pow(2, exponent - mantissaLength);
	};

	var ieee754 = {
	  pack: pack,
	  unpack: unpack
	};

	var getOwnPropertyNames$1 = objectGetOwnPropertyNames.f;
	var defineProperty$8 = objectDefineProperty.f;




	var getInternalState$4 = internalState.get;
	var setInternalState$5 = internalState.set;
	var ARRAY_BUFFER = 'ArrayBuffer';
	var DATA_VIEW = 'DataView';
	var PROTOTYPE$2 = 'prototype';
	var WRONG_LENGTH = 'Wrong length';
	var WRONG_INDEX = 'Wrong index';
	var NativeArrayBuffer = global_1[ARRAY_BUFFER];
	var $ArrayBuffer = NativeArrayBuffer;
	var $DataView = global_1[DATA_VIEW];
	var $DataViewPrototype = $DataView && $DataView[PROTOTYPE$2];
	var ObjectPrototype$2 = Object.prototype;
	var RangeError$1 = global_1.RangeError;

	var packIEEE754 = ieee754.pack;
	var unpackIEEE754 = ieee754.unpack;

	var packInt8 = function (number) {
	  return [number & 0xFF];
	};

	var packInt16 = function (number) {
	  return [number & 0xFF, number >> 8 & 0xFF];
	};

	var packInt32 = function (number) {
	  return [number & 0xFF, number >> 8 & 0xFF, number >> 16 & 0xFF, number >> 24 & 0xFF];
	};

	var unpackInt32 = function (buffer) {
	  return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];
	};

	var packFloat32 = function (number) {
	  return packIEEE754(number, 23, 4);
	};

	var packFloat64 = function (number) {
	  return packIEEE754(number, 52, 8);
	};

	var addGetter = function (Constructor, key) {
	  defineProperty$8(Constructor[PROTOTYPE$2], key, { get: function () { return getInternalState$4(this)[key]; } });
	};

	var get$1 = function (view, count, index, isLittleEndian) {
	  var intIndex = toIndex(index);
	  var store = getInternalState$4(view);
	  if (intIndex + count > store.byteLength) throw RangeError$1(WRONG_INDEX);
	  var bytes = getInternalState$4(store.buffer).bytes;
	  var start = intIndex + store.byteOffset;
	  var pack = bytes.slice(start, start + count);
	  return isLittleEndian ? pack : pack.reverse();
	};

	var set$2 = function (view, count, index, conversion, value, isLittleEndian) {
	  var intIndex = toIndex(index);
	  var store = getInternalState$4(view);
	  if (intIndex + count > store.byteLength) throw RangeError$1(WRONG_INDEX);
	  var bytes = getInternalState$4(store.buffer).bytes;
	  var start = intIndex + store.byteOffset;
	  var pack = conversion(+value);
	  for (var i = 0; i < count; i++) bytes[start + i] = pack[isLittleEndian ? i : count - i - 1];
	};

	if (!arrayBufferNative) {
	  $ArrayBuffer = function ArrayBuffer(length) {
	    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
	    var byteLength = toIndex(length);
	    setInternalState$5(this, {
	      bytes: arrayFill.call(new Array(byteLength), 0),
	      byteLength: byteLength
	    });
	    if (!descriptors) this.byteLength = byteLength;
	  };

	  $DataView = function DataView(buffer, byteOffset, byteLength) {
	    anInstance(this, $DataView, DATA_VIEW);
	    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
	    var bufferLength = getInternalState$4(buffer).byteLength;
	    var offset = toInteger(byteOffset);
	    if (offset < 0 || offset > bufferLength) throw RangeError$1('Wrong offset');
	    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
	    if (offset + byteLength > bufferLength) throw RangeError$1(WRONG_LENGTH);
	    setInternalState$5(this, {
	      buffer: buffer,
	      byteLength: byteLength,
	      byteOffset: offset
	    });
	    if (!descriptors) {
	      this.buffer = buffer;
	      this.byteLength = byteLength;
	      this.byteOffset = offset;
	    }
	  };

	  if (descriptors) {
	    addGetter($ArrayBuffer, 'byteLength');
	    addGetter($DataView, 'buffer');
	    addGetter($DataView, 'byteLength');
	    addGetter($DataView, 'byteOffset');
	  }

	  redefineAll($DataView[PROTOTYPE$2], {
	    getInt8: function getInt8(byteOffset) {
	      return get$1(this, 1, byteOffset)[0] << 24 >> 24;
	    },
	    getUint8: function getUint8(byteOffset) {
	      return get$1(this, 1, byteOffset)[0];
	    },
	    getInt16: function getInt16(byteOffset /* , littleEndian */) {
	      var bytes = get$1(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
	      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
	    },
	    getUint16: function getUint16(byteOffset /* , littleEndian */) {
	      var bytes = get$1(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
	      return bytes[1] << 8 | bytes[0];
	    },
	    getInt32: function getInt32(byteOffset /* , littleEndian */) {
	      return unpackInt32(get$1(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined));
	    },
	    getUint32: function getUint32(byteOffset /* , littleEndian */) {
	      return unpackInt32(get$1(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined)) >>> 0;
	    },
	    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
	      return unpackIEEE754(get$1(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 23);
	    },
	    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
	      return unpackIEEE754(get$1(this, 8, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 52);
	    },
	    setInt8: function setInt8(byteOffset, value) {
	      set$2(this, 1, byteOffset, packInt8, value);
	    },
	    setUint8: function setUint8(byteOffset, value) {
	      set$2(this, 1, byteOffset, packInt8, value);
	    },
	    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
	      set$2(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
	      set$2(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
	      set$2(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
	      set$2(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
	      set$2(this, 4, byteOffset, packFloat32, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
	      set$2(this, 8, byteOffset, packFloat64, value, arguments.length > 2 ? arguments[2] : undefined);
	    }
	  });
	} else {
	  if (!fails(function () {
	    NativeArrayBuffer(1);
	  }) || !fails(function () {
	    new NativeArrayBuffer(-1); // eslint-disable-line no-new
	  }) || fails(function () {
	    new NativeArrayBuffer(); // eslint-disable-line no-new
	    new NativeArrayBuffer(1.5); // eslint-disable-line no-new
	    new NativeArrayBuffer(NaN); // eslint-disable-line no-new
	    return NativeArrayBuffer.name != ARRAY_BUFFER;
	  })) {
	    $ArrayBuffer = function ArrayBuffer(length) {
	      anInstance(this, $ArrayBuffer);
	      return new NativeArrayBuffer(toIndex(length));
	    };
	    var ArrayBufferPrototype = $ArrayBuffer[PROTOTYPE$2] = NativeArrayBuffer[PROTOTYPE$2];
	    for (var keys$2 = getOwnPropertyNames$1(NativeArrayBuffer), j$1 = 0, key$1; keys$2.length > j$1;) {
	      if (!((key$1 = keys$2[j$1++]) in $ArrayBuffer)) {
	        createNonEnumerableProperty($ArrayBuffer, key$1, NativeArrayBuffer[key$1]);
	      }
	    }
	    ArrayBufferPrototype.constructor = $ArrayBuffer;
	  }

	  // WebKit bug - the same parent prototype for typed arrays and data view
	  if (objectSetPrototypeOf && objectGetPrototypeOf($DataViewPrototype) !== ObjectPrototype$2) {
	    objectSetPrototypeOf($DataViewPrototype, ObjectPrototype$2);
	  }

	  // iOS Safari 7.x bug
	  var testView = new $DataView(new $ArrayBuffer(2));
	  var nativeSetInt8 = $DataViewPrototype.setInt8;
	  testView.setInt8(0, 2147483648);
	  testView.setInt8(1, 2147483649);
	  if (testView.getInt8(0) || !testView.getInt8(1)) redefineAll($DataViewPrototype, {
	    setInt8: function setInt8(byteOffset, value) {
	      nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
	    },
	    setUint8: function setUint8(byteOffset, value) {
	      nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
	    }
	  }, { unsafe: true });
	}

	setToStringTag($ArrayBuffer, ARRAY_BUFFER);
	setToStringTag($DataView, DATA_VIEW);

	var arrayBuffer = {
	  ArrayBuffer: $ArrayBuffer,
	  DataView: $DataView
	};

	var ArrayBuffer$1 = arrayBuffer.ArrayBuffer;
	var DataView$1 = arrayBuffer.DataView;
	var nativeArrayBufferSlice = ArrayBuffer$1.prototype.slice;

	var INCORRECT_SLICE = fails(function () {
	  return !new ArrayBuffer$1(2).slice(1, undefined).byteLength;
	});

	// `ArrayBuffer.prototype.slice` method
	// https://tc39.github.io/ecma262/#sec-arraybuffer.prototype.slice
	_export({ target: 'ArrayBuffer', proto: true, unsafe: true, forced: INCORRECT_SLICE }, {
	  slice: function slice(start, end) {
	    if (nativeArrayBufferSlice !== undefined && end === undefined) {
	      return nativeArrayBufferSlice.call(anObject(this), start); // FF fix
	    }
	    var length = anObject(this).byteLength;
	    var first = toAbsoluteIndex(start, length);
	    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
	    var result = new (speciesConstructor(this, ArrayBuffer$1))(toLength(fin - first));
	    var viewSource = new DataView$1(this);
	    var viewTarget = new DataView$1(result);
	    var index = 0;
	    while (first < fin) {
	      viewTarget.setUint8(index++, viewSource.getUint8(first++));
	    } return result;
	  }
	});

	var defineProperty$9 = objectDefineProperty.f;





	var Int8Array$1 = global_1.Int8Array;
	var Int8ArrayPrototype = Int8Array$1 && Int8Array$1.prototype;
	var Uint8ClampedArray = global_1.Uint8ClampedArray;
	var Uint8ClampedArrayPrototype = Uint8ClampedArray && Uint8ClampedArray.prototype;
	var TypedArray = Int8Array$1 && objectGetPrototypeOf(Int8Array$1);
	var TypedArrayPrototype = Int8ArrayPrototype && objectGetPrototypeOf(Int8ArrayPrototype);
	var ObjectPrototype$3 = Object.prototype;
	var isPrototypeOf = ObjectPrototype$3.isPrototypeOf;

	var TO_STRING_TAG$4 = wellKnownSymbol('toStringTag');
	var TYPED_ARRAY_TAG = uid('TYPED_ARRAY_TAG');
	// Fixing native typed arrays in Opera Presto crashes the browser, see #595
	var NATIVE_ARRAY_BUFFER_VIEWS = arrayBufferNative && !!objectSetPrototypeOf && classof(global_1.opera) !== 'Opera';
	var TYPED_ARRAY_TAG_REQIRED = false;
	var NAME$1;

	var TypedArrayConstructorsList = {
	  Int8Array: 1,
	  Uint8Array: 1,
	  Uint8ClampedArray: 1,
	  Int16Array: 2,
	  Uint16Array: 2,
	  Int32Array: 4,
	  Uint32Array: 4,
	  Float32Array: 4,
	  Float64Array: 8
	};

	var isView = function isView(it) {
	  var klass = classof(it);
	  return klass === 'DataView' || has(TypedArrayConstructorsList, klass);
	};

	var isTypedArray = function (it) {
	  return isObject(it) && has(TypedArrayConstructorsList, classof(it));
	};

	var aTypedArray = function (it) {
	  if (isTypedArray(it)) return it;
	  throw TypeError('Target is not a typed array');
	};

	var aTypedArrayConstructor = function (C) {
	  if (objectSetPrototypeOf) {
	    if (isPrototypeOf.call(TypedArray, C)) return C;
	  } else for (var ARRAY in TypedArrayConstructorsList) if (has(TypedArrayConstructorsList, NAME$1)) {
	    var TypedArrayConstructor = global_1[ARRAY];
	    if (TypedArrayConstructor && (C === TypedArrayConstructor || isPrototypeOf.call(TypedArrayConstructor, C))) {
	      return C;
	    }
	  } throw TypeError('Target is not a typed array constructor');
	};

	var exportTypedArrayMethod = function (KEY, property, forced) {
	  if (!descriptors) return;
	  if (forced) for (var ARRAY in TypedArrayConstructorsList) {
	    var TypedArrayConstructor = global_1[ARRAY];
	    if (TypedArrayConstructor && has(TypedArrayConstructor.prototype, KEY)) {
	      delete TypedArrayConstructor.prototype[KEY];
	    }
	  }
	  if (!TypedArrayPrototype[KEY] || forced) {
	    redefine(TypedArrayPrototype, KEY, forced ? property
	      : NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY] || property);
	  }
	};

	var exportTypedArrayStaticMethod = function (KEY, property, forced) {
	  var ARRAY, TypedArrayConstructor;
	  if (!descriptors) return;
	  if (objectSetPrototypeOf) {
	    if (forced) for (ARRAY in TypedArrayConstructorsList) {
	      TypedArrayConstructor = global_1[ARRAY];
	      if (TypedArrayConstructor && has(TypedArrayConstructor, KEY)) {
	        delete TypedArrayConstructor[KEY];
	      }
	    }
	    if (!TypedArray[KEY] || forced) {
	      // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable
	      try {
	        return redefine(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && Int8Array$1[KEY] || property);
	      } catch (error) { /* empty */ }
	    } else return;
	  }
	  for (ARRAY in TypedArrayConstructorsList) {
	    TypedArrayConstructor = global_1[ARRAY];
	    if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
	      redefine(TypedArrayConstructor, KEY, property);
	    }
	  }
	};

	for (NAME$1 in TypedArrayConstructorsList) {
	  if (!global_1[NAME$1]) NATIVE_ARRAY_BUFFER_VIEWS = false;
	}

	// WebKit bug - typed arrays constructors prototype is Object.prototype
	if (!NATIVE_ARRAY_BUFFER_VIEWS || typeof TypedArray != 'function' || TypedArray === Function.prototype) {
	  // eslint-disable-next-line no-shadow
	  TypedArray = function TypedArray() {
	    throw TypeError('Incorrect invocation');
	  };
	  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME$1 in TypedArrayConstructorsList) {
	    if (global_1[NAME$1]) objectSetPrototypeOf(global_1[NAME$1], TypedArray);
	  }
	}

	if (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype$3) {
	  TypedArrayPrototype = TypedArray.prototype;
	  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME$1 in TypedArrayConstructorsList) {
	    if (global_1[NAME$1]) objectSetPrototypeOf(global_1[NAME$1].prototype, TypedArrayPrototype);
	  }
	}

	// WebKit bug - one more object in Uint8ClampedArray prototype chain
	if (NATIVE_ARRAY_BUFFER_VIEWS && objectGetPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) {
	  objectSetPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);
	}

	if (descriptors && !has(TypedArrayPrototype, TO_STRING_TAG$4)) {
	  TYPED_ARRAY_TAG_REQIRED = true;
	  defineProperty$9(TypedArrayPrototype, TO_STRING_TAG$4, { get: function () {
	    return isObject(this) ? this[TYPED_ARRAY_TAG] : undefined;
	  } });
	  for (NAME$1 in TypedArrayConstructorsList) if (global_1[NAME$1]) {
	    createNonEnumerableProperty(global_1[NAME$1], TYPED_ARRAY_TAG, NAME$1);
	  }
	}

	var arrayBufferViewCore = {
	  NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS,
	  TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQIRED && TYPED_ARRAY_TAG,
	  aTypedArray: aTypedArray,
	  aTypedArrayConstructor: aTypedArrayConstructor,
	  exportTypedArrayMethod: exportTypedArrayMethod,
	  exportTypedArrayStaticMethod: exportTypedArrayStaticMethod,
	  isView: isView,
	  isTypedArray: isTypedArray,
	  TypedArray: TypedArray,
	  TypedArrayPrototype: TypedArrayPrototype
	};

	/* eslint-disable no-new */



	var NATIVE_ARRAY_BUFFER_VIEWS$1 = arrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;

	var ArrayBuffer$2 = global_1.ArrayBuffer;
	var Int8Array$2 = global_1.Int8Array;

	var typedArrayConstructorsRequireWrappers = !NATIVE_ARRAY_BUFFER_VIEWS$1 || !fails(function () {
	  Int8Array$2(1);
	}) || !fails(function () {
	  new Int8Array$2(-1);
	}) || !checkCorrectnessOfIteration(function (iterable) {
	  new Int8Array$2();
	  new Int8Array$2(null);
	  new Int8Array$2(1.5);
	  new Int8Array$2(iterable);
	}, true) || fails(function () {
	  // Safari (11+) bug - a reason why even Safari 13 should load a typed array polyfill
	  return new Int8Array$2(new ArrayBuffer$2(2), 1, undefined).length !== 1;
	});

	var toPositiveInteger = function (it) {
	  var result = toInteger(it);
	  if (result < 0) throw RangeError("The argument can't be less than 0");
	  return result;
	};

	var toOffset = function (it, BYTES) {
	  var offset = toPositiveInteger(it);
	  if (offset % BYTES) throw RangeError('Wrong offset');
	  return offset;
	};

	var aTypedArrayConstructor$1 = arrayBufferViewCore.aTypedArrayConstructor;

	var typedArrayFrom = function from(source /* , mapfn, thisArg */) {
	  var O = toObject(source);
	  var argumentsLength = arguments.length;
	  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
	  var mapping = mapfn !== undefined;
	  var iteratorMethod = getIteratorMethod(O);
	  var i, length, result, step, iterator, next;
	  if (iteratorMethod != undefined && !isArrayIteratorMethod(iteratorMethod)) {
	    iterator = iteratorMethod.call(O);
	    next = iterator.next;
	    O = [];
	    while (!(step = next.call(iterator)).done) {
	      O.push(step.value);
	    }
	  }
	  if (mapping && argumentsLength > 2) {
	    mapfn = functionBindContext(mapfn, arguments[2], 2);
	  }
	  length = toLength(O.length);
	  result = new (aTypedArrayConstructor$1(this))(length);
	  for (i = 0; length > i; i++) {
	    result[i] = mapping ? mapfn(O[i], i) : O[i];
	  }
	  return result;
	};

	var typedArrayConstructor = createCommonjsModule(function (module) {


















	var getOwnPropertyNames = objectGetOwnPropertyNames.f;

	var forEach = arrayIteration.forEach;






	var getInternalState = internalState.get;
	var setInternalState = internalState.set;
	var nativeDefineProperty = objectDefineProperty.f;
	var nativeGetOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
	var round = Math.round;
	var RangeError = global_1.RangeError;
	var ArrayBuffer = arrayBuffer.ArrayBuffer;
	var DataView = arrayBuffer.DataView;
	var NATIVE_ARRAY_BUFFER_VIEWS = arrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;
	var TYPED_ARRAY_TAG = arrayBufferViewCore.TYPED_ARRAY_TAG;
	var TypedArray = arrayBufferViewCore.TypedArray;
	var TypedArrayPrototype = arrayBufferViewCore.TypedArrayPrototype;
	var aTypedArrayConstructor = arrayBufferViewCore.aTypedArrayConstructor;
	var isTypedArray = arrayBufferViewCore.isTypedArray;
	var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
	var WRONG_LENGTH = 'Wrong length';

	var fromList = function (C, list) {
	  var index = 0;
	  var length = list.length;
	  var result = new (aTypedArrayConstructor(C))(length);
	  while (length > index) result[index] = list[index++];
	  return result;
	};

	var addGetter = function (it, key) {
	  nativeDefineProperty(it, key, { get: function () {
	    return getInternalState(this)[key];
	  } });
	};

	var isArrayBuffer = function (it) {
	  var klass;
	  return it instanceof ArrayBuffer || (klass = classof(it)) == 'ArrayBuffer' || klass == 'SharedArrayBuffer';
	};

	var isTypedArrayIndex = function (target, key) {
	  return isTypedArray(target)
	    && typeof key != 'symbol'
	    && key in target
	    && String(+key) == String(key);
	};

	var wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key) {
	  return isTypedArrayIndex(target, key = toPrimitive(key, true))
	    ? createPropertyDescriptor(2, target[key])
	    : nativeGetOwnPropertyDescriptor(target, key);
	};

	var wrappedDefineProperty = function defineProperty(target, key, descriptor) {
	  if (isTypedArrayIndex(target, key = toPrimitive(key, true))
	    && isObject(descriptor)
	    && has(descriptor, 'value')
	    && !has(descriptor, 'get')
	    && !has(descriptor, 'set')
	    // TODO: add validation descriptor w/o calling accessors
	    && !descriptor.configurable
	    && (!has(descriptor, 'writable') || descriptor.writable)
	    && (!has(descriptor, 'enumerable') || descriptor.enumerable)
	  ) {
	    target[key] = descriptor.value;
	    return target;
	  } return nativeDefineProperty(target, key, descriptor);
	};

	if (descriptors) {
	  if (!NATIVE_ARRAY_BUFFER_VIEWS) {
	    objectGetOwnPropertyDescriptor.f = wrappedGetOwnPropertyDescriptor;
	    objectDefineProperty.f = wrappedDefineProperty;
	    addGetter(TypedArrayPrototype, 'buffer');
	    addGetter(TypedArrayPrototype, 'byteOffset');
	    addGetter(TypedArrayPrototype, 'byteLength');
	    addGetter(TypedArrayPrototype, 'length');
	  }

	  _export({ target: 'Object', stat: true, forced: !NATIVE_ARRAY_BUFFER_VIEWS }, {
	    getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,
	    defineProperty: wrappedDefineProperty
	  });

	  module.exports = function (TYPE, wrapper, CLAMPED) {
	    var BYTES = TYPE.match(/\d+$/)[0] / 8;
	    var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? 'Clamped' : '') + 'Array';
	    var GETTER = 'get' + TYPE;
	    var SETTER = 'set' + TYPE;
	    var NativeTypedArrayConstructor = global_1[CONSTRUCTOR_NAME];
	    var TypedArrayConstructor = NativeTypedArrayConstructor;
	    var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;
	    var exported = {};

	    var getter = function (that, index) {
	      var data = getInternalState(that);
	      return data.view[GETTER](index * BYTES + data.byteOffset, true);
	    };

	    var setter = function (that, index, value) {
	      var data = getInternalState(that);
	      if (CLAMPED) value = (value = round(value)) < 0 ? 0 : value > 0xFF ? 0xFF : value & 0xFF;
	      data.view[SETTER](index * BYTES + data.byteOffset, value, true);
	    };

	    var addElement = function (that, index) {
	      nativeDefineProperty(that, index, {
	        get: function () {
	          return getter(this, index);
	        },
	        set: function (value) {
	          return setter(this, index, value);
	        },
	        enumerable: true
	      });
	    };

	    if (!NATIVE_ARRAY_BUFFER_VIEWS) {
	      TypedArrayConstructor = wrapper(function (that, data, offset, $length) {
	        anInstance(that, TypedArrayConstructor, CONSTRUCTOR_NAME);
	        var index = 0;
	        var byteOffset = 0;
	        var buffer, byteLength, length;
	        if (!isObject(data)) {
	          length = toIndex(data);
	          byteLength = length * BYTES;
	          buffer = new ArrayBuffer(byteLength);
	        } else if (isArrayBuffer(data)) {
	          buffer = data;
	          byteOffset = toOffset(offset, BYTES);
	          var $len = data.byteLength;
	          if ($length === undefined) {
	            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
	            byteLength = $len - byteOffset;
	            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
	          } else {
	            byteLength = toLength($length) * BYTES;
	            if (byteLength + byteOffset > $len) throw RangeError(WRONG_LENGTH);
	          }
	          length = byteLength / BYTES;
	        } else if (isTypedArray(data)) {
	          return fromList(TypedArrayConstructor, data);
	        } else {
	          return typedArrayFrom.call(TypedArrayConstructor, data);
	        }
	        setInternalState(that, {
	          buffer: buffer,
	          byteOffset: byteOffset,
	          byteLength: byteLength,
	          length: length,
	          view: new DataView(buffer)
	        });
	        while (index < length) addElement(that, index++);
	      });

	      if (objectSetPrototypeOf) objectSetPrototypeOf(TypedArrayConstructor, TypedArray);
	      TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = objectCreate(TypedArrayPrototype);
	    } else if (typedArrayConstructorsRequireWrappers) {
	      TypedArrayConstructor = wrapper(function (dummy, data, typedArrayOffset, $length) {
	        anInstance(dummy, TypedArrayConstructor, CONSTRUCTOR_NAME);
	        return inheritIfRequired(function () {
	          if (!isObject(data)) return new NativeTypedArrayConstructor(toIndex(data));
	          if (isArrayBuffer(data)) return $length !== undefined
	            ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES), $length)
	            : typedArrayOffset !== undefined
	              ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES))
	              : new NativeTypedArrayConstructor(data);
	          if (isTypedArray(data)) return fromList(TypedArrayConstructor, data);
	          return typedArrayFrom.call(TypedArrayConstructor, data);
	        }(), dummy, TypedArrayConstructor);
	      });

	      if (objectSetPrototypeOf) objectSetPrototypeOf(TypedArrayConstructor, TypedArray);
	      forEach(getOwnPropertyNames(NativeTypedArrayConstructor), function (key) {
	        if (!(key in TypedArrayConstructor)) {
	          createNonEnumerableProperty(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);
	        }
	      });
	      TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;
	    }

	    if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {
	      createNonEnumerableProperty(TypedArrayConstructorPrototype, 'constructor', TypedArrayConstructor);
	    }

	    if (TYPED_ARRAY_TAG) {
	      createNonEnumerableProperty(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);
	    }

	    exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;

	    _export({
	      global: true, forced: TypedArrayConstructor != NativeTypedArrayConstructor, sham: !NATIVE_ARRAY_BUFFER_VIEWS
	    }, exported);

	    if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {
	      createNonEnumerableProperty(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);
	    }

	    if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {
	      createNonEnumerableProperty(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);
	    }

	    setSpecies(CONSTRUCTOR_NAME);
	  };
	} else module.exports = function () { /* empty */ };
	});

	// `Float64Array` constructor
	// https://tc39.github.io/ecma262/#sec-typedarray-objects
	typedArrayConstructor('Float64', function (init) {
	  return function Float64Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	var min$5 = Math.min;

	// `Array.prototype.copyWithin` method implementation
	// https://tc39.github.io/ecma262/#sec-array.prototype.copywithin
	var arrayCopyWithin = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
	  var O = toObject(this);
	  var len = toLength(O.length);
	  var to = toAbsoluteIndex(target, len);
	  var from = toAbsoluteIndex(start, len);
	  var end = arguments.length > 2 ? arguments[2] : undefined;
	  var count = min$5((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
	  var inc = 1;
	  if (from < to && to < from + count) {
	    inc = -1;
	    from += count - 1;
	    to += count - 1;
	  }
	  while (count-- > 0) {
	    if (from in O) O[to] = O[from];
	    else delete O[to];
	    to += inc;
	    from += inc;
	  } return O;
	};

	var aTypedArray$1 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$1 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.copyWithin` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.copywithin
	exportTypedArrayMethod$1('copyWithin', function copyWithin(target, start /* , end */) {
	  return arrayCopyWithin.call(aTypedArray$1(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
	});

	var $every = arrayIteration.every;

	var aTypedArray$2 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$2 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.every` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.every
	exportTypedArrayMethod$2('every', function every(callbackfn /* , thisArg */) {
	  return $every(aTypedArray$2(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	});

	var aTypedArray$3 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$3 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.fill` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.fill
	// eslint-disable-next-line no-unused-vars
	exportTypedArrayMethod$3('fill', function fill(value /* , start, end */) {
	  return arrayFill.apply(aTypedArray$3(this), arguments);
	});

	var $filter$1 = arrayIteration.filter;


	var aTypedArray$4 = arrayBufferViewCore.aTypedArray;
	var aTypedArrayConstructor$2 = arrayBufferViewCore.aTypedArrayConstructor;
	var exportTypedArrayMethod$4 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.filter` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.filter
	exportTypedArrayMethod$4('filter', function filter(callbackfn /* , thisArg */) {
	  var list = $filter$1(aTypedArray$4(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  var C = speciesConstructor(this, this.constructor);
	  var index = 0;
	  var length = list.length;
	  var result = new (aTypedArrayConstructor$2(C))(length);
	  while (length > index) result[index] = list[index++];
	  return result;
	});

	var $find = arrayIteration.find;

	var aTypedArray$5 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$5 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.find` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.find
	exportTypedArrayMethod$5('find', function find(predicate /* , thisArg */) {
	  return $find(aTypedArray$5(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	});

	var $findIndex = arrayIteration.findIndex;

	var aTypedArray$6 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$6 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.findIndex` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.findindex
	exportTypedArrayMethod$6('findIndex', function findIndex(predicate /* , thisArg */) {
	  return $findIndex(aTypedArray$6(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	});

	var $forEach$2 = arrayIteration.forEach;

	var aTypedArray$7 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$7 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.forEach` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.foreach
	exportTypedArrayMethod$7('forEach', function forEach(callbackfn /* , thisArg */) {
	  $forEach$2(aTypedArray$7(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	});

	var $includes = arrayIncludes.includes;

	var aTypedArray$8 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$8 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.includes` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.includes
	exportTypedArrayMethod$8('includes', function includes(searchElement /* , fromIndex */) {
	  return $includes(aTypedArray$8(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	});

	var $indexOf$1 = arrayIncludes.indexOf;

	var aTypedArray$9 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$9 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.indexOf` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.indexof
	exportTypedArrayMethod$9('indexOf', function indexOf(searchElement /* , fromIndex */) {
	  return $indexOf$1(aTypedArray$9(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	});

	var ITERATOR$6 = wellKnownSymbol('iterator');
	var Uint8Array = global_1.Uint8Array;
	var arrayValues = es_array_iterator.values;
	var arrayKeys = es_array_iterator.keys;
	var arrayEntries = es_array_iterator.entries;
	var aTypedArray$a = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$a = arrayBufferViewCore.exportTypedArrayMethod;
	var nativeTypedArrayIterator = Uint8Array && Uint8Array.prototype[ITERATOR$6];

	var CORRECT_ITER_NAME = !!nativeTypedArrayIterator
	  && (nativeTypedArrayIterator.name == 'values' || nativeTypedArrayIterator.name == undefined);

	var typedArrayValues = function values() {
	  return arrayValues.call(aTypedArray$a(this));
	};

	// `%TypedArray%.prototype.entries` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.entries
	exportTypedArrayMethod$a('entries', function entries() {
	  return arrayEntries.call(aTypedArray$a(this));
	});
	// `%TypedArray%.prototype.keys` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.keys
	exportTypedArrayMethod$a('keys', function keys() {
	  return arrayKeys.call(aTypedArray$a(this));
	});
	// `%TypedArray%.prototype.values` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.values
	exportTypedArrayMethod$a('values', typedArrayValues, !CORRECT_ITER_NAME);
	// `%TypedArray%.prototype[@@iterator]` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype-@@iterator
	exportTypedArrayMethod$a(ITERATOR$6, typedArrayValues, !CORRECT_ITER_NAME);

	var aTypedArray$b = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$b = arrayBufferViewCore.exportTypedArrayMethod;
	var $join = [].join;

	// `%TypedArray%.prototype.join` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.join
	// eslint-disable-next-line no-unused-vars
	exportTypedArrayMethod$b('join', function join(separator) {
	  return $join.apply(aTypedArray$b(this), arguments);
	});

	var min$6 = Math.min;
	var nativeLastIndexOf = [].lastIndexOf;
	var NEGATIVE_ZERO$1 = !!nativeLastIndexOf && 1 / [1].lastIndexOf(1, -0) < 0;
	var STRICT_METHOD$5 = arrayMethodIsStrict('lastIndexOf');
	// For preventing possible almost infinite loop in non-standard implementations, test the forward version of the method
	var USES_TO_LENGTH$7 = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });
	var FORCED$3 = NEGATIVE_ZERO$1 || !STRICT_METHOD$5 || !USES_TO_LENGTH$7;

	// `Array.prototype.lastIndexOf` method implementation
	// https://tc39.github.io/ecma262/#sec-array.prototype.lastindexof
	var arrayLastIndexOf = FORCED$3 ? function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
	  // convert -0 to +0
	  if (NEGATIVE_ZERO$1) return nativeLastIndexOf.apply(this, arguments) || 0;
	  var O = toIndexedObject(this);
	  var length = toLength(O.length);
	  var index = length - 1;
	  if (arguments.length > 1) index = min$6(index, toInteger(arguments[1]));
	  if (index < 0) index = length + index;
	  for (;index >= 0; index--) if (index in O && O[index] === searchElement) return index || 0;
	  return -1;
	} : nativeLastIndexOf;

	var aTypedArray$c = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$c = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.lastIndexOf` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.lastindexof
	// eslint-disable-next-line no-unused-vars
	exportTypedArrayMethod$c('lastIndexOf', function lastIndexOf(searchElement /* , fromIndex */) {
	  return arrayLastIndexOf.apply(aTypedArray$c(this), arguments);
	});

	var $map$1 = arrayIteration.map;


	var aTypedArray$d = arrayBufferViewCore.aTypedArray;
	var aTypedArrayConstructor$3 = arrayBufferViewCore.aTypedArrayConstructor;
	var exportTypedArrayMethod$d = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.map` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.map
	exportTypedArrayMethod$d('map', function map(mapfn /* , thisArg */) {
	  return $map$1(aTypedArray$d(this), mapfn, arguments.length > 1 ? arguments[1] : undefined, function (O, length) {
	    return new (aTypedArrayConstructor$3(speciesConstructor(O, O.constructor)))(length);
	  });
	});

	// `Array.prototype.{ reduce, reduceRight }` methods implementation
	var createMethod$4 = function (IS_RIGHT) {
	  return function (that, callbackfn, argumentsLength, memo) {
	    aFunction$1(callbackfn);
	    var O = toObject(that);
	    var self = indexedObject(O);
	    var length = toLength(O.length);
	    var index = IS_RIGHT ? length - 1 : 0;
	    var i = IS_RIGHT ? -1 : 1;
	    if (argumentsLength < 2) while (true) {
	      if (index in self) {
	        memo = self[index];
	        index += i;
	        break;
	      }
	      index += i;
	      if (IS_RIGHT ? index < 0 : length <= index) {
	        throw TypeError('Reduce of empty array with no initial value');
	      }
	    }
	    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {
	      memo = callbackfn(memo, self[index], index, O);
	    }
	    return memo;
	  };
	};

	var arrayReduce = {
	  // `Array.prototype.reduce` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.reduce
	  left: createMethod$4(false),
	  // `Array.prototype.reduceRight` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright
	  right: createMethod$4(true)
	};

	var $reduce = arrayReduce.left;

	var aTypedArray$e = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$e = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.reduce` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reduce
	exportTypedArrayMethod$e('reduce', function reduce(callbackfn /* , initialValue */) {
	  return $reduce(aTypedArray$e(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
	});

	var $reduceRight = arrayReduce.right;

	var aTypedArray$f = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$f = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.reduceRicht` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reduceright
	exportTypedArrayMethod$f('reduceRight', function reduceRight(callbackfn /* , initialValue */) {
	  return $reduceRight(aTypedArray$f(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
	});

	var aTypedArray$g = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$g = arrayBufferViewCore.exportTypedArrayMethod;
	var floor$3 = Math.floor;

	// `%TypedArray%.prototype.reverse` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reverse
	exportTypedArrayMethod$g('reverse', function reverse() {
	  var that = this;
	  var length = aTypedArray$g(that).length;
	  var middle = floor$3(length / 2);
	  var index = 0;
	  var value;
	  while (index < middle) {
	    value = that[index];
	    that[index++] = that[--length];
	    that[length] = value;
	  } return that;
	});

	var aTypedArray$h = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$h = arrayBufferViewCore.exportTypedArrayMethod;

	var FORCED$4 = fails(function () {
	  // eslint-disable-next-line no-undef
	  new Int8Array(1).set({});
	});

	// `%TypedArray%.prototype.set` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.set
	exportTypedArrayMethod$h('set', function set(arrayLike /* , offset */) {
	  aTypedArray$h(this);
	  var offset = toOffset(arguments.length > 1 ? arguments[1] : undefined, 1);
	  var length = this.length;
	  var src = toObject(arrayLike);
	  var len = toLength(src.length);
	  var index = 0;
	  if (len + offset > length) throw RangeError('Wrong length');
	  while (index < len) this[offset + index] = src[index++];
	}, FORCED$4);

	var aTypedArray$i = arrayBufferViewCore.aTypedArray;
	var aTypedArrayConstructor$4 = arrayBufferViewCore.aTypedArrayConstructor;
	var exportTypedArrayMethod$i = arrayBufferViewCore.exportTypedArrayMethod;
	var $slice = [].slice;

	var FORCED$5 = fails(function () {
	  // eslint-disable-next-line no-undef
	  new Int8Array(1).slice();
	});

	// `%TypedArray%.prototype.slice` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.slice
	exportTypedArrayMethod$i('slice', function slice(start, end) {
	  var list = $slice.call(aTypedArray$i(this), start, end);
	  var C = speciesConstructor(this, this.constructor);
	  var index = 0;
	  var length = list.length;
	  var result = new (aTypedArrayConstructor$4(C))(length);
	  while (length > index) result[index] = list[index++];
	  return result;
	}, FORCED$5);

	var $some$1 = arrayIteration.some;

	var aTypedArray$j = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$j = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.some` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.some
	exportTypedArrayMethod$j('some', function some(callbackfn /* , thisArg */) {
	  return $some$1(aTypedArray$j(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	});

	var aTypedArray$k = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$k = arrayBufferViewCore.exportTypedArrayMethod;
	var $sort = [].sort;

	// `%TypedArray%.prototype.sort` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.sort
	exportTypedArrayMethod$k('sort', function sort(comparefn) {
	  return $sort.call(aTypedArray$k(this), comparefn);
	});

	var aTypedArray$l = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$l = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.subarray` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.subarray
	exportTypedArrayMethod$l('subarray', function subarray(begin, end) {
	  var O = aTypedArray$l(this);
	  var length = O.length;
	  var beginIndex = toAbsoluteIndex(begin, length);
	  return new (speciesConstructor(O, O.constructor))(
	    O.buffer,
	    O.byteOffset + beginIndex * O.BYTES_PER_ELEMENT,
	    toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - beginIndex)
	  );
	});

	var Int8Array$3 = global_1.Int8Array;
	var aTypedArray$m = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$m = arrayBufferViewCore.exportTypedArrayMethod;
	var $toLocaleString = [].toLocaleString;
	var $slice$1 = [].slice;

	// iOS Safari 6.x fails here
	var TO_LOCALE_STRING_BUG = !!Int8Array$3 && fails(function () {
	  $toLocaleString.call(new Int8Array$3(1));
	});

	var FORCED$6 = fails(function () {
	  return [1, 2].toLocaleString() != new Int8Array$3([1, 2]).toLocaleString();
	}) || !fails(function () {
	  Int8Array$3.prototype.toLocaleString.call([1, 2]);
	});

	// `%TypedArray%.prototype.toLocaleString` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tolocalestring
	exportTypedArrayMethod$m('toLocaleString', function toLocaleString() {
	  return $toLocaleString.apply(TO_LOCALE_STRING_BUG ? $slice$1.call(aTypedArray$m(this)) : aTypedArray$m(this), arguments);
	}, FORCED$6);

	var exportTypedArrayMethod$n = arrayBufferViewCore.exportTypedArrayMethod;



	var Uint8Array$1 = global_1.Uint8Array;
	var Uint8ArrayPrototype = Uint8Array$1 && Uint8Array$1.prototype || {};
	var arrayToString = [].toString;
	var arrayJoin = [].join;

	if (fails(function () { arrayToString.call({}); })) {
	  arrayToString = function toString() {
	    return arrayJoin.call(this);
	  };
	}

	var IS_NOT_ARRAY_METHOD = Uint8ArrayPrototype.toString != arrayToString;

	// `%TypedArray%.prototype.toString` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tostring
	exportTypedArrayMethod$n('toString', arrayToString, IS_NOT_ARRAY_METHOD);

	function extent (values, valueof) {
	  var min;
	  var max;

	  if (valueof === undefined) {
	    var _iterator = _createForOfIteratorHelper(values),
	        _step;

	    try {
	      for (_iterator.s(); !(_step = _iterator.n()).done;) {
	        var value = _step.value;

	        if (value != null) {
	          if (min === undefined) {
	            if (value >= value) min = max = value;
	          } else {
	            if (min > value) min = value;
	            if (max < value) max = value;
	          }
	        }
	      }
	    } catch (err) {
	      _iterator.e(err);
	    } finally {
	      _iterator.f();
	    }
	  } else {
	    var index = -1;

	    var _iterator2 = _createForOfIteratorHelper(values),
	        _step2;

	    try {
	      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	        var _value = _step2.value;

	        if ((_value = valueof(_value, ++index, values)) != null) {
	          if (min === undefined) {
	            if (_value >= _value) min = max = _value;
	          } else {
	            if (min > _value) min = _value;
	            if (max < _value) max = _value;
	          }
	        }
	      }
	    } catch (err) {
	      _iterator2.e(err);
	    } finally {
	      _iterator2.f();
	    }
	  }

	  return [min, max];
	}

	function identity$1 (x) {
	  return x;
	}

	function group(values) {
	  for (var _len = arguments.length, keys = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    keys[_key - 1] = arguments[_key];
	  }

	  return nest(values, identity$1, identity$1, keys);
	}

	function nest(values, map, reduce, keys) {
	  return function regroup(values, i) {
	    if (i >= keys.length) return reduce(values);
	    var groups = new Map();
	    var keyof = keys[i++];
	    var index = -1;

	    var _iterator = _createForOfIteratorHelper(values),
	        _step;

	    try {
	      for (_iterator.s(); !(_step = _iterator.n()).done;) {
	        var value = _step.value;
	        var key = keyof(value, ++index, values);

	        var _group = groups.get(key);

	        if (_group) _group.push(value);else groups.set(key, [value]);
	      }
	    } catch (err) {
	      _iterator.e(err);
	    } finally {
	      _iterator.f();
	    }

	    var _iterator2 = _createForOfIteratorHelper(groups),
	        _step2;

	    try {
	      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	        var _step2$value = _slicedToArray(_step2.value, 2),
	            _key7 = _step2$value[0],
	            _values = _step2$value[1];

	        groups.set(_key7, regroup(_values, i));
	      }
	    } catch (err) {
	      _iterator2.e(err);
	    } finally {
	      _iterator2.f();
	    }

	    return map(groups);
	  }(values, 0);
	}

	var nativeReverse = [].reverse;
	var test$2 = [1, 2];

	// `Array.prototype.reverse` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.reverse
	// fix for Safari 12.0 bug
	// https://bugs.webkit.org/show_bug.cgi?id=188794
	_export({ target: 'Array', proto: true, forced: String(test$2) === String(test$2.reverse()) }, {
	  reverse: function reverse() {
	    // eslint-disable-next-line no-self-assign
	    if (isArray(this)) this.length = this.length;
	    return nativeReverse.call(this);
	  }
	});

	function max$4(values, valueof) {
	  var max;

	  if (valueof === undefined) {
	    var _iterator = _createForOfIteratorHelper(values),
	        _step;

	    try {
	      for (_iterator.s(); !(_step = _iterator.n()).done;) {
	        var value = _step.value;

	        if (value != null && (max < value || max === undefined && value >= value)) {
	          max = value;
	        }
	      }
	    } catch (err) {
	      _iterator.e(err);
	    } finally {
	      _iterator.f();
	    }
	  } else {
	    var index = -1;

	    var _iterator2 = _createForOfIteratorHelper(values),
	        _step2;

	    try {
	      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	        var _value = _step2.value;

	        if ((_value = valueof(_value, ++index, values)) != null && (max < _value || max === undefined && _value >= _value)) {
	          max = _value;
	        }
	      }
	    } catch (err) {
	      _iterator2.e(err);
	    } finally {
	      _iterator2.f();
	    }
	  }

	  return max;
	}

	function min$7(values, valueof) {
	  var min;

	  if (valueof === undefined) {
	    var _iterator = _createForOfIteratorHelper(values),
	        _step;

	    try {
	      for (_iterator.s(); !(_step = _iterator.n()).done;) {
	        var value = _step.value;

	        if (value != null && (min > value || min === undefined && value >= value)) {
	          min = value;
	        }
	      }
	    } catch (err) {
	      _iterator.e(err);
	    } finally {
	      _iterator.f();
	    }
	  } else {
	    var index = -1;

	    var _iterator2 = _createForOfIteratorHelper(values),
	        _step2;

	    try {
	      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	        var _value = _step2.value;

	        if ((_value = valueof(_value, ++index, values)) != null && (min > _value || min === undefined && _value >= _value)) {
	          min = _value;
	        }
	      }
	    } catch (err) {
	      _iterator2.e(err);
	    } finally {
	      _iterator2.f();
	    }
	  }

	  return min;
	}

	function mean(values, valueof) {
	  var count = 0;
	  var sum = 0;

	  if (valueof === undefined) {
	    var _iterator = _createForOfIteratorHelper(values),
	        _step;

	    try {
	      for (_iterator.s(); !(_step = _iterator.n()).done;) {
	        var value = _step.value;

	        if (value != null && (value = +value) >= value) {
	          ++count, sum += value;
	        }
	      }
	    } catch (err) {
	      _iterator.e(err);
	    } finally {
	      _iterator.f();
	    }
	  } else {
	    var index = -1;

	    var _iterator2 = _createForOfIteratorHelper(values),
	        _step2;

	    try {
	      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	        var _value = _step2.value;

	        if ((_value = valueof(_value, ++index, values)) != null && (_value = +_value) >= _value) {
	          ++count, sum += _value;
	        }
	      }
	    } catch (err) {
	      _iterator2.e(err);
	    } finally {
	      _iterator2.f();
	    }
	  }

	  if (count) return sum / count;
	}

	var non = '\u200B\u0085\u180E';

	// check that a method works with the correct list
	// of whitespaces and has a correct name
	var stringTrimForced = function (METHOD_NAME) {
	  return fails(function () {
	    return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;
	  });
	};

	var $trim = stringTrim.trim;


	// `String.prototype.trim` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.trim
	_export({ target: 'String', proto: true, forced: stringTrimForced('trim') }, {
	  trim: function trim() {
	    return $trim(this);
	  }
	});

	var noop$1 = {
	  value: function value() {}
	};

	function dispatch$1() {
	  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
	    if (!(t = arguments[i] + "") || t in _ || /[\s.]/.test(t)) throw new Error("illegal type: " + t);
	    _[t] = [];
	  }

	  return new Dispatch$1(_);
	}

	function Dispatch$1(_) {
	  this._ = _;
	}

	function parseTypenames(typenames, types) {
	  return typenames.trim().split(/^|\s+/).map(function (t) {
	    var name = "",
	        i = t.indexOf(".");
	    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
	    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
	    return {
	      type: t,
	      name: name
	    };
	  });
	}

	Dispatch$1.prototype = dispatch$1.prototype = {
	  constructor: Dispatch$1,
	  on: function on(typename, callback) {
	    var _ = this._,
	        T = parseTypenames(typename + "", _),
	        t,
	        i = -1,
	        n = T.length; // If no callback was specified, return the callback of the given type and name.

	    if (arguments.length < 2) {
	      while (++i < n) {
	        if ((t = (typename = T[i]).type) && (t = get$2(_[t], typename.name))) return t;
	      }

	      return;
	    } // If a type was specified, set the callback for the given type and name.
	    // Otherwise, if a null callback was specified, remove callbacks of the given name.


	    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);

	    while (++i < n) {
	      if (t = (typename = T[i]).type) _[t] = set$3(_[t], typename.name, callback);else if (callback == null) for (t in _) {
	        _[t] = set$3(_[t], typename.name, null);
	      }
	    }

	    return this;
	  },
	  copy: function copy() {
	    var copy = {},
	        _ = this._;

	    for (var t in _) {
	      copy[t] = _[t].slice();
	    }

	    return new Dispatch$1(copy);
	  },
	  call: function call(type, that) {
	    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) {
	      args[i] = arguments[i + 2];
	    }
	    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);

	    for (t = this._[type], i = 0, n = t.length; i < n; ++i) {
	      t[i].value.apply(that, args);
	    }
	  },
	  apply: function apply(type, that, args) {
	    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);

	    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) {
	      t[i].value.apply(that, args);
	    }
	  }
	};

	function get$2(type, name) {
	  for (var i = 0, n = type.length, c; i < n; ++i) {
	    if ((c = type[i]).name === name) {
	      return c.value;
	    }
	  }
	}

	function set$3(type, name, callback) {
	  for (var i = 0, n = type.length; i < n; ++i) {
	    if (type[i].name === name) {
	      type[i] = noop$1, type = type.slice(0, i).concat(type.slice(i + 1));
	      break;
	    }
	  }

	  if (callback != null) type.push({
	    name: name,
	    value: callback
	  });
	  return type;
	}

	var xhtml = "http://www.w3.org/1999/xhtml";
	var namespaces = {
	  svg: "http://www.w3.org/2000/svg",
	  xhtml: xhtml,
	  xlink: "http://www.w3.org/1999/xlink",
	  xml: "http://www.w3.org/XML/1998/namespace",
	  xmlns: "http://www.w3.org/2000/xmlns/"
	};

	function namespace (name) {
	  var prefix = name += "",
	      i = prefix.indexOf(":");
	  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
	  return namespaces.hasOwnProperty(prefix) ? {
	    space: namespaces[prefix],
	    local: name
	  } : name; // eslint-disable-line no-prototype-builtins
	}

	function creatorInherit(name) {
	  return function () {
	    var document = this.ownerDocument,
	        uri = this.namespaceURI;
	    return uri === xhtml && document.documentElement.namespaceURI === xhtml ? document.createElement(name) : document.createElementNS(uri, name);
	  };
	}

	function creatorFixed(fullname) {
	  return function () {
	    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
	  };
	}

	function creator (name) {
	  var fullname = namespace(name);
	  return (fullname.local ? creatorFixed : creatorInherit)(fullname);
	}

	function none() {}

	function selector (selector) {
	  return selector == null ? none : function () {
	    return this.querySelector(selector);
	  };
	}

	function selection_select (select) {
	  if (typeof select !== "function") select = selector(select);

	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
	      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
	        if ("__data__" in node) subnode.__data__ = node.__data__;
	        subgroup[i] = subnode;
	      }
	    }
	  }

	  return new Selection(subgroups, this._parents);
	}

	function array (x) {
	  return _typeof(x) === "object" && "length" in x ? x // Array, TypedArray, NodeList, array-like
	  : Array.from(x); // Map, Set, iterable, string, or anything else
	}

	function empty$1() {
	  return [];
	}

	function selectorAll (selector) {
	  return selector == null ? empty$1 : function () {
	    return this.querySelectorAll(selector);
	  };
	}

	function arrayAll(select) {
	  return function () {
	    var group = select.apply(this, arguments);
	    return group == null ? [] : array(group);
	  };
	}

	function selection_selectAll (select) {
	  if (typeof select === "function") select = arrayAll(select);else select = selectorAll(select);

	  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        subgroups.push(select.call(node, node.__data__, i, group));
	        parents.push(node);
	      }
	    }
	  }

	  return new Selection(subgroups, parents);
	}

	var $find$1 = arrayIteration.find;



	var FIND = 'find';
	var SKIPS_HOLES = true;

	var USES_TO_LENGTH$8 = arrayMethodUsesToLength(FIND);

	// Shouldn't skip holes
	if (FIND in []) Array(1)[FIND](function () { SKIPS_HOLES = false; });

	// `Array.prototype.find` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.find
	_export({ target: 'Array', proto: true, forced: SKIPS_HOLES || !USES_TO_LENGTH$8 }, {
	  find: function find(callbackfn /* , that = undefined */) {
	    return $find$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables(FIND);

	function matcher (selector) {
	  return function () {
	    return this.matches(selector);
	  };
	}
	function childMatcher(selector) {
	  return function (node) {
	    return node.matches(selector);
	  };
	}

	var find = Array.prototype.find;

	function childFind(match) {
	  return function () {
	    return find.call(this.children, match);
	  };
	}

	function childFirst() {
	  return this.firstElementChild;
	}

	function selection_selectChild (match) {
	  return this.select(match == null ? childFirst : childFind(typeof match === "function" ? match : childMatcher(match)));
	}

	var filter = Array.prototype.filter;

	function children$1() {
	  return this.children;
	}

	function childrenFilter(match) {
	  return function () {
	    return filter.call(this.children, match);
	  };
	}

	function selection_selectChildren (match) {
	  return this.selectAll(match == null ? children$1 : childrenFilter(typeof match === "function" ? match : childMatcher(match)));
	}

	function selection_filter (match) {
	  if (typeof match !== "function") match = matcher(match);

	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
	      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
	        subgroup.push(node);
	      }
	    }
	  }

	  return new Selection(subgroups, this._parents);
	}

	function sparse (update) {
	  return new Array(update.length);
	}

	function selection_enter () {
	  return new Selection(this._enter || this._groups.map(sparse), this._parents);
	}
	function EnterNode(parent, datum) {
	  this.ownerDocument = parent.ownerDocument;
	  this.namespaceURI = parent.namespaceURI;
	  this._next = null;
	  this._parent = parent;
	  this.__data__ = datum;
	}
	EnterNode.prototype = {
	  constructor: EnterNode,
	  appendChild: function appendChild(child) {
	    return this._parent.insertBefore(child, this._next);
	  },
	  insertBefore: function insertBefore(child, next) {
	    return this._parent.insertBefore(child, next);
	  },
	  querySelector: function querySelector(selector) {
	    return this._parent.querySelector(selector);
	  },
	  querySelectorAll: function querySelectorAll(selector) {
	    return this._parent.querySelectorAll(selector);
	  }
	};

	function constant (x) {
	  return function () {
	    return x;
	  };
	}

	function bindIndex(parent, group, enter, update, exit, data) {
	  var i = 0,
	      node,
	      groupLength = group.length,
	      dataLength = data.length; // Put any non-null nodes that fit into update.
	  // Put any null nodes into enter.
	  // Put any remaining data into enter.

	  for (; i < dataLength; ++i) {
	    if (node = group[i]) {
	      node.__data__ = data[i];
	      update[i] = node;
	    } else {
	      enter[i] = new EnterNode(parent, data[i]);
	    }
	  } // Put any non-null nodes that donât fit into exit.


	  for (; i < groupLength; ++i) {
	    if (node = group[i]) {
	      exit[i] = node;
	    }
	  }
	}

	function bindKey(parent, group, enter, update, exit, data, key) {
	  var i,
	      node,
	      nodeByKeyValue = new Map(),
	      groupLength = group.length,
	      dataLength = data.length,
	      keyValues = new Array(groupLength),
	      keyValue; // Compute the key for each node.
	  // If multiple nodes have the same key, the duplicates are added to exit.

	  for (i = 0; i < groupLength; ++i) {
	    if (node = group[i]) {
	      keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + "";

	      if (nodeByKeyValue.has(keyValue)) {
	        exit[i] = node;
	      } else {
	        nodeByKeyValue.set(keyValue, node);
	      }
	    }
	  } // Compute the key for each datum.
	  // If there a node associated with this key, join and add it to update.
	  // If there is not (or the key is a duplicate), add it to enter.


	  for (i = 0; i < dataLength; ++i) {
	    keyValue = key.call(parent, data[i], i, data) + "";

	    if (node = nodeByKeyValue.get(keyValue)) {
	      update[i] = node;
	      node.__data__ = data[i];
	      nodeByKeyValue.delete(keyValue);
	    } else {
	      enter[i] = new EnterNode(parent, data[i]);
	    }
	  } // Add any remaining nodes that were not bound to data to exit.


	  for (i = 0; i < groupLength; ++i) {
	    if ((node = group[i]) && nodeByKeyValue.get(keyValues[i]) === node) {
	      exit[i] = node;
	    }
	  }
	}

	function datum(node) {
	  return node.__data__;
	}

	function selection_data (value, key) {
	  if (!arguments.length) return Array.from(this, datum);
	  var bind = key ? bindKey : bindIndex,
	      parents = this._parents,
	      groups = this._groups;
	  if (typeof value !== "function") value = constant(value);

	  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
	    var parent = parents[j],
	        group = groups[j],
	        groupLength = group.length,
	        data = array(value.call(parent, parent && parent.__data__, j, parents)),
	        dataLength = data.length,
	        enterGroup = enter[j] = new Array(dataLength),
	        updateGroup = update[j] = new Array(dataLength),
	        exitGroup = exit[j] = new Array(groupLength);
	    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key); // Now connect the enter nodes to their following update node, such that
	    // appendChild can insert the materialized enter node before this node,
	    // rather than at the end of the parent node.

	    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
	      if (previous = enterGroup[i0]) {
	        if (i0 >= i1) i1 = i0 + 1;

	        while (!(next = updateGroup[i1]) && ++i1 < dataLength) {
	        }

	        previous._next = next || null;
	      }
	    }
	  }

	  update = new Selection(update, parents);
	  update._enter = enter;
	  update._exit = exit;
	  return update;
	}

	function selection_exit () {
	  return new Selection(this._exit || this._groups.map(sparse), this._parents);
	}

	function selection_join (onenter, onupdate, onexit) {
	  var enter = this.enter(),
	      update = this,
	      exit = this.exit();
	  enter = typeof onenter === "function" ? onenter(enter) : enter.append(onenter + "");
	  if (onupdate != null) update = onupdate(update);
	  if (onexit == null) exit.remove();else onexit(exit);
	  return enter && update ? enter.merge(update).order() : update;
	}

	function selection_merge (selection) {
	  if (!(selection instanceof Selection)) throw new Error("invalid merge");

	  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
	    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
	      if (node = group0[i] || group1[i]) {
	        merge[i] = node;
	      }
	    }
	  }

	  for (; j < m0; ++j) {
	    merges[j] = groups0[j];
	  }

	  return new Selection(merges, this._parents);
	}

	function selection_order () {
	  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
	    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
	      if (node = group[i]) {
	        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
	        next = node;
	      }
	    }
	  }

	  return this;
	}

	function selection_sort (compare) {
	  if (!compare) compare = ascending;

	  function compareNode(a, b) {
	    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
	  }

	  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        sortgroup[i] = node;
	      }
	    }

	    sortgroup.sort(compareNode);
	  }

	  return new Selection(sortgroups, this._parents).order();
	}

	function ascending(a, b) {
	  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
	}

	function selection_call () {
	  var callback = arguments[0];
	  arguments[0] = this;
	  callback.apply(null, arguments);
	  return this;
	}

	function selection_nodes () {
	  return Array.from(this);
	}

	function selection_node () {
	  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
	    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
	      var node = group[i];
	      if (node) return node;
	    }
	  }

	  return null;
	}

	function selection_size () {
	  var size = 0;

	  var _iterator = _createForOfIteratorHelper(this),
	      _step;

	  try {
	    for (_iterator.s(); !(_step = _iterator.n()).done;) {
	      var node = _step.value;
	      ++size;
	    } // eslint-disable-line no-unused-vars

	  } catch (err) {
	    _iterator.e(err);
	  } finally {
	    _iterator.f();
	  }

	  return size;
	}

	function selection_empty () {
	  return !this.node();
	}

	function selection_each (callback) {
	  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
	    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
	      if (node = group[i]) callback.call(node, node.__data__, i, group);
	    }
	  }

	  return this;
	}

	function attrRemove(name) {
	  return function () {
	    this.removeAttribute(name);
	  };
	}

	function attrRemoveNS(fullname) {
	  return function () {
	    this.removeAttributeNS(fullname.space, fullname.local);
	  };
	}

	function attrConstant(name, value) {
	  return function () {
	    this.setAttribute(name, value);
	  };
	}

	function attrConstantNS(fullname, value) {
	  return function () {
	    this.setAttributeNS(fullname.space, fullname.local, value);
	  };
	}

	function attrFunction(name, value) {
	  return function () {
	    var v = value.apply(this, arguments);
	    if (v == null) this.removeAttribute(name);else this.setAttribute(name, v);
	  };
	}

	function attrFunctionNS(fullname, value) {
	  return function () {
	    var v = value.apply(this, arguments);
	    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);else this.setAttributeNS(fullname.space, fullname.local, v);
	  };
	}

	function selection_attr (name, value) {
	  var fullname = namespace(name);

	  if (arguments.length < 2) {
	    var node = this.node();
	    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
	  }

	  return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
	}

	function defaultView (node) {
	  return node.ownerDocument && node.ownerDocument.defaultView || // node is a Node
	  node.document && node // node is a Window
	  || node.defaultView; // node is a Document
	}

	function styleRemove(name) {
	  return function () {
	    this.style.removeProperty(name);
	  };
	}

	function styleConstant(name, value, priority) {
	  return function () {
	    this.style.setProperty(name, value, priority);
	  };
	}

	function styleFunction(name, value, priority) {
	  return function () {
	    var v = value.apply(this, arguments);
	    if (v == null) this.style.removeProperty(name);else this.style.setProperty(name, v, priority);
	  };
	}

	function selection_style (name, value, priority) {
	  return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
	}
	function styleValue(node, name) {
	  return node.style.getPropertyValue(name) || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);
	}

	function propertyRemove(name) {
	  return function () {
	    delete this[name];
	  };
	}

	function propertyConstant(name, value) {
	  return function () {
	    this[name] = value;
	  };
	}

	function propertyFunction(name, value) {
	  return function () {
	    var v = value.apply(this, arguments);
	    if (v == null) delete this[name];else this[name] = v;
	  };
	}

	function selection_property (name, value) {
	  return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
	}

	function classArray(string) {
	  return string.trim().split(/^|\s+/);
	}

	function classList(node) {
	  return node.classList || new ClassList(node);
	}

	function ClassList(node) {
	  this._node = node;
	  this._names = classArray(node.getAttribute("class") || "");
	}

	ClassList.prototype = {
	  add: function add(name) {
	    var i = this._names.indexOf(name);

	    if (i < 0) {
	      this._names.push(name);

	      this._node.setAttribute("class", this._names.join(" "));
	    }
	  },
	  remove: function remove(name) {
	    var i = this._names.indexOf(name);

	    if (i >= 0) {
	      this._names.splice(i, 1);

	      this._node.setAttribute("class", this._names.join(" "));
	    }
	  },
	  contains: function contains(name) {
	    return this._names.indexOf(name) >= 0;
	  }
	};

	function classedAdd(node, names) {
	  var list = classList(node),
	      i = -1,
	      n = names.length;

	  while (++i < n) {
	    list.add(names[i]);
	  }
	}

	function classedRemove(node, names) {
	  var list = classList(node),
	      i = -1,
	      n = names.length;

	  while (++i < n) {
	    list.remove(names[i]);
	  }
	}

	function classedTrue(names) {
	  return function () {
	    classedAdd(this, names);
	  };
	}

	function classedFalse(names) {
	  return function () {
	    classedRemove(this, names);
	  };
	}

	function classedFunction(names, value) {
	  return function () {
	    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
	  };
	}

	function selection_classed (name, value) {
	  var names = classArray(name + "");

	  if (arguments.length < 2) {
	    var list = classList(this.node()),
	        i = -1,
	        n = names.length;

	    while (++i < n) {
	      if (!list.contains(names[i])) return false;
	    }

	    return true;
	  }

	  return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
	}

	function textRemove() {
	  this.textContent = "";
	}

	function textConstant(value) {
	  return function () {
	    this.textContent = value;
	  };
	}

	function textFunction(value) {
	  return function () {
	    var v = value.apply(this, arguments);
	    this.textContent = v == null ? "" : v;
	  };
	}

	function selection_text (value) {
	  return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
	}

	function htmlRemove() {
	  this.innerHTML = "";
	}

	function htmlConstant(value) {
	  return function () {
	    this.innerHTML = value;
	  };
	}

	function htmlFunction(value) {
	  return function () {
	    var v = value.apply(this, arguments);
	    this.innerHTML = v == null ? "" : v;
	  };
	}

	function selection_html (value) {
	  return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
	}

	function raise() {
	  if (this.nextSibling) this.parentNode.appendChild(this);
	}

	function selection_raise () {
	  return this.each(raise);
	}

	function lower() {
	  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
	}

	function selection_lower () {
	  return this.each(lower);
	}

	function selection_append (name) {
	  var create = typeof name === "function" ? name : creator(name);
	  return this.select(function () {
	    return this.appendChild(create.apply(this, arguments));
	  });
	}

	function constantNull() {
	  return null;
	}

	function selection_insert (name, before) {
	  var create = typeof name === "function" ? name : creator(name),
	      select = before == null ? constantNull : typeof before === "function" ? before : selector(before);
	  return this.select(function () {
	    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
	  });
	}

	function remove() {
	  var parent = this.parentNode;
	  if (parent) parent.removeChild(this);
	}

	function selection_remove () {
	  return this.each(remove);
	}

	function selection_cloneShallow() {
	  var clone = this.cloneNode(false),
	      parent = this.parentNode;
	  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
	}

	function selection_cloneDeep() {
	  var clone = this.cloneNode(true),
	      parent = this.parentNode;
	  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
	}

	function selection_clone (deep) {
	  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
	}

	function selection_datum (value) {
	  return arguments.length ? this.property("__data__", value) : this.node().__data__;
	}

	function contextListener(listener) {
	  return function (event) {
	    listener.call(this, event, this.__data__);
	  };
	}

	function parseTypenames$1(typenames) {
	  return typenames.trim().split(/^|\s+/).map(function (t) {
	    var name = "",
	        i = t.indexOf(".");
	    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
	    return {
	      type: t,
	      name: name
	    };
	  });
	}

	function onRemove(typename) {
	  return function () {
	    var on = this.__on;
	    if (!on) return;

	    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
	      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
	        this.removeEventListener(o.type, o.listener, o.options);
	      } else {
	        on[++i] = o;
	      }
	    }

	    if (++i) on.length = i;else delete this.__on;
	  };
	}

	function onAdd(typename, value, options) {
	  return function () {
	    var on = this.__on,
	        o,
	        listener = contextListener(value);
	    if (on) for (var j = 0, m = on.length; j < m; ++j) {
	      if ((o = on[j]).type === typename.type && o.name === typename.name) {
	        this.removeEventListener(o.type, o.listener, o.options);
	        this.addEventListener(o.type, o.listener = listener, o.options = options);
	        o.value = value;
	        return;
	      }
	    }
	    this.addEventListener(typename.type, listener, options);
	    o = {
	      type: typename.type,
	      name: typename.name,
	      value: value,
	      listener: listener,
	      options: options
	    };
	    if (!on) this.__on = [o];else on.push(o);
	  };
	}

	function selection_on (typename, value, options) {
	  var typenames = parseTypenames$1(typename + ""),
	      i,
	      n = typenames.length,
	      t;

	  if (arguments.length < 2) {
	    var on = this.node().__on;

	    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
	      for (i = 0, o = on[j]; i < n; ++i) {
	        if ((t = typenames[i]).type === o.type && t.name === o.name) {
	          return o.value;
	        }
	      }
	    }
	    return;
	  }

	  on = value ? onAdd : onRemove;

	  for (i = 0; i < n; ++i) {
	    this.each(on(typenames[i], value, options));
	  }

	  return this;
	}

	function dispatchEvent$1(node, type, params) {
	  var window = defaultView(node),
	      event = window.CustomEvent;

	  if (typeof event === "function") {
	    event = new event(type, params);
	  } else {
	    event = window.document.createEvent("Event");
	    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;else event.initEvent(type, false, false);
	  }

	  node.dispatchEvent(event);
	}

	function dispatchConstant(type, params) {
	  return function () {
	    return dispatchEvent$1(this, type, params);
	  };
	}

	function dispatchFunction(type, params) {
	  return function () {
	    return dispatchEvent$1(this, type, params.apply(this, arguments));
	  };
	}

	function selection_dispatch (type, params) {
	  return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type, params));
	}

	var _marked = /*#__PURE__*/regeneratorRuntime.mark(_callee);

	function _callee() {
	  var groups, j, m, group, i, n, node;
	  return regeneratorRuntime.wrap(function _callee$(_context) {
	    while (1) {
	      switch (_context.prev = _context.next) {
	        case 0:
	          groups = this._groups, j = 0, m = groups.length;

	        case 1:
	          if (!(j < m)) {
	            _context.next = 13;
	            break;
	          }

	          group = groups[j], i = 0, n = group.length;

	        case 3:
	          if (!(i < n)) {
	            _context.next = 10;
	            break;
	          }

	          if (!(node = group[i])) {
	            _context.next = 7;
	            break;
	          }

	          _context.next = 7;
	          return node;

	        case 7:
	          ++i;
	          _context.next = 3;
	          break;

	        case 10:
	          ++j;
	          _context.next = 1;
	          break;

	        case 13:
	        case "end":
	          return _context.stop();
	      }
	    }
	  }, _marked, this);
	}

	var root = [null];
	function Selection(groups, parents) {
	  this._groups = groups;
	  this._parents = parents;
	}

	function selection() {
	  return new Selection([[document.documentElement]], root);
	}

	function selection_selection() {
	  return this;
	}

	Selection.prototype = selection.prototype = _defineProperty({
	  constructor: Selection,
	  select: selection_select,
	  selectAll: selection_selectAll,
	  selectChild: selection_selectChild,
	  selectChildren: selection_selectChildren,
	  filter: selection_filter,
	  data: selection_data,
	  enter: selection_enter,
	  exit: selection_exit,
	  join: selection_join,
	  merge: selection_merge,
	  selection: selection_selection,
	  order: selection_order,
	  sort: selection_sort,
	  call: selection_call,
	  nodes: selection_nodes,
	  node: selection_node,
	  size: selection_size,
	  empty: selection_empty,
	  each: selection_each,
	  attr: selection_attr,
	  style: selection_style,
	  property: selection_property,
	  classed: selection_classed,
	  text: selection_text,
	  html: selection_html,
	  raise: selection_raise,
	  lower: selection_lower,
	  append: selection_append,
	  insert: selection_insert,
	  remove: selection_remove,
	  clone: selection_clone,
	  datum: selection_datum,
	  on: selection_on,
	  dispatch: selection_dispatch
	}, Symbol.iterator, _callee);

	function select (selector) {
	  return typeof selector === "string" ? new Selection([[document.querySelector(selector)]], [document.documentElement]) : new Selection([[selector]], root);
	}

	var TO_STRING = 'toString';
	var RegExpPrototype = RegExp.prototype;
	var nativeToString = RegExpPrototype[TO_STRING];

	var NOT_GENERIC = fails(function () { return nativeToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });
	// FF44- RegExp#toString has a wrong name
	var INCORRECT_NAME = nativeToString.name != TO_STRING;

	// `RegExp.prototype.toString` method
	// https://tc39.github.io/ecma262/#sec-regexp.prototype.tostring
	if (NOT_GENERIC || INCORRECT_NAME) {
	  redefine(RegExp.prototype, TO_STRING, function toString() {
	    var R = anObject(this);
	    var p = String(R.source);
	    var rf = R.flags;
	    var f = String(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype) ? regexpFlags.call(R) : rf);
	    return '/' + p + '/' + f;
	  }, { unsafe: true });
	}

	var defineProperty$a = objectDefineProperty.f;
	var getOwnPropertyNames$2 = objectGetOwnPropertyNames.f;





	var setInternalState$6 = internalState.set;



	var MATCH$1 = wellKnownSymbol('match');
	var NativeRegExp = global_1.RegExp;
	var RegExpPrototype$1 = NativeRegExp.prototype;
	var re1 = /a/g;
	var re2 = /a/g;

	// "new" should create a new object, old webkit bug
	var CORRECT_NEW = new NativeRegExp(re1) !== re1;

	var UNSUPPORTED_Y$2 = regexpStickyHelpers.UNSUPPORTED_Y;

	var FORCED$7 = descriptors && isForced_1('RegExp', (!CORRECT_NEW || UNSUPPORTED_Y$2 || fails(function () {
	  re2[MATCH$1] = false;
	  // RegExp constructor can alter flags and IsRegExp works correct with @@match
	  return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';
	})));

	// `RegExp` constructor
	// https://tc39.github.io/ecma262/#sec-regexp-constructor
	if (FORCED$7) {
	  var RegExpWrapper = function RegExp(pattern, flags) {
	    var thisIsRegExp = this instanceof RegExpWrapper;
	    var patternIsRegExp = isRegexp(pattern);
	    var flagsAreUndefined = flags === undefined;
	    var sticky;

	    if (!thisIsRegExp && patternIsRegExp && pattern.constructor === RegExpWrapper && flagsAreUndefined) {
	      return pattern;
	    }

	    if (CORRECT_NEW) {
	      if (patternIsRegExp && !flagsAreUndefined) pattern = pattern.source;
	    } else if (pattern instanceof RegExpWrapper) {
	      if (flagsAreUndefined) flags = regexpFlags.call(pattern);
	      pattern = pattern.source;
	    }

	    if (UNSUPPORTED_Y$2) {
	      sticky = !!flags && flags.indexOf('y') > -1;
	      if (sticky) flags = flags.replace(/y/g, '');
	    }

	    var result = inheritIfRequired(
	      CORRECT_NEW ? new NativeRegExp(pattern, flags) : NativeRegExp(pattern, flags),
	      thisIsRegExp ? this : RegExpPrototype$1,
	      RegExpWrapper
	    );

	    if (UNSUPPORTED_Y$2 && sticky) setInternalState$6(result, { sticky: sticky });

	    return result;
	  };
	  var proxy = function (key) {
	    key in RegExpWrapper || defineProperty$a(RegExpWrapper, key, {
	      configurable: true,
	      get: function () { return NativeRegExp[key]; },
	      set: function (it) { NativeRegExp[key] = it; }
	    });
	  };
	  var keys$3 = getOwnPropertyNames$2(NativeRegExp);
	  var index = 0;
	  while (keys$3.length > index) proxy(keys$3[index++]);
	  RegExpPrototype$1.constructor = RegExpWrapper;
	  RegExpWrapper.prototype = RegExpPrototype$1;
	  redefine(global_1, 'RegExp', RegExpWrapper);
	}

	// https://tc39.github.io/ecma262/#sec-get-regexp-@@species
	setSpecies('RegExp');

	function define (constructor, factory, prototype) {
	  constructor.prototype = factory.prototype = prototype;
	  prototype.constructor = constructor;
	}
	function extend(parent, definition) {
	  var prototype = Object.create(parent.prototype);

	  for (var key in definition) {
	    prototype[key] = definition[key];
	  }

	  return prototype;
	}

	function Color() {}
	var _darker = 0.7;

	var _brighter = 1 / _darker;
	var reI = "\\s*([+-]?\\d+)\\s*",
	    reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
	    reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
	    reHex = /^#([0-9a-f]{3,8})$/,
	    reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
	    reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
	    reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
	    reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
	    reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
	    reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");
	var named = {
	  aliceblue: 0xf0f8ff,
	  antiquewhite: 0xfaebd7,
	  aqua: 0x00ffff,
	  aquamarine: 0x7fffd4,
	  azure: 0xf0ffff,
	  beige: 0xf5f5dc,
	  bisque: 0xffe4c4,
	  black: 0x000000,
	  blanchedalmond: 0xffebcd,
	  blue: 0x0000ff,
	  blueviolet: 0x8a2be2,
	  brown: 0xa52a2a,
	  burlywood: 0xdeb887,
	  cadetblue: 0x5f9ea0,
	  chartreuse: 0x7fff00,
	  chocolate: 0xd2691e,
	  coral: 0xff7f50,
	  cornflowerblue: 0x6495ed,
	  cornsilk: 0xfff8dc,
	  crimson: 0xdc143c,
	  cyan: 0x00ffff,
	  darkblue: 0x00008b,
	  darkcyan: 0x008b8b,
	  darkgoldenrod: 0xb8860b,
	  darkgray: 0xa9a9a9,
	  darkgreen: 0x006400,
	  darkgrey: 0xa9a9a9,
	  darkkhaki: 0xbdb76b,
	  darkmagenta: 0x8b008b,
	  darkolivegreen: 0x556b2f,
	  darkorange: 0xff8c00,
	  darkorchid: 0x9932cc,
	  darkred: 0x8b0000,
	  darksalmon: 0xe9967a,
	  darkseagreen: 0x8fbc8f,
	  darkslateblue: 0x483d8b,
	  darkslategray: 0x2f4f4f,
	  darkslategrey: 0x2f4f4f,
	  darkturquoise: 0x00ced1,
	  darkviolet: 0x9400d3,
	  deeppink: 0xff1493,
	  deepskyblue: 0x00bfff,
	  dimgray: 0x696969,
	  dimgrey: 0x696969,
	  dodgerblue: 0x1e90ff,
	  firebrick: 0xb22222,
	  floralwhite: 0xfffaf0,
	  forestgreen: 0x228b22,
	  fuchsia: 0xff00ff,
	  gainsboro: 0xdcdcdc,
	  ghostwhite: 0xf8f8ff,
	  gold: 0xffd700,
	  goldenrod: 0xdaa520,
	  gray: 0x808080,
	  green: 0x008000,
	  greenyellow: 0xadff2f,
	  grey: 0x808080,
	  honeydew: 0xf0fff0,
	  hotpink: 0xff69b4,
	  indianred: 0xcd5c5c,
	  indigo: 0x4b0082,
	  ivory: 0xfffff0,
	  khaki: 0xf0e68c,
	  lavender: 0xe6e6fa,
	  lavenderblush: 0xfff0f5,
	  lawngreen: 0x7cfc00,
	  lemonchiffon: 0xfffacd,
	  lightblue: 0xadd8e6,
	  lightcoral: 0xf08080,
	  lightcyan: 0xe0ffff,
	  lightgoldenrodyellow: 0xfafad2,
	  lightgray: 0xd3d3d3,
	  lightgreen: 0x90ee90,
	  lightgrey: 0xd3d3d3,
	  lightpink: 0xffb6c1,
	  lightsalmon: 0xffa07a,
	  lightseagreen: 0x20b2aa,
	  lightskyblue: 0x87cefa,
	  lightslategray: 0x778899,
	  lightslategrey: 0x778899,
	  lightsteelblue: 0xb0c4de,
	  lightyellow: 0xffffe0,
	  lime: 0x00ff00,
	  limegreen: 0x32cd32,
	  linen: 0xfaf0e6,
	  magenta: 0xff00ff,
	  maroon: 0x800000,
	  mediumaquamarine: 0x66cdaa,
	  mediumblue: 0x0000cd,
	  mediumorchid: 0xba55d3,
	  mediumpurple: 0x9370db,
	  mediumseagreen: 0x3cb371,
	  mediumslateblue: 0x7b68ee,
	  mediumspringgreen: 0x00fa9a,
	  mediumturquoise: 0x48d1cc,
	  mediumvioletred: 0xc71585,
	  midnightblue: 0x191970,
	  mintcream: 0xf5fffa,
	  mistyrose: 0xffe4e1,
	  moccasin: 0xffe4b5,
	  navajowhite: 0xffdead,
	  navy: 0x000080,
	  oldlace: 0xfdf5e6,
	  olive: 0x808000,
	  olivedrab: 0x6b8e23,
	  orange: 0xffa500,
	  orangered: 0xff4500,
	  orchid: 0xda70d6,
	  palegoldenrod: 0xeee8aa,
	  palegreen: 0x98fb98,
	  paleturquoise: 0xafeeee,
	  palevioletred: 0xdb7093,
	  papayawhip: 0xffefd5,
	  peachpuff: 0xffdab9,
	  peru: 0xcd853f,
	  pink: 0xffc0cb,
	  plum: 0xdda0dd,
	  powderblue: 0xb0e0e6,
	  purple: 0x800080,
	  rebeccapurple: 0x663399,
	  red: 0xff0000,
	  rosybrown: 0xbc8f8f,
	  royalblue: 0x4169e1,
	  saddlebrown: 0x8b4513,
	  salmon: 0xfa8072,
	  sandybrown: 0xf4a460,
	  seagreen: 0x2e8b57,
	  seashell: 0xfff5ee,
	  sienna: 0xa0522d,
	  silver: 0xc0c0c0,
	  skyblue: 0x87ceeb,
	  slateblue: 0x6a5acd,
	  slategray: 0x708090,
	  slategrey: 0x708090,
	  snow: 0xfffafa,
	  springgreen: 0x00ff7f,
	  steelblue: 0x4682b4,
	  tan: 0xd2b48c,
	  teal: 0x008080,
	  thistle: 0xd8bfd8,
	  tomato: 0xff6347,
	  turquoise: 0x40e0d0,
	  violet: 0xee82ee,
	  wheat: 0xf5deb3,
	  white: 0xffffff,
	  whitesmoke: 0xf5f5f5,
	  yellow: 0xffff00,
	  yellowgreen: 0x9acd32
	};
	define(Color, color, {
	  copy: function copy(channels) {
	    return Object.assign(new this.constructor(), this, channels);
	  },
	  displayable: function displayable() {
	    return this.rgb().displayable();
	  },
	  hex: color_formatHex,
	  // Deprecated! Use color.formatHex.
	  formatHex: color_formatHex,
	  formatHsl: color_formatHsl,
	  formatRgb: color_formatRgb,
	  toString: color_formatRgb
	});

	function color_formatHex() {
	  return this.rgb().formatHex();
	}

	function color_formatHsl() {
	  return hslConvert(this).formatHsl();
	}

	function color_formatRgb() {
	  return this.rgb().formatRgb();
	}

	function color(format) {
	  var m, l;
	  format = (format + "").trim().toLowerCase();
	  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
	  : l === 3 ? new Rgb(m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00
	  : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
	  : l === 4 ? rgba(m >> 12 & 0xf | m >> 8 & 0xf0, m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, ((m & 0xf) << 4 | m & 0xf) / 0xff) // #f000
	  : null // invalid hex
	  ) : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
	  : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
	  : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
	  : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
	  : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
	  : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
	  : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
	  : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
	}

	function rgbn(n) {
	  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
	}

	function rgba(r, g, b, a) {
	  if (a <= 0) r = g = b = NaN;
	  return new Rgb(r, g, b, a);
	}

	function rgbConvert(o) {
	  if (!(o instanceof Color)) o = color(o);
	  if (!o) return new Rgb();
	  o = o.rgb();
	  return new Rgb(o.r, o.g, o.b, o.opacity);
	}
	function rgb(r, g, b, opacity) {
	  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
	}
	function Rgb(r, g, b, opacity) {
	  this.r = +r;
	  this.g = +g;
	  this.b = +b;
	  this.opacity = +opacity;
	}
	define(Rgb, rgb, extend(Color, {
	  brighter: function brighter(k) {
	    k = k == null ? _brighter : Math.pow(_brighter, k);
	    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
	  },
	  darker: function darker(k) {
	    k = k == null ? _darker : Math.pow(_darker, k);
	    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
	  },
	  rgb: function rgb() {
	    return this;
	  },
	  displayable: function displayable() {
	    return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;
	  },
	  hex: rgb_formatHex,
	  // Deprecated! Use color.formatHex.
	  formatHex: rgb_formatHex,
	  formatRgb: rgb_formatRgb,
	  toString: rgb_formatRgb
	}));

	function rgb_formatHex() {
	  return "#" + hex(this.r) + hex(this.g) + hex(this.b);
	}

	function rgb_formatRgb() {
	  var a = this.opacity;
	  a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
	  return (a === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? ")" : ", " + a + ")");
	}

	function hex(value) {
	  value = Math.max(0, Math.min(255, Math.round(value) || 0));
	  return (value < 16 ? "0" : "") + value.toString(16);
	}

	function hsla(h, s, l, a) {
	  if (a <= 0) h = s = l = NaN;else if (l <= 0 || l >= 1) h = s = NaN;else if (s <= 0) h = NaN;
	  return new Hsl(h, s, l, a);
	}

	function hslConvert(o) {
	  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
	  if (!(o instanceof Color)) o = color(o);
	  if (!o) return new Hsl();
	  if (o instanceof Hsl) return o;
	  o = o.rgb();
	  var r = o.r / 255,
	      g = o.g / 255,
	      b = o.b / 255,
	      min = Math.min(r, g, b),
	      max = Math.max(r, g, b),
	      h = NaN,
	      s = max - min,
	      l = (max + min) / 2;

	  if (s) {
	    if (r === max) h = (g - b) / s + (g < b) * 6;else if (g === max) h = (b - r) / s + 2;else h = (r - g) / s + 4;
	    s /= l < 0.5 ? max + min : 2 - max - min;
	    h *= 60;
	  } else {
	    s = l > 0 && l < 1 ? 0 : h;
	  }

	  return new Hsl(h, s, l, o.opacity);
	}
	function hsl(h, s, l, opacity) {
	  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
	}

	function Hsl(h, s, l, opacity) {
	  this.h = +h;
	  this.s = +s;
	  this.l = +l;
	  this.opacity = +opacity;
	}

	define(Hsl, hsl, extend(Color, {
	  brighter: function brighter(k) {
	    k = k == null ? _brighter : Math.pow(_brighter, k);
	    return new Hsl(this.h, this.s, this.l * k, this.opacity);
	  },
	  darker: function darker(k) {
	    k = k == null ? _darker : Math.pow(_darker, k);
	    return new Hsl(this.h, this.s, this.l * k, this.opacity);
	  },
	  rgb: function rgb() {
	    var h = this.h % 360 + (this.h < 0) * 360,
	        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
	        l = this.l,
	        m2 = l + (l < 0.5 ? l : 1 - l) * s,
	        m1 = 2 * l - m2;
	    return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
	  },
	  displayable: function displayable() {
	    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
	  },
	  formatHsl: function formatHsl() {
	    var a = this.opacity;
	    a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
	    return (a === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a === 1 ? ")" : ", " + a + ")");
	  }
	}));
	/* From FvD 13.37, CSS Color Module Level 3 */

	function hsl2rgb(h, m1, m2) {
	  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
	}

	function constant$1 (x) {
	  return function () {
	    return x;
	  };
	}

	function linear(a, d) {
	  return function (t) {
	    return a + t * d;
	  };
	}

	function exponential(a, b, y) {
	  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function (t) {
	    return Math.pow(a + t * b, y);
	  };
	}
	function gamma(y) {
	  return (y = +y) === 1 ? nogamma : function (a, b) {
	    return b - a ? exponential(a, b, y) : constant$1(isNaN(a) ? b : a);
	  };
	}
	function nogamma(a, b) {
	  var d = b - a;
	  return d ? linear(a, d) : constant$1(isNaN(a) ? b : a);
	}

	var interpolateRgb = (function rgbGamma(y) {
	  var color = gamma(y);

	  function rgb$1(start, end) {
	    var r = color((start = rgb(start)).r, (end = rgb(end)).r),
	        g = color(start.g, end.g),
	        b = color(start.b, end.b),
	        opacity = nogamma(start.opacity, end.opacity);
	    return function (t) {
	      start.r = r(t);
	      start.g = g(t);
	      start.b = b(t);
	      start.opacity = opacity(t);
	      return start + "";
	    };
	  }

	  rgb$1.gamma = rgbGamma;
	  return rgb$1;
	})(1);

	var ARRAY_BUFFER$1 = 'ArrayBuffer';
	var ArrayBuffer$3 = arrayBuffer[ARRAY_BUFFER$1];
	var NativeArrayBuffer$1 = global_1[ARRAY_BUFFER$1];

	// `ArrayBuffer` constructor
	// https://tc39.github.io/ecma262/#sec-arraybuffer-constructor
	_export({ global: true, forced: NativeArrayBuffer$1 !== ArrayBuffer$3 }, {
	  ArrayBuffer: ArrayBuffer$3
	});

	setSpecies(ARRAY_BUFFER$1);

	function numberArray (a, b) {
	  if (!b) b = [];
	  var n = a ? Math.min(b.length, a.length) : 0,
	      c = b.slice(),
	      i;
	  return function (t) {
	    for (i = 0; i < n; ++i) {
	      c[i] = a[i] * (1 - t) + b[i] * t;
	    }

	    return c;
	  };
	}
	function isNumberArray(x) {
	  return ArrayBuffer.isView(x) && !(x instanceof DataView);
	}

	function genericArray(a, b) {
	  var nb = b ? b.length : 0,
	      na = a ? Math.min(nb, a.length) : 0,
	      x = new Array(na),
	      c = new Array(nb),
	      i;

	  for (i = 0; i < na; ++i) {
	    x[i] = interpolate(a[i], b[i]);
	  }

	  for (; i < nb; ++i) {
	    c[i] = b[i];
	  }

	  return function (t) {
	    for (i = 0; i < na; ++i) {
	      c[i] = x[i](t);
	    }

	    return c;
	  };
	}

	function date (a, b) {
	  var d = new Date();
	  return a = +a, b = +b, function (t) {
	    return d.setTime(a * (1 - t) + b * t), d;
	  };
	}

	function interpolateNumber (a, b) {
	  return a = +a, b = +b, function (t) {
	    return a * (1 - t) + b * t;
	  };
	}

	function object (a, b) {
	  var i = {},
	      c = {},
	      k;
	  if (a === null || _typeof(a) !== "object") a = {};
	  if (b === null || _typeof(b) !== "object") b = {};

	  for (k in b) {
	    if (k in a) {
	      i[k] = interpolate(a[k], b[k]);
	    } else {
	      c[k] = b[k];
	    }
	  }

	  return function (t) {
	    for (k in i) {
	      c[k] = i[k](t);
	    }

	    return c;
	  };
	}

	var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
	    reB = new RegExp(reA.source, "g");

	function zero(b) {
	  return function () {
	    return b;
	  };
	}

	function one(b) {
	  return function (t) {
	    return b(t) + "";
	  };
	}

	function interpolateString (a, b) {
	  var bi = reA.lastIndex = reB.lastIndex = 0,
	      // scan index for next number in b
	  am,
	      // current match in a
	  bm,
	      // current match in b
	  bs,
	      // string preceding current number in b, if any
	  i = -1,
	      // index in s
	  s = [],
	      // string constants and placeholders
	  q = []; // number interpolators
	  // Coerce inputs to strings.

	  a = a + "", b = b + ""; // Interpolate pairs of numbers in a & b.

	  while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
	    if ((bs = bm.index) > bi) {
	      // a string precedes the next number in b
	      bs = b.slice(bi, bs);
	      if (s[i]) s[i] += bs; // coalesce with previous string
	      else s[++i] = bs;
	    }

	    if ((am = am[0]) === (bm = bm[0])) {
	      // numbers in a & b match
	      if (s[i]) s[i] += bm; // coalesce with previous string
	      else s[++i] = bm;
	    } else {
	      // interpolate non-matching numbers
	      s[++i] = null;
	      q.push({
	        i: i,
	        x: interpolateNumber(am, bm)
	      });
	    }

	    bi = reB.lastIndex;
	  } // Add remains of b.


	  if (bi < b.length) {
	    bs = b.slice(bi);
	    if (s[i]) s[i] += bs; // coalesce with previous string
	    else s[++i] = bs;
	  } // Special optimization for only a single match.
	  // Otherwise, interpolate each of the numbers and rejoin the string.


	  return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function (t) {
	    for (var i = 0, o; i < b; ++i) {
	      s[(o = q[i]).i] = o.x(t);
	    }

	    return s.join("");
	  });
	}

	function interpolate (a, b) {
	  var t = _typeof(b),
	      c;

	  return b == null || t === "boolean" ? constant$1(b) : (t === "number" ? interpolateNumber : t === "string" ? (c = color(b)) ? (b = c, interpolateRgb) : interpolateString : b instanceof color ? interpolateRgb : b instanceof Date ? date : isNumberArray(b) ? numberArray : Array.isArray(b) ? genericArray : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object : interpolateNumber)(a, b);
	}

	function interpolateRound (a, b) {
	  return a = +a, b = +b, function (t) {
	    return Math.round(a * (1 - t) + b * t);
	  };
	}

	var degrees = 180 / Math.PI;
	var identity$2 = {
	  translateX: 0,
	  translateY: 0,
	  rotate: 0,
	  skewX: 0,
	  scaleX: 1,
	  scaleY: 1
	};
	function decompose (a, b, c, d, e, f) {
	  var scaleX, scaleY, skewX;
	  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
	  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
	  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
	  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
	  return {
	    translateX: e,
	    translateY: f,
	    rotate: Math.atan2(b, a) * degrees,
	    skewX: Math.atan(skewX) * degrees,
	    scaleX: scaleX,
	    scaleY: scaleY
	  };
	}

	var cssNode, cssRoot, cssView, svgNode;
	function parseCss(value) {
	  if (value === "none") return identity$2;
	  if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
	  cssNode.style.transform = value;
	  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
	  cssRoot.removeChild(cssNode);
	  value = value.slice(7, -1).split(",");
	  return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
	}
	function parseSvg(value) {
	  if (value == null) return identity$2;
	  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
	  svgNode.setAttribute("transform", value);
	  if (!(value = svgNode.transform.baseVal.consolidate())) return identity$2;
	  value = value.matrix;
	  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
	}

	function interpolateTransform(parse, pxComma, pxParen, degParen) {
	  function pop(s) {
	    return s.length ? s.pop() + " " : "";
	  }

	  function translate(xa, ya, xb, yb, s, q) {
	    if (xa !== xb || ya !== yb) {
	      var i = s.push("translate(", null, pxComma, null, pxParen);
	      q.push({
	        i: i - 4,
	        x: interpolateNumber(xa, xb)
	      }, {
	        i: i - 2,
	        x: interpolateNumber(ya, yb)
	      });
	    } else if (xb || yb) {
	      s.push("translate(" + xb + pxComma + yb + pxParen);
	    }
	  }

	  function rotate(a, b, s, q) {
	    if (a !== b) {
	      if (a - b > 180) b += 360;else if (b - a > 180) a += 360; // shortest path

	      q.push({
	        i: s.push(pop(s) + "rotate(", null, degParen) - 2,
	        x: interpolateNumber(a, b)
	      });
	    } else if (b) {
	      s.push(pop(s) + "rotate(" + b + degParen);
	    }
	  }

	  function skewX(a, b, s, q) {
	    if (a !== b) {
	      q.push({
	        i: s.push(pop(s) + "skewX(", null, degParen) - 2,
	        x: interpolateNumber(a, b)
	      });
	    } else if (b) {
	      s.push(pop(s) + "skewX(" + b + degParen);
	    }
	  }

	  function scale(xa, ya, xb, yb, s, q) {
	    if (xa !== xb || ya !== yb) {
	      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
	      q.push({
	        i: i - 4,
	        x: interpolateNumber(xa, xb)
	      }, {
	        i: i - 2,
	        x: interpolateNumber(ya, yb)
	      });
	    } else if (xb !== 1 || yb !== 1) {
	      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
	    }
	  }

	  return function (a, b) {
	    var s = [],
	        // string constants and placeholders
	    q = []; // number interpolators

	    a = parse(a), b = parse(b);
	    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
	    rotate(a.rotate, b.rotate, s, q);
	    skewX(a.skewX, b.skewX, s, q);
	    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
	    a = b = null; // gc

	    return function (t) {
	      var i = -1,
	          n = q.length,
	          o;

	      while (++i < n) {
	        s[(o = q[i]).i] = o.x(t);
	      }

	      return s.join("");
	    };
	  };
	}

	var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
	var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

	var frame = 0,
	    // is an animation frame pending?
	timeout = 0,
	    // is a timeout pending?
	interval = 0,
	    // are any timers active?
	pokeDelay = 1000,
	    // how frequently we check for clock skew
	taskHead,
	    taskTail,
	    clockLast = 0,
	    clockNow = 0,
	    clockSkew = 0,
	    clock = (typeof performance === "undefined" ? "undefined" : _typeof(performance)) === "object" && performance.now ? performance : Date,
	    setFrame = (typeof window === "undefined" ? "undefined" : _typeof(window)) === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function (f) {
	  setTimeout(f, 17);
	};
	function now$1() {
	  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
	}

	function clearNow() {
	  clockNow = 0;
	}

	function Timer() {
	  this._call = this._time = this._next = null;
	}
	Timer.prototype = timer.prototype = {
	  constructor: Timer,
	  restart: function restart(callback, delay, time) {
	    if (typeof callback !== "function") throw new TypeError("callback is not a function");
	    time = (time == null ? now$1() : +time) + (delay == null ? 0 : +delay);

	    if (!this._next && taskTail !== this) {
	      if (taskTail) taskTail._next = this;else taskHead = this;
	      taskTail = this;
	    }

	    this._call = callback;
	    this._time = time;
	    sleep();
	  },
	  stop: function stop() {
	    if (this._call) {
	      this._call = null;
	      this._time = Infinity;
	      sleep();
	    }
	  }
	};
	function timer(callback, delay, time) {
	  var t = new Timer();
	  t.restart(callback, delay, time);
	  return t;
	}
	function timerFlush() {
	  now$1(); // Get the current time, if not already set.

	  ++frame; // Pretend weâve set an alarm, if we havenât already.

	  var t = taskHead,
	      e;

	  while (t) {
	    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
	    t = t._next;
	  }

	  --frame;
	}

	function wake() {
	  clockNow = (clockLast = clock.now()) + clockSkew;
	  frame = timeout = 0;

	  try {
	    timerFlush();
	  } finally {
	    frame = 0;
	    nap();
	    clockNow = 0;
	  }
	}

	function poke() {
	  var now = clock.now(),
	      delay = now - clockLast;
	  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
	}

	function nap() {
	  var t0,
	      t1 = taskHead,
	      t2,
	      time = Infinity;

	  while (t1) {
	    if (t1._call) {
	      if (time > t1._time) time = t1._time;
	      t0 = t1, t1 = t1._next;
	    } else {
	      t2 = t1._next, t1._next = null;
	      t1 = t0 ? t0._next = t2 : taskHead = t2;
	    }
	  }

	  taskTail = t0;
	  sleep(time);
	}

	function sleep(time) {
	  if (frame) return; // Soonest alarm already set, or will be.

	  if (timeout) timeout = clearTimeout(timeout);
	  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.

	  if (delay > 24) {
	    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
	    if (interval) interval = clearInterval(interval);
	  } else {
	    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
	    frame = 1, setFrame(wake);
	  }
	}

	function timeout$1 (callback, delay, time) {
	  var t = new Timer();
	  delay = delay == null ? 0 : +delay;
	  t.restart(function (elapsed) {
	    t.stop();
	    callback(elapsed + delay);
	  }, delay, time);
	  return t;
	}

	var emptyOn = dispatch$1("start", "end", "cancel", "interrupt");
	var emptyTween = [];
	var CREATED = 0;
	var SCHEDULED = 1;
	var STARTING = 2;
	var STARTED = 3;
	var RUNNING = 4;
	var ENDING = 5;
	var ENDED = 6;
	function schedule (node, name, id, index, group, timing) {
	  var schedules = node.__transition;
	  if (!schedules) node.__transition = {};else if (id in schedules) return;
	  create(node, id, {
	    name: name,
	    index: index,
	    // For context during callback.
	    group: group,
	    // For context during callback.
	    on: emptyOn,
	    tween: emptyTween,
	    time: timing.time,
	    delay: timing.delay,
	    duration: timing.duration,
	    ease: timing.ease,
	    timer: null,
	    state: CREATED
	  });
	}
	function init$1(node, id) {
	  var schedule = get$3(node, id);
	  if (schedule.state > CREATED) throw new Error("too late; already scheduled");
	  return schedule;
	}
	function set$4(node, id) {
	  var schedule = get$3(node, id);
	  if (schedule.state > STARTED) throw new Error("too late; already running");
	  return schedule;
	}
	function get$3(node, id) {
	  var schedule = node.__transition;
	  if (!schedule || !(schedule = schedule[id])) throw new Error("transition not found");
	  return schedule;
	}

	function create(node, id, self) {
	  var schedules = node.__transition,
	      tween; // Initialize the self timer when the transition is created.
	  // Note the actual delay is not known until the first callback!

	  schedules[id] = self;
	  self.timer = timer(schedule, 0, self.time);

	  function schedule(elapsed) {
	    self.state = SCHEDULED;
	    self.timer.restart(start, self.delay, self.time); // If the elapsed delay is less than our first sleep, start immediately.

	    if (self.delay <= elapsed) start(elapsed - self.delay);
	  }

	  function start(elapsed) {
	    var i, j, n, o; // If the state is not SCHEDULED, then we previously errored on start.

	    if (self.state !== SCHEDULED) return stop();

	    for (i in schedules) {
	      o = schedules[i];
	      if (o.name !== self.name) continue; // While this element already has a starting transition during this frame,
	      // defer starting an interrupting transition until that transition has a
	      // chance to tick (and possibly end); see d3/d3-transition#54!

	      if (o.state === STARTED) return timeout$1(start); // Interrupt the active transition, if any.

	      if (o.state === RUNNING) {
	        o.state = ENDED;
	        o.timer.stop();
	        o.on.call("interrupt", node, node.__data__, o.index, o.group);
	        delete schedules[i];
	      } // Cancel any pre-empted transitions.
	      else if (+i < id) {
	          o.state = ENDED;
	          o.timer.stop();
	          o.on.call("cancel", node, node.__data__, o.index, o.group);
	          delete schedules[i];
	        }
	    } // Defer the first tick to end of the current frame; see d3/d3#1576.
	    // Note the transition may be canceled after start and before the first tick!
	    // Note this must be scheduled before the start event; see d3/d3-transition#16!
	    // Assuming this is successful, subsequent callbacks go straight to tick.


	    timeout$1(function () {
	      if (self.state === STARTED) {
	        self.state = RUNNING;
	        self.timer.restart(tick, self.delay, self.time);
	        tick(elapsed);
	      }
	    }); // Dispatch the start event.
	    // Note this must be done before the tween are initialized.

	    self.state = STARTING;
	    self.on.call("start", node, node.__data__, self.index, self.group);
	    if (self.state !== STARTING) return; // interrupted

	    self.state = STARTED; // Initialize the tween, deleting null tween.

	    tween = new Array(n = self.tween.length);

	    for (i = 0, j = -1; i < n; ++i) {
	      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
	        tween[++j] = o;
	      }
	    }

	    tween.length = j + 1;
	  }

	  function tick(elapsed) {
	    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
	        i = -1,
	        n = tween.length;

	    while (++i < n) {
	      tween[i].call(node, t);
	    } // Dispatch the end event.


	    if (self.state === ENDING) {
	      self.on.call("end", node, node.__data__, self.index, self.group);
	      stop();
	    }
	  }

	  function stop() {
	    self.state = ENDED;
	    self.timer.stop();
	    delete schedules[id];

	    for (var i in schedules) {
	      return;
	    } // eslint-disable-line no-unused-vars


	    delete node.__transition;
	  }
	}

	function interrupt (node, name) {
	  var schedules = node.__transition,
	      schedule,
	      active,
	      empty = true,
	      i;
	  if (!schedules) return;
	  name = name == null ? null : name + "";

	  for (i in schedules) {
	    if ((schedule = schedules[i]).name !== name) {
	      empty = false;
	      continue;
	    }

	    active = schedule.state > STARTING && schedule.state < ENDING;
	    schedule.state = ENDED;
	    schedule.timer.stop();
	    schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
	    delete schedules[i];
	  }

	  if (empty) delete node.__transition;
	}

	function selection_interrupt (name) {
	  return this.each(function () {
	    interrupt(this, name);
	  });
	}

	function tweenRemove(id, name) {
	  var tween0, tween1;
	  return function () {
	    var schedule = set$4(this, id),
	        tween = schedule.tween; // If this node shared tween with the previous node,
	    // just assign the updated shared tween and weâre done!
	    // Otherwise, copy-on-write.

	    if (tween !== tween0) {
	      tween1 = tween0 = tween;

	      for (var i = 0, n = tween1.length; i < n; ++i) {
	        if (tween1[i].name === name) {
	          tween1 = tween1.slice();
	          tween1.splice(i, 1);
	          break;
	        }
	      }
	    }

	    schedule.tween = tween1;
	  };
	}

	function tweenFunction(id, name, value) {
	  var tween0, tween1;
	  if (typeof value !== "function") throw new Error();
	  return function () {
	    var schedule = set$4(this, id),
	        tween = schedule.tween; // If this node shared tween with the previous node,
	    // just assign the updated shared tween and weâre done!
	    // Otherwise, copy-on-write.

	    if (tween !== tween0) {
	      tween1 = (tween0 = tween).slice();

	      for (var t = {
	        name: name,
	        value: value
	      }, i = 0, n = tween1.length; i < n; ++i) {
	        if (tween1[i].name === name) {
	          tween1[i] = t;
	          break;
	        }
	      }

	      if (i === n) tween1.push(t);
	    }

	    schedule.tween = tween1;
	  };
	}

	function transition_tween (name, value) {
	  var id = this._id;
	  name += "";

	  if (arguments.length < 2) {
	    var tween = get$3(this.node(), id).tween;

	    for (var i = 0, n = tween.length, t; i < n; ++i) {
	      if ((t = tween[i]).name === name) {
	        return t.value;
	      }
	    }

	    return null;
	  }

	  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
	}
	function tweenValue(transition, name, value) {
	  var id = transition._id;
	  transition.each(function () {
	    var schedule = set$4(this, id);
	    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
	  });
	  return function (node) {
	    return get$3(node, id).value[name];
	  };
	}

	function interpolate$1 (a, b) {
	  var c;
	  return (typeof b === "number" ? interpolateNumber : b instanceof color ? interpolateRgb : (c = color(b)) ? (b = c, interpolateRgb) : interpolateString)(a, b);
	}

	function attrRemove$1(name) {
	  return function () {
	    this.removeAttribute(name);
	  };
	}

	function attrRemoveNS$1(fullname) {
	  return function () {
	    this.removeAttributeNS(fullname.space, fullname.local);
	  };
	}

	function attrConstant$1(name, interpolate, value1) {
	  var string00,
	      string1 = value1 + "",
	      interpolate0;
	  return function () {
	    var string0 = this.getAttribute(name);
	    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
	  };
	}

	function attrConstantNS$1(fullname, interpolate, value1) {
	  var string00,
	      string1 = value1 + "",
	      interpolate0;
	  return function () {
	    var string0 = this.getAttributeNS(fullname.space, fullname.local);
	    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
	  };
	}

	function attrFunction$1(name, interpolate, value) {
	  var string00, string10, interpolate0;
	  return function () {
	    var string0,
	        value1 = value(this),
	        string1;
	    if (value1 == null) return void this.removeAttribute(name);
	    string0 = this.getAttribute(name);
	    string1 = value1 + "";
	    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
	  };
	}

	function attrFunctionNS$1(fullname, interpolate, value) {
	  var string00, string10, interpolate0;
	  return function () {
	    var string0,
	        value1 = value(this),
	        string1;
	    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
	    string0 = this.getAttributeNS(fullname.space, fullname.local);
	    string1 = value1 + "";
	    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
	  };
	}

	function transition_attr (name, value) {
	  var fullname = namespace(name),
	      i = fullname === "transform" ? interpolateTransformSvg : interpolate$1;
	  return this.attrTween(name, typeof value === "function" ? (fullname.local ? attrFunctionNS$1 : attrFunction$1)(fullname, i, tweenValue(this, "attr." + name, value)) : value == null ? (fullname.local ? attrRemoveNS$1 : attrRemove$1)(fullname) : (fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, i, value));
	}

	function attrInterpolate(name, i) {
	  return function (t) {
	    this.setAttribute(name, i.call(this, t));
	  };
	}

	function attrInterpolateNS(fullname, i) {
	  return function (t) {
	    this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));
	  };
	}

	function attrTweenNS(fullname, value) {
	  var t0, i0;

	  function tween() {
	    var i = value.apply(this, arguments);
	    if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);
	    return t0;
	  }

	  tween._value = value;
	  return tween;
	}

	function attrTween(name, value) {
	  var t0, i0;

	  function tween() {
	    var i = value.apply(this, arguments);
	    if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);
	    return t0;
	  }

	  tween._value = value;
	  return tween;
	}

	function transition_attrTween (name, value) {
	  var key = "attr." + name;
	  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
	  if (value == null) return this.tween(key, null);
	  if (typeof value !== "function") throw new Error();
	  var fullname = namespace(name);
	  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
	}

	function delayFunction(id, value) {
	  return function () {
	    init$1(this, id).delay = +value.apply(this, arguments);
	  };
	}

	function delayConstant(id, value) {
	  return value = +value, function () {
	    init$1(this, id).delay = value;
	  };
	}

	function transition_delay (value) {
	  var id = this._id;
	  return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id, value)) : get$3(this.node(), id).delay;
	}

	function durationFunction(id, value) {
	  return function () {
	    set$4(this, id).duration = +value.apply(this, arguments);
	  };
	}

	function durationConstant(id, value) {
	  return value = +value, function () {
	    set$4(this, id).duration = value;
	  };
	}

	function transition_duration (value) {
	  var id = this._id;
	  return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id, value)) : get$3(this.node(), id).duration;
	}

	function easeConstant(id, value) {
	  if (typeof value !== "function") throw new Error();
	  return function () {
	    set$4(this, id).ease = value;
	  };
	}

	function transition_ease (value) {
	  var id = this._id;
	  return arguments.length ? this.each(easeConstant(id, value)) : get$3(this.node(), id).ease;
	}

	function easeVarying(id, value) {
	  return function () {
	    var v = value.apply(this, arguments);
	    if (typeof v !== "function") throw new Error();
	    set$4(this, id).ease = v;
	  };
	}

	function transition_easeVarying (value) {
	  if (typeof value !== "function") throw new Error();
	  return this.each(easeVarying(this._id, value));
	}

	function transition_filter (match) {
	  if (typeof match !== "function") match = matcher(match);

	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
	      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
	        subgroup.push(node);
	      }
	    }
	  }

	  return new Transition(subgroups, this._parents, this._name, this._id);
	}

	function transition_merge (transition) {
	  if (transition._id !== this._id) throw new Error();

	  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
	    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
	      if (node = group0[i] || group1[i]) {
	        merge[i] = node;
	      }
	    }
	  }

	  for (; j < m0; ++j) {
	    merges[j] = groups0[j];
	  }

	  return new Transition(merges, this._parents, this._name, this._id);
	}

	var $every$1 = arrayIteration.every;



	var STRICT_METHOD$6 = arrayMethodIsStrict('every');
	var USES_TO_LENGTH$9 = arrayMethodUsesToLength('every');

	// `Array.prototype.every` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.every
	_export({ target: 'Array', proto: true, forced: !STRICT_METHOD$6 || !USES_TO_LENGTH$9 }, {
	  every: function every(callbackfn /* , thisArg */) {
	    return $every$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	function start(name) {
	  return (name + "").trim().split(/^|\s+/).every(function (t) {
	    var i = t.indexOf(".");
	    if (i >= 0) t = t.slice(0, i);
	    return !t || t === "start";
	  });
	}

	function onFunction(id, name, listener) {
	  var on0,
	      on1,
	      sit = start(name) ? init$1 : set$4;
	  return function () {
	    var schedule = sit(this, id),
	        on = schedule.on; // If this node shared a dispatch with the previous node,
	    // just assign the updated shared dispatch and weâre done!
	    // Otherwise, copy-on-write.

	    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);
	    schedule.on = on1;
	  };
	}

	function transition_on (name, listener) {
	  var id = this._id;
	  return arguments.length < 2 ? get$3(this.node(), id).on.on(name) : this.each(onFunction(id, name, listener));
	}

	function removeFunction(id) {
	  return function () {
	    var parent = this.parentNode;

	    for (var i in this.__transition) {
	      if (+i !== id) return;
	    }

	    if (parent) parent.removeChild(this);
	  };
	}

	function transition_remove () {
	  return this.on("end.remove", removeFunction(this._id));
	}

	function transition_select (select) {
	  var name = this._name,
	      id = this._id;
	  if (typeof select !== "function") select = selector(select);

	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
	      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
	        if ("__data__" in node) subnode.__data__ = node.__data__;
	        subgroup[i] = subnode;
	        schedule(subgroup[i], name, id, i, subgroup, get$3(node, id));
	      }
	    }
	  }

	  return new Transition(subgroups, this._parents, name, id);
	}

	function transition_selectAll (select) {
	  var name = this._name,
	      id = this._id;
	  if (typeof select !== "function") select = selectorAll(select);

	  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        for (var children = select.call(node, node.__data__, i, group), child, inherit = get$3(node, id), k = 0, l = children.length; k < l; ++k) {
	          if (child = children[k]) {
	            schedule(child, name, id, k, children, inherit);
	          }
	        }

	        subgroups.push(children);
	        parents.push(node);
	      }
	    }
	  }

	  return new Transition(subgroups, parents, name, id);
	}

	var Selection$1 = selection.prototype.constructor;
	function transition_selection () {
	  return new Selection$1(this._groups, this._parents);
	}

	function styleNull(name, interpolate) {
	  var string00, string10, interpolate0;
	  return function () {
	    var string0 = styleValue(this, name),
	        string1 = (this.style.removeProperty(name), styleValue(this, name));
	    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);
	  };
	}

	function styleRemove$1(name) {
	  return function () {
	    this.style.removeProperty(name);
	  };
	}

	function styleConstant$1(name, interpolate, value1) {
	  var string00,
	      string1 = value1 + "",
	      interpolate0;
	  return function () {
	    var string0 = styleValue(this, name);
	    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
	  };
	}

	function styleFunction$1(name, interpolate, value) {
	  var string00, string10, interpolate0;
	  return function () {
	    var string0 = styleValue(this, name),
	        value1 = value(this),
	        string1 = value1 + "";
	    if (value1 == null) string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));
	    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
	  };
	}

	function styleMaybeRemove(id, name) {
	  var on0,
	      on1,
	      listener0,
	      key = "style." + name,
	      event = "end." + key,
	      remove;
	  return function () {
	    var schedule = set$4(this, id),
	        on = schedule.on,
	        listener = schedule.value[key] == null ? remove || (remove = styleRemove$1(name)) : undefined; // If this node shared a dispatch with the previous node,
	    // just assign the updated shared dispatch and weâre done!
	    // Otherwise, copy-on-write.

	    if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);
	    schedule.on = on1;
	  };
	}

	function transition_style (name, value, priority) {
	  var i = (name += "") === "transform" ? interpolateTransformCss : interpolate$1;
	  return value == null ? this.styleTween(name, styleNull(name, i)).on("end.style." + name, styleRemove$1(name)) : typeof value === "function" ? this.styleTween(name, styleFunction$1(name, i, tweenValue(this, "style." + name, value))).each(styleMaybeRemove(this._id, name)) : this.styleTween(name, styleConstant$1(name, i, value), priority).on("end.style." + name, null);
	}

	function styleInterpolate(name, i, priority) {
	  return function (t) {
	    this.style.setProperty(name, i.call(this, t), priority);
	  };
	}

	function styleTween(name, value, priority) {
	  var t, i0;

	  function tween() {
	    var i = value.apply(this, arguments);
	    if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);
	    return t;
	  }

	  tween._value = value;
	  return tween;
	}

	function transition_styleTween (name, value, priority) {
	  var key = "style." + (name += "");
	  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
	  if (value == null) return this.tween(key, null);
	  if (typeof value !== "function") throw new Error();
	  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
	}

	function textConstant$1(value) {
	  return function () {
	    this.textContent = value;
	  };
	}

	function textFunction$1(value) {
	  return function () {
	    var value1 = value(this);
	    this.textContent = value1 == null ? "" : value1;
	  };
	}

	function transition_text (value) {
	  return this.tween("text", typeof value === "function" ? textFunction$1(tweenValue(this, "text", value)) : textConstant$1(value == null ? "" : value + ""));
	}

	function textInterpolate(i) {
	  return function (t) {
	    this.textContent = i.call(this, t);
	  };
	}

	function textTween(value) {
	  var t0, i0;

	  function tween() {
	    var i = value.apply(this, arguments);
	    if (i !== i0) t0 = (i0 = i) && textInterpolate(i);
	    return t0;
	  }

	  tween._value = value;
	  return tween;
	}

	function transition_textTween (value) {
	  var key = "text";
	  if (arguments.length < 1) return (key = this.tween(key)) && key._value;
	  if (value == null) return this.tween(key, null);
	  if (typeof value !== "function") throw new Error();
	  return this.tween(key, textTween(value));
	}

	function transition_transition () {
	  var name = this._name,
	      id0 = this._id,
	      id1 = newId();

	  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        var inherit = get$3(node, id0);
	        schedule(node, name, id1, i, group, {
	          time: inherit.time + inherit.delay + inherit.duration,
	          delay: 0,
	          duration: inherit.duration,
	          ease: inherit.ease
	        });
	      }
	    }
	  }

	  return new Transition(groups, this._parents, name, id1);
	}

	function transition_end () {
	  var on0,
	      on1,
	      that = this,
	      id = that._id,
	      size = that.size();
	  return new Promise(function (resolve, reject) {
	    var cancel = {
	      value: reject
	    },
	        end = {
	      value: function value() {
	        if (--size === 0) resolve();
	      }
	    };
	    that.each(function () {
	      var schedule = set$4(this, id),
	          on = schedule.on; // If this node shared a dispatch with the previous node,
	      // just assign the updated shared dispatch and weâre done!
	      // Otherwise, copy-on-write.

	      if (on !== on0) {
	        on1 = (on0 = on).copy();

	        on1._.cancel.push(cancel);

	        on1._.interrupt.push(cancel);

	        on1._.end.push(end);
	      }

	      schedule.on = on1;
	    }); // The selection was empty, resolve end immediately

	    if (size === 0) resolve();
	  });
	}

	var id$1 = 0;
	function Transition(groups, parents, name, id) {
	  this._groups = groups;
	  this._parents = parents;
	  this._name = name;
	  this._id = id;
	}
	function transition(name) {
	  return selection().transition(name);
	}
	function newId() {
	  return ++id$1;
	}
	var selection_prototype = selection.prototype;
	Transition.prototype = transition.prototype = _defineProperty({
	  constructor: Transition,
	  select: transition_select,
	  selectAll: transition_selectAll,
	  filter: transition_filter,
	  merge: transition_merge,
	  selection: transition_selection,
	  transition: transition_transition,
	  call: selection_prototype.call,
	  nodes: selection_prototype.nodes,
	  node: selection_prototype.node,
	  size: selection_prototype.size,
	  empty: selection_prototype.empty,
	  each: selection_prototype.each,
	  on: transition_on,
	  attr: transition_attr,
	  attrTween: transition_attrTween,
	  style: transition_style,
	  styleTween: transition_styleTween,
	  text: transition_text,
	  textTween: transition_textTween,
	  remove: transition_remove,
	  tween: transition_tween,
	  delay: transition_delay,
	  duration: transition_duration,
	  ease: transition_ease,
	  easeVarying: transition_easeVarying,
	  end: transition_end
	}, Symbol.iterator, selection_prototype[Symbol.iterator]);

	function cubicInOut(t) {
	  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
	}

	var defaultTiming = {
	  time: null,
	  // Set on use.
	  delay: 0,
	  duration: 250,
	  ease: cubicInOut
	};

	function inherit(node, id) {
	  var timing;

	  while (!(timing = node.__transition) || !(timing = timing[id])) {
	    if (!(node = node.parentNode)) {
	      throw new Error("transition ".concat(id, " not found"));
	    }
	  }

	  return timing;
	}

	function selection_transition (name) {
	  var id, timing;

	  if (name instanceof Transition) {
	    id = name._id, name = name._name;
	  } else {
	    id = newId(), (timing = defaultTiming).time = now$1(), name = name == null ? null : name + "";
	  }

	  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        schedule(node, name, id, i, group, timing || inherit(node, id));
	      }
	    }
	  }

	  return new Transition(groups, this._parents, name, id);
	}

	selection.prototype.interrupt = selection_interrupt;
	selection.prototype.transition = selection_transition;

	var pi = Math.PI,
	    tau = 2 * pi,
	    epsilon = 1e-6,
	    tauEpsilon = tau - epsilon;

	function Path() {
	  this._x0 = this._y0 = // start of current subpath
	  this._x1 = this._y1 = null; // end of current subpath

	  this._ = "";
	}

	function path$1() {
	  return new Path();
	}

	Path.prototype = path$1.prototype = {
	  constructor: Path,
	  moveTo: function moveTo(x, y) {
	    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
	  },
	  closePath: function closePath() {
	    if (this._x1 !== null) {
	      this._x1 = this._x0, this._y1 = this._y0;
	      this._ += "Z";
	    }
	  },
	  lineTo: function lineTo(x, y) {
	    this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
	  },
	  quadraticCurveTo: function quadraticCurveTo(x1, y1, x, y) {
	    this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
	  },
	  bezierCurveTo: function bezierCurveTo(x1, y1, x2, y2, x, y) {
	    this._ += "C" + +x1 + "," + +y1 + "," + +x2 + "," + +y2 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
	  },
	  arcTo: function arcTo(x1, y1, x2, y2, r) {
	    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
	    var x0 = this._x1,
	        y0 = this._y1,
	        x21 = x2 - x1,
	        y21 = y2 - y1,
	        x01 = x0 - x1,
	        y01 = y0 - y1,
	        l01_2 = x01 * x01 + y01 * y01; // Is the radius negative? Error.

	    if (r < 0) throw new Error("negative radius: " + r); // Is this path empty? Move to (x1,y1).

	    if (this._x1 === null) {
	      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
	    } // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
	    else if (!(l01_2 > epsilon)) ; // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
	      // Equivalently, is (x1,y1) coincident with (x2,y2)?
	      // Or, is the radius zero? Line to (x1,y1).
	      else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
	          this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
	        } // Otherwise, draw an arc!
	        else {
	            var x20 = x2 - x0,
	                y20 = y2 - y0,
	                l21_2 = x21 * x21 + y21 * y21,
	                l20_2 = x20 * x20 + y20 * y20,
	                l21 = Math.sqrt(l21_2),
	                l01 = Math.sqrt(l01_2),
	                l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
	                t01 = l / l01,
	                t21 = l / l21; // If the start tangent is not coincident with (x0,y0), line to.

	            if (Math.abs(t01 - 1) > epsilon) {
	              this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
	            }

	            this._ += "A" + r + "," + r + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
	          }
	  },
	  arc: function arc(x, y, r, a0, a1, ccw) {
	    x = +x, y = +y, r = +r, ccw = !!ccw;
	    var dx = r * Math.cos(a0),
	        dy = r * Math.sin(a0),
	        x0 = x + dx,
	        y0 = y + dy,
	        cw = 1 ^ ccw,
	        da = ccw ? a0 - a1 : a1 - a0; // Is the radius negative? Error.

	    if (r < 0) throw new Error("negative radius: " + r); // Is this path empty? Move to (x0,y0).

	    if (this._x1 === null) {
	      this._ += "M" + x0 + "," + y0;
	    } // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
	    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
	        this._ += "L" + x0 + "," + y0;
	      } // Is this arc empty? Weâre done.


	    if (!r) return; // Does the angle go the wrong way? Flip the direction.

	    if (da < 0) da = da % tau + tau; // Is this a complete circle? Draw two arcs to complete the circle.

	    if (da > tauEpsilon) {
	      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
	    } // Is this arc non-empty? Draw an arc!
	    else if (da > epsilon) {
	        this._ += "A" + r + "," + r + ",0," + +(da >= pi) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
	      }
	  },
	  rect: function rect(x, y, w, h) {
	    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + +w + "v" + +h + "h" + -w + "Z";
	  },
	  toString: function toString() {
	    return this._;
	  }
	};

	var $hypot = Math.hypot;
	var abs$1 = Math.abs;
	var sqrt = Math.sqrt;

	// Chrome 77 bug
	// https://bugs.chromium.org/p/v8/issues/detail?id=9546
	var BUGGY = !!$hypot && $hypot(Infinity, NaN) !== Infinity;

	// `Math.hypot` method
	// https://tc39.github.io/ecma262/#sec-math.hypot
	_export({ target: 'Math', stat: true, forced: BUGGY }, {
	  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
	    var sum = 0;
	    var i = 0;
	    var aLen = arguments.length;
	    var larg = 0;
	    var arg, div;
	    while (i < aLen) {
	      arg = abs$1(arguments[i++]);
	      if (larg < arg) {
	        div = larg / arg;
	        sum = sum * div * div + 1;
	        larg = arg;
	      } else if (arg > 0) {
	        div = arg / larg;
	        sum += div * div;
	      } else sum += arg;
	    }
	    return larg === Infinity ? Infinity : larg * sqrt(sum);
	  }
	});

	var EOL = {},
	    EOF = {},
	    QUOTE = 34,
	    NEWLINE = 10,
	    RETURN = 13;

	function objectConverter(columns) {
	  return new Function("d", "return {" + columns.map(function (name, i) {
	    return JSON.stringify(name) + ": d[" + i + "] || \"\"";
	  }).join(",") + "}");
	}

	function customConverter(columns, f) {
	  var object = objectConverter(columns);
	  return function (row, i) {
	    return f(object(row), i, columns);
	  };
	} // Compute unique columns in order of discovery.


	function inferColumns(rows) {
	  var columnSet = Object.create(null),
	      columns = [];
	  rows.forEach(function (row) {
	    for (var column in row) {
	      if (!(column in columnSet)) {
	        columns.push(columnSet[column] = column);
	      }
	    }
	  });
	  return columns;
	}

	function pad(value, width) {
	  var s = value + "",
	      length = s.length;
	  return length < width ? new Array(width - length + 1).join(0) + s : s;
	}

	function formatYear(year) {
	  return year < 0 ? "-" + pad(-year, 6) : year > 9999 ? "+" + pad(year, 6) : pad(year, 4);
	}

	function formatDate(date) {
	  var hours = date.getUTCHours(),
	      minutes = date.getUTCMinutes(),
	      seconds = date.getUTCSeconds(),
	      milliseconds = date.getUTCMilliseconds();
	  return isNaN(date) ? "Invalid Date" : formatYear(date.getUTCFullYear()) + "-" + pad(date.getUTCMonth() + 1, 2) + "-" + pad(date.getUTCDate(), 2) + (milliseconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "." + pad(milliseconds, 3) + "Z" : seconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "Z" : minutes || hours ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + "Z" : "");
	}

	function dsvFormat (delimiter) {
	  var reFormat = new RegExp("[\"" + delimiter + "\n\r]"),
	      DELIMITER = delimiter.charCodeAt(0);

	  function parse(text, f) {
	    var convert,
	        columns,
	        rows = parseRows(text, function (row, i) {
	      if (convert) return convert(row, i - 1);
	      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
	    });
	    rows.columns = columns || [];
	    return rows;
	  }

	  function parseRows(text, f) {
	    var rows = [],
	        // output rows
	    N = text.length,
	        I = 0,
	        // current character index
	    n = 0,
	        // current line number
	    t,
	        // current token
	    eof = N <= 0,
	        // current token followed by EOF?
	    eol = false; // current token followed by EOL?
	    // Strip the trailing newline.

	    if (text.charCodeAt(N - 1) === NEWLINE) --N;
	    if (text.charCodeAt(N - 1) === RETURN) --N;

	    function token() {
	      if (eof) return EOF;
	      if (eol) return eol = false, EOL; // Unescape quotes.

	      var i,
	          j = I,
	          c;

	      if (text.charCodeAt(j) === QUOTE) {
	        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE) {
	        }

	        if ((i = I) >= N) eof = true;else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;else if (c === RETURN) {
	          eol = true;
	          if (text.charCodeAt(I) === NEWLINE) ++I;
	        }
	        return text.slice(j + 1, i - 1).replace(/""/g, "\"");
	      } // Find next delimiter or newline.


	      while (I < N) {
	        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;else if (c === RETURN) {
	          eol = true;
	          if (text.charCodeAt(I) === NEWLINE) ++I;
	        } else if (c !== DELIMITER) continue;
	        return text.slice(j, i);
	      } // Return last token before EOF.


	      return eof = true, text.slice(j, N);
	    }

	    while ((t = token()) !== EOF) {
	      var row = [];

	      while (t !== EOL && t !== EOF) {
	        row.push(t), t = token();
	      }

	      if (f && (row = f(row, n++)) == null) continue;
	      rows.push(row);
	    }

	    return rows;
	  }

	  function preformatBody(rows, columns) {
	    return rows.map(function (row) {
	      return columns.map(function (column) {
	        return formatValue(row[column]);
	      }).join(delimiter);
	    });
	  }

	  function format(rows, columns) {
	    if (columns == null) columns = inferColumns(rows);
	    return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join("\n");
	  }

	  function formatBody(rows, columns) {
	    if (columns == null) columns = inferColumns(rows);
	    return preformatBody(rows, columns).join("\n");
	  }

	  function formatRows(rows) {
	    return rows.map(formatRow).join("\n");
	  }

	  function formatRow(row) {
	    return row.map(formatValue).join(delimiter);
	  }

	  function formatValue(value) {
	    return value == null ? "" : value instanceof Date ? formatDate(value) : reFormat.test(value += "") ? "\"" + value.replace(/"/g, "\"\"") + "\"" : value;
	  }

	  return {
	    parse: parse,
	    parseRows: parseRows,
	    format: format,
	    formatBody: formatBody,
	    formatRows: formatRows,
	    formatRow: formatRow,
	    formatValue: formatValue
	  };
	}

	var csv = dsvFormat(",");
	var csvParse = csv.parse;

	function responseText(response) {
	  if (!response.ok) throw new Error(response.status + " " + response.statusText);
	  return response.text();
	}

	function text$1 (input, init) {
	  return fetch(input, init).then(responseText);
	}

	function dsvParse(parse) {
	  return function (input, init, row) {
	    if (arguments.length === 2 && typeof init === "function") row = init, init = undefined;
	    return text$1(input, init).then(function (response) {
	      return parse(response, row);
	    });
	  };
	}
	var csv$1 = dsvParse(csvParse);

	function responseJson(response) {
	  if (!response.ok) throw new Error(response.status + " " + response.statusText);
	  if (response.status === 204 || response.status === 205) return;
	  return response.json();
	}

	function json (input, init) {
	  return fetch(input, init).then(responseJson);
	}

	function forceCenter (x, y) {
	  var nodes,
	      strength = 1;
	  if (x == null) x = 0;
	  if (y == null) y = 0;

	  function force() {
	    var i,
	        n = nodes.length,
	        node,
	        sx = 0,
	        sy = 0;

	    for (i = 0; i < n; ++i) {
	      node = nodes[i], sx += node.x, sy += node.y;
	    }

	    for (sx = (sx / n - x) * strength, sy = (sy / n - y) * strength, i = 0; i < n; ++i) {
	      node = nodes[i], node.x -= sx, node.y -= sy;
	    }
	  }

	  force.initialize = function (_) {
	    nodes = _;
	  };

	  force.x = function (_) {
	    return arguments.length ? (x = +_, force) : x;
	  };

	  force.y = function (_) {
	    return arguments.length ? (y = +_, force) : y;
	  };

	  force.strength = function (_) {
	    return arguments.length ? (strength = +_, force) : strength;
	  };

	  return force;
	}

	function tree_add (d) {
	  var x = +this._x.call(null, d),
	      y = +this._y.call(null, d);
	  return add(this.cover(x, y), x, y, d);
	}

	function add(tree, x, y, d) {
	  if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points

	  var parent,
	      node = tree._root,
	      leaf = {
	    data: d
	  },
	      x0 = tree._x0,
	      y0 = tree._y0,
	      x1 = tree._x1,
	      y1 = tree._y1,
	      xm,
	      ym,
	      xp,
	      yp,
	      right,
	      bottom,
	      i,
	      j; // If the tree is empty, initialize the root as a leaf.

	  if (!node) return tree._root = leaf, tree; // Find the existing leaf for the new point, or add it.

	  while (node.length) {
	    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;
	    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;
	    if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;
	  } // Is the new point is exactly coincident with the existing point?


	  xp = +tree._x.call(null, node.data);
	  yp = +tree._y.call(null, node.data);
	  if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree; // Otherwise, split the leaf node until the old and new point are separated.

	  do {
	    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
	    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;
	    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;
	  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | xp >= xm));

	  return parent[j] = node, parent[i] = leaf, tree;
	}

	function addAll(data) {
	  var d,
	      i,
	      n = data.length,
	      x,
	      y,
	      xz = new Array(n),
	      yz = new Array(n),
	      x0 = Infinity,
	      y0 = Infinity,
	      x1 = -Infinity,
	      y1 = -Infinity; // Compute the points and their extent.

	  for (i = 0; i < n; ++i) {
	    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;
	    xz[i] = x;
	    yz[i] = y;
	    if (x < x0) x0 = x;
	    if (x > x1) x1 = x;
	    if (y < y0) y0 = y;
	    if (y > y1) y1 = y;
	  } // If there were no (valid) points, abort.


	  if (x0 > x1 || y0 > y1) return this; // Expand the tree to cover the new points.

	  this.cover(x0, y0).cover(x1, y1); // Add the new points.

	  for (i = 0; i < n; ++i) {
	    add(this, xz[i], yz[i], data[i]);
	  }

	  return this;
	}

	function tree_cover (x, y) {
	  if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points

	  var x0 = this._x0,
	      y0 = this._y0,
	      x1 = this._x1,
	      y1 = this._y1; // If the quadtree has no extent, initialize them.
	  // Integer extent are necessary so that if we later double the extent,
	  // the existing quadrant boundaries donât change due to floating point error!

	  if (isNaN(x0)) {
	    x1 = (x0 = Math.floor(x)) + 1;
	    y1 = (y0 = Math.floor(y)) + 1;
	  } // Otherwise, double repeatedly to cover.
	  else {
	      var z = x1 - x0 || 1,
	          node = this._root,
	          parent,
	          i;

	      while (x0 > x || x >= x1 || y0 > y || y >= y1) {
	        i = (y < y0) << 1 | x < x0;
	        parent = new Array(4), parent[i] = node, node = parent, z *= 2;

	        switch (i) {
	          case 0:
	            x1 = x0 + z, y1 = y0 + z;
	            break;

	          case 1:
	            x0 = x1 - z, y1 = y0 + z;
	            break;

	          case 2:
	            x1 = x0 + z, y0 = y1 - z;
	            break;

	          case 3:
	            x0 = x1 - z, y0 = y1 - z;
	            break;
	        }
	      }

	      if (this._root && this._root.length) this._root = node;
	    }

	  this._x0 = x0;
	  this._y0 = y0;
	  this._x1 = x1;
	  this._y1 = y1;
	  return this;
	}

	function tree_data () {
	  var data = [];
	  this.visit(function (node) {
	    if (!node.length) do {
	      data.push(node.data);
	    } while (node = node.next);
	  });
	  return data;
	}

	function tree_extent (_) {
	  return arguments.length ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1]) : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];
	}

	function Quad (node, x0, y0, x1, y1) {
	  this.node = node;
	  this.x0 = x0;
	  this.y0 = y0;
	  this.x1 = x1;
	  this.y1 = y1;
	}

	function tree_find (x, y, radius) {
	  var data,
	      x0 = this._x0,
	      y0 = this._y0,
	      x1,
	      y1,
	      x2,
	      y2,
	      x3 = this._x1,
	      y3 = this._y1,
	      quads = [],
	      node = this._root,
	      q,
	      i;
	  if (node) quads.push(new Quad(node, x0, y0, x3, y3));
	  if (radius == null) radius = Infinity;else {
	    x0 = x - radius, y0 = y - radius;
	    x3 = x + radius, y3 = y + radius;
	    radius *= radius;
	  }

	  while (q = quads.pop()) {
	    // Stop searching if this quadrant canât contain a closer node.
	    if (!(node = q.node) || (x1 = q.x0) > x3 || (y1 = q.y0) > y3 || (x2 = q.x1) < x0 || (y2 = q.y1) < y0) continue; // Bisect the current quadrant.

	    if (node.length) {
	      var xm = (x1 + x2) / 2,
	          ym = (y1 + y2) / 2;
	      quads.push(new Quad(node[3], xm, ym, x2, y2), new Quad(node[2], x1, ym, xm, y2), new Quad(node[1], xm, y1, x2, ym), new Quad(node[0], x1, y1, xm, ym)); // Visit the closest quadrant first.

	      if (i = (y >= ym) << 1 | x >= xm) {
	        q = quads[quads.length - 1];
	        quads[quads.length - 1] = quads[quads.length - 1 - i];
	        quads[quads.length - 1 - i] = q;
	      }
	    } // Visit this point. (Visiting coincident points isnât necessary!)
	    else {
	        var dx = x - +this._x.call(null, node.data),
	            dy = y - +this._y.call(null, node.data),
	            d2 = dx * dx + dy * dy;

	        if (d2 < radius) {
	          var d = Math.sqrt(radius = d2);
	          x0 = x - d, y0 = y - d;
	          x3 = x + d, y3 = y + d;
	          data = node.data;
	        }
	      }
	  }

	  return data;
	}

	function tree_remove (d) {
	  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points

	  var parent,
	      node = this._root,
	      retainer,
	      previous,
	      next,
	      x0 = this._x0,
	      y0 = this._y0,
	      x1 = this._x1,
	      y1 = this._y1,
	      x,
	      y,
	      xm,
	      ym,
	      right,
	      bottom,
	      i,
	      j; // If the tree is empty, initialize the root as a leaf.

	  if (!node) return this; // Find the leaf node for the point.
	  // While descending, also retain the deepest parent with a non-removed sibling.

	  if (node.length) while (true) {
	    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;
	    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;
	    if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
	    if (!node.length) break;
	    if (parent[i + 1 & 3] || parent[i + 2 & 3] || parent[i + 3 & 3]) retainer = parent, j = i;
	  } // Find the point to remove.

	  while (node.data !== d) {
	    if (!(previous = node, node = node.next)) return this;
	  }

	  if (next = node.next) delete node.next; // If there are multiple coincident points, remove just the point.

	  if (previous) return next ? previous.next = next : delete previous.next, this; // If this is the root point, remove it.

	  if (!parent) return this._root = next, this; // Remove this leaf.

	  next ? parent[i] = next : delete parent[i]; // If the parent now contains exactly one leaf, collapse superfluous parents.

	  if ((node = parent[0] || parent[1] || parent[2] || parent[3]) && node === (parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {
	    if (retainer) retainer[j] = node;else this._root = node;
	  }

	  return this;
	}
	function removeAll(data) {
	  for (var i = 0, n = data.length; i < n; ++i) {
	    this.remove(data[i]);
	  }

	  return this;
	}

	function tree_root () {
	  return this._root;
	}

	function tree_size () {
	  var size = 0;
	  this.visit(function (node) {
	    if (!node.length) do {
	      ++size;
	    } while (node = node.next);
	  });
	  return size;
	}

	function tree_visit (callback) {
	  var quads = [],
	      q,
	      node = this._root,
	      child,
	      x0,
	      y0,
	      x1,
	      y1;
	  if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));

	  while (q = quads.pop()) {
	    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
	      var xm = (x0 + x1) / 2,
	          ym = (y0 + y1) / 2;
	      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
	      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
	      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
	      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
	    }
	  }

	  return this;
	}

	function tree_visitAfter (callback) {
	  var quads = [],
	      next = [],
	      q;
	  if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));

	  while (q = quads.pop()) {
	    var node = q.node;

	    if (node.length) {
	      var child,
	          x0 = q.x0,
	          y0 = q.y0,
	          x1 = q.x1,
	          y1 = q.y1,
	          xm = (x0 + x1) / 2,
	          ym = (y0 + y1) / 2;
	      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
	      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
	      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
	      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
	    }

	    next.push(q);
	  }

	  while (q = next.pop()) {
	    callback(q.node, q.x0, q.y0, q.x1, q.y1);
	  }

	  return this;
	}

	function defaultX(d) {
	  return d[0];
	}
	function tree_x (_) {
	  return arguments.length ? (this._x = _, this) : this._x;
	}

	function defaultY(d) {
	  return d[1];
	}
	function tree_y (_) {
	  return arguments.length ? (this._y = _, this) : this._y;
	}

	function quadtree(nodes, x, y) {
	  var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);
	  return nodes == null ? tree : tree.addAll(nodes);
	}

	function Quadtree(x, y, x0, y0, x1, y1) {
	  this._x = x;
	  this._y = y;
	  this._x0 = x0;
	  this._y0 = y0;
	  this._x1 = x1;
	  this._y1 = y1;
	  this._root = undefined;
	}

	function leaf_copy(leaf) {
	  var copy = {
	    data: leaf.data
	  },
	      next = copy;

	  while (leaf = leaf.next) {
	    next = next.next = {
	      data: leaf.data
	    };
	  }

	  return copy;
	}

	var treeProto = quadtree.prototype = Quadtree.prototype;

	treeProto.copy = function () {
	  var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),
	      node = this._root,
	      nodes,
	      child;
	  if (!node) return copy;
	  if (!node.length) return copy._root = leaf_copy(node), copy;
	  nodes = [{
	    source: node,
	    target: copy._root = new Array(4)
	  }];

	  while (node = nodes.pop()) {
	    for (var i = 0; i < 4; ++i) {
	      if (child = node.source[i]) {
	        if (child.length) nodes.push({
	          source: child,
	          target: node.target[i] = new Array(4)
	        });else node.target[i] = leaf_copy(child);
	      }
	    }
	  }

	  return copy;
	};

	treeProto.add = tree_add;
	treeProto.addAll = addAll;
	treeProto.cover = tree_cover;
	treeProto.data = tree_data;
	treeProto.extent = tree_extent;
	treeProto.find = tree_find;
	treeProto.remove = tree_remove;
	treeProto.removeAll = removeAll;
	treeProto.root = tree_root;
	treeProto.size = tree_size;
	treeProto.visit = tree_visit;
	treeProto.visitAfter = tree_visitAfter;
	treeProto.x = tree_x;
	treeProto.y = tree_y;

	function constant$2 (x) {
	  return function () {
	    return x;
	  };
	}

	function jiggle (random) {
	  return (random() - 0.5) * 1e-6;
	}

	function x(d) {
	  return d.x + d.vx;
	}

	function y(d) {
	  return d.y + d.vy;
	}

	function forceCollide (radius) {
	  var nodes,
	      radii,
	      random,
	      strength = 1,
	      iterations = 1;
	  if (typeof radius !== "function") radius = constant$2(radius == null ? 1 : +radius);

	  function force() {
	    var i,
	        n = nodes.length,
	        tree,
	        node,
	        xi,
	        yi,
	        ri,
	        ri2;

	    for (var k = 0; k < iterations; ++k) {
	      tree = quadtree(nodes, x, y).visitAfter(prepare);

	      for (i = 0; i < n; ++i) {
	        node = nodes[i];
	        ri = radii[node.index], ri2 = ri * ri;
	        xi = node.x + node.vx;
	        yi = node.y + node.vy;
	        tree.visit(apply);
	      }
	    }

	    function apply(quad, x0, y0, x1, y1) {
	      var data = quad.data,
	          rj = quad.r,
	          r = ri + rj;

	      if (data) {
	        if (data.index > node.index) {
	          var x = xi - data.x - data.vx,
	              y = yi - data.y - data.vy,
	              l = x * x + y * y;

	          if (l < r * r) {
	            if (x === 0) x = jiggle(random), l += x * x;
	            if (y === 0) y = jiggle(random), l += y * y;
	            l = (r - (l = Math.sqrt(l))) / l * strength;
	            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));
	            node.vy += (y *= l) * r;
	            data.vx -= x * (r = 1 - r);
	            data.vy -= y * r;
	          }
	        }

	        return;
	      }

	      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
	    }
	  }

	  function prepare(quad) {
	    if (quad.data) return quad.r = radii[quad.data.index];

	    for (var i = quad.r = 0; i < 4; ++i) {
	      if (quad[i] && quad[i].r > quad.r) {
	        quad.r = quad[i].r;
	      }
	    }
	  }

	  function initialize() {
	    if (!nodes) return;
	    var i,
	        n = nodes.length,
	        node;
	    radii = new Array(n);

	    for (i = 0; i < n; ++i) {
	      node = nodes[i], radii[node.index] = +radius(node, i, nodes);
	    }
	  }

	  force.initialize = function (_nodes, _random) {
	    nodes = _nodes;
	    random = _random;
	    initialize();
	  };

	  force.iterations = function (_) {
	    return arguments.length ? (iterations = +_, force) : iterations;
	  };

	  force.strength = function (_) {
	    return arguments.length ? (strength = +_, force) : strength;
	  };

	  force.radius = function (_) {
	    return arguments.length ? (radius = typeof _ === "function" ? _ : constant$2(+_), initialize(), force) : radius;
	  };

	  return force;
	}

	// https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use
	var a = 1664525;
	var c = 1013904223;
	var m = 4294967296; // 2^32

	function lcg () {
	  var s = 1;
	  return function () {
	    return (s = (a * s + c) % m) / m;
	  };
	}

	function x$1(d) {
	  return d.x;
	}
	function y$1(d) {
	  return d.y;
	}
	var initialRadius = 10,
	    initialAngle = Math.PI * (3 - Math.sqrt(5));
	function forceSimulation (_nodes) {
	  var simulation,
	      _alpha = 1,
	      _alphaMin = 0.001,
	      _alphaDecay = 1 - Math.pow(_alphaMin, 1 / 300),
	      _alphaTarget = 0,
	      _velocityDecay = 0.6,
	      forces = new Map(),
	      stepper = timer(step),
	      event = dispatch$1("tick", "end"),
	      random = lcg();

	  if (_nodes == null) _nodes = [];

	  function step() {
	    tick();
	    event.call("tick", simulation);

	    if (_alpha < _alphaMin) {
	      stepper.stop();
	      event.call("end", simulation);
	    }
	  }

	  function tick(iterations) {
	    var i,
	        n = _nodes.length,
	        node;
	    if (iterations === undefined) iterations = 1;

	    for (var k = 0; k < iterations; ++k) {
	      _alpha += (_alphaTarget - _alpha) * _alphaDecay;
	      forces.forEach(function (force) {
	        force(_alpha);
	      });

	      for (i = 0; i < n; ++i) {
	        node = _nodes[i];
	        if (node.fx == null) node.x += node.vx *= _velocityDecay;else node.x = node.fx, node.vx = 0;
	        if (node.fy == null) node.y += node.vy *= _velocityDecay;else node.y = node.fy, node.vy = 0;
	      }
	    }

	    return simulation;
	  }

	  function initializeNodes() {
	    for (var i = 0, n = _nodes.length, node; i < n; ++i) {
	      node = _nodes[i], node.index = i;
	      if (node.fx != null) node.x = node.fx;
	      if (node.fy != null) node.y = node.fy;

	      if (isNaN(node.x) || isNaN(node.y)) {
	        var radius = initialRadius * Math.sqrt(0.5 + i),
	            angle = i * initialAngle;
	        node.x = radius * Math.cos(angle);
	        node.y = radius * Math.sin(angle);
	      }

	      if (isNaN(node.vx) || isNaN(node.vy)) {
	        node.vx = node.vy = 0;
	      }
	    }
	  }

	  function initializeForce(force) {
	    if (force.initialize) force.initialize(_nodes, random);
	    return force;
	  }

	  initializeNodes();
	  return simulation = {
	    tick: tick,
	    restart: function restart() {
	      return stepper.restart(step), simulation;
	    },
	    stop: function stop() {
	      return stepper.stop(), simulation;
	    },
	    nodes: function nodes(_) {
	      return arguments.length ? (_nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : _nodes;
	    },
	    alpha: function alpha(_) {
	      return arguments.length ? (_alpha = +_, simulation) : _alpha;
	    },
	    alphaMin: function alphaMin(_) {
	      return arguments.length ? (_alphaMin = +_, simulation) : _alphaMin;
	    },
	    alphaDecay: function alphaDecay(_) {
	      return arguments.length ? (_alphaDecay = +_, simulation) : +_alphaDecay;
	    },
	    alphaTarget: function alphaTarget(_) {
	      return arguments.length ? (_alphaTarget = +_, simulation) : _alphaTarget;
	    },
	    velocityDecay: function velocityDecay(_) {
	      return arguments.length ? (_velocityDecay = 1 - _, simulation) : 1 - _velocityDecay;
	    },
	    randomSource: function randomSource(_) {
	      return arguments.length ? (random = _, forces.forEach(initializeForce), simulation) : random;
	    },
	    force: function force(name, _) {
	      return arguments.length > 1 ? (_ == null ? forces.delete(name) : forces.set(name, initializeForce(_)), simulation) : forces.get(name);
	    },
	    find: function find(x, y, radius) {
	      var i = 0,
	          n = _nodes.length,
	          dx,
	          dy,
	          d2,
	          node,
	          closest;
	      if (radius == null) radius = Infinity;else radius *= radius;

	      for (i = 0; i < n; ++i) {
	        node = _nodes[i];
	        dx = x - node.x;
	        dy = y - node.y;
	        d2 = dx * dx + dy * dy;
	        if (d2 < radius) closest = node, radius = d2;
	      }

	      return closest;
	    },
	    on: function on(name, _) {
	      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
	    }
	  };
	}

	function forceManyBody () {
	  var nodes,
	      node,
	      random,
	      alpha,
	      strength = constant$2(-30),
	      strengths,
	      distanceMin2 = 1,
	      distanceMax2 = Infinity,
	      theta2 = 0.81;

	  function force(_) {
	    var i,
	        n = nodes.length,
	        tree = quadtree(nodes, x$1, y$1).visitAfter(accumulate);

	    for (alpha = _, i = 0; i < n; ++i) {
	      node = nodes[i], tree.visit(apply);
	    }
	  }

	  function initialize() {
	    if (!nodes) return;
	    var i,
	        n = nodes.length,
	        node;
	    strengths = new Array(n);

	    for (i = 0; i < n; ++i) {
	      node = nodes[i], strengths[node.index] = +strength(node, i, nodes);
	    }
	  }

	  function accumulate(quad) {
	    var strength = 0,
	        q,
	        c,
	        weight = 0,
	        x,
	        y,
	        i; // For internal nodes, accumulate forces from child quadrants.

	    if (quad.length) {
	      for (x = y = i = 0; i < 4; ++i) {
	        if ((q = quad[i]) && (c = Math.abs(q.value))) {
	          strength += q.value, weight += c, x += c * q.x, y += c * q.y;
	        }
	      }

	      quad.x = x / weight;
	      quad.y = y / weight;
	    } // For leaf nodes, accumulate forces from coincident quadrants.
	    else {
	        q = quad;
	        q.x = q.data.x;
	        q.y = q.data.y;

	        do {
	          strength += strengths[q.data.index];
	        } while (q = q.next);
	      }

	    quad.value = strength;
	  }

	  function apply(quad, x1, _, x2) {
	    if (!quad.value) return true;
	    var x = quad.x - node.x,
	        y = quad.y - node.y,
	        w = x2 - x1,
	        l = x * x + y * y; // Apply the Barnes-Hut approximation if possible.
	    // Limit forces for very close nodes; randomize direction if coincident.

	    if (w * w / theta2 < l) {
	      if (l < distanceMax2) {
	        if (x === 0) x = jiggle(random), l += x * x;
	        if (y === 0) y = jiggle(random), l += y * y;
	        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
	        node.vx += x * quad.value * alpha / l;
	        node.vy += y * quad.value * alpha / l;
	      }

	      return true;
	    } // Otherwise, process points directly.
	    else if (quad.length || l >= distanceMax2) return; // Limit forces for very close nodes; randomize direction if coincident.


	    if (quad.data !== node || quad.next) {
	      if (x === 0) x = jiggle(random), l += x * x;
	      if (y === 0) y = jiggle(random), l += y * y;
	      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
	    }

	    do {
	      if (quad.data !== node) {
	        w = strengths[quad.data.index] * alpha / l;
	        node.vx += x * w;
	        node.vy += y * w;
	      }
	    } while (quad = quad.next);
	  }

	  force.initialize = function (_nodes, _random) {
	    nodes = _nodes;
	    random = _random;
	    initialize();
	  };

	  force.strength = function (_) {
	    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$2(+_), initialize(), force) : strength;
	  };

	  force.distanceMin = function (_) {
	    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
	  };

	  force.distanceMax = function (_) {
	    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
	  };

	  force.theta = function (_) {
	    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
	  };

	  return force;
	}

	function forceX (x) {
	  var strength = constant$2(0.1),
	      nodes,
	      strengths,
	      xz;
	  if (typeof x !== "function") x = constant$2(x == null ? 0 : +x);

	  function force(alpha) {
	    for (var i = 0, n = nodes.length, node; i < n; ++i) {
	      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
	    }
	  }

	  function initialize() {
	    if (!nodes) return;
	    var i,
	        n = nodes.length;
	    strengths = new Array(n);
	    xz = new Array(n);

	    for (i = 0; i < n; ++i) {
	      strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
	    }
	  }

	  force.initialize = function (_) {
	    nodes = _;
	    initialize();
	  };

	  force.strength = function (_) {
	    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$2(+_), initialize(), force) : strength;
	  };

	  force.x = function (_) {
	    return arguments.length ? (x = typeof _ === "function" ? _ : constant$2(+_), initialize(), force) : x;
	  };

	  return force;
	}

	function forceY (y) {
	  var strength = constant$2(0.1),
	      nodes,
	      strengths,
	      yz;
	  if (typeof y !== "function") y = constant$2(y == null ? 0 : +y);

	  function force(alpha) {
	    for (var i = 0, n = nodes.length, node; i < n; ++i) {
	      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
	    }
	  }

	  function initialize() {
	    if (!nodes) return;
	    var i,
	        n = nodes.length;
	    strengths = new Array(n);
	    yz = new Array(n);

	    for (i = 0; i < n; ++i) {
	      strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
	    }
	  }

	  force.initialize = function (_) {
	    nodes = _;
	    initialize();
	  };

	  force.strength = function (_) {
	    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$2(+_), initialize(), force) : strength;
	  };

	  force.y = function (_) {
	    return arguments.length ? (y = typeof _ === "function" ? _ : constant$2(+_), initialize(), force) : y;
	  };

	  return force;
	}

	function formatDecimal (x) {
	  return Math.abs(x = Math.round(x)) >= 1e21 ? x.toLocaleString("en").replace(/,/g, "") : x.toString(10);
	} // Computes the decimal coefficient and exponent of the specified number x with
	// significant digits p, where x is positive and p is in [1, 21] or undefined.
	// For example, formatDecimalParts(1.23) returns ["123", 0].

	function formatDecimalParts(x, p) {
	  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, Â±Infinity

	  var i,
	      coefficient = x.slice(0, i); // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
	  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).

	  return [coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient, +x.slice(i + 1)];
	}

	function exponent (x) {
	  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;
	}

	function formatGroup (grouping, thousands) {
	  return function (value, width) {
	    var i = value.length,
	        t = [],
	        j = 0,
	        g = grouping[0],
	        length = 0;

	    while (i > 0 && g > 0) {
	      if (length + g + 1 > width) g = Math.max(1, width - length);
	      t.push(value.substring(i -= g, i + g));
	      if ((length += g + 1) > width) break;
	      g = grouping[j = (j + 1) % grouping.length];
	    }

	    return t.reverse().join(thousands);
	  };
	}

	function formatNumerals (numerals) {
	  return function (value) {
	    return value.replace(/[0-9]/g, function (i) {
	      return numerals[+i];
	    });
	  };
	}

	// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
	var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
	function formatSpecifier(specifier) {
	  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
	  var match;
	  return new FormatSpecifier({
	    fill: match[1],
	    align: match[2],
	    sign: match[3],
	    symbol: match[4],
	    zero: match[5],
	    width: match[6],
	    comma: match[7],
	    precision: match[8] && match[8].slice(1),
	    trim: match[9],
	    type: match[10]
	  });
	}
	formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

	function FormatSpecifier(specifier) {
	  this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
	  this.align = specifier.align === undefined ? ">" : specifier.align + "";
	  this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
	  this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
	  this.zero = !!specifier.zero;
	  this.width = specifier.width === undefined ? undefined : +specifier.width;
	  this.comma = !!specifier.comma;
	  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
	  this.trim = !!specifier.trim;
	  this.type = specifier.type === undefined ? "" : specifier.type + "";
	}

	FormatSpecifier.prototype.toString = function () {
	  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === undefined ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
	};

	// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
	function formatTrim (s) {
	  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
	    switch (s[i]) {
	      case ".":
	        i0 = i1 = i;
	        break;

	      case "0":
	        if (i0 === 0) i0 = i;
	        i1 = i;
	        break;

	      default:
	        if (!+s[i]) break out;
	        if (i0 > 0) i0 = 0;
	        break;
	    }
	  }

	  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
	}

	// `thisNumberValue` abstract operation
	// https://tc39.github.io/ecma262/#sec-thisnumbervalue
	var thisNumberValue = function (value) {
	  if (typeof value != 'number' && classofRaw(value) != 'Number') {
	    throw TypeError('Incorrect invocation');
	  }
	  return +value;
	};

	// `String.prototype.repeat` method implementation
	// https://tc39.github.io/ecma262/#sec-string.prototype.repeat
	var stringRepeat = ''.repeat || function repeat(count) {
	  var str = String(requireObjectCoercible(this));
	  var result = '';
	  var n = toInteger(count);
	  if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');
	  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;
	  return result;
	};

	var nativeToFixed = 1.0.toFixed;
	var floor$4 = Math.floor;

	var pow$1 = function (x, n, acc) {
	  return n === 0 ? acc : n % 2 === 1 ? pow$1(x, n - 1, acc * x) : pow$1(x * x, n / 2, acc);
	};

	var log$1 = function (x) {
	  var n = 0;
	  var x2 = x;
	  while (x2 >= 4096) {
	    n += 12;
	    x2 /= 4096;
	  }
	  while (x2 >= 2) {
	    n += 1;
	    x2 /= 2;
	  } return n;
	};

	var FORCED$8 = nativeToFixed && (
	  0.00008.toFixed(3) !== '0.000' ||
	  0.9.toFixed(0) !== '1' ||
	  1.255.toFixed(2) !== '1.25' ||
	  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
	) || !fails(function () {
	  // V8 ~ Android 4.3-
	  nativeToFixed.call({});
	});

	// `Number.prototype.toFixed` method
	// https://tc39.github.io/ecma262/#sec-number.prototype.tofixed
	_export({ target: 'Number', proto: true, forced: FORCED$8 }, {
	  // eslint-disable-next-line max-statements
	  toFixed: function toFixed(fractionDigits) {
	    var number = thisNumberValue(this);
	    var fractDigits = toInteger(fractionDigits);
	    var data = [0, 0, 0, 0, 0, 0];
	    var sign = '';
	    var result = '0';
	    var e, z, j, k;

	    var multiply = function (n, c) {
	      var index = -1;
	      var c2 = c;
	      while (++index < 6) {
	        c2 += n * data[index];
	        data[index] = c2 % 1e7;
	        c2 = floor$4(c2 / 1e7);
	      }
	    };

	    var divide = function (n) {
	      var index = 6;
	      var c = 0;
	      while (--index >= 0) {
	        c += data[index];
	        data[index] = floor$4(c / n);
	        c = (c % n) * 1e7;
	      }
	    };

	    var dataToString = function () {
	      var index = 6;
	      var s = '';
	      while (--index >= 0) {
	        if (s !== '' || index === 0 || data[index] !== 0) {
	          var t = String(data[index]);
	          s = s === '' ? t : s + stringRepeat.call('0', 7 - t.length) + t;
	        }
	      } return s;
	    };

	    if (fractDigits < 0 || fractDigits > 20) throw RangeError('Incorrect fraction digits');
	    // eslint-disable-next-line no-self-compare
	    if (number != number) return 'NaN';
	    if (number <= -1e21 || number >= 1e21) return String(number);
	    if (number < 0) {
	      sign = '-';
	      number = -number;
	    }
	    if (number > 1e-21) {
	      e = log$1(number * pow$1(2, 69, 1)) - 69;
	      z = e < 0 ? number * pow$1(2, -e, 1) : number / pow$1(2, e, 1);
	      z *= 0x10000000000000;
	      e = 52 - e;
	      if (e > 0) {
	        multiply(0, z);
	        j = fractDigits;
	        while (j >= 7) {
	          multiply(1e7, 0);
	          j -= 7;
	        }
	        multiply(pow$1(10, j, 1), 0);
	        j = e - 1;
	        while (j >= 23) {
	          divide(1 << 23);
	          j -= 23;
	        }
	        divide(1 << j);
	        multiply(1, 1);
	        divide(2);
	        result = dataToString();
	      } else {
	        multiply(0, z);
	        multiply(1 << -e, 0);
	        result = dataToString() + stringRepeat.call('0', fractDigits);
	      }
	    }
	    if (fractDigits > 0) {
	      k = result.length;
	      result = sign + (k <= fractDigits
	        ? '0.' + stringRepeat.call('0', fractDigits - k) + result
	        : result.slice(0, k - fractDigits) + '.' + result.slice(k - fractDigits));
	    } else {
	      result = sign + result;
	    } return result;
	  }
	});

	var prefixExponent;
	function formatPrefixAuto (x, p) {
	  var d = formatDecimalParts(x, p);
	  if (!d) return x + "";
	  var coefficient = d[0],
	      exponent = d[1],
	      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
	      n = coefficient.length;
	  return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!
	}

	function formatRounded (x, p) {
	  var d = formatDecimalParts(x, p);
	  if (!d) return x + "";
	  var coefficient = d[0],
	      exponent = d[1];
	  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
	}

	var formatTypes = {
	  "%": function _(x, p) {
	    return (x * 100).toFixed(p);
	  },
	  "b": function b(x) {
	    return Math.round(x).toString(2);
	  },
	  "c": function c(x) {
	    return x + "";
	  },
	  "d": formatDecimal,
	  "e": function e(x, p) {
	    return x.toExponential(p);
	  },
	  "f": function f(x, p) {
	    return x.toFixed(p);
	  },
	  "g": function g(x, p) {
	    return x.toPrecision(p);
	  },
	  "o": function o(x) {
	    return Math.round(x).toString(8);
	  },
	  "p": function p(x, _p) {
	    return formatRounded(x * 100, _p);
	  },
	  "r": formatRounded,
	  "s": formatPrefixAuto,
	  "X": function X(x) {
	    return Math.round(x).toString(16).toUpperCase();
	  },
	  "x": function x(_x) {
	    return Math.round(_x).toString(16);
	  }
	};

	function identity$3 (x) {
	  return x;
	}

	var map = Array.prototype.map,
	    prefixes = ["y", "z", "a", "f", "p", "n", "Âµ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
	function formatLocale (locale) {
	  var group = locale.grouping === undefined || locale.thousands === undefined ? identity$3 : formatGroup(map.call(locale.grouping, Number), locale.thousands + ""),
	      currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
	      currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
	      decimal = locale.decimal === undefined ? "." : locale.decimal + "",
	      numerals = locale.numerals === undefined ? identity$3 : formatNumerals(map.call(locale.numerals, String)),
	      percent = locale.percent === undefined ? "%" : locale.percent + "",
	      minus = locale.minus === undefined ? "â" : locale.minus + "",
	      nan = locale.nan === undefined ? "NaN" : locale.nan + "";

	  function newFormat(specifier) {
	    specifier = formatSpecifier(specifier);
	    var fill = specifier.fill,
	        align = specifier.align,
	        sign = specifier.sign,
	        symbol = specifier.symbol,
	        zero = specifier.zero,
	        width = specifier.width,
	        comma = specifier.comma,
	        precision = specifier.precision,
	        trim = specifier.trim,
	        type = specifier.type; // The "n" type is an alias for ",g".

	    if (type === "n") comma = true, type = "g"; // The "" type, and any invalid type, is an alias for ".12~g".
	    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = "g"; // If zero fill is specified, padding goes after sign and before digits.

	    if (zero || fill === "0" && align === "=") zero = true, fill = "0", align = "="; // Compute the prefix and suffix.
	    // For SI-prefix, the suffix is lazily computed.

	    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
	        suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : ""; // What format function should we use?
	    // Is this an integer type?
	    // Can this type generate exponential notation?

	    var formatType = formatTypes[type],
	        maybeSuffix = /[defgprs%]/.test(type); // Set the default precision if not specified,
	    // or clamp the specified precision to the supported range.
	    // For significant precision, it must be in [1, 21].
	    // For fixed precision, it must be in [0, 20].

	    precision = precision === undefined ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));

	    function format(value) {
	      var valuePrefix = prefix,
	          valueSuffix = suffix,
	          i,
	          n,
	          c;

	      if (type === "c") {
	        valueSuffix = formatType(value) + valueSuffix;
	        value = "";
	      } else {
	        value = +value; // Determine the sign. -0 is not less than 0, but 1 / -0 is!

	        var valueNegative = value < 0 || 1 / value < 0; // Perform the initial formatting.

	        value = isNaN(value) ? nan : formatType(Math.abs(value), precision); // Trim insignificant zeros.

	        if (trim) value = formatTrim(value); // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.

	        if (valueNegative && +value === 0 && sign !== "+") valueNegative = false; // Compute the prefix and suffix.

	        valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
	        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : ""); // Break the formatted value into the integer âvalueâ part that can be
	        // grouped, and fractional or exponential âsuffixâ part that is not.

	        if (maybeSuffix) {
	          i = -1, n = value.length;

	          while (++i < n) {
	            if (c = value.charCodeAt(i), 48 > c || c > 57) {
	              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
	              value = value.slice(0, i);
	              break;
	            }
	          }
	        }
	      } // If the fill character is not "0", grouping is applied before padding.


	      if (comma && !zero) value = group(value, Infinity); // Compute the padding.

	      var length = valuePrefix.length + value.length + valueSuffix.length,
	          padding = length < width ? new Array(width - length + 1).join(fill) : ""; // If the fill character is "0", grouping is applied after padding.

	      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = ""; // Reconstruct the final output based on the desired alignment.

	      switch (align) {
	        case "<":
	          value = valuePrefix + value + valueSuffix + padding;
	          break;

	        case "=":
	          value = valuePrefix + padding + value + valueSuffix;
	          break;

	        case "^":
	          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
	          break;

	        default:
	          value = padding + valuePrefix + value + valueSuffix;
	          break;
	      }

	      return numerals(value);
	    }

	    format.toString = function () {
	      return specifier + "";
	    };

	    return format;
	  }

	  function formatPrefix(specifier, value) {
	    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
	        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
	        k = Math.pow(10, -e),
	        prefix = prefixes[8 + e / 3];
	    return function (value) {
	      return f(k * value) + prefix;
	    };
	  }

	  return {
	    format: newFormat,
	    formatPrefix: formatPrefix
	  };
	}

	var locale;
	var format;
	var formatPrefix;
	defaultLocale({
	  thousands: ",",
	  grouping: [3],
	  currency: ["$", ""]
	});
	function defaultLocale(definition) {
	  locale = formatLocale(definition);
	  format = locale.format;
	  formatPrefix = locale.formatPrefix;
	  return locale;
	}

	// https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Modules/mathmodule.c#L1423
	var Adder = /*#__PURE__*/function () {
	  function Adder() {
	    _classCallCheck(this, Adder);

	    this._partials = new Float64Array(32);
	    this._n = 0;
	  }

	  _createClass(Adder, [{
	    key: "add",
	    value: function add(x) {
	      var p = this._partials;
	      var i = 0;

	      for (var j = 0; j < this._n && j < 32; j++) {
	        var y = p[j],
	            hi = x + y,
	            lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);
	        if (lo) p[i++] = lo;
	        x = hi;
	      }

	      p[i] = x;
	      this._n = i + 1;
	      return this;
	    }
	  }, {
	    key: "valueOf",
	    value: function valueOf() {
	      var p = this._partials;
	      var n = this._n,
	          x,
	          y,
	          lo,
	          hi = 0;

	      if (n > 0) {
	        hi = p[--n];

	        while (n > 0) {
	          x = hi;
	          y = p[--n];
	          hi = x + y;
	          lo = y - (hi - x);
	          if (lo) break;
	        }

	        if (n > 0 && (lo < 0 && p[n - 1] < 0 || lo > 0 && p[n - 1] > 0)) {
	          y = lo * 2;
	          x = hi + y;
	          if (y == x - hi) hi = x;
	        }
	      }

	      return hi;
	    }
	  }]);

	  return Adder;
	}();

	var _marked$1 = /*#__PURE__*/regeneratorRuntime.mark(flatten);

	function flatten(arrays) {
	  var _iterator, _step, array;

	  return regeneratorRuntime.wrap(function flatten$(_context) {
	    while (1) {
	      switch (_context.prev = _context.next) {
	        case 0:
	          _iterator = _createForOfIteratorHelper(arrays);
	          _context.prev = 1;

	          _iterator.s();

	        case 3:
	          if ((_step = _iterator.n()).done) {
	            _context.next = 8;
	            break;
	          }

	          array = _step.value;
	          return _context.delegateYield(array, "t0", 6);

	        case 6:
	          _context.next = 3;
	          break;

	        case 8:
	          _context.next = 13;
	          break;

	        case 10:
	          _context.prev = 10;
	          _context.t1 = _context["catch"](1);

	          _iterator.e(_context.t1);

	        case 13:
	          _context.prev = 13;

	          _iterator.f();

	          return _context.finish(13);

	        case 16:
	        case "end":
	          return _context.stop();
	      }
	    }
	  }, _marked$1, null, [[1, 10, 13, 16]]);
	}

	function merge(arrays) {
	  return Array.from(flatten(arrays));
	}

	function range (start, stop, step) {
	  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
	  var i = -1,
	      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
	      range = new Array(n);

	  while (++i < n) {
	    range[i] = start + i * step;
	  }

	  return range;
	}

	// `Math.sign` method implementation
	// https://tc39.github.io/ecma262/#sec-math.sign
	var mathSign = Math.sign || function sign(x) {
	  // eslint-disable-next-line no-self-compare
	  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
	};

	// `Math.sign` method
	// https://tc39.github.io/ecma262/#sec-math.sign
	_export({ target: 'Math', stat: true }, {
	  sign: mathSign
	});

	var epsilon$1 = 1e-6;
	var epsilon2 = 1e-12;
	var pi$1 = Math.PI;
	var halfPi = pi$1 / 2;
	var quarterPi = pi$1 / 4;
	var tau$1 = pi$1 * 2;
	var degrees$1 = 180 / pi$1;
	var radians = pi$1 / 180;
	var abs$2 = Math.abs;
	var atan = Math.atan;
	var atan2 = Math.atan2;
	var cos = Math.cos;
	var ceil$1 = Math.ceil;
	var exp = Math.exp;
	var log$2 = Math.log;
	var sin = Math.sin;
	var sign = Math.sign || function (x) {
	  return x > 0 ? 1 : x < 0 ? -1 : 0;
	};
	var sqrt$1 = Math.sqrt;
	var tan = Math.tan;
	function acos(x) {
	  return x > 1 ? 0 : x < -1 ? pi$1 : Math.acos(x);
	}
	function asin(x) {
	  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);
	}

	function noop$2() {}

	function streamGeometry(geometry, stream) {
	  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
	    streamGeometryType[geometry.type](geometry, stream);
	  }
	}

	var streamObjectType = {
	  Feature: function Feature(object, stream) {
	    streamGeometry(object.geometry, stream);
	  },
	  FeatureCollection: function FeatureCollection(object, stream) {
	    var features = object.features,
	        i = -1,
	        n = features.length;

	    while (++i < n) {
	      streamGeometry(features[i].geometry, stream);
	    }
	  }
	};
	var streamGeometryType = {
	  Sphere: function Sphere(object, stream) {
	    stream.sphere();
	  },
	  Point: function Point(object, stream) {
	    object = object.coordinates;
	    stream.point(object[0], object[1], object[2]);
	  },
	  MultiPoint: function MultiPoint(object, stream) {
	    var coordinates = object.coordinates,
	        i = -1,
	        n = coordinates.length;

	    while (++i < n) {
	      object = coordinates[i], stream.point(object[0], object[1], object[2]);
	    }
	  },
	  LineString: function LineString(object, stream) {
	    streamLine(object.coordinates, stream, 0);
	  },
	  MultiLineString: function MultiLineString(object, stream) {
	    var coordinates = object.coordinates,
	        i = -1,
	        n = coordinates.length;

	    while (++i < n) {
	      streamLine(coordinates[i], stream, 0);
	    }
	  },
	  Polygon: function Polygon(object, stream) {
	    streamPolygon(object.coordinates, stream);
	  },
	  MultiPolygon: function MultiPolygon(object, stream) {
	    var coordinates = object.coordinates,
	        i = -1,
	        n = coordinates.length;

	    while (++i < n) {
	      streamPolygon(coordinates[i], stream);
	    }
	  },
	  GeometryCollection: function GeometryCollection(object, stream) {
	    var geometries = object.geometries,
	        i = -1,
	        n = geometries.length;

	    while (++i < n) {
	      streamGeometry(geometries[i], stream);
	    }
	  }
	};

	function streamLine(coordinates, stream, closed) {
	  var i = -1,
	      n = coordinates.length - closed,
	      coordinate;
	  stream.lineStart();

	  while (++i < n) {
	    coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
	  }

	  stream.lineEnd();
	}

	function streamPolygon(coordinates, stream) {
	  var i = -1,
	      n = coordinates.length;
	  stream.polygonStart();

	  while (++i < n) {
	    streamLine(coordinates[i], stream, 1);
	  }

	  stream.polygonEnd();
	}

	function geoStream (object, stream) {
	  if (object && streamObjectType.hasOwnProperty(object.type)) {
	    streamObjectType[object.type](object, stream);
	  } else {
	    streamGeometry(object, stream);
	  }
	}

	function spherical(cartesian) {
	  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];
	}
	function cartesian(spherical) {
	  var lambda = spherical[0],
	      phi = spherical[1],
	      cosPhi = cos(phi);
	  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];
	}
	function cartesianDot(a, b) {
	  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
	}
	function cartesianCross(a, b) {
	  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
	} // TODO return a

	function cartesianAddInPlace(a, b) {
	  a[0] += b[0], a[1] += b[1], a[2] += b[2];
	}
	function cartesianScale(vector, k) {
	  return [vector[0] * k, vector[1] * k, vector[2] * k];
	} // TODO return d

	function cartesianNormalizeInPlace(d) {
	  var l = sqrt$1(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
	  d[0] /= l, d[1] /= l, d[2] /= l;
	}

	function compose (a, b) {
	  function compose(x, y) {
	    return x = a(x, y), b(x[0], x[1]);
	  }

	  if (a.invert && b.invert) compose.invert = function (x, y) {
	    return x = b.invert(x, y), x && a.invert(x[0], x[1]);
	  };
	  return compose;
	}

	function rotationIdentity(lambda, phi) {
	  return [abs$2(lambda) > pi$1 ? lambda + Math.round(-lambda / tau$1) * tau$1 : lambda, phi];
	}

	rotationIdentity.invert = rotationIdentity;
	function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
	  return (deltaLambda %= tau$1) ? deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;
	}

	function forwardRotationLambda(deltaLambda) {
	  return function (lambda, phi) {
	    return lambda += deltaLambda, [lambda > pi$1 ? lambda - tau$1 : lambda < -pi$1 ? lambda + tau$1 : lambda, phi];
	  };
	}

	function rotationLambda(deltaLambda) {
	  var rotation = forwardRotationLambda(deltaLambda);
	  rotation.invert = forwardRotationLambda(-deltaLambda);
	  return rotation;
	}

	function rotationPhiGamma(deltaPhi, deltaGamma) {
	  var cosDeltaPhi = cos(deltaPhi),
	      sinDeltaPhi = sin(deltaPhi),
	      cosDeltaGamma = cos(deltaGamma),
	      sinDeltaGamma = sin(deltaGamma);

	  function rotation(lambda, phi) {
	    var cosPhi = cos(phi),
	        x = cos(lambda) * cosPhi,
	        y = sin(lambda) * cosPhi,
	        z = sin(phi),
	        k = z * cosDeltaPhi + x * sinDeltaPhi;
	    return [atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), asin(k * cosDeltaGamma + y * sinDeltaGamma)];
	  }

	  rotation.invert = function (lambda, phi) {
	    var cosPhi = cos(phi),
	        x = cos(lambda) * cosPhi,
	        y = sin(lambda) * cosPhi,
	        z = sin(phi),
	        k = z * cosDeltaGamma - y * sinDeltaGamma;
	    return [atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), asin(k * cosDeltaPhi - x * sinDeltaPhi)];
	  };

	  return rotation;
	}

	function rotation (rotate) {
	  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);

	  function forward(coordinates) {
	    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);
	    return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;
	  }

	  forward.invert = function (coordinates) {
	    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);
	    return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;
	  };

	  return forward;
	}

	function circleStream(stream, radius, delta, direction, t0, t1) {
	  if (!delta) return;
	  var cosRadius = cos(radius),
	      sinRadius = sin(radius),
	      step = direction * delta;

	  if (t0 == null) {
	    t0 = radius + direction * tau$1;
	    t1 = radius - step / 2;
	  } else {
	    t0 = circleRadius(cosRadius, t0);
	    t1 = circleRadius(cosRadius, t1);
	    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau$1;
	  }

	  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
	    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);
	    stream.point(point[0], point[1]);
	  }
	} // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].

	function circleRadius(cosRadius, point) {
	  point = cartesian(point), point[0] -= cosRadius;
	  cartesianNormalizeInPlace(point);
	  var radius = acos(-point[1]);
	  return ((-point[2] < 0 ? -radius : radius) + tau$1 - epsilon$1) % tau$1;
	}

	function clipBuffer () {
	  var lines = [],
	      line;
	  return {
	    point: function point(x, y, m) {
	      line.push([x, y, m]);
	    },
	    lineStart: function lineStart() {
	      lines.push(line = []);
	    },
	    lineEnd: noop$2,
	    rejoin: function rejoin() {
	      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
	    },
	    result: function result() {
	      var result = lines;
	      lines = [];
	      line = null;
	      return result;
	    }
	  };
	}

	function pointEqual (a, b) {
	  return abs$2(a[0] - b[0]) < epsilon$1 && abs$2(a[1] - b[1]) < epsilon$1;
	}

	function Intersection(point, points, other, entry) {
	  this.x = point;
	  this.z = points;
	  this.o = other; // another intersection

	  this.e = entry; // is an entry?

	  this.v = false; // visited

	  this.n = this.p = null; // next & previous
	} // A generalized polygon clipping algorithm: given a polygon that has been cut
	// into its visible line segments, and rejoins the segments by interpolating
	// along the clip edge.


	function clipRejoin (segments, compareIntersection, startInside, interpolate, stream) {
	  var subject = [],
	      clip = [],
	      i,
	      n;
	  segments.forEach(function (segment) {
	    if ((n = segment.length - 1) <= 0) return;
	    var n,
	        p0 = segment[0],
	        p1 = segment[n],
	        x;

	    if (pointEqual(p0, p1)) {
	      if (!p0[2] && !p1[2]) {
	        stream.lineStart();

	        for (i = 0; i < n; ++i) {
	          stream.point((p0 = segment[i])[0], p0[1]);
	        }

	        stream.lineEnd();
	        return;
	      } // handle degenerate cases by moving the point


	      p1[0] += 2 * epsilon$1;
	    }

	    subject.push(x = new Intersection(p0, segment, null, true));
	    clip.push(x.o = new Intersection(p0, null, x, false));
	    subject.push(x = new Intersection(p1, segment, null, false));
	    clip.push(x.o = new Intersection(p1, null, x, true));
	  });
	  if (!subject.length) return;
	  clip.sort(compareIntersection);
	  link(subject);
	  link(clip);

	  for (i = 0, n = clip.length; i < n; ++i) {
	    clip[i].e = startInside = !startInside;
	  }

	  var start = subject[0],
	      points,
	      point;

	  while (1) {
	    // Find first unvisited intersection.
	    var current = start,
	        isSubject = true;

	    while (current.v) {
	      if ((current = current.n) === start) return;
	    }

	    points = current.z;
	    stream.lineStart();

	    do {
	      current.v = current.o.v = true;

	      if (current.e) {
	        if (isSubject) {
	          for (i = 0, n = points.length; i < n; ++i) {
	            stream.point((point = points[i])[0], point[1]);
	          }
	        } else {
	          interpolate(current.x, current.n.x, 1, stream);
	        }

	        current = current.n;
	      } else {
	        if (isSubject) {
	          points = current.p.z;

	          for (i = points.length - 1; i >= 0; --i) {
	            stream.point((point = points[i])[0], point[1]);
	          }
	        } else {
	          interpolate(current.x, current.p.x, -1, stream);
	        }

	        current = current.p;
	      }

	      current = current.o;
	      points = current.z;
	      isSubject = !isSubject;
	    } while (!current.v);

	    stream.lineEnd();
	  }
	}

	function link(array) {
	  if (!(n = array.length)) return;
	  var n,
	      i = 0,
	      a = array[0],
	      b;

	  while (++i < n) {
	    a.n = b = array[i];
	    b.p = a;
	    a = b;
	  }

	  a.n = b = array[0];
	  b.p = a;
	}

	function longitude(point) {
	  if (abs$2(point[0]) <= pi$1) return point[0];else return sign(point[0]) * ((abs$2(point[0]) + pi$1) % tau$1 - pi$1);
	}

	function polygonContains (polygon, point) {
	  var lambda = longitude(point),
	      phi = point[1],
	      sinPhi = sin(phi),
	      normal = [sin(lambda), -cos(lambda), 0],
	      angle = 0,
	      winding = 0;
	  var sum = new Adder();
	  if (sinPhi === 1) phi = halfPi + epsilon$1;else if (sinPhi === -1) phi = -halfPi - epsilon$1;

	  for (var i = 0, n = polygon.length; i < n; ++i) {
	    if (!(m = (ring = polygon[i]).length)) continue;
	    var ring,
	        m,
	        point0 = ring[m - 1],
	        lambda0 = longitude(point0),
	        phi0 = point0[1] / 2 + quarterPi,
	        sinPhi0 = sin(phi0),
	        cosPhi0 = cos(phi0);

	    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
	      var point1 = ring[j],
	          lambda1 = longitude(point1),
	          phi1 = point1[1] / 2 + quarterPi,
	          sinPhi1 = sin(phi1),
	          cosPhi1 = cos(phi1),
	          delta = lambda1 - lambda0,
	          sign = delta >= 0 ? 1 : -1,
	          absDelta = sign * delta,
	          antimeridian = absDelta > pi$1,
	          k = sinPhi0 * sinPhi1;
	      sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));
	      angle += antimeridian ? delta + sign * tau$1 : delta; // Are the longitudes either side of the pointâs meridian (lambda),
	      // and are the latitudes smaller than the parallel (phi)?

	      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
	        var arc = cartesianCross(cartesian(point0), cartesian(point1));
	        cartesianNormalizeInPlace(arc);
	        var intersection = cartesianCross(normal, arc);
	        cartesianNormalizeInPlace(intersection);
	        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);

	        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
	          winding += antimeridian ^ delta >= 0 ? 1 : -1;
	        }
	      }
	    }
	  } // First, determine whether the South pole is inside or outside:
	  //
	  // It is inside if:
	  // * the polygon winds around it in a clockwise direction.
	  // * the polygon does not (cumulatively) wind around it, but has a negative
	  //   (counter-clockwise) area.
	  //
	  // Second, count the (signed) number of times a segment crosses a lambda
	  // from the point to the South pole.  If it is zero, then the point is the
	  // same side as the South pole.


	  return (angle < -epsilon$1 || angle < epsilon$1 && sum < -epsilon2) ^ winding & 1;
	}

	function clip (pointVisible, clipLine, interpolate, start) {
	  return function (sink) {
	    var line = clipLine(sink),
	        ringBuffer = clipBuffer(),
	        ringSink = clipLine(ringBuffer),
	        polygonStarted = false,
	        polygon,
	        segments,
	        ring;
	    var clip = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: function polygonStart() {
	        clip.point = pointRing;
	        clip.lineStart = ringStart;
	        clip.lineEnd = ringEnd;
	        segments = [];
	        polygon = [];
	      },
	      polygonEnd: function polygonEnd() {
	        clip.point = point;
	        clip.lineStart = lineStart;
	        clip.lineEnd = lineEnd;
	        segments = merge(segments);
	        var startInside = polygonContains(polygon, start);

	        if (segments.length) {
	          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
	          clipRejoin(segments, compareIntersection, startInside, interpolate, sink);
	        } else if (startInside) {
	          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
	          sink.lineStart();
	          interpolate(null, null, 1, sink);
	          sink.lineEnd();
	        }

	        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
	        segments = polygon = null;
	      },
	      sphere: function sphere() {
	        sink.polygonStart();
	        sink.lineStart();
	        interpolate(null, null, 1, sink);
	        sink.lineEnd();
	        sink.polygonEnd();
	      }
	    };

	    function point(lambda, phi) {
	      if (pointVisible(lambda, phi)) sink.point(lambda, phi);
	    }

	    function pointLine(lambda, phi) {
	      line.point(lambda, phi);
	    }

	    function lineStart() {
	      clip.point = pointLine;
	      line.lineStart();
	    }

	    function lineEnd() {
	      clip.point = point;
	      line.lineEnd();
	    }

	    function pointRing(lambda, phi) {
	      ring.push([lambda, phi]);
	      ringSink.point(lambda, phi);
	    }

	    function ringStart() {
	      ringSink.lineStart();
	      ring = [];
	    }

	    function ringEnd() {
	      pointRing(ring[0][0], ring[0][1]);
	      ringSink.lineEnd();
	      var clean = ringSink.clean(),
	          ringSegments = ringBuffer.result(),
	          i,
	          n = ringSegments.length,
	          m,
	          segment,
	          point;
	      ring.pop();
	      polygon.push(ring);
	      ring = null;
	      if (!n) return; // No intersections.

	      if (clean & 1) {
	        segment = ringSegments[0];

	        if ((m = segment.length - 1) > 0) {
	          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
	          sink.lineStart();

	          for (i = 0; i < m; ++i) {
	            sink.point((point = segment[i])[0], point[1]);
	          }

	          sink.lineEnd();
	        }

	        return;
	      } // Rejoin connected segments.
	      // TODO reuse ringBuffer.rejoin()?


	      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
	      segments.push(ringSegments.filter(validSegment));
	    }

	    return clip;
	  };
	}

	function validSegment(segment) {
	  return segment.length > 1;
	} // Intersections are sorted along the clip edge. For both antimeridian cutting
	// and circle clipping, the same comparison is used.


	function compareIntersection(a, b) {
	  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon$1 : halfPi - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon$1 : halfPi - b[1]);
	}

	var clipAntimeridian = clip(function () {
	  return true;
	}, clipAntimeridianLine, clipAntimeridianInterpolate, [-pi$1, -halfPi]); // Takes a line and cuts into visible segments. Return values: 0 - there were
	// intersections or the line was empty; 1 - no intersections; 2 - there were
	// intersections, and the first and last segments should be rejoined.

	function clipAntimeridianLine(stream) {
	  var lambda0 = NaN,
	      phi0 = NaN,
	      sign0 = NaN,
	      _clean; // no intersections


	  return {
	    lineStart: function lineStart() {
	      stream.lineStart();
	      _clean = 1;
	    },
	    point: function point(lambda1, phi1) {
	      var sign1 = lambda1 > 0 ? pi$1 : -pi$1,
	          delta = abs$2(lambda1 - lambda0);

	      if (abs$2(delta - pi$1) < epsilon$1) {
	        // line crosses a pole
	        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);
	        stream.point(sign0, phi0);
	        stream.lineEnd();
	        stream.lineStart();
	        stream.point(sign1, phi0);
	        stream.point(lambda1, phi0);
	        _clean = 0;
	      } else if (sign0 !== sign1 && delta >= pi$1) {
	        // line crosses antimeridian
	        if (abs$2(lambda0 - sign0) < epsilon$1) lambda0 -= sign0 * epsilon$1; // handle degeneracies

	        if (abs$2(lambda1 - sign1) < epsilon$1) lambda1 -= sign1 * epsilon$1;
	        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
	        stream.point(sign0, phi0);
	        stream.lineEnd();
	        stream.lineStart();
	        stream.point(sign1, phi0);
	        _clean = 0;
	      }

	      stream.point(lambda0 = lambda1, phi0 = phi1);
	      sign0 = sign1;
	    },
	    lineEnd: function lineEnd() {
	      stream.lineEnd();
	      lambda0 = phi0 = NaN;
	    },
	    clean: function clean() {
	      return 2 - _clean; // if intersections, rejoin first and last segments
	    }
	  };
	}

	function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
	  var cosPhi0,
	      cosPhi1,
	      sinLambda0Lambda1 = sin(lambda0 - lambda1);
	  return abs$2(sinLambda0Lambda1) > epsilon$1 ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1) - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0)) / (cosPhi0 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;
	}

	function clipAntimeridianInterpolate(from, to, direction, stream) {
	  var phi;

	  if (from == null) {
	    phi = direction * halfPi;
	    stream.point(-pi$1, phi);
	    stream.point(0, phi);
	    stream.point(pi$1, phi);
	    stream.point(pi$1, 0);
	    stream.point(pi$1, -phi);
	    stream.point(0, -phi);
	    stream.point(-pi$1, -phi);
	    stream.point(-pi$1, 0);
	    stream.point(-pi$1, phi);
	  } else if (abs$2(from[0] - to[0]) > epsilon$1) {
	    var lambda = from[0] < to[0] ? pi$1 : -pi$1;
	    phi = direction * lambda / 2;
	    stream.point(-lambda, phi);
	    stream.point(0, phi);
	    stream.point(lambda, phi);
	  } else {
	    stream.point(to[0], to[1]);
	  }
	}

	function clipCircle (radius) {
	  var cr = cos(radius),
	      delta = 6 * radians,
	      smallRadius = cr > 0,
	      notHemisphere = abs$2(cr) > epsilon$1; // TODO optimise for this common case

	  function interpolate(from, to, direction, stream) {
	    circleStream(stream, radius, delta, direction, from, to);
	  }

	  function visible(lambda, phi) {
	    return cos(lambda) * cos(phi) > cr;
	  } // Takes a line and cuts into visible segments. Return values used for polygon
	  // clipping: 0 - there were intersections or the line was empty; 1 - no
	  // intersections 2 - there were intersections, and the first and last segments
	  // should be rejoined.


	  function clipLine(stream) {
	    var point0, // previous point
	    c0, // code for previous point
	    v0, // visibility of previous point
	    v00, // visibility of first point
	    _clean; // no intersections


	    return {
	      lineStart: function lineStart() {
	        v00 = v0 = false;
	        _clean = 1;
	      },
	      point: function point(lambda, phi) {
	        var point1 = [lambda, phi],
	            point2,
	            v = visible(lambda, phi),
	            c = smallRadius ? v ? 0 : code(lambda, phi) : v ? code(lambda + (lambda < 0 ? pi$1 : -pi$1), phi) : 0;
	        if (!point0 && (v00 = v0 = v)) stream.lineStart();

	        if (v !== v0) {
	          point2 = intersect(point0, point1);
	          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) point1[2] = 1;
	        }

	        if (v !== v0) {
	          _clean = 0;

	          if (v) {
	            // outside going in
	            stream.lineStart();
	            point2 = intersect(point1, point0);
	            stream.point(point2[0], point2[1]);
	          } else {
	            // inside going out
	            point2 = intersect(point0, point1);
	            stream.point(point2[0], point2[1], 2);
	            stream.lineEnd();
	          }

	          point0 = point2;
	        } else if (notHemisphere && point0 && smallRadius ^ v) {
	          var t; // If the codes for two points are different, or are both zero,
	          // and there this segment intersects with the small circle.

	          if (!(c & c0) && (t = intersect(point1, point0, true))) {
	            _clean = 0;

	            if (smallRadius) {
	              stream.lineStart();
	              stream.point(t[0][0], t[0][1]);
	              stream.point(t[1][0], t[1][1]);
	              stream.lineEnd();
	            } else {
	              stream.point(t[1][0], t[1][1]);
	              stream.lineEnd();
	              stream.lineStart();
	              stream.point(t[0][0], t[0][1], 3);
	            }
	          }
	        }

	        if (v && (!point0 || !pointEqual(point0, point1))) {
	          stream.point(point1[0], point1[1]);
	        }

	        point0 = point1, v0 = v, c0 = c;
	      },
	      lineEnd: function lineEnd() {
	        if (v0) stream.lineEnd();
	        point0 = null;
	      },
	      // Rejoin first and last segments if there were intersections and the first
	      // and last points were visible.
	      clean: function clean() {
	        return _clean | (v00 && v0) << 1;
	      }
	    };
	  } // Intersects the great circle between a and b with the clip circle.


	  function intersect(a, b, two) {
	    var pa = cartesian(a),
	        pb = cartesian(b); // We have two planes, n1.p = d1 and n2.p = d2.
	    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 â¨¯ n2).

	    var n1 = [1, 0, 0],
	        // normal
	    n2 = cartesianCross(pa, pb),
	        n2n2 = cartesianDot(n2, n2),
	        n1n2 = n2[0],
	        // cartesianDot(n1, n2),
	    determinant = n2n2 - n1n2 * n1n2; // Two polar points.

	    if (!determinant) return !two && a;
	    var c1 = cr * n2n2 / determinant,
	        c2 = -cr * n1n2 / determinant,
	        n1xn2 = cartesianCross(n1, n2),
	        A = cartesianScale(n1, c1),
	        B = cartesianScale(n2, c2);
	    cartesianAddInPlace(A, B); // Solve |p(t)|^2 = 1.

	    var u = n1xn2,
	        w = cartesianDot(A, u),
	        uu = cartesianDot(u, u),
	        t2 = w * w - uu * (cartesianDot(A, A) - 1);
	    if (t2 < 0) return;
	    var t = sqrt$1(t2),
	        q = cartesianScale(u, (-w - t) / uu);
	    cartesianAddInPlace(q, A);
	    q = spherical(q);
	    if (!two) return q; // Two intersection points.

	    var lambda0 = a[0],
	        lambda1 = b[0],
	        phi0 = a[1],
	        phi1 = b[1],
	        z;
	    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;
	    var delta = lambda1 - lambda0,
	        polar = abs$2(delta - pi$1) < epsilon$1,
	        meridian = polar || delta < epsilon$1;
	    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z; // Check that the first point is between a and b.

	    if (meridian ? polar ? phi0 + phi1 > 0 ^ q[1] < (abs$2(q[0] - lambda0) < epsilon$1 ? phi0 : phi1) : phi0 <= q[1] && q[1] <= phi1 : delta > pi$1 ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
	      var q1 = cartesianScale(u, (-w + t) / uu);
	      cartesianAddInPlace(q1, A);
	      return [q, spherical(q1)];
	    }
	  } // Generates a 4-bit vector representing the location of a point relative to
	  // the small circle's bounding box.


	  function code(lambda, phi) {
	    var r = smallRadius ? radius : pi$1 - radius,
	        code = 0;
	    if (lambda < -r) code |= 1; // left
	    else if (lambda > r) code |= 2; // right

	    if (phi < -r) code |= 4; // below
	    else if (phi > r) code |= 8; // above

	    return code;
	  }

	  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi$1, radius - pi$1]);
	}

	function clipLine (a, b, x0, y0, x1, y1) {
	  var ax = a[0],
	      ay = a[1],
	      bx = b[0],
	      by = b[1],
	      t0 = 0,
	      t1 = 1,
	      dx = bx - ax,
	      dy = by - ay,
	      r;
	  r = x0 - ax;
	  if (!dx && r > 0) return;
	  r /= dx;

	  if (dx < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dx > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }

	  r = x1 - ax;
	  if (!dx && r < 0) return;
	  r /= dx;

	  if (dx < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dx > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }

	  r = y0 - ay;
	  if (!dy && r > 0) return;
	  r /= dy;

	  if (dy < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dy > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }

	  r = y1 - ay;
	  if (!dy && r < 0) return;
	  r /= dy;

	  if (dy < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dy > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }

	  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
	  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
	  return true;
	}

	var clipMax = 1e9,
	    clipMin = -clipMax; // TODO Use d3-polygonâs polygonContains here for the ring check?
	// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

	function clipRectangle(x0, y0, x1, y1) {
	  function visible(x, y) {
	    return x0 <= x && x <= x1 && y0 <= y && y <= y1;
	  }

	  function interpolate(from, to, direction, stream) {
	    var a = 0,
	        a1 = 0;

	    if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {
	      do {
	        stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
	      } while ((a = (a + direction + 4) % 4) !== a1);
	    } else {
	      stream.point(to[0], to[1]);
	    }
	  }

	  function corner(p, direction) {
	    return abs$2(p[0] - x0) < epsilon$1 ? direction > 0 ? 0 : 3 : abs$2(p[0] - x1) < epsilon$1 ? direction > 0 ? 2 : 1 : abs$2(p[1] - y0) < epsilon$1 ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
	  }

	  function compareIntersection(a, b) {
	    return comparePoint(a.x, b.x);
	  }

	  function comparePoint(a, b) {
	    var ca = corner(a, 1),
	        cb = corner(b, 1);
	    return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
	  }

	  return function (stream) {
	    var activeStream = stream,
	        bufferStream = clipBuffer(),
	        segments,
	        polygon,
	        ring,
	        x__,
	        y__,
	        v__,
	        // first point
	    x_,
	        y_,
	        v_,
	        // previous point
	    first,
	        clean;
	    var clipStream = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: polygonStart,
	      polygonEnd: polygonEnd
	    };

	    function point(x, y) {
	      if (visible(x, y)) activeStream.point(x, y);
	    }

	    function polygonInside() {
	      var winding = 0;

	      for (var i = 0, n = polygon.length; i < n; ++i) {
	        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
	          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];

	          if (a1 <= y1) {
	            if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding;
	          } else {
	            if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding;
	          }
	        }
	      }

	      return winding;
	    } // Buffer geometry within a polygon and then clip it en masse.


	    function polygonStart() {
	      activeStream = bufferStream, segments = [], polygon = [], clean = true;
	    }

	    function polygonEnd() {
	      var startInside = polygonInside(),
	          cleanInside = clean && startInside,
	          visible = (segments = merge(segments)).length;

	      if (cleanInside || visible) {
	        stream.polygonStart();

	        if (cleanInside) {
	          stream.lineStart();
	          interpolate(null, null, 1, stream);
	          stream.lineEnd();
	        }

	        if (visible) {
	          clipRejoin(segments, compareIntersection, startInside, interpolate, stream);
	        }

	        stream.polygonEnd();
	      }

	      activeStream = stream, segments = polygon = ring = null;
	    }

	    function lineStart() {
	      clipStream.point = linePoint;
	      if (polygon) polygon.push(ring = []);
	      first = true;
	      v_ = false;
	      x_ = y_ = NaN;
	    } // TODO rather than special-case polygons, simply handle them separately.
	    // Ideally, coincident intersection points should be jittered to avoid
	    // clipping issues.


	    function lineEnd() {
	      if (segments) {
	        linePoint(x__, y__);
	        if (v__ && v_) bufferStream.rejoin();
	        segments.push(bufferStream.result());
	      }

	      clipStream.point = point;
	      if (v_) activeStream.lineEnd();
	    }

	    function linePoint(x, y) {
	      var v = visible(x, y);
	      if (polygon) ring.push([x, y]);

	      if (first) {
	        x__ = x, y__ = y, v__ = v;
	        first = false;

	        if (v) {
	          activeStream.lineStart();
	          activeStream.point(x, y);
	        }
	      } else {
	        if (v && v_) activeStream.point(x, y);else {
	          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
	              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];

	          if (clipLine(a, b, x0, y0, x1, y1)) {
	            if (!v_) {
	              activeStream.lineStart();
	              activeStream.point(a[0], a[1]);
	            }

	            activeStream.point(b[0], b[1]);
	            if (!v) activeStream.lineEnd();
	            clean = false;
	          } else if (v) {
	            activeStream.lineStart();
	            activeStream.point(x, y);
	            clean = false;
	          }
	        }
	      }

	      x_ = x, y_ = y, v_ = v;
	    }

	    return clipStream;
	  };
	}

	function graticuleX(y0, y1, dy) {
	  var y = range(y0, y1 - epsilon$1, dy).concat(y1);
	  return function (x) {
	    return y.map(function (y) {
	      return [x, y];
	    });
	  };
	}

	function graticuleY(x0, x1, dx) {
	  var x = range(x0, x1 - epsilon$1, dx).concat(x1);
	  return function (y) {
	    return x.map(function (x) {
	      return [x, y];
	    });
	  };
	}

	function graticule() {
	  var x1,
	      x0,
	      X1,
	      X0,
	      y1,
	      y0,
	      Y1,
	      Y0,
	      dx = 10,
	      dy = dx,
	      DX = 90,
	      DY = 360,
	      x,
	      y,
	      X,
	      Y,
	      precision = 2.5;

	  function graticule() {
	    return {
	      type: "MultiLineString",
	      coordinates: lines()
	    };
	  }

	  function lines() {
	    return range(ceil$1(X0 / DX) * DX, X1, DX).map(X).concat(range(ceil$1(Y0 / DY) * DY, Y1, DY).map(Y)).concat(range(ceil$1(x0 / dx) * dx, x1, dx).filter(function (x) {
	      return abs$2(x % DX) > epsilon$1;
	    }).map(x)).concat(range(ceil$1(y0 / dy) * dy, y1, dy).filter(function (y) {
	      return abs$2(y % DY) > epsilon$1;
	    }).map(y));
	  }

	  graticule.lines = function () {
	    return lines().map(function (coordinates) {
	      return {
	        type: "LineString",
	        coordinates: coordinates
	      };
	    });
	  };

	  graticule.outline = function () {
	    return {
	      type: "Polygon",
	      coordinates: [X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1))]
	    };
	  };

	  graticule.extent = function (_) {
	    if (!arguments.length) return graticule.extentMinor();
	    return graticule.extentMajor(_).extentMinor(_);
	  };

	  graticule.extentMajor = function (_) {
	    if (!arguments.length) return [[X0, Y0], [X1, Y1]];
	    X0 = +_[0][0], X1 = +_[1][0];
	    Y0 = +_[0][1], Y1 = +_[1][1];
	    if (X0 > X1) _ = X0, X0 = X1, X1 = _;
	    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
	    return graticule.precision(precision);
	  };

	  graticule.extentMinor = function (_) {
	    if (!arguments.length) return [[x0, y0], [x1, y1]];
	    x0 = +_[0][0], x1 = +_[1][0];
	    y0 = +_[0][1], y1 = +_[1][1];
	    if (x0 > x1) _ = x0, x0 = x1, x1 = _;
	    if (y0 > y1) _ = y0, y0 = y1, y1 = _;
	    return graticule.precision(precision);
	  };

	  graticule.step = function (_) {
	    if (!arguments.length) return graticule.stepMinor();
	    return graticule.stepMajor(_).stepMinor(_);
	  };

	  graticule.stepMajor = function (_) {
	    if (!arguments.length) return [DX, DY];
	    DX = +_[0], DY = +_[1];
	    return graticule;
	  };

	  graticule.stepMinor = function (_) {
	    if (!arguments.length) return [dx, dy];
	    dx = +_[0], dy = +_[1];
	    return graticule;
	  };

	  graticule.precision = function (_) {
	    if (!arguments.length) return precision;
	    precision = +_;
	    x = graticuleX(y0, y1, 90);
	    y = graticuleY(x0, x1, precision);
	    X = graticuleX(Y0, Y1, 90);
	    Y = graticuleY(X0, X1, precision);
	    return graticule;
	  };

	  return graticule.extentMajor([[-180, -90 + epsilon$1], [180, 90 - epsilon$1]]).extentMinor([[-180, -80 - epsilon$1], [180, 80 + epsilon$1]]);
	}

	var identity$4 = (function (x) {
	  return x;
	});

	var areaSum = new Adder(),
	    areaRingSum = new Adder(),
	    x00,
	    y00,
	    x0,
	    y0;
	var areaStream = {
	  point: noop$2,
	  lineStart: noop$2,
	  lineEnd: noop$2,
	  polygonStart: function polygonStart() {
	    areaStream.lineStart = areaRingStart;
	    areaStream.lineEnd = areaRingEnd;
	  },
	  polygonEnd: function polygonEnd() {
	    areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop$2;
	    areaSum.add(abs$2(areaRingSum));
	    areaRingSum = new Adder();
	  },
	  result: function result() {
	    var area = areaSum / 2;
	    areaSum = new Adder();
	    return area;
	  }
	};

	function areaRingStart() {
	  areaStream.point = areaPointFirst;
	}

	function areaPointFirst(x, y) {
	  areaStream.point = areaPoint;
	  x00 = x0 = x, y00 = y0 = y;
	}

	function areaPoint(x, y) {
	  areaRingSum.add(y0 * x - x0 * y);
	  x0 = x, y0 = y;
	}

	function areaRingEnd() {
	  areaPoint(x00, y00);
	}

	var x0$1 = Infinity,
	    y0$1 = x0$1,
	    x1 = -x0$1,
	    y1 = x1;
	var boundsStream = {
	  point: boundsPoint,
	  lineStart: noop$2,
	  lineEnd: noop$2,
	  polygonStart: noop$2,
	  polygonEnd: noop$2,
	  result: function result() {
	    var bounds = [[x0$1, y0$1], [x1, y1]];
	    x1 = y1 = -(y0$1 = x0$1 = Infinity);
	    return bounds;
	  }
	};

	function boundsPoint(x, y) {
	  if (x < x0$1) x0$1 = x;
	  if (x > x1) x1 = x;
	  if (y < y0$1) y0$1 = y;
	  if (y > y1) y1 = y;
	}

	var X0 = 0,
	    Y0 = 0,
	    Z0 = 0,
	    X1 = 0,
	    Y1 = 0,
	    Z1 = 0,
	    X2 = 0,
	    Y2 = 0,
	    Z2 = 0,
	    x00$1,
	    y00$1,
	    x0$2,
	    y0$2;
	var centroidStream = {
	  point: centroidPoint,
	  lineStart: centroidLineStart,
	  lineEnd: centroidLineEnd,
	  polygonStart: function polygonStart() {
	    centroidStream.lineStart = centroidRingStart;
	    centroidStream.lineEnd = centroidRingEnd;
	  },
	  polygonEnd: function polygonEnd() {
	    centroidStream.point = centroidPoint;
	    centroidStream.lineStart = centroidLineStart;
	    centroidStream.lineEnd = centroidLineEnd;
	  },
	  result: function result() {
	    var centroid = Z2 ? [X2 / Z2, Y2 / Z2] : Z1 ? [X1 / Z1, Y1 / Z1] : Z0 ? [X0 / Z0, Y0 / Z0] : [NaN, NaN];
	    X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
	    return centroid;
	  }
	};

	function centroidPoint(x, y) {
	  X0 += x;
	  Y0 += y;
	  ++Z0;
	}

	function centroidLineStart() {
	  centroidStream.point = centroidPointFirstLine;
	}

	function centroidPointFirstLine(x, y) {
	  centroidStream.point = centroidPointLine;
	  centroidPoint(x0$2 = x, y0$2 = y);
	}

	function centroidPointLine(x, y) {
	  var dx = x - x0$2,
	      dy = y - y0$2,
	      z = sqrt$1(dx * dx + dy * dy);
	  X1 += z * (x0$2 + x) / 2;
	  Y1 += z * (y0$2 + y) / 2;
	  Z1 += z;
	  centroidPoint(x0$2 = x, y0$2 = y);
	}

	function centroidLineEnd() {
	  centroidStream.point = centroidPoint;
	}

	function centroidRingStart() {
	  centroidStream.point = centroidPointFirstRing;
	}

	function centroidRingEnd() {
	  centroidPointRing(x00$1, y00$1);
	}

	function centroidPointFirstRing(x, y) {
	  centroidStream.point = centroidPointRing;
	  centroidPoint(x00$1 = x0$2 = x, y00$1 = y0$2 = y);
	}

	function centroidPointRing(x, y) {
	  var dx = x - x0$2,
	      dy = y - y0$2,
	      z = sqrt$1(dx * dx + dy * dy);
	  X1 += z * (x0$2 + x) / 2;
	  Y1 += z * (y0$2 + y) / 2;
	  Z1 += z;
	  z = y0$2 * x - x0$2 * y;
	  X2 += z * (x0$2 + x);
	  Y2 += z * (y0$2 + y);
	  Z2 += z * 3;
	  centroidPoint(x0$2 = x, y0$2 = y);
	}

	function PathContext(context) {
	  this._context = context;
	}
	PathContext.prototype = {
	  _radius: 4.5,
	  pointRadius: function pointRadius(_) {
	    return this._radius = _, this;
	  },
	  polygonStart: function polygonStart() {
	    this._line = 0;
	  },
	  polygonEnd: function polygonEnd() {
	    this._line = NaN;
	  },
	  lineStart: function lineStart() {
	    this._point = 0;
	  },
	  lineEnd: function lineEnd() {
	    if (this._line === 0) this._context.closePath();
	    this._point = NaN;
	  },
	  point: function point(x, y) {
	    switch (this._point) {
	      case 0:
	        {
	          this._context.moveTo(x, y);

	          this._point = 1;
	          break;
	        }

	      case 1:
	        {
	          this._context.lineTo(x, y);

	          break;
	        }

	      default:
	        {
	          this._context.moveTo(x + this._radius, y);

	          this._context.arc(x, y, this._radius, 0, tau$1);

	          break;
	        }
	    }
	  },
	  result: noop$2
	};

	var lengthSum = new Adder(),
	    lengthRing,
	    x00$2,
	    y00$2,
	    x0$3,
	    y0$3;
	var lengthStream = {
	  point: noop$2,
	  lineStart: function lineStart() {
	    lengthStream.point = lengthPointFirst;
	  },
	  lineEnd: function lineEnd() {
	    if (lengthRing) lengthPoint(x00$2, y00$2);
	    lengthStream.point = noop$2;
	  },
	  polygonStart: function polygonStart() {
	    lengthRing = true;
	  },
	  polygonEnd: function polygonEnd() {
	    lengthRing = null;
	  },
	  result: function result() {
	    var length = +lengthSum;
	    lengthSum = new Adder();
	    return length;
	  }
	};

	function lengthPointFirst(x, y) {
	  lengthStream.point = lengthPoint;
	  x00$2 = x0$3 = x, y00$2 = y0$3 = y;
	}

	function lengthPoint(x, y) {
	  x0$3 -= x, y0$3 -= y;
	  lengthSum.add(sqrt$1(x0$3 * x0$3 + y0$3 * y0$3));
	  x0$3 = x, y0$3 = y;
	}

	function PathString() {
	  this._string = [];
	}
	PathString.prototype = {
	  _radius: 4.5,
	  _circle: circle(4.5),
	  pointRadius: function pointRadius(_) {
	    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
	    return this;
	  },
	  polygonStart: function polygonStart() {
	    this._line = 0;
	  },
	  polygonEnd: function polygonEnd() {
	    this._line = NaN;
	  },
	  lineStart: function lineStart() {
	    this._point = 0;
	  },
	  lineEnd: function lineEnd() {
	    if (this._line === 0) this._string.push("Z");
	    this._point = NaN;
	  },
	  point: function point(x, y) {
	    switch (this._point) {
	      case 0:
	        {
	          this._string.push("M", x, ",", y);

	          this._point = 1;
	          break;
	        }

	      case 1:
	        {
	          this._string.push("L", x, ",", y);

	          break;
	        }

	      default:
	        {
	          if (this._circle == null) this._circle = circle(this._radius);

	          this._string.push("M", x, ",", y, this._circle);

	          break;
	        }
	    }
	  },
	  result: function result() {
	    if (this._string.length) {
	      var result = this._string.join("");

	      this._string = [];
	      return result;
	    } else {
	      return null;
	    }
	  }
	};

	function circle(radius) {
	  return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
	}

	function d3geoPath (projection, context) {
	  var pointRadius = 4.5,
	      projectionStream,
	      contextStream;

	  function path(object) {
	    if (object) {
	      if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
	      geoStream(object, projectionStream(contextStream));
	    }

	    return contextStream.result();
	  }

	  path.area = function (object) {
	    geoStream(object, projectionStream(areaStream));
	    return areaStream.result();
	  };

	  path.measure = function (object) {
	    geoStream(object, projectionStream(lengthStream));
	    return lengthStream.result();
	  };

	  path.bounds = function (object) {
	    geoStream(object, projectionStream(boundsStream));
	    return boundsStream.result();
	  };

	  path.centroid = function (object) {
	    geoStream(object, projectionStream(centroidStream));
	    return centroidStream.result();
	  };

	  path.projection = function (_) {
	    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity$4) : (projection = _).stream, path) : projection;
	  };

	  path.context = function (_) {
	    if (!arguments.length) return context;
	    contextStream = _ == null ? (context = null, new PathString()) : new PathContext(context = _);
	    if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
	    return path;
	  };

	  path.pointRadius = function (_) {
	    if (!arguments.length) return pointRadius;
	    pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
	    return path;
	  };

	  return path.projection(projection).context(context);
	}

	function transformer(methods) {
	  return function (stream) {
	    var s = new TransformStream();

	    for (var key in methods) {
	      s[key] = methods[key];
	    }

	    s.stream = stream;
	    return s;
	  };
	}

	function TransformStream() {}

	TransformStream.prototype = {
	  constructor: TransformStream,
	  point: function point(x, y) {
	    this.stream.point(x, y);
	  },
	  sphere: function sphere() {
	    this.stream.sphere();
	  },
	  lineStart: function lineStart() {
	    this.stream.lineStart();
	  },
	  lineEnd: function lineEnd() {
	    this.stream.lineEnd();
	  },
	  polygonStart: function polygonStart() {
	    this.stream.polygonStart();
	  },
	  polygonEnd: function polygonEnd() {
	    this.stream.polygonEnd();
	  }
	};

	function fit(projection, fitBounds, object) {
	  var clip = projection.clipExtent && projection.clipExtent();
	  projection.scale(150).translate([0, 0]);
	  if (clip != null) projection.clipExtent(null);
	  geoStream(object, projection.stream(boundsStream));
	  fitBounds(boundsStream.result());
	  if (clip != null) projection.clipExtent(clip);
	  return projection;
	}

	function fitExtent(projection, extent, object) {
	  return fit(projection, function (b) {
	    var w = extent[1][0] - extent[0][0],
	        h = extent[1][1] - extent[0][1],
	        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
	        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
	        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
	    projection.scale(150 * k).translate([x, y]);
	  }, object);
	}
	function fitSize(projection, size, object) {
	  return fitExtent(projection, [[0, 0], size], object);
	}
	function fitWidth(projection, width, object) {
	  return fit(projection, function (b) {
	    var w = +width,
	        k = w / (b[1][0] - b[0][0]),
	        x = (w - k * (b[1][0] + b[0][0])) / 2,
	        y = -k * b[0][1];
	    projection.scale(150 * k).translate([x, y]);
	  }, object);
	}
	function fitHeight(projection, height, object) {
	  return fit(projection, function (b) {
	    var h = +height,
	        k = h / (b[1][1] - b[0][1]),
	        x = -k * b[0][0],
	        y = (h - k * (b[1][1] + b[0][1])) / 2;
	    projection.scale(150 * k).translate([x, y]);
	  }, object);
	}

	var maxDepth = 16,
	    // maximum depth of subdivision
	cosMinDistance = cos(30 * radians); // cos(minimum angular distance)

	function resample (project, delta2) {
	  return +delta2 ? resample$1(project, delta2) : resampleNone(project);
	}

	function resampleNone(project) {
	  return transformer({
	    point: function point(x, y) {
	      x = project(x, y);
	      this.stream.point(x[0], x[1]);
	    }
	  });
	}

	function resample$1(project, delta2) {
	  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
	    var dx = x1 - x0,
	        dy = y1 - y0,
	        d2 = dx * dx + dy * dy;

	    if (d2 > 4 * delta2 && depth--) {
	      var a = a0 + a1,
	          b = b0 + b1,
	          c = c0 + c1,
	          m = sqrt$1(a * a + b * b + c * c),
	          phi2 = asin(c /= m),
	          lambda2 = abs$2(abs$2(c) - 1) < epsilon$1 || abs$2(lambda0 - lambda1) < epsilon$1 ? (lambda0 + lambda1) / 2 : atan2(b, a),
	          p = project(lambda2, phi2),
	          x2 = p[0],
	          y2 = p[1],
	          dx2 = x2 - x0,
	          dy2 = y2 - y0,
	          dz = dy * dx2 - dx * dy2;

	      if (dz * dz / d2 > delta2 // perpendicular projected distance
	      || abs$2((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
	      || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
	        // angular distance
	        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
	        stream.point(x2, y2);
	        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
	      }
	    }
	  }

	  return function (stream) {
	    var lambda00, x00, y00, a00, b00, c00, // first point
	    lambda0, x0, y0, a0, b0, c0; // previous point

	    var resampleStream = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: function polygonStart() {
	        stream.polygonStart();
	        resampleStream.lineStart = ringStart;
	      },
	      polygonEnd: function polygonEnd() {
	        stream.polygonEnd();
	        resampleStream.lineStart = lineStart;
	      }
	    };

	    function point(x, y) {
	      x = project(x, y);
	      stream.point(x[0], x[1]);
	    }

	    function lineStart() {
	      x0 = NaN;
	      resampleStream.point = linePoint;
	      stream.lineStart();
	    }

	    function linePoint(lambda, phi) {
	      var c = cartesian([lambda, phi]),
	          p = project(lambda, phi);
	      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
	      stream.point(x0, y0);
	    }

	    function lineEnd() {
	      resampleStream.point = point;
	      stream.lineEnd();
	    }

	    function ringStart() {
	      lineStart();
	      resampleStream.point = ringPoint;
	      resampleStream.lineEnd = ringEnd;
	    }

	    function ringPoint(lambda, phi) {
	      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
	      resampleStream.point = linePoint;
	    }

	    function ringEnd() {
	      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
	      resampleStream.lineEnd = lineEnd;
	      lineEnd();
	    }

	    return resampleStream;
	  };
	}

	var transformRadians = transformer({
	  point: function point(x, y) {
	    this.stream.point(x * radians, y * radians);
	  }
	});

	function transformRotate(rotate) {
	  return transformer({
	    point: function point(x, y) {
	      var r = rotate(x, y);
	      return this.stream.point(r[0], r[1]);
	    }
	  });
	}

	function scaleTranslate(k, dx, dy, sx, sy) {
	  function transform(x, y) {
	    x *= sx;
	    y *= sy;
	    return [dx + k * x, dy - k * y];
	  }

	  transform.invert = function (x, y) {
	    return [(x - dx) / k * sx, (dy - y) / k * sy];
	  };

	  return transform;
	}

	function scaleTranslateRotate(k, dx, dy, sx, sy, alpha) {
	  if (!alpha) return scaleTranslate(k, dx, dy, sx, sy);
	  var cosAlpha = cos(alpha),
	      sinAlpha = sin(alpha),
	      a = cosAlpha * k,
	      b = sinAlpha * k,
	      ai = cosAlpha / k,
	      bi = sinAlpha / k,
	      ci = (sinAlpha * dy - cosAlpha * dx) / k,
	      fi = (sinAlpha * dx + cosAlpha * dy) / k;

	  function transform(x, y) {
	    x *= sx;
	    y *= sy;
	    return [a * x - b * y + dx, dy - b * x - a * y];
	  }

	  transform.invert = function (x, y) {
	    return [sx * (ai * x - bi * y + ci), sy * (fi - bi * x - ai * y)];
	  };

	  return transform;
	}

	function projection(project) {
	  return projectionMutator(function () {
	    return project;
	  })();
	}
	function projectionMutator(projectAt) {
	  var project,
	      k = 150,
	      // scale
	  x = 480,
	      y = 250,
	      // translate
	  lambda = 0,
	      phi = 0,
	      // center
	  deltaLambda = 0,
	      deltaPhi = 0,
	      deltaGamma = 0,
	      rotate,
	      // pre-rotate
	  alpha = 0,
	      // post-rotate angle
	  sx = 1,
	      // reflectX
	  sy = 1,
	      // reflectX
	  theta = null,
	      preclip = clipAntimeridian,
	      // pre-clip angle
	  x0 = null,
	      y0,
	      x1,
	      y1,
	      postclip = identity$4,
	      // post-clip extent
	  delta2 = 0.5,
	      // precision
	  projectResample,
	      projectTransform,
	      projectRotateTransform,
	      cache,
	      cacheStream;

	  function projection(point) {
	    return projectRotateTransform(point[0] * radians, point[1] * radians);
	  }

	  function invert(point) {
	    point = projectRotateTransform.invert(point[0], point[1]);
	    return point && [point[0] * degrees$1, point[1] * degrees$1];
	  }

	  projection.stream = function (stream) {
	    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
	  };

	  projection.preclip = function (_) {
	    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;
	  };

	  projection.postclip = function (_) {
	    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
	  };

	  projection.clipAngle = function (_) {
	    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees$1;
	  };

	  projection.clipExtent = function (_) {
	    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$4) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
	  };

	  projection.scale = function (_) {
	    return arguments.length ? (k = +_, recenter()) : k;
	  };

	  projection.translate = function (_) {
	    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
	  };

	  projection.center = function (_) {
	    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees$1, phi * degrees$1];
	  };

	  projection.rotate = function (_) {
	    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees$1, deltaPhi * degrees$1, deltaGamma * degrees$1];
	  };

	  projection.angle = function (_) {
	    return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees$1;
	  };

	  projection.reflectX = function (_) {
	    return arguments.length ? (sx = _ ? -1 : 1, recenter()) : sx < 0;
	  };

	  projection.reflectY = function (_) {
	    return arguments.length ? (sy = _ ? -1 : 1, recenter()) : sy < 0;
	  };

	  projection.precision = function (_) {
	    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt$1(delta2);
	  };

	  projection.fitExtent = function (extent, object) {
	    return fitExtent(projection, extent, object);
	  };

	  projection.fitSize = function (size, object) {
	    return fitSize(projection, size, object);
	  };

	  projection.fitWidth = function (width, object) {
	    return fitWidth(projection, width, object);
	  };

	  projection.fitHeight = function (height, object) {
	    return fitHeight(projection, height, object);
	  };

	  function recenter() {
	    var center = scaleTranslateRotate(k, 0, 0, sx, sy, alpha).apply(null, project(lambda, phi)),
	        transform = scaleTranslateRotate(k, x - center[0], y - center[1], sx, sy, alpha);
	    rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);
	    projectTransform = compose(project, transform);
	    projectRotateTransform = compose(rotate, projectTransform);
	    projectResample = resample(projectTransform, delta2);
	    return reset();
	  }

	  function reset() {
	    cache = cacheStream = null;
	    return projection;
	  }

	  return function () {
	    project = projectAt.apply(this, arguments);
	    projection.invert = project.invert && invert;
	    return recenter();
	  };
	}

	function mercatorRaw(lambda, phi) {
	  return [lambda, log$2(tan((halfPi + phi) / 2))];
	}

	mercatorRaw.invert = function (x, y) {
	  return [x, 2 * atan(exp(y)) - halfPi];
	};

	function geoMercator () {
	  return mercatorProjection(mercatorRaw).scale(961 / tau$1);
	}
	function mercatorProjection(project) {
	  var m = projection(project),
	      center = m.center,
	      scale = m.scale,
	      translate = m.translate,
	      clipExtent = m.clipExtent,
	      x0 = null,
	      y0,
	      x1,
	      y1; // clip extent

	  m.scale = function (_) {
	    return arguments.length ? (scale(_), reclip()) : scale();
	  };

	  m.translate = function (_) {
	    return arguments.length ? (translate(_), reclip()) : translate();
	  };

	  m.center = function (_) {
	    return arguments.length ? (center(_), reclip()) : center();
	  };

	  m.clipExtent = function (_) {
	    return arguments.length ? (_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];
	  };

	  function reclip() {
	    var k = pi$1 * scale(),
	        t = m(rotation(m.rotate()).invert([0, 0]));
	    return clipExtent(x0 == null ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]] : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);
	  }

	  return reclip();
	}

	function naturalEarth1Raw(lambda, phi) {
	  var phi2 = phi * phi,
	      phi4 = phi2 * phi2;
	  return [lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))), phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))];
	}

	naturalEarth1Raw.invert = function (x, y) {
	  var phi = y,
	      i = 25,
	      delta;

	  do {
	    var phi2 = phi * phi,
	        phi4 = phi2 * phi2;
	    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) / (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));
	  } while (abs$2(delta) > epsilon$1 && --i > 0);

	  return [x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))), phi];
	};

	function geoNaturalEarth1 () {
	  return projection(naturalEarth1Raw).scale(175.295);
	}

	function ascending$1 (a, b) {
	  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
	}

	function bisector (compare) {
	  if (compare.length === 1) compare = ascendingComparator(compare);
	  return {
	    left: function left(a, x, lo, hi) {
	      if (lo == null) lo = 0;
	      if (hi == null) hi = a.length;

	      while (lo < hi) {
	        var mid = lo + hi >>> 1;
	        if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;
	      }

	      return lo;
	    },
	    right: function right(a, x, lo, hi) {
	      if (lo == null) lo = 0;
	      if (hi == null) hi = a.length;

	      while (lo < hi) {
	        var mid = lo + hi >>> 1;
	        if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;
	      }

	      return lo;
	    }
	  };
	}

	function ascendingComparator(f) {
	  return function (d, x) {
	    return ascending$1(f(d), x);
	  };
	}

	var ascendingBisect = bisector(ascending$1);
	var bisectRight = ascendingBisect.right;

	var e10 = Math.sqrt(50),
	    e5 = Math.sqrt(10),
	    e2 = Math.sqrt(2);
	function ticks (start, stop, count) {
	  var reverse,
	      i = -1,
	      n,
	      ticks,
	      step;
	  stop = +stop, start = +start, count = +count;
	  if (start === stop && count > 0) return [start];
	  if (reverse = stop < start) n = start, start = stop, stop = n;
	  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

	  if (step > 0) {
	    start = Math.ceil(start / step);
	    stop = Math.floor(stop / step);
	    ticks = new Array(n = Math.ceil(stop - start + 1));

	    while (++i < n) {
	      ticks[i] = (start + i) * step;
	    }
	  } else {
	    start = Math.floor(start * step);
	    stop = Math.ceil(stop * step);
	    ticks = new Array(n = Math.ceil(start - stop + 1));

	    while (++i < n) {
	      ticks[i] = (start - i) / step;
	    }
	  }

	  if (reverse) ticks.reverse();
	  return ticks;
	}
	function tickIncrement(start, stop, count) {
	  var step = (stop - start) / Math.max(0, count),
	      power = Math.floor(Math.log(step) / Math.LN10),
	      error = step / Math.pow(10, power);
	  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
	}
	function tickStep(start, stop, count) {
	  var step0 = Math.abs(stop - start) / Math.max(0, count),
	      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
	      error = step0 / step1;
	  if (error >= e10) step1 *= 10;else if (error >= e5) step1 *= 5;else if (error >= e2) step1 *= 2;
	  return stop < start ? -step1 : step1;
	}

	function initRange(domain, range) {
	  switch (arguments.length) {
	    case 0:
	      break;

	    case 1:
	      this.range(domain);
	      break;

	    default:
	      this.range(range).domain(domain);
	      break;
	  }

	  return this;
	}

	function constant$3 (x) {
	  return function () {
	    return x;
	  };
	}

	function number (x) {
	  return +x;
	}

	var unit = [0, 1];
	function identity$5(x) {
	  return x;
	}

	function normalize$1(a, b) {
	  return (b -= a = +a) ? function (x) {
	    return (x - a) / b;
	  } : constant$3(isNaN(b) ? NaN : 0.5);
	}

	function clamper(a, b) {
	  var t;
	  if (a > b) t = a, a = b, b = t;
	  return function (x) {
	    return Math.max(a, Math.min(b, x));
	  };
	} // normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
	// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].


	function bimap(domain, range, interpolate) {
	  var d0 = domain[0],
	      d1 = domain[1],
	      r0 = range[0],
	      r1 = range[1];
	  if (d1 < d0) d0 = normalize$1(d1, d0), r0 = interpolate(r1, r0);else d0 = normalize$1(d0, d1), r0 = interpolate(r0, r1);
	  return function (x) {
	    return r0(d0(x));
	  };
	}

	function polymap(domain, range, interpolate) {
	  var j = Math.min(domain.length, range.length) - 1,
	      d = new Array(j),
	      r = new Array(j),
	      i = -1; // Reverse descending domains.

	  if (domain[j] < domain[0]) {
	    domain = domain.slice().reverse();
	    range = range.slice().reverse();
	  }

	  while (++i < j) {
	    d[i] = normalize$1(domain[i], domain[i + 1]);
	    r[i] = interpolate(range[i], range[i + 1]);
	  }

	  return function (x) {
	    var i = bisectRight(domain, x, 1, j) - 1;
	    return r[i](d[i](x));
	  };
	}

	function copy(source, target) {
	  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
	}
	function transformer$1() {
	  var domain = unit,
	      range = unit,
	      interpolate$1 = interpolate,
	      transform,
	      untransform,
	      unknown,
	      clamp = identity$5,
	      piecewise,
	      output,
	      input;

	  function rescale() {
	    var n = Math.min(domain.length, range.length);
	    if (clamp !== identity$5) clamp = clamper(domain[0], domain[n - 1]);
	    piecewise = n > 2 ? polymap : bimap;
	    output = input = null;
	    return scale;
	  }

	  function scale(x) {
	    return isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate$1)))(transform(clamp(x)));
	  }

	  scale.invert = function (y) {
	    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));
	  };

	  scale.domain = function (_) {
	    return arguments.length ? (domain = Array.from(_, number), rescale()) : domain.slice();
	  };

	  scale.range = function (_) {
	    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
	  };

	  scale.rangeRound = function (_) {
	    return range = Array.from(_), interpolate$1 = interpolateRound, rescale();
	  };

	  scale.clamp = function (_) {
	    return arguments.length ? (clamp = _ ? true : identity$5, rescale()) : clamp !== identity$5;
	  };

	  scale.interpolate = function (_) {
	    return arguments.length ? (interpolate$1 = _, rescale()) : interpolate$1;
	  };

	  scale.unknown = function (_) {
	    return arguments.length ? (unknown = _, scale) : unknown;
	  };

	  return function (t, u) {
	    transform = t, untransform = u;
	    return rescale();
	  };
	}
	function continuous() {
	  return transformer$1()(identity$5, identity$5);
	}

	function formatDecimal$1 (x) {
	  return Math.abs(x = Math.round(x)) >= 1e21 ? x.toLocaleString("en").replace(/,/g, "") : x.toString(10);
	} // Computes the decimal coefficient and exponent of the specified number x with
	// significant digits p, where x is positive and p is in [1, 21] or undefined.
	// For example, formatDecimalParts(1.23) returns ["123", 0].

	function formatDecimalParts$1(x, p) {
	  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, Â±Infinity

	  var i,
	      coefficient = x.slice(0, i); // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
	  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).

	  return [coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient, +x.slice(i + 1)];
	}

	function exponent$1 (x) {
	  return x = formatDecimalParts$1(Math.abs(x)), x ? x[1] : NaN;
	}

	function formatGroup$1 (grouping, thousands) {
	  return function (value, width) {
	    var i = value.length,
	        t = [],
	        j = 0,
	        g = grouping[0],
	        length = 0;

	    while (i > 0 && g > 0) {
	      if (length + g + 1 > width) g = Math.max(1, width - length);
	      t.push(value.substring(i -= g, i + g));
	      if ((length += g + 1) > width) break;
	      g = grouping[j = (j + 1) % grouping.length];
	    }

	    return t.reverse().join(thousands);
	  };
	}

	function formatNumerals$1 (numerals) {
	  return function (value) {
	    return value.replace(/[0-9]/g, function (i) {
	      return numerals[+i];
	    });
	  };
	}

	// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
	var re$1 = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
	function formatSpecifier$1(specifier) {
	  if (!(match = re$1.exec(specifier))) throw new Error("invalid format: " + specifier);
	  var match;
	  return new FormatSpecifier$1({
	    fill: match[1],
	    align: match[2],
	    sign: match[3],
	    symbol: match[4],
	    zero: match[5],
	    width: match[6],
	    comma: match[7],
	    precision: match[8] && match[8].slice(1),
	    trim: match[9],
	    type: match[10]
	  });
	}
	formatSpecifier$1.prototype = FormatSpecifier$1.prototype; // instanceof

	function FormatSpecifier$1(specifier) {
	  this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
	  this.align = specifier.align === undefined ? ">" : specifier.align + "";
	  this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
	  this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
	  this.zero = !!specifier.zero;
	  this.width = specifier.width === undefined ? undefined : +specifier.width;
	  this.comma = !!specifier.comma;
	  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
	  this.trim = !!specifier.trim;
	  this.type = specifier.type === undefined ? "" : specifier.type + "";
	}

	FormatSpecifier$1.prototype.toString = function () {
	  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === undefined ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
	};

	// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
	function formatTrim$1 (s) {
	  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
	    switch (s[i]) {
	      case ".":
	        i0 = i1 = i;
	        break;

	      case "0":
	        if (i0 === 0) i0 = i;
	        i1 = i;
	        break;

	      default:
	        if (!+s[i]) break out;
	        if (i0 > 0) i0 = 0;
	        break;
	    }
	  }

	  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
	}

	var prefixExponent$1;
	function formatPrefixAuto$1 (x, p) {
	  var d = formatDecimalParts$1(x, p);
	  if (!d) return x + "";
	  var coefficient = d[0],
	      exponent = d[1],
	      i = exponent - (prefixExponent$1 = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
	      n = coefficient.length;
	  return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimalParts$1(x, Math.max(0, p + i - 1))[0]; // less than 1y!
	}

	function formatRounded$1 (x, p) {
	  var d = formatDecimalParts$1(x, p);
	  if (!d) return x + "";
	  var coefficient = d[0],
	      exponent = d[1];
	  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
	}

	var formatTypes$1 = {
	  "%": function _(x, p) {
	    return (x * 100).toFixed(p);
	  },
	  "b": function b(x) {
	    return Math.round(x).toString(2);
	  },
	  "c": function c(x) {
	    return x + "";
	  },
	  "d": formatDecimal$1,
	  "e": function e(x, p) {
	    return x.toExponential(p);
	  },
	  "f": function f(x, p) {
	    return x.toFixed(p);
	  },
	  "g": function g(x, p) {
	    return x.toPrecision(p);
	  },
	  "o": function o(x) {
	    return Math.round(x).toString(8);
	  },
	  "p": function p(x, _p) {
	    return formatRounded$1(x * 100, _p);
	  },
	  "r": formatRounded$1,
	  "s": formatPrefixAuto$1,
	  "X": function X(x) {
	    return Math.round(x).toString(16).toUpperCase();
	  },
	  "x": function x(_x) {
	    return Math.round(_x).toString(16);
	  }
	};

	function identity$6 (x) {
	  return x;
	}

	var map$1 = Array.prototype.map,
	    prefixes$1 = ["y", "z", "a", "f", "p", "n", "Âµ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
	function formatLocale$1 (locale) {
	  var group = locale.grouping === undefined || locale.thousands === undefined ? identity$6 : formatGroup$1(map$1.call(locale.grouping, Number), locale.thousands + ""),
	      currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
	      currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
	      decimal = locale.decimal === undefined ? "." : locale.decimal + "",
	      numerals = locale.numerals === undefined ? identity$6 : formatNumerals$1(map$1.call(locale.numerals, String)),
	      percent = locale.percent === undefined ? "%" : locale.percent + "",
	      minus = locale.minus === undefined ? "-" : locale.minus + "",
	      nan = locale.nan === undefined ? "NaN" : locale.nan + "";

	  function newFormat(specifier) {
	    specifier = formatSpecifier$1(specifier);
	    var fill = specifier.fill,
	        align = specifier.align,
	        sign = specifier.sign,
	        symbol = specifier.symbol,
	        zero = specifier.zero,
	        width = specifier.width,
	        comma = specifier.comma,
	        precision = specifier.precision,
	        trim = specifier.trim,
	        type = specifier.type; // The "n" type is an alias for ",g".

	    if (type === "n") comma = true, type = "g"; // The "" type, and any invalid type, is an alias for ".12~g".
	    else if (!formatTypes$1[type]) precision === undefined && (precision = 12), trim = true, type = "g"; // If zero fill is specified, padding goes after sign and before digits.

	    if (zero || fill === "0" && align === "=") zero = true, fill = "0", align = "="; // Compute the prefix and suffix.
	    // For SI-prefix, the suffix is lazily computed.

	    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
	        suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : ""; // What format function should we use?
	    // Is this an integer type?
	    // Can this type generate exponential notation?

	    var formatType = formatTypes$1[type],
	        maybeSuffix = /[defgprs%]/.test(type); // Set the default precision if not specified,
	    // or clamp the specified precision to the supported range.
	    // For significant precision, it must be in [1, 21].
	    // For fixed precision, it must be in [0, 20].

	    precision = precision === undefined ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));

	    function format(value) {
	      var valuePrefix = prefix,
	          valueSuffix = suffix,
	          i,
	          n,
	          c;

	      if (type === "c") {
	        valueSuffix = formatType(value) + valueSuffix;
	        value = "";
	      } else {
	        value = +value; // Determine the sign. -0 is not less than 0, but 1 / -0 is!

	        var valueNegative = value < 0 || 1 / value < 0; // Perform the initial formatting.

	        value = isNaN(value) ? nan : formatType(Math.abs(value), precision); // Trim insignificant zeros.

	        if (trim) value = formatTrim$1(value); // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.

	        if (valueNegative && +value === 0 && sign !== "+") valueNegative = false; // Compute the prefix and suffix.

	        valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
	        valueSuffix = (type === "s" ? prefixes$1[8 + prefixExponent$1 / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : ""); // Break the formatted value into the integer âvalueâ part that can be
	        // grouped, and fractional or exponential âsuffixâ part that is not.

	        if (maybeSuffix) {
	          i = -1, n = value.length;

	          while (++i < n) {
	            if (c = value.charCodeAt(i), 48 > c || c > 57) {
	              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
	              value = value.slice(0, i);
	              break;
	            }
	          }
	        }
	      } // If the fill character is not "0", grouping is applied before padding.


	      if (comma && !zero) value = group(value, Infinity); // Compute the padding.

	      var length = valuePrefix.length + value.length + valueSuffix.length,
	          padding = length < width ? new Array(width - length + 1).join(fill) : ""; // If the fill character is "0", grouping is applied after padding.

	      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = ""; // Reconstruct the final output based on the desired alignment.

	      switch (align) {
	        case "<":
	          value = valuePrefix + value + valueSuffix + padding;
	          break;

	        case "=":
	          value = valuePrefix + padding + value + valueSuffix;
	          break;

	        case "^":
	          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
	          break;

	        default:
	          value = padding + valuePrefix + value + valueSuffix;
	          break;
	      }

	      return numerals(value);
	    }

	    format.toString = function () {
	      return specifier + "";
	    };

	    return format;
	  }

	  function formatPrefix(specifier, value) {
	    var f = newFormat((specifier = formatSpecifier$1(specifier), specifier.type = "f", specifier)),
	        e = Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3,
	        k = Math.pow(10, -e),
	        prefix = prefixes$1[8 + e / 3];
	    return function (value) {
	      return f(k * value) + prefix;
	    };
	  }

	  return {
	    format: newFormat,
	    formatPrefix: formatPrefix
	  };
	}

	var locale$1;
	var format$1;
	var formatPrefix$1;
	defaultLocale$1({
	  decimal: ".",
	  thousands: ",",
	  grouping: [3],
	  currency: ["$", ""],
	  minus: "-"
	});
	function defaultLocale$1(definition) {
	  locale$1 = formatLocale$1(definition);
	  format$1 = locale$1.format;
	  formatPrefix$1 = locale$1.formatPrefix;
	  return locale$1;
	}

	function precisionFixed (step) {
	  return Math.max(0, -exponent$1(Math.abs(step)));
	}

	function precisionPrefix (step, value) {
	  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3 - exponent$1(Math.abs(step)));
	}

	function precisionRound (step, max) {
	  step = Math.abs(step), max = Math.abs(max) - step;
	  return Math.max(0, exponent$1(max) - exponent$1(step)) + 1;
	}

	function tickFormat (start, stop, count, specifier) {
	  var step = tickStep(start, stop, count),
	      precision;
	  specifier = formatSpecifier$1(specifier == null ? ",f" : specifier);

	  switch (specifier.type) {
	    case "s":
	      {
	        var value = Math.max(Math.abs(start), Math.abs(stop));
	        if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
	        return formatPrefix$1(specifier, value);
	      }

	    case "":
	    case "e":
	    case "g":
	    case "p":
	    case "r":
	      {
	        if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
	        break;
	      }

	    case "f":
	    case "%":
	      {
	        if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
	        break;
	      }
	  }

	  return format$1(specifier);
	}

	function linearish(scale) {
	  var domain = scale.domain;

	  scale.ticks = function (count) {
	    var d = domain();
	    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
	  };

	  scale.tickFormat = function (count, specifier) {
	    var d = domain();
	    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
	  };

	  scale.nice = function (count) {
	    if (count == null) count = 10;
	    var d = domain();
	    var i0 = 0;
	    var i1 = d.length - 1;
	    var start = d[i0];
	    var stop = d[i1];
	    var prestep;
	    var step;
	    var maxIter = 10;

	    if (stop < start) {
	      step = start, start = stop, stop = step;
	      step = i0, i0 = i1, i1 = step;
	    }

	    while (maxIter-- > 0) {
	      step = tickIncrement(start, stop, count);

	      if (step === prestep) {
	        d[i0] = start;
	        d[i1] = stop;
	        return domain(d);
	      } else if (step > 0) {
	        start = Math.floor(start / step) * step;
	        stop = Math.ceil(stop / step) * step;
	      } else if (step < 0) {
	        start = Math.ceil(start * step) / step;
	        stop = Math.floor(stop * step) / step;
	      } else {
	        break;
	      }

	      prestep = step;
	    }

	    return scale;
	  };

	  return scale;
	}
	function linear$1() {
	  var scale = continuous();

	  scale.copy = function () {
	    return copy(scale, linear$1());
	  };

	  initRange.apply(scale, arguments);
	  return linearish(scale);
	}

	var log$3 = Math.log;
	var LOG10E = Math.LOG10E;

	// `Math.log10` method
	// https://tc39.github.io/ecma262/#sec-math.log10
	_export({ target: 'Math', stat: true }, {
	  log10: function log10(x) {
	    return log$3(x) * LOG10E;
	  }
	});

	var log$4 = Math.log;
	var LN2$1 = Math.LN2;

	// `Math.log2` method
	// https://tc39.github.io/ecma262/#sec-math.log2
	_export({ target: 'Math', stat: true }, {
	  log2: function log2(x) {
	    return log$4(x) / LN2$1;
	  }
	});

	function nice (domain, interval) {
	  domain = domain.slice();
	  var i0 = 0,
	      i1 = domain.length - 1,
	      x0 = domain[i0],
	      x1 = domain[i1],
	      t;

	  if (x1 < x0) {
	    t = i0, i0 = i1, i1 = t;
	    t = x0, x0 = x1, x1 = t;
	  }

	  domain[i0] = interval.floor(x0);
	  domain[i1] = interval.ceil(x1);
	  return domain;
	}

	function transformLog(x) {
	  return Math.log(x);
	}

	function transformExp(x) {
	  return Math.exp(x);
	}

	function transformLogn(x) {
	  return -Math.log(-x);
	}

	function transformExpn(x) {
	  return -Math.exp(-x);
	}

	function pow10(x) {
	  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
	}

	function powp(base) {
	  return base === 10 ? pow10 : base === Math.E ? Math.exp : function (x) {
	    return Math.pow(base, x);
	  };
	}

	function logp(base) {
	  return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), function (x) {
	    return Math.log(x) / base;
	  });
	}

	function reflect(f) {
	  return function (x) {
	    return -f(-x);
	  };
	}

	function loggish(transform) {
	  var scale = transform(transformLog, transformExp),
	      domain = scale.domain,
	      base = 10,
	      logs,
	      pows;

	  function rescale() {
	    logs = logp(base), pows = powp(base);

	    if (domain()[0] < 0) {
	      logs = reflect(logs), pows = reflect(pows);
	      transform(transformLogn, transformExpn);
	    } else {
	      transform(transformLog, transformExp);
	    }

	    return scale;
	  }

	  scale.base = function (_) {
	    return arguments.length ? (base = +_, rescale()) : base;
	  };

	  scale.domain = function (_) {
	    return arguments.length ? (domain(_), rescale()) : domain();
	  };

	  scale.ticks = function (count) {
	    var d = domain(),
	        u = d[0],
	        v = d[d.length - 1],
	        r;
	    if (r = v < u) i = u, u = v, v = i;
	    var i = logs(u),
	        j = logs(v),
	        p,
	        k,
	        t,
	        n = count == null ? 10 : +count,
	        z = [];

	    if (!(base % 1) && j - i < n) {
	      i = Math.floor(i), j = Math.ceil(j);
	      if (u > 0) for (; i <= j; ++i) {
	        for (k = 1, p = pows(i); k < base; ++k) {
	          t = p * k;
	          if (t < u) continue;
	          if (t > v) break;
	          z.push(t);
	        }
	      } else for (; i <= j; ++i) {
	        for (k = base - 1, p = pows(i); k >= 1; --k) {
	          t = p * k;
	          if (t < u) continue;
	          if (t > v) break;
	          z.push(t);
	        }
	      }
	      if (z.length * 2 < n) z = ticks(u, v, n);
	    } else {
	      z = ticks(i, j, Math.min(j - i, n)).map(pows);
	    }

	    return r ? z.reverse() : z;
	  };

	  scale.tickFormat = function (count, specifier) {
	    if (specifier == null) specifier = base === 10 ? ".0e" : ",";
	    if (typeof specifier !== "function") specifier = format$1(specifier);
	    if (count === Infinity) return specifier;
	    if (count == null) count = 10;
	    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?

	    return function (d) {
	      var i = d / pows(Math.round(logs(d)));
	      if (i * base < base - 0.5) i *= base;
	      return i <= k ? specifier(d) : "";
	    };
	  };

	  scale.nice = function () {
	    return domain(nice(domain(), {
	      floor: function floor(x) {
	        return pows(Math.floor(logs(x)));
	      },
	      ceil: function ceil(x) {
	        return pows(Math.ceil(logs(x)));
	      }
	    }));
	  };

	  return scale;
	}
	function log$5() {
	  var scale = loggish(transformer$1()).domain([1, 10]);

	  scale.copy = function () {
	    return copy(scale, log$5()).base(scale.base());
	  };

	  initRange.apply(scale, arguments);
	  return scale;
	}

	function transformPow(exponent) {
	  return function (x) {
	    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
	  };
	}

	function transformSqrt(x) {
	  return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);
	}

	function transformSquare(x) {
	  return x < 0 ? -x * x : x * x;
	}

	function powish(transform) {
	  var scale = transform(identity$5, identity$5),
	      exponent = 1;

	  function rescale() {
	    return exponent === 1 ? transform(identity$5, identity$5) : exponent === 0.5 ? transform(transformSqrt, transformSquare) : transform(transformPow(exponent), transformPow(1 / exponent));
	  }

	  scale.exponent = function (_) {
	    return arguments.length ? (exponent = +_, rescale()) : exponent;
	  };

	  return linearish(scale);
	}
	function pow$2() {
	  var scale = powish(transformer$1());

	  scale.copy = function () {
	    return copy(scale, pow$2()).exponent(scale.exponent());
	  };

	  initRange.apply(scale, arguments);
	  return scale;
	}
	function sqrt$2() {
	  return pow$2.apply(null, arguments).exponent(0.5);
	}

	function constant$4 (x) {
	  return function constant() {
	    return x;
	  };
	}

	function array$1 (x) {
	  return _typeof(x) === "object" && "length" in x ? x // Array, TypedArray, NodeList, array-like
	  : Array.from(x); // Map, Set, iterable, string, or anything else
	}

	function Linear(context) {
	  this._context = context;
	}

	Linear.prototype = {
	  areaStart: function areaStart() {
	    this._line = 0;
	  },
	  areaEnd: function areaEnd() {
	    this._line = NaN;
	  },
	  lineStart: function lineStart() {
	    this._point = 0;
	  },
	  lineEnd: function lineEnd() {
	    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function point(x, y) {
	    x = +x, y = +y;

	    switch (this._point) {
	      case 0:
	        this._point = 1;
	        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
	        break;

	      case 1:
	        this._point = 2;
	      // proceed

	      default:
	        this._context.lineTo(x, y);

	        break;
	    }
	  }
	};
	function curveLinear (context) {
	  return new Linear(context);
	}

	function x$2(p) {
	  return p[0];
	}
	function y$2(p) {
	  return p[1];
	}

	function d3line (x, y) {
	  var defined = constant$4(true),
	      context = null,
	      curve = curveLinear,
	      output = null;
	  x = typeof x === "function" ? x : x === undefined ? x$2 : constant$4(x);
	  y = typeof y === "function" ? y : y === undefined ? y$2 : constant$4(y);

	  function line(data) {
	    var i,
	        n = (data = array$1(data)).length,
	        d,
	        defined0 = false,
	        buffer;
	    if (context == null) output = curve(buffer = path$1());

	    for (i = 0; i <= n; ++i) {
	      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
	        if (defined0 = !defined0) output.lineStart();else output.lineEnd();
	      }

	      if (defined0) output.point(+x(d, i, data), +y(d, i, data));
	    }

	    if (buffer) return output = null, buffer + "" || null;
	  }

	  line.x = function (_) {
	    return arguments.length ? (x = typeof _ === "function" ? _ : constant$4(+_), line) : x;
	  };

	  line.y = function (_) {
	    return arguments.length ? (y = typeof _ === "function" ? _ : constant$4(+_), line) : y;
	  };

	  line.defined = function (_) {
	    return arguments.length ? (defined = typeof _ === "function" ? _ : constant$4(!!_), line) : defined;
	  };

	  line.curve = function (_) {
	    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
	  };

	  line.context = function (_) {
	    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
	  };

	  return line;
	}

	function _point(that, x, y) {
	  that._context.bezierCurveTo((2 * that._x0 + that._x1) / 3, (2 * that._y0 + that._y1) / 3, (that._x0 + 2 * that._x1) / 3, (that._y0 + 2 * that._y1) / 3, (that._x0 + 4 * that._x1 + x) / 6, (that._y0 + 4 * that._y1 + y) / 6);
	}
	function Basis(context) {
	  this._context = context;
	}
	Basis.prototype = {
	  areaStart: function areaStart() {
	    this._line = 0;
	  },
	  areaEnd: function areaEnd() {
	    this._line = NaN;
	  },
	  lineStart: function lineStart() {
	    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function lineEnd() {
	    switch (this._point) {
	      case 3:
	        _point(this, this._x1, this._y1);

	      // proceed

	      case 2:
	        this._context.lineTo(this._x1, this._y1);

	        break;
	    }

	    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function point(x, y) {
	    x = +x, y = +y;

	    switch (this._point) {
	      case 0:
	        this._point = 1;
	        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
	        break;

	      case 1:
	        this._point = 2;
	        break;

	      case 2:
	        this._point = 3;

	        this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);

	      // proceed

	      default:
	        _point(this, x, y);

	        break;
	    }

	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	  }
	};
	function curveBasis (context) {
	  return new Basis(context);
	}

	var t0 = new Date(),
	    t1 = new Date();
	function newInterval(floori, offseti, count, field) {
	  function interval(date) {
	    return floori(date = arguments.length === 0 ? new Date() : new Date(+date)), date;
	  }

	  interval.floor = function (date) {
	    return floori(date = new Date(+date)), date;
	  };

	  interval.ceil = function (date) {
	    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
	  };

	  interval.round = function (date) {
	    var d0 = interval(date),
	        d1 = interval.ceil(date);
	    return date - d0 < d1 - date ? d0 : d1;
	  };

	  interval.offset = function (date, step) {
	    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
	  };

	  interval.range = function (start, stop, step) {
	    var range = [],
	        previous;
	    start = interval.ceil(start);
	    step = step == null ? 1 : Math.floor(step);
	    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date

	    do {
	      range.push(previous = new Date(+start)), offseti(start, step), floori(start);
	    } while (previous < start && start < stop);

	    return range;
	  };

	  interval.filter = function (test) {
	    return newInterval(function (date) {
	      if (date >= date) while (floori(date), !test(date)) {
	        date.setTime(date - 1);
	      }
	    }, function (date, step) {
	      if (date >= date) {
	        if (step < 0) while (++step <= 0) {
	          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty

	        } else while (--step >= 0) {
	          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty

	        }
	      }
	    });
	  };

	  if (count) {
	    interval.count = function (start, end) {
	      t0.setTime(+start), t1.setTime(+end);
	      floori(t0), floori(t1);
	      return Math.floor(count(t0, t1));
	    };

	    interval.every = function (step) {
	      step = Math.floor(step);
	      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
	        return field(d) % step === 0;
	      } : function (d) {
	        return interval.count(0, d) % step === 0;
	      });
	    };
	  }

	  return interval;
	}

	var durationMinute = 6e4;
	var durationDay = 864e5;
	var durationWeek = 6048e5;

	var day = newInterval(function (date) {
	  return date.setHours(0, 0, 0, 0);
	}, function (date, step) {
	  return date.setDate(date.getDate() + step);
	}, function (start, end) {
	  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;
	}, function (date) {
	  return date.getDate() - 1;
	});

	function weekday(i) {
	  return newInterval(function (date) {
	    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
	    date.setHours(0, 0, 0, 0);
	  }, function (date, step) {
	    date.setDate(date.getDate() + step * 7);
	  }, function (start, end) {
	    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
	  });
	}

	var sunday = weekday(0);
	var monday = weekday(1);
	var tuesday = weekday(2);
	var wednesday = weekday(3);
	var thursday = weekday(4);
	var friday = weekday(5);
	var saturday = weekday(6);

	var year = newInterval(function (date) {
	  date.setMonth(0, 1);
	  date.setHours(0, 0, 0, 0);
	}, function (date, step) {
	  date.setFullYear(date.getFullYear() + step);
	}, function (start, end) {
	  return end.getFullYear() - start.getFullYear();
	}, function (date) {
	  return date.getFullYear();
	}); // An optimized implementation for this simple case.

	year.every = function (k) {
	  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {
	    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
	    date.setMonth(0, 1);
	    date.setHours(0, 0, 0, 0);
	  }, function (date, step) {
	    date.setFullYear(date.getFullYear() + step * k);
	  });
	};

	var utcDay = newInterval(function (date) {
	  date.setUTCHours(0, 0, 0, 0);
	}, function (date, step) {
	  date.setUTCDate(date.getUTCDate() + step);
	}, function (start, end) {
	  return (end - start) / durationDay;
	}, function (date) {
	  return date.getUTCDate() - 1;
	});

	function utcWeekday(i) {
	  return newInterval(function (date) {
	    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
	    date.setUTCHours(0, 0, 0, 0);
	  }, function (date, step) {
	    date.setUTCDate(date.getUTCDate() + step * 7);
	  }, function (start, end) {
	    return (end - start) / durationWeek;
	  });
	}

	var utcSunday = utcWeekday(0);
	var utcMonday = utcWeekday(1);
	var utcTuesday = utcWeekday(2);
	var utcWednesday = utcWeekday(3);
	var utcThursday = utcWeekday(4);
	var utcFriday = utcWeekday(5);
	var utcSaturday = utcWeekday(6);

	var utcYear = newInterval(function (date) {
	  date.setUTCMonth(0, 1);
	  date.setUTCHours(0, 0, 0, 0);
	}, function (date, step) {
	  date.setUTCFullYear(date.getUTCFullYear() + step);
	}, function (start, end) {
	  return end.getUTCFullYear() - start.getUTCFullYear();
	}, function (date) {
	  return date.getUTCFullYear();
	}); // An optimized implementation for this simple case.

	utcYear.every = function (k) {
	  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {
	    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
	    date.setUTCMonth(0, 1);
	    date.setUTCHours(0, 0, 0, 0);
	  }, function (date, step) {
	    date.setUTCFullYear(date.getUTCFullYear() + step * k);
	  });
	};

	function localDate(d) {
	  if (0 <= d.y && d.y < 100) {
	    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
	    date.setFullYear(d.y);
	    return date;
	  }

	  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
	}

	function utcDate(d) {
	  if (0 <= d.y && d.y < 100) {
	    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
	    date.setUTCFullYear(d.y);
	    return date;
	  }

	  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
	}

	function newDate(y, m, d) {
	  return {
	    y: y,
	    m: m,
	    d: d,
	    H: 0,
	    M: 0,
	    S: 0,
	    L: 0
	  };
	}

	function formatLocale$2(locale) {
	  var locale_dateTime = locale.dateTime,
	      locale_date = locale.date,
	      locale_time = locale.time,
	      locale_periods = locale.periods,
	      locale_weekdays = locale.days,
	      locale_shortWeekdays = locale.shortDays,
	      locale_months = locale.months,
	      locale_shortMonths = locale.shortMonths;
	  var periodRe = formatRe(locale_periods),
	      periodLookup = formatLookup(locale_periods),
	      weekdayRe = formatRe(locale_weekdays),
	      weekdayLookup = formatLookup(locale_weekdays),
	      shortWeekdayRe = formatRe(locale_shortWeekdays),
	      shortWeekdayLookup = formatLookup(locale_shortWeekdays),
	      monthRe = formatRe(locale_months),
	      monthLookup = formatLookup(locale_months),
	      shortMonthRe = formatRe(locale_shortMonths),
	      shortMonthLookup = formatLookup(locale_shortMonths);
	  var formats = {
	    "a": formatShortWeekday,
	    "A": formatWeekday,
	    "b": formatShortMonth,
	    "B": formatMonth,
	    "c": null,
	    "d": formatDayOfMonth,
	    "e": formatDayOfMonth,
	    "f": formatMicroseconds,
	    "g": formatYearISO,
	    "G": formatFullYearISO,
	    "H": formatHour24,
	    "I": formatHour12,
	    "j": formatDayOfYear,
	    "L": formatMilliseconds,
	    "m": formatMonthNumber,
	    "M": formatMinutes,
	    "p": formatPeriod,
	    "q": formatQuarter,
	    "Q": formatUnixTimestamp,
	    "s": formatUnixTimestampSeconds,
	    "S": formatSeconds,
	    "u": formatWeekdayNumberMonday,
	    "U": formatWeekNumberSunday,
	    "V": formatWeekNumberISO,
	    "w": formatWeekdayNumberSunday,
	    "W": formatWeekNumberMonday,
	    "x": null,
	    "X": null,
	    "y": formatYear$1,
	    "Y": formatFullYear,
	    "Z": formatZone,
	    "%": formatLiteralPercent
	  };
	  var utcFormats = {
	    "a": formatUTCShortWeekday,
	    "A": formatUTCWeekday,
	    "b": formatUTCShortMonth,
	    "B": formatUTCMonth,
	    "c": null,
	    "d": formatUTCDayOfMonth,
	    "e": formatUTCDayOfMonth,
	    "f": formatUTCMicroseconds,
	    "g": formatUTCYearISO,
	    "G": formatUTCFullYearISO,
	    "H": formatUTCHour24,
	    "I": formatUTCHour12,
	    "j": formatUTCDayOfYear,
	    "L": formatUTCMilliseconds,
	    "m": formatUTCMonthNumber,
	    "M": formatUTCMinutes,
	    "p": formatUTCPeriod,
	    "q": formatUTCQuarter,
	    "Q": formatUnixTimestamp,
	    "s": formatUnixTimestampSeconds,
	    "S": formatUTCSeconds,
	    "u": formatUTCWeekdayNumberMonday,
	    "U": formatUTCWeekNumberSunday,
	    "V": formatUTCWeekNumberISO,
	    "w": formatUTCWeekdayNumberSunday,
	    "W": formatUTCWeekNumberMonday,
	    "x": null,
	    "X": null,
	    "y": formatUTCYear,
	    "Y": formatUTCFullYear,
	    "Z": formatUTCZone,
	    "%": formatLiteralPercent
	  };
	  var parses = {
	    "a": parseShortWeekday,
	    "A": parseWeekday,
	    "b": parseShortMonth,
	    "B": parseMonth,
	    "c": parseLocaleDateTime,
	    "d": parseDayOfMonth,
	    "e": parseDayOfMonth,
	    "f": parseMicroseconds,
	    "g": parseYear,
	    "G": parseFullYear,
	    "H": parseHour24,
	    "I": parseHour24,
	    "j": parseDayOfYear,
	    "L": parseMilliseconds,
	    "m": parseMonthNumber,
	    "M": parseMinutes,
	    "p": parsePeriod,
	    "q": parseQuarter,
	    "Q": parseUnixTimestamp,
	    "s": parseUnixTimestampSeconds,
	    "S": parseSeconds,
	    "u": parseWeekdayNumberMonday,
	    "U": parseWeekNumberSunday,
	    "V": parseWeekNumberISO,
	    "w": parseWeekdayNumberSunday,
	    "W": parseWeekNumberMonday,
	    "x": parseLocaleDate,
	    "X": parseLocaleTime,
	    "y": parseYear,
	    "Y": parseFullYear,
	    "Z": parseZone,
	    "%": parseLiteralPercent
	  }; // These recursive directive definitions must be deferred.

	  formats.x = newFormat(locale_date, formats);
	  formats.X = newFormat(locale_time, formats);
	  formats.c = newFormat(locale_dateTime, formats);
	  utcFormats.x = newFormat(locale_date, utcFormats);
	  utcFormats.X = newFormat(locale_time, utcFormats);
	  utcFormats.c = newFormat(locale_dateTime, utcFormats);

	  function newFormat(specifier, formats) {
	    return function (date) {
	      var string = [],
	          i = -1,
	          j = 0,
	          n = specifier.length,
	          c,
	          pad,
	          format;
	      if (!(date instanceof Date)) date = new Date(+date);

	      while (++i < n) {
	        if (specifier.charCodeAt(i) === 37) {
	          string.push(specifier.slice(j, i));
	          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);else pad = c === "e" ? " " : "0";
	          if (format = formats[c]) c = format(date, pad);
	          string.push(c);
	          j = i + 1;
	        }
	      }

	      string.push(specifier.slice(j, i));
	      return string.join("");
	    };
	  }

	  function newParse(specifier, Z) {
	    return function (string) {
	      var d = newDate(1900, undefined, 1),
	          i = parseSpecifier(d, specifier, string += "", 0),
	          week,
	          day$1;
	      if (i != string.length) return null; // If a UNIX timestamp is specified, return it.

	      if ("Q" in d) return new Date(d.Q);
	      if ("s" in d) return new Date(d.s * 1000 + ("L" in d ? d.L : 0)); // If this is utcParse, never use the local timezone.

	      if (Z && !("Z" in d)) d.Z = 0; // The am-pm flag is 0 for AM, and 1 for PM.

	      if ("p" in d) d.H = d.H % 12 + d.p * 12; // If the month was not specified, inherit from the quarter.

	      if (d.m === undefined) d.m = "q" in d ? d.q : 0; // Convert day-of-week and week-of-year to day-of-year.

	      if ("V" in d) {
	        if (d.V < 1 || d.V > 53) return null;
	        if (!("w" in d)) d.w = 1;

	        if ("Z" in d) {
	          week = utcDate(newDate(d.y, 0, 1)), day$1 = week.getUTCDay();
	          week = day$1 > 4 || day$1 === 0 ? utcMonday.ceil(week) : utcMonday(week);
	          week = utcDay.offset(week, (d.V - 1) * 7);
	          d.y = week.getUTCFullYear();
	          d.m = week.getUTCMonth();
	          d.d = week.getUTCDate() + (d.w + 6) % 7;
	        } else {
	          week = localDate(newDate(d.y, 0, 1)), day$1 = week.getDay();
	          week = day$1 > 4 || day$1 === 0 ? monday.ceil(week) : monday(week);
	          week = day.offset(week, (d.V - 1) * 7);
	          d.y = week.getFullYear();
	          d.m = week.getMonth();
	          d.d = week.getDate() + (d.w + 6) % 7;
	        }
	      } else if ("W" in d || "U" in d) {
	        if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
	        day$1 = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
	        d.m = 0;
	        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day$1 + 5) % 7 : d.w + d.U * 7 - (day$1 + 6) % 7;
	      } // If a time zone is specified, all fields are interpreted as UTC and then
	      // offset according to the specified time zone.


	      if ("Z" in d) {
	        d.H += d.Z / 100 | 0;
	        d.M += d.Z % 100;
	        return utcDate(d);
	      } // Otherwise, all fields are in local time.


	      return localDate(d);
	    };
	  }

	  function parseSpecifier(d, specifier, string, j) {
	    var i = 0,
	        n = specifier.length,
	        m = string.length,
	        c,
	        parse;

	    while (i < n) {
	      if (j >= m) return -1;
	      c = specifier.charCodeAt(i++);

	      if (c === 37) {
	        c = specifier.charAt(i++);
	        parse = parses[c in pads ? specifier.charAt(i++) : c];
	        if (!parse || (j = parse(d, string, j)) < 0) return -1;
	      } else if (c != string.charCodeAt(j++)) {
	        return -1;
	      }
	    }

	    return j;
	  }

	  function parsePeriod(d, string, i) {
	    var n = periodRe.exec(string.slice(i));
	    return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	  }

	  function parseShortWeekday(d, string, i) {
	    var n = shortWeekdayRe.exec(string.slice(i));
	    return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	  }

	  function parseWeekday(d, string, i) {
	    var n = weekdayRe.exec(string.slice(i));
	    return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	  }

	  function parseShortMonth(d, string, i) {
	    var n = shortMonthRe.exec(string.slice(i));
	    return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	  }

	  function parseMonth(d, string, i) {
	    var n = monthRe.exec(string.slice(i));
	    return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	  }

	  function parseLocaleDateTime(d, string, i) {
	    return parseSpecifier(d, locale_dateTime, string, i);
	  }

	  function parseLocaleDate(d, string, i) {
	    return parseSpecifier(d, locale_date, string, i);
	  }

	  function parseLocaleTime(d, string, i) {
	    return parseSpecifier(d, locale_time, string, i);
	  }

	  function formatShortWeekday(d) {
	    return locale_shortWeekdays[d.getDay()];
	  }

	  function formatWeekday(d) {
	    return locale_weekdays[d.getDay()];
	  }

	  function formatShortMonth(d) {
	    return locale_shortMonths[d.getMonth()];
	  }

	  function formatMonth(d) {
	    return locale_months[d.getMonth()];
	  }

	  function formatPeriod(d) {
	    return locale_periods[+(d.getHours() >= 12)];
	  }

	  function formatQuarter(d) {
	    return 1 + ~~(d.getMonth() / 3);
	  }

	  function formatUTCShortWeekday(d) {
	    return locale_shortWeekdays[d.getUTCDay()];
	  }

	  function formatUTCWeekday(d) {
	    return locale_weekdays[d.getUTCDay()];
	  }

	  function formatUTCShortMonth(d) {
	    return locale_shortMonths[d.getUTCMonth()];
	  }

	  function formatUTCMonth(d) {
	    return locale_months[d.getUTCMonth()];
	  }

	  function formatUTCPeriod(d) {
	    return locale_periods[+(d.getUTCHours() >= 12)];
	  }

	  function formatUTCQuarter(d) {
	    return 1 + ~~(d.getUTCMonth() / 3);
	  }

	  return {
	    format: function format(specifier) {
	      var f = newFormat(specifier += "", formats);

	      f.toString = function () {
	        return specifier;
	      };

	      return f;
	    },
	    parse: function parse(specifier) {
	      var p = newParse(specifier += "", false);

	      p.toString = function () {
	        return specifier;
	      };

	      return p;
	    },
	    utcFormat: function utcFormat(specifier) {
	      var f = newFormat(specifier += "", utcFormats);

	      f.toString = function () {
	        return specifier;
	      };

	      return f;
	    },
	    utcParse: function utcParse(specifier) {
	      var p = newParse(specifier += "", true);

	      p.toString = function () {
	        return specifier;
	      };

	      return p;
	    }
	  };
	}
	var pads = {
	  "-": "",
	  "_": " ",
	  "0": "0"
	},
	    numberRe = /^\s*\d+/,
	    // note: ignores next directive
	percentRe = /^%/,
	    requoteRe = /[\\^$*+?|[\]().{}]/g;

	function pad$1(value, fill, width) {
	  var sign = value < 0 ? "-" : "",
	      string = (sign ? -value : value) + "",
	      length = string.length;
	  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
	}

	function requote(s) {
	  return s.replace(requoteRe, "\\$&");
	}

	function formatRe(names) {
	  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
	}

	function formatLookup(names) {
	  return new Map(names.map(function (name, i) {
	    return [name.toLowerCase(), i];
	  }));
	}

	function parseWeekdayNumberSunday(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 1));
	  return n ? (d.w = +n[0], i + n[0].length) : -1;
	}

	function parseWeekdayNumberMonday(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 1));
	  return n ? (d.u = +n[0], i + n[0].length) : -1;
	}

	function parseWeekNumberSunday(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.U = +n[0], i + n[0].length) : -1;
	}

	function parseWeekNumberISO(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.V = +n[0], i + n[0].length) : -1;
	}

	function parseWeekNumberMonday(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.W = +n[0], i + n[0].length) : -1;
	}

	function parseFullYear(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 4));
	  return n ? (d.y = +n[0], i + n[0].length) : -1;
	}

	function parseYear(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
	}

	function parseZone(d, string, i) {
	  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
	  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
	}

	function parseQuarter(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 1));
	  return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
	}

	function parseMonthNumber(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
	}

	function parseDayOfMonth(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.d = +n[0], i + n[0].length) : -1;
	}

	function parseDayOfYear(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 3));
	  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
	}

	function parseHour24(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.H = +n[0], i + n[0].length) : -1;
	}

	function parseMinutes(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.M = +n[0], i + n[0].length) : -1;
	}

	function parseSeconds(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.S = +n[0], i + n[0].length) : -1;
	}

	function parseMilliseconds(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 3));
	  return n ? (d.L = +n[0], i + n[0].length) : -1;
	}

	function parseMicroseconds(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 6));
	  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
	}

	function parseLiteralPercent(d, string, i) {
	  var n = percentRe.exec(string.slice(i, i + 1));
	  return n ? i + n[0].length : -1;
	}

	function parseUnixTimestamp(d, string, i) {
	  var n = numberRe.exec(string.slice(i));
	  return n ? (d.Q = +n[0], i + n[0].length) : -1;
	}

	function parseUnixTimestampSeconds(d, string, i) {
	  var n = numberRe.exec(string.slice(i));
	  return n ? (d.s = +n[0], i + n[0].length) : -1;
	}

	function formatDayOfMonth(d, p) {
	  return pad$1(d.getDate(), p, 2);
	}

	function formatHour24(d, p) {
	  return pad$1(d.getHours(), p, 2);
	}

	function formatHour12(d, p) {
	  return pad$1(d.getHours() % 12 || 12, p, 2);
	}

	function formatDayOfYear(d, p) {
	  return pad$1(1 + day.count(year(d), d), p, 3);
	}

	function formatMilliseconds(d, p) {
	  return pad$1(d.getMilliseconds(), p, 3);
	}

	function formatMicroseconds(d, p) {
	  return formatMilliseconds(d, p) + "000";
	}

	function formatMonthNumber(d, p) {
	  return pad$1(d.getMonth() + 1, p, 2);
	}

	function formatMinutes(d, p) {
	  return pad$1(d.getMinutes(), p, 2);
	}

	function formatSeconds(d, p) {
	  return pad$1(d.getSeconds(), p, 2);
	}

	function formatWeekdayNumberMonday(d) {
	  var day = d.getDay();
	  return day === 0 ? 7 : day;
	}

	function formatWeekNumberSunday(d, p) {
	  return pad$1(sunday.count(year(d) - 1, d), p, 2);
	}

	function dISO(d) {
	  var day = d.getDay();
	  return day >= 4 || day === 0 ? thursday(d) : thursday.ceil(d);
	}

	function formatWeekNumberISO(d, p) {
	  d = dISO(d);
	  return pad$1(thursday.count(year(d), d) + (year(d).getDay() === 4), p, 2);
	}

	function formatWeekdayNumberSunday(d) {
	  return d.getDay();
	}

	function formatWeekNumberMonday(d, p) {
	  return pad$1(monday.count(year(d) - 1, d), p, 2);
	}

	function formatYear$1(d, p) {
	  return pad$1(d.getFullYear() % 100, p, 2);
	}

	function formatYearISO(d, p) {
	  d = dISO(d);
	  return pad$1(d.getFullYear() % 100, p, 2);
	}

	function formatFullYear(d, p) {
	  return pad$1(d.getFullYear() % 10000, p, 4);
	}

	function formatFullYearISO(d, p) {
	  var day = d.getDay();
	  d = day >= 4 || day === 0 ? thursday(d) : thursday.ceil(d);
	  return pad$1(d.getFullYear() % 10000, p, 4);
	}

	function formatZone(d) {
	  var z = d.getTimezoneOffset();
	  return (z > 0 ? "-" : (z *= -1, "+")) + pad$1(z / 60 | 0, "0", 2) + pad$1(z % 60, "0", 2);
	}

	function formatUTCDayOfMonth(d, p) {
	  return pad$1(d.getUTCDate(), p, 2);
	}

	function formatUTCHour24(d, p) {
	  return pad$1(d.getUTCHours(), p, 2);
	}

	function formatUTCHour12(d, p) {
	  return pad$1(d.getUTCHours() % 12 || 12, p, 2);
	}

	function formatUTCDayOfYear(d, p) {
	  return pad$1(1 + utcDay.count(utcYear(d), d), p, 3);
	}

	function formatUTCMilliseconds(d, p) {
	  return pad$1(d.getUTCMilliseconds(), p, 3);
	}

	function formatUTCMicroseconds(d, p) {
	  return formatUTCMilliseconds(d, p) + "000";
	}

	function formatUTCMonthNumber(d, p) {
	  return pad$1(d.getUTCMonth() + 1, p, 2);
	}

	function formatUTCMinutes(d, p) {
	  return pad$1(d.getUTCMinutes(), p, 2);
	}

	function formatUTCSeconds(d, p) {
	  return pad$1(d.getUTCSeconds(), p, 2);
	}

	function formatUTCWeekdayNumberMonday(d) {
	  var dow = d.getUTCDay();
	  return dow === 0 ? 7 : dow;
	}

	function formatUTCWeekNumberSunday(d, p) {
	  return pad$1(utcSunday.count(utcYear(d) - 1, d), p, 2);
	}

	function UTCdISO(d) {
	  var day = d.getUTCDay();
	  return day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d);
	}

	function formatUTCWeekNumberISO(d, p) {
	  d = UTCdISO(d);
	  return pad$1(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);
	}

	function formatUTCWeekdayNumberSunday(d) {
	  return d.getUTCDay();
	}

	function formatUTCWeekNumberMonday(d, p) {
	  return pad$1(utcMonday.count(utcYear(d) - 1, d), p, 2);
	}

	function formatUTCYear(d, p) {
	  return pad$1(d.getUTCFullYear() % 100, p, 2);
	}

	function formatUTCYearISO(d, p) {
	  d = UTCdISO(d);
	  return pad$1(d.getUTCFullYear() % 100, p, 2);
	}

	function formatUTCFullYear(d, p) {
	  return pad$1(d.getUTCFullYear() % 10000, p, 4);
	}

	function formatUTCFullYearISO(d, p) {
	  var day = d.getUTCDay();
	  d = day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d);
	  return pad$1(d.getUTCFullYear() % 10000, p, 4);
	}

	function formatUTCZone() {
	  return "+0000";
	}

	function formatLiteralPercent() {
	  return "%";
	}

	function formatUnixTimestamp(d) {
	  return +d;
	}

	function formatUnixTimestampSeconds(d) {
	  return Math.floor(+d / 1000);
	}

	var locale$2;
	var timeFormat;
	var timeParse;
	var utcFormat;
	var utcParse;
	defaultLocale$2({
	  dateTime: "%x, %X",
	  date: "%-m/%-d/%Y",
	  time: "%-I:%M:%S %p",
	  periods: ["AM", "PM"],
	  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
	  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
	  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
	  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
	});
	function defaultLocale$2(definition) {
	  locale$2 = formatLocale$2(definition);
	  timeFormat = locale$2.format;
	  timeParse = locale$2.parse;
	  utcFormat = locale$2.utcFormat;
	  utcParse = locale$2.utcParse;
	  return locale$2;
	}

	var $includes$1 = arrayIncludes.includes;



	var USES_TO_LENGTH$a = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });

	// `Array.prototype.includes` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.includes
	_export({ target: 'Array', proto: true, forced: !USES_TO_LENGTH$a }, {
	  includes: function includes(el /* , fromIndex = 0 */) {
	    return $includes$1(this, el, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables('includes');

	var notARegexp = function (it) {
	  if (isRegexp(it)) {
	    throw TypeError("The method doesn't accept regular expressions");
	  } return it;
	};

	var MATCH$2 = wellKnownSymbol('match');

	var correctIsRegexpLogic = function (METHOD_NAME) {
	  var regexp = /./;
	  try {
	    '/./'[METHOD_NAME](regexp);
	  } catch (e) {
	    try {
	      regexp[MATCH$2] = false;
	      return '/./'[METHOD_NAME](regexp);
	    } catch (f) { /* empty */ }
	  } return false;
	};

	// `String.prototype.includes` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.includes
	_export({ target: 'String', proto: true, forced: !correctIsRegexpLogic('includes') }, {
	  includes: function includes(searchString /* , position = 0 */) {
	    return !!~String(requireObjectCoercible(this))
	      .indexOf(notARegexp(searchString), arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var lodash = createCommonjsModule(function (module, exports) {
	(function() {

	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
	  var undefined$1;

	  /** Used as the semantic version number. */
	  var VERSION = '4.17.20';

	  /** Used as the size to enable large array optimizations. */
	  var LARGE_ARRAY_SIZE = 200;

	  /** Error message constants. */
	  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
	      FUNC_ERROR_TEXT = 'Expected a function';

	  /** Used to stand-in for `undefined` hash values. */
	  var HASH_UNDEFINED = '__lodash_hash_undefined__';

	  /** Used as the maximum memoize cache size. */
	  var MAX_MEMOIZE_SIZE = 500;

	  /** Used as the internal argument placeholder. */
	  var PLACEHOLDER = '__lodash_placeholder__';

	  /** Used to compose bitmasks for cloning. */
	  var CLONE_DEEP_FLAG = 1,
	      CLONE_FLAT_FLAG = 2,
	      CLONE_SYMBOLS_FLAG = 4;

	  /** Used to compose bitmasks for value comparisons. */
	  var COMPARE_PARTIAL_FLAG = 1,
	      COMPARE_UNORDERED_FLAG = 2;

	  /** Used to compose bitmasks for function metadata. */
	  var WRAP_BIND_FLAG = 1,
	      WRAP_BIND_KEY_FLAG = 2,
	      WRAP_CURRY_BOUND_FLAG = 4,
	      WRAP_CURRY_FLAG = 8,
	      WRAP_CURRY_RIGHT_FLAG = 16,
	      WRAP_PARTIAL_FLAG = 32,
	      WRAP_PARTIAL_RIGHT_FLAG = 64,
	      WRAP_ARY_FLAG = 128,
	      WRAP_REARG_FLAG = 256,
	      WRAP_FLIP_FLAG = 512;

	  /** Used as default options for `_.truncate`. */
	  var DEFAULT_TRUNC_LENGTH = 30,
	      DEFAULT_TRUNC_OMISSION = '...';

	  /** Used to detect hot functions by number of calls within a span of milliseconds. */
	  var HOT_COUNT = 800,
	      HOT_SPAN = 16;

	  /** Used to indicate the type of lazy iteratees. */
	  var LAZY_FILTER_FLAG = 1,
	      LAZY_MAP_FLAG = 2,
	      LAZY_WHILE_FLAG = 3;

	  /** Used as references for various `Number` constants. */
	  var INFINITY = 1 / 0,
	      MAX_SAFE_INTEGER = 9007199254740991,
	      MAX_INTEGER = 1.7976931348623157e+308,
	      NAN = 0 / 0;

	  /** Used as references for the maximum length and index of an array. */
	  var MAX_ARRAY_LENGTH = 4294967295,
	      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
	      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

	  /** Used to associate wrap methods with their bit flags. */
	  var wrapFlags = [
	    ['ary', WRAP_ARY_FLAG],
	    ['bind', WRAP_BIND_FLAG],
	    ['bindKey', WRAP_BIND_KEY_FLAG],
	    ['curry', WRAP_CURRY_FLAG],
	    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
	    ['flip', WRAP_FLIP_FLAG],
	    ['partial', WRAP_PARTIAL_FLAG],
	    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
	    ['rearg', WRAP_REARG_FLAG]
	  ];

	  /** `Object#toString` result references. */
	  var argsTag = '[object Arguments]',
	      arrayTag = '[object Array]',
	      asyncTag = '[object AsyncFunction]',
	      boolTag = '[object Boolean]',
	      dateTag = '[object Date]',
	      domExcTag = '[object DOMException]',
	      errorTag = '[object Error]',
	      funcTag = '[object Function]',
	      genTag = '[object GeneratorFunction]',
	      mapTag = '[object Map]',
	      numberTag = '[object Number]',
	      nullTag = '[object Null]',
	      objectTag = '[object Object]',
	      promiseTag = '[object Promise]',
	      proxyTag = '[object Proxy]',
	      regexpTag = '[object RegExp]',
	      setTag = '[object Set]',
	      stringTag = '[object String]',
	      symbolTag = '[object Symbol]',
	      undefinedTag = '[object Undefined]',
	      weakMapTag = '[object WeakMap]',
	      weakSetTag = '[object WeakSet]';

	  var arrayBufferTag = '[object ArrayBuffer]',
	      dataViewTag = '[object DataView]',
	      float32Tag = '[object Float32Array]',
	      float64Tag = '[object Float64Array]',
	      int8Tag = '[object Int8Array]',
	      int16Tag = '[object Int16Array]',
	      int32Tag = '[object Int32Array]',
	      uint8Tag = '[object Uint8Array]',
	      uint8ClampedTag = '[object Uint8ClampedArray]',
	      uint16Tag = '[object Uint16Array]',
	      uint32Tag = '[object Uint32Array]';

	  /** Used to match empty string literals in compiled template source. */
	  var reEmptyStringLeading = /\b__p \+= '';/g,
	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

	  /** Used to match HTML entities and HTML characters. */
	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
	      reUnescapedHtml = /[&<>"']/g,
	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

	  /** Used to match template delimiters. */
	  var reEscape = /<%-([\s\S]+?)%>/g,
	      reEvaluate = /<%([\s\S]+?)%>/g,
	      reInterpolate = /<%=([\s\S]+?)%>/g;

	  /** Used to match property names within property paths. */
	  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	      reIsPlainProp = /^\w*$/,
	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

	  /**
	   * Used to match `RegExp`
	   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	   */
	  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
	      reHasRegExpChar = RegExp(reRegExpChar.source);

	  /** Used to match leading and trailing whitespace. */
	  var reTrim = /^\s+|\s+$/g,
	      reTrimStart = /^\s+/,
	      reTrimEnd = /\s+$/;

	  /** Used to match wrap detail comments. */
	  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
	      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
	      reSplitDetails = /,? & /;

	  /** Used to match words composed of alphanumeric characters. */
	  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

	  /** Used to match backslashes in property paths. */
	  var reEscapeChar = /\\(\\)?/g;

	  /**
	   * Used to match
	   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
	   */
	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

	  /** Used to match `RegExp` flags from their coerced string values. */
	  var reFlags = /\w*$/;

	  /** Used to detect bad signed hexadecimal string values. */
	  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	  /** Used to detect binary string values. */
	  var reIsBinary = /^0b[01]+$/i;

	  /** Used to detect host constructors (Safari). */
	  var reIsHostCtor = /^\[object .+?Constructor\]$/;

	  /** Used to detect octal string values. */
	  var reIsOctal = /^0o[0-7]+$/i;

	  /** Used to detect unsigned integer values. */
	  var reIsUint = /^(?:0|[1-9]\d*)$/;

	  /** Used to match Latin Unicode letters (excluding mathematical operators). */
	  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

	  /** Used to ensure capturing order of template delimiters. */
	  var reNoMatch = /($^)/;

	  /** Used to match unescaped characters in compiled string literals. */
	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

	  /** Used to compose unicode character classes. */
	  var rsAstralRange = '\\ud800-\\udfff',
	      rsComboMarksRange = '\\u0300-\\u036f',
	      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
	      rsComboSymbolsRange = '\\u20d0-\\u20ff',
	      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
	      rsDingbatRange = '\\u2700-\\u27bf',
	      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
	      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
	      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
	      rsPunctuationRange = '\\u2000-\\u206f',
	      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
	      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
	      rsVarRange = '\\ufe0e\\ufe0f',
	      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

	  /** Used to compose unicode capture groups. */
	  var rsApos = "['\u2019]",
	      rsAstral = '[' + rsAstralRange + ']',
	      rsBreak = '[' + rsBreakRange + ']',
	      rsCombo = '[' + rsComboRange + ']',
	      rsDigits = '\\d+',
	      rsDingbat = '[' + rsDingbatRange + ']',
	      rsLower = '[' + rsLowerRange + ']',
	      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
	      rsFitz = '\\ud83c[\\udffb-\\udfff]',
	      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	      rsNonAstral = '[^' + rsAstralRange + ']',
	      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	      rsUpper = '[' + rsUpperRange + ']',
	      rsZWJ = '\\u200d';

	  /** Used to compose unicode regexes. */
	  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
	      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
	      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
	      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
	      reOptMod = rsModifier + '?',
	      rsOptVar = '[' + rsVarRange + ']?',
	      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
	      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
	      rsSeq = rsOptVar + reOptMod + rsOptJoin,
	      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
	      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

	  /** Used to match apostrophes. */
	  var reApos = RegExp(rsApos, 'g');

	  /**
	   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
	   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
	   */
	  var reComboMark = RegExp(rsCombo, 'g');

	  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

	  /** Used to match complex or compound words. */
	  var reUnicodeWord = RegExp([
	    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
	    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
	    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
	    rsUpper + '+' + rsOptContrUpper,
	    rsOrdUpper,
	    rsOrdLower,
	    rsDigits,
	    rsEmoji
	  ].join('|'), 'g');

	  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
	  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

	  /** Used to detect strings that need a more robust regexp to match words. */
	  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

	  /** Used to assign default `context` object properties. */
	  var contextProps = [
	    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
	    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
	    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
	    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
	  ];

	  /** Used to make template sourceURLs easier to identify. */
	  var templateCounter = -1;

	  /** Used to identify `toStringTag` values of typed arrays. */
	  var typedArrayTags = {};
	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	  typedArrayTags[uint32Tag] = true;
	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	  typedArrayTags[setTag] = typedArrayTags[stringTag] =
	  typedArrayTags[weakMapTag] = false;

	  /** Used to identify `toStringTag` values supported by `_.clone`. */
	  var cloneableTags = {};
	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
	  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
	  cloneableTags[boolTag] = cloneableTags[dateTag] =
	  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
	  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
	  cloneableTags[int32Tag] = cloneableTags[mapTag] =
	  cloneableTags[numberTag] = cloneableTags[objectTag] =
	  cloneableTags[regexpTag] = cloneableTags[setTag] =
	  cloneableTags[stringTag] = cloneableTags[symbolTag] =
	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	  cloneableTags[errorTag] = cloneableTags[funcTag] =
	  cloneableTags[weakMapTag] = false;

	  /** Used to map Latin Unicode letters to basic Latin letters. */
	  var deburredLetters = {
	    // Latin-1 Supplement block.
	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	    '\xc7': 'C',  '\xe7': 'c',
	    '\xd0': 'D',  '\xf0': 'd',
	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	    '\xd1': 'N',  '\xf1': 'n',
	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	    '\xc6': 'Ae', '\xe6': 'ae',
	    '\xde': 'Th', '\xfe': 'th',
	    '\xdf': 'ss',
	    // Latin Extended-A block.
	    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
	    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
	    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
	    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
	    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
	    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
	    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
	    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
	    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
	    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
	    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
	    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
	    '\u0134': 'J',  '\u0135': 'j',
	    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
	    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
	    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
	    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
	    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
	    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
	    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
	    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
	    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
	    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
	    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
	    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
	    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
	    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
	    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
	    '\u0174': 'W',  '\u0175': 'w',
	    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
	    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
	    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
	    '\u0132': 'IJ', '\u0133': 'ij',
	    '\u0152': 'Oe', '\u0153': 'oe',
	    '\u0149': "'n", '\u017f': 's'
	  };

	  /** Used to map characters to HTML entities. */
	  var htmlEscapes = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;'
	  };

	  /** Used to map HTML entities to characters. */
	  var htmlUnescapes = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#39;': "'"
	  };

	  /** Used to escape characters for inclusion in compiled string literals. */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  /** Built-in method references without a dependency on `root`. */
	  var freeParseFloat = parseFloat,
	      freeParseInt = parseInt;

	  /** Detect free variable `global` from Node.js. */
	  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	  /** Detect free variable `self`. */
	  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	  /** Used as a reference to the global object. */
	  var root = freeGlobal || freeSelf || Function('return this')();

	  /** Detect free variable `exports`. */
	  var freeExports =  exports && !exports.nodeType && exports;

	  /** Detect free variable `module`. */
	  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

	  /** Detect the popular CommonJS extension `module.exports`. */
	  var moduleExports = freeModule && freeModule.exports === freeExports;

	  /** Detect free variable `process` from Node.js. */
	  var freeProcess = moduleExports && freeGlobal.process;

	  /** Used to access faster Node.js helpers. */
	  var nodeUtil = (function() {
	    try {
	      // Use `util.types` for Node.js 10+.
	      var types = freeModule && freeModule.require && freeModule.require('util').types;

	      if (types) {
	        return types;
	      }

	      // Legacy `process.binding('util')` for Node.js < 10.
	      return freeProcess && freeProcess.binding && freeProcess.binding('util');
	    } catch (e) {}
	  }());

	  /* Node.js helper references. */
	  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
	      nodeIsDate = nodeUtil && nodeUtil.isDate,
	      nodeIsMap = nodeUtil && nodeUtil.isMap,
	      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
	      nodeIsSet = nodeUtil && nodeUtil.isSet,
	      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

	  /*--------------------------------------------------------------------------*/

	  /**
	   * A faster alternative to `Function#apply`, this function invokes `func`
	   * with the `this` binding of `thisArg` and the arguments of `args`.
	   *
	   * @private
	   * @param {Function} func The function to invoke.
	   * @param {*} thisArg The `this` binding of `func`.
	   * @param {Array} args The arguments to invoke `func` with.
	   * @returns {*} Returns the result of `func`.
	   */
	  function apply(func, thisArg, args) {
	    switch (args.length) {
	      case 0: return func.call(thisArg);
	      case 1: return func.call(thisArg, args[0]);
	      case 2: return func.call(thisArg, args[0], args[1]);
	      case 3: return func.call(thisArg, args[0], args[1], args[2]);
	    }
	    return func.apply(thisArg, args);
	  }

	  /**
	   * A specialized version of `baseAggregator` for arrays.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} setter The function to set `accumulator` values.
	   * @param {Function} iteratee The iteratee to transform keys.
	   * @param {Object} accumulator The initial aggregated object.
	   * @returns {Function} Returns `accumulator`.
	   */
	  function arrayAggregator(array, setter, iteratee, accumulator) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      var value = array[index];
	      setter(accumulator, value, iteratee(value), array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.forEach` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEach(array, iteratee) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (iteratee(array[index], index, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.forEachRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEachRight(array, iteratee) {
	    var length = array == null ? 0 : array.length;

	    while (length--) {
	      if (iteratee(array[length], length, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.every` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if all elements pass the predicate check,
	   *  else `false`.
	   */
	  function arrayEvery(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (!predicate(array[index], index, array)) {
	        return false;
	      }
	    }
	    return true;
	  }

	  /**
	   * A specialized version of `_.filter` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {Array} Returns the new filtered array.
	   */
	  function arrayFilter(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length,
	        resIndex = 0,
	        result = [];

	    while (++index < length) {
	      var value = array[index];
	      if (predicate(value, index, array)) {
	        result[resIndex++] = value;
	      }
	    }
	    return result;
	  }

	  /**
	   * A specialized version of `_.includes` for arrays without support for
	   * specifying an index to search from.
	   *
	   * @private
	   * @param {Array} [array] The array to inspect.
	   * @param {*} target The value to search for.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludes(array, value) {
	    var length = array == null ? 0 : array.length;
	    return !!length && baseIndexOf(array, value, 0) > -1;
	  }

	  /**
	   * This function is like `arrayIncludes` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} [array] The array to inspect.
	   * @param {*} target The value to search for.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludesWith(array, value, comparator) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (comparator(value, array[index])) {
	        return true;
	      }
	    }
	    return false;
	  }

	  /**
	   * A specialized version of `_.map` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the new mapped array.
	   */
	  function arrayMap(array, iteratee) {
	    var index = -1,
	        length = array == null ? 0 : array.length,
	        result = Array(length);

	    while (++index < length) {
	      result[index] = iteratee(array[index], index, array);
	    }
	    return result;
	  }

	  /**
	   * Appends the elements of `values` to `array`.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {Array} values The values to append.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayPush(array, values) {
	    var index = -1,
	        length = values.length,
	        offset = array.length;

	    while (++index < length) {
	      array[offset + index] = values[index];
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.reduce` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the first element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduce(array, iteratee, accumulator, initAccum) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    if (initAccum && length) {
	      accumulator = array[++index];
	    }
	    while (++index < length) {
	      accumulator = iteratee(accumulator, array[index], index, array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.reduceRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the last element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
	    var length = array == null ? 0 : array.length;
	    if (initAccum && length) {
	      accumulator = array[--length];
	    }
	    while (length--) {
	      accumulator = iteratee(accumulator, array[length], length, array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.some` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if any element passes the predicate check,
	   *  else `false`.
	   */
	  function arraySome(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (predicate(array[index], index, array)) {
	        return true;
	      }
	    }
	    return false;
	  }

	  /**
	   * Gets the size of an ASCII `string`.
	   *
	   * @private
	   * @param {string} string The string inspect.
	   * @returns {number} Returns the string size.
	   */
	  var asciiSize = baseProperty('length');

	  /**
	   * Converts an ASCII `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function asciiToArray(string) {
	    return string.split('');
	  }

	  /**
	   * Splits an ASCII `string` into an array of its words.
	   *
	   * @private
	   * @param {string} The string to inspect.
	   * @returns {Array} Returns the words of `string`.
	   */
	  function asciiWords(string) {
	    return string.match(reAsciiWord) || [];
	  }

	  /**
	   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
	   * without support for iteratee shorthands, which iterates over `collection`
	   * using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to inspect.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the found element or its key, else `undefined`.
	   */
	  function baseFindKey(collection, predicate, eachFunc) {
	    var result;
	    eachFunc(collection, function(value, key, collection) {
	      if (predicate(value, key, collection)) {
	        result = key;
	        return false;
	      }
	    });
	    return result;
	  }

	  /**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseFindIndex(array, predicate, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromIndex + (fromRight ? 1 : -1);

	    while ((fromRight ? index-- : ++index < length)) {
	      if (predicate(array[index], index, array)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    return value === value
	      ? strictIndexOf(array, value, fromIndex)
	      : baseFindIndex(array, baseIsNaN, fromIndex);
	  }

	  /**
	   * This function is like `baseIndexOf` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOfWith(array, value, fromIndex, comparator) {
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (comparator(array[index], value)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.isNaN` without support for number objects.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	   */
	  function baseIsNaN(value) {
	    return value !== value;
	  }

	  /**
	   * The base implementation of `_.mean` and `_.meanBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the mean.
	   */
	  function baseMean(array, iteratee) {
	    var length = array == null ? 0 : array.length;
	    return length ? (baseSum(array, iteratee) / length) : NAN;
	  }

	  /**
	   * The base implementation of `_.property` without support for deep paths.
	   *
	   * @private
	   * @param {string} key The key of the property to get.
	   * @returns {Function} Returns the new accessor function.
	   */
	  function baseProperty(key) {
	    return function(object) {
	      return object == null ? undefined$1 : object[key];
	    };
	  }

	  /**
	   * The base implementation of `_.propertyOf` without support for deep paths.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @returns {Function} Returns the new accessor function.
	   */
	  function basePropertyOf(object) {
	    return function(key) {
	      return object == null ? undefined$1 : object[key];
	    };
	  }

	  /**
	   * The base implementation of `_.reduce` and `_.reduceRight`, without support
	   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} accumulator The initial value.
	   * @param {boolean} initAccum Specify using the first or last element of
	   *  `collection` as the initial value.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the accumulated value.
	   */
	  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
	    eachFunc(collection, function(value, index, collection) {
	      accumulator = initAccum
	        ? (initAccum = false, value)
	        : iteratee(accumulator, value, index, collection);
	    });
	    return accumulator;
	  }

	  /**
	   * The base implementation of `_.sortBy` which uses `comparer` to define the
	   * sort order of `array` and replaces criteria objects with their corresponding
	   * values.
	   *
	   * @private
	   * @param {Array} array The array to sort.
	   * @param {Function} comparer The function to define sort order.
	   * @returns {Array} Returns `array`.
	   */
	  function baseSortBy(array, comparer) {
	    var length = array.length;

	    array.sort(comparer);
	    while (length--) {
	      array[length] = array[length].value;
	    }
	    return array;
	  }

	  /**
	   * The base implementation of `_.sum` and `_.sumBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the sum.
	   */
	  function baseSum(array, iteratee) {
	    var result,
	        index = -1,
	        length = array.length;

	    while (++index < length) {
	      var current = iteratee(array[index]);
	      if (current !== undefined$1) {
	        result = result === undefined$1 ? current : (result + current);
	      }
	    }
	    return result;
	  }

	  /**
	   * The base implementation of `_.times` without support for iteratee shorthands
	   * or max array length checks.
	   *
	   * @private
	   * @param {number} n The number of times to invoke `iteratee`.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the array of results.
	   */
	  function baseTimes(n, iteratee) {
	    var index = -1,
	        result = Array(n);

	    while (++index < n) {
	      result[index] = iteratee(index);
	    }
	    return result;
	  }

	  /**
	   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
	   * of key-value pairs for `object` corresponding to the property names of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the key-value pairs.
	   */
	  function baseToPairs(object, props) {
	    return arrayMap(props, function(key) {
	      return [key, object[key]];
	    });
	  }

	  /**
	   * The base implementation of `_.unary` without support for storing metadata.
	   *
	   * @private
	   * @param {Function} func The function to cap arguments for.
	   * @returns {Function} Returns the new capped function.
	   */
	  function baseUnary(func) {
	    return function(value) {
	      return func(value);
	    };
	  }

	  /**
	   * The base implementation of `_.values` and `_.valuesIn` which creates an
	   * array of `object` property values corresponding to the property names
	   * of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the array of property values.
	   */
	  function baseValues(object, props) {
	    return arrayMap(props, function(key) {
	      return object[key];
	    });
	  }

	  /**
	   * Checks if a `cache` value for `key` exists.
	   *
	   * @private
	   * @param {Object} cache The cache to query.
	   * @param {string} key The key of the entry to check.
	   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	   */
	  function cacheHas(cache, key) {
	    return cache.has(key);
	  }

	  /**
	   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the first unmatched string symbol.
	   */
	  function charsStartIndex(strSymbols, chrSymbols) {
	    var index = -1,
	        length = strSymbols.length;

	    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the last unmatched string symbol.
	   */
	  function charsEndIndex(strSymbols, chrSymbols) {
	    var index = strSymbols.length;

	    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }

	  /**
	   * Gets the number of `placeholder` occurrences in `array`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} placeholder The placeholder to search for.
	   * @returns {number} Returns the placeholder count.
	   */
	  function countHolders(array, placeholder) {
	    var length = array.length,
	        result = 0;

	    while (length--) {
	      if (array[length] === placeholder) {
	        ++result;
	      }
	    }
	    return result;
	  }

	  /**
	   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
	   * letters to basic Latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */
	  var deburrLetter = basePropertyOf(deburredLetters);

	  /**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  var escapeHtmlChar = basePropertyOf(htmlEscapes);

	  /**
	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(chr) {
	    return '\\' + stringEscapes[chr];
	  }

	  /**
	   * Gets the value at `key` of `object`.
	   *
	   * @private
	   * @param {Object} [object] The object to query.
	   * @param {string} key The key of the property to get.
	   * @returns {*} Returns the property value.
	   */
	  function getValue(object, key) {
	    return object == null ? undefined$1 : object[key];
	  }

	  /**
	   * Checks if `string` contains Unicode symbols.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
	   */
	  function hasUnicode(string) {
	    return reHasUnicode.test(string);
	  }

	  /**
	   * Checks if `string` contains a word composed of Unicode symbols.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {boolean} Returns `true` if a word is found, else `false`.
	   */
	  function hasUnicodeWord(string) {
	    return reHasUnicodeWord.test(string);
	  }

	  /**
	   * Converts `iterator` to an array.
	   *
	   * @private
	   * @param {Object} iterator The iterator to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function iteratorToArray(iterator) {
	    var data,
	        result = [];

	    while (!(data = iterator.next()).done) {
	      result.push(data.value);
	    }
	    return result;
	  }

	  /**
	   * Converts `map` to its key-value pairs.
	   *
	   * @private
	   * @param {Object} map The map to convert.
	   * @returns {Array} Returns the key-value pairs.
	   */
	  function mapToArray(map) {
	    var index = -1,
	        result = Array(map.size);

	    map.forEach(function(value, key) {
	      result[++index] = [key, value];
	    });
	    return result;
	  }

	  /**
	   * Creates a unary function that invokes `func` with its argument transformed.
	   *
	   * @private
	   * @param {Function} func The function to wrap.
	   * @param {Function} transform The argument transform.
	   * @returns {Function} Returns the new function.
	   */
	  function overArg(func, transform) {
	    return function(arg) {
	      return func(transform(arg));
	    };
	  }

	  /**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */
	  function replaceHolders(array, placeholder) {
	    var index = -1,
	        length = array.length,
	        resIndex = 0,
	        result = [];

	    while (++index < length) {
	      var value = array[index];
	      if (value === placeholder || value === PLACEHOLDER) {
	        array[index] = PLACEHOLDER;
	        result[resIndex++] = index;
	      }
	    }
	    return result;
	  }

	  /**
	   * Converts `set` to an array of its values.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the values.
	   */
	  function setToArray(set) {
	    var index = -1,
	        result = Array(set.size);

	    set.forEach(function(value) {
	      result[++index] = value;
	    });
	    return result;
	  }

	  /**
	   * Converts `set` to its value-value pairs.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the value-value pairs.
	   */
	  function setToPairs(set) {
	    var index = -1,
	        result = Array(set.size);

	    set.forEach(function(value) {
	      result[++index] = [value, value];
	    });
	    return result;
	  }

	  /**
	   * A specialized version of `_.indexOf` which performs strict equality
	   * comparisons of values, i.e. `===`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function strictIndexOf(array, value, fromIndex) {
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * A specialized version of `_.lastIndexOf` which performs strict equality
	   * comparisons of values, i.e. `===`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function strictLastIndexOf(array, value, fromIndex) {
	    var index = fromIndex + 1;
	    while (index--) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return index;
	  }

	  /**
	   * Gets the number of symbols in `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the string size.
	   */
	  function stringSize(string) {
	    return hasUnicode(string)
	      ? unicodeSize(string)
	      : asciiSize(string);
	  }

	  /**
	   * Converts `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function stringToArray(string) {
	    return hasUnicode(string)
	      ? unicodeToArray(string)
	      : asciiToArray(string);
	  }

	  /**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
	  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

	  /**
	   * Gets the size of a Unicode `string`.
	   *
	   * @private
	   * @param {string} string The string inspect.
	   * @returns {number} Returns the string size.
	   */
	  function unicodeSize(string) {
	    var result = reUnicode.lastIndex = 0;
	    while (reUnicode.test(string)) {
	      ++result;
	    }
	    return result;
	  }

	  /**
	   * Converts a Unicode `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function unicodeToArray(string) {
	    return string.match(reUnicode) || [];
	  }

	  /**
	   * Splits a Unicode `string` into an array of its words.
	   *
	   * @private
	   * @param {string} The string to inspect.
	   * @returns {Array} Returns the words of `string`.
	   */
	  function unicodeWords(string) {
	    return string.match(reUnicodeWord) || [];
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Create a new pristine `lodash` function using the `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @since 1.1.0
	   * @category Util
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'foo': _.constant('foo') });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'bar': lodash.constant('bar') });
	   *
	   * _.isFunction(_.foo);
	   * // => true
	   * _.isFunction(_.bar);
	   * // => false
	   *
	   * lodash.isFunction(lodash.foo);
	   * // => false
	   * lodash.isFunction(lodash.bar);
	   * // => true
	   *
	   * // Create a suped-up `defer` in Node.js.
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */
	  var runInContext = (function runInContext(context) {
	    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

	    /** Built-in constructor references. */
	    var Array = context.Array,
	        Date = context.Date,
	        Error = context.Error,
	        Function = context.Function,
	        Math = context.Math,
	        Object = context.Object,
	        RegExp = context.RegExp,
	        String = context.String,
	        TypeError = context.TypeError;

	    /** Used for built-in method references. */
	    var arrayProto = Array.prototype,
	        funcProto = Function.prototype,
	        objectProto = Object.prototype;

	    /** Used to detect overreaching core-js shims. */
	    var coreJsData = context['__core-js_shared__'];

	    /** Used to resolve the decompiled source of functions. */
	    var funcToString = funcProto.toString;

	    /** Used to check objects for own properties. */
	    var hasOwnProperty = objectProto.hasOwnProperty;

	    /** Used to generate unique IDs. */
	    var idCounter = 0;

	    /** Used to detect methods masquerading as native. */
	    var maskSrcKey = (function() {
	      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	      return uid ? ('Symbol(src)_1.' + uid) : '';
	    }());

	    /**
	     * Used to resolve the
	     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	     * of values.
	     */
	    var nativeObjectToString = objectProto.toString;

	    /** Used to infer the `Object` constructor. */
	    var objectCtorString = funcToString.call(Object);

	    /** Used to restore the original `_` reference in `_.noConflict`. */
	    var oldDash = root._;

	    /** Used to detect if a method is native. */
	    var reIsNative = RegExp('^' +
	      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	    );

	    /** Built-in value references. */
	    var Buffer = moduleExports ? context.Buffer : undefined$1,
	        Symbol = context.Symbol,
	        Uint8Array = context.Uint8Array,
	        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined$1,
	        getPrototype = overArg(Object.getPrototypeOf, Object),
	        objectCreate = Object.create,
	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
	        splice = arrayProto.splice,
	        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined$1,
	        symIterator = Symbol ? Symbol.iterator : undefined$1,
	        symToStringTag = Symbol ? Symbol.toStringTag : undefined$1;

	    var defineProperty = (function() {
	      try {
	        var func = getNative(Object, 'defineProperty');
	        func({}, '', {});
	        return func;
	      } catch (e) {}
	    }());

	    /** Mocked built-ins. */
	    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
	        ctxNow = Date && Date.now !== root.Date.now && Date.now,
	        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

	    /* Built-in method references for those with the same name as other `lodash` methods. */
	    var nativeCeil = Math.ceil,
	        nativeFloor = Math.floor,
	        nativeGetSymbols = Object.getOwnPropertySymbols,
	        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined$1,
	        nativeIsFinite = context.isFinite,
	        nativeJoin = arrayProto.join,
	        nativeKeys = overArg(Object.keys, Object),
	        nativeMax = Math.max,
	        nativeMin = Math.min,
	        nativeNow = Date.now,
	        nativeParseInt = context.parseInt,
	        nativeRandom = Math.random,
	        nativeReverse = arrayProto.reverse;

	    /* Built-in method references that are verified to be native. */
	    var DataView = getNative(context, 'DataView'),
	        Map = getNative(context, 'Map'),
	        Promise = getNative(context, 'Promise'),
	        Set = getNative(context, 'Set'),
	        WeakMap = getNative(context, 'WeakMap'),
	        nativeCreate = getNative(Object, 'create');

	    /** Used to store function metadata. */
	    var metaMap = WeakMap && new WeakMap;

	    /** Used to lookup unminified function names. */
	    var realNames = {};

	    /** Used to detect maps, sets, and weakmaps. */
	    var dataViewCtorString = toSource(DataView),
	        mapCtorString = toSource(Map),
	        promiseCtorString = toSource(Promise),
	        setCtorString = toSource(Set),
	        weakMapCtorString = toSource(WeakMap);

	    /** Used to convert symbols to primitives and strings. */
	    var symbolProto = Symbol ? Symbol.prototype : undefined$1,
	        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1,
	        symbolToString = symbolProto ? symbolProto.toString : undefined$1;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object which wraps `value` to enable implicit method
	     * chain sequences. Methods that operate on and return arrays, collections,
	     * and functions can be chained together. Methods that retrieve a single value
	     * or may return a primitive value will automatically end the chain sequence
	     * and return the unwrapped value. Otherwise, the value must be unwrapped
	     * with `_#value`.
	     *
	     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
	     * enabled using `_.chain`.
	     *
	     * The execution of chained methods is lazy, that is, it's deferred until
	     * `_#value` is implicitly or explicitly called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion.
	     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
	     * the creation of intermediate arrays and can greatly reduce the number of
	     * iteratee executions. Sections of a chain sequence qualify for shortcut
	     * fusion if the section is applied to an array and iteratees accept only
	     * one argument. The heuristic for whether a section qualifies for shortcut
	     * fusion is subject to change.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
	     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
	     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
	     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
	     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
	     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
	     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
	     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
	     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
	     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
	     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
	     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
	     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
	     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
	     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
	     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
	     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
	     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
	     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
	     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
	     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
	     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
	     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
	     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
	     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
	     * `zipObject`, `zipObjectDeep`, and `zipWith`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
	     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
	     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
	     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
	     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
	     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
	     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
	     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
	     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
	     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
	     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
	     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
	     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
	     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
	     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
	     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
	     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
	     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
	     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
	     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
	     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
	     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
	     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
	     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
	     * `upperFirst`, `value`, and `words`
	     *
	     * @name _
	     * @constructor
	     * @category Seq
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // Returns an unwrapped value.
	     * wrapped.reduce(_.add);
	     * // => 6
	     *
	     * // Returns a wrapped value.
	     * var squares = wrapped.map(square);
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
	    function lodash(value) {
	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	        if (value instanceof LodashWrapper) {
	          return value;
	        }
	        if (hasOwnProperty.call(value, '__wrapped__')) {
	          return wrapperClone(value);
	        }
	      }
	      return new LodashWrapper(value);
	    }

	    /**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} proto The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
	    var baseCreate = (function() {
	      function object() {}
	      return function(proto) {
	        if (!isObject(proto)) {
	          return {};
	        }
	        if (objectCreate) {
	          return objectCreate(proto);
	        }
	        object.prototype = proto;
	        var result = new object;
	        object.prototype = undefined$1;
	        return result;
	      };
	    }());

	    /**
	     * The function whose prototype chain sequence wrappers inherit from.
	     *
	     * @private
	     */
	    function baseLodash() {
	      // No operation performed.
	    }

	    /**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable explicit method chain sequences.
	     */
	    function LodashWrapper(value, chainAll) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__chain__ = !!chainAll;
	      this.__index__ = 0;
	      this.__values__ = undefined$1;
	    }

	    /**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
	     * following template settings to use alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type {Object}
	     */
	    lodash.templateSettings = {

	      /**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'escape': reEscape,

	      /**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'evaluate': reEvaluate,

	      /**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'interpolate': reInterpolate,

	      /**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type {string}
	       */
	      'variable': '',

	      /**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type {Object}
	       */
	      'imports': {

	        /**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type {Function}
	         */
	        '_': lodash
	      }
	    };

	    // Ensure wrappers are instances of `baseLodash`.
	    lodash.prototype = baseLodash.prototype;
	    lodash.prototype.constructor = lodash;

	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	    LodashWrapper.prototype.constructor = LodashWrapper;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @constructor
	     * @param {*} value The value to wrap.
	     */
	    function LazyWrapper(value) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__dir__ = 1;
	      this.__filtered__ = false;
	      this.__iteratees__ = [];
	      this.__takeCount__ = MAX_ARRAY_LENGTH;
	      this.__views__ = [];
	    }

	    /**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */
	    function lazyClone() {
	      var result = new LazyWrapper(this.__wrapped__);
	      result.__actions__ = copyArray(this.__actions__);
	      result.__dir__ = this.__dir__;
	      result.__filtered__ = this.__filtered__;
	      result.__iteratees__ = copyArray(this.__iteratees__);
	      result.__takeCount__ = this.__takeCount__;
	      result.__views__ = copyArray(this.__views__);
	      return result;
	    }

	    /**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */
	    function lazyReverse() {
	      if (this.__filtered__) {
	        var result = new LazyWrapper(this);
	        result.__dir__ = -1;
	        result.__filtered__ = true;
	      } else {
	        result = this.clone();
	        result.__dir__ *= -1;
	      }
	      return result;
	    }

	    /**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */
	    function lazyValue() {
	      var array = this.__wrapped__.value(),
	          dir = this.__dir__,
	          isArr = isArray(array),
	          isRight = dir < 0,
	          arrLength = isArr ? array.length : 0,
	          view = getView(0, arrLength, this.__views__),
	          start = view.start,
	          end = view.end,
	          length = end - start,
	          index = isRight ? end : (start - 1),
	          iteratees = this.__iteratees__,
	          iterLength = iteratees.length,
	          resIndex = 0,
	          takeCount = nativeMin(length, this.__takeCount__);

	      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
	        return baseWrapperValue(array, this.__actions__);
	      }
	      var result = [];

	      outer:
	      while (length-- && resIndex < takeCount) {
	        index += dir;

	        var iterIndex = -1,
	            value = array[index];

	        while (++iterIndex < iterLength) {
	          var data = iteratees[iterIndex],
	              iteratee = data.iteratee,
	              type = data.type,
	              computed = iteratee(value);

	          if (type == LAZY_MAP_FLAG) {
	            value = computed;
	          } else if (!computed) {
	            if (type == LAZY_FILTER_FLAG) {
	              continue outer;
	            } else {
	              break outer;
	            }
	          }
	        }
	        result[resIndex++] = value;
	      }
	      return result;
	    }

	    // Ensure `LazyWrapper` is an instance of `baseLodash`.
	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	    LazyWrapper.prototype.constructor = LazyWrapper;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a hash object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function Hash(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;

	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the hash.
	     *
	     * @private
	     * @name clear
	     * @memberOf Hash
	     */
	    function hashClear() {
	      this.__data__ = nativeCreate ? nativeCreate(null) : {};
	      this.size = 0;
	    }

	    /**
	     * Removes `key` and its value from the hash.
	     *
	     * @private
	     * @name delete
	     * @memberOf Hash
	     * @param {Object} hash The hash to modify.
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function hashDelete(key) {
	      var result = this.has(key) && delete this.__data__[key];
	      this.size -= result ? 1 : 0;
	      return result;
	    }

	    /**
	     * Gets the hash value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Hash
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function hashGet(key) {
	      var data = this.__data__;
	      if (nativeCreate) {
	        var result = data[key];
	        return result === HASH_UNDEFINED ? undefined$1 : result;
	      }
	      return hasOwnProperty.call(data, key) ? data[key] : undefined$1;
	    }

	    /**
	     * Checks if a hash value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Hash
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function hashHas(key) {
	      var data = this.__data__;
	      return nativeCreate ? (data[key] !== undefined$1) : hasOwnProperty.call(data, key);
	    }

	    /**
	     * Sets the hash `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Hash
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the hash instance.
	     */
	    function hashSet(key, value) {
	      var data = this.__data__;
	      this.size += this.has(key) ? 0 : 1;
	      data[key] = (nativeCreate && value === undefined$1) ? HASH_UNDEFINED : value;
	      return this;
	    }

	    // Add methods to `Hash`.
	    Hash.prototype.clear = hashClear;
	    Hash.prototype['delete'] = hashDelete;
	    Hash.prototype.get = hashGet;
	    Hash.prototype.has = hashHas;
	    Hash.prototype.set = hashSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an list cache object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function ListCache(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;

	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the list cache.
	     *
	     * @private
	     * @name clear
	     * @memberOf ListCache
	     */
	    function listCacheClear() {
	      this.__data__ = [];
	      this.size = 0;
	    }

	    /**
	     * Removes `key` and its value from the list cache.
	     *
	     * @private
	     * @name delete
	     * @memberOf ListCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function listCacheDelete(key) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);

	      if (index < 0) {
	        return false;
	      }
	      var lastIndex = data.length - 1;
	      if (index == lastIndex) {
	        data.pop();
	      } else {
	        splice.call(data, index, 1);
	      }
	      --this.size;
	      return true;
	    }

	    /**
	     * Gets the list cache value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf ListCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function listCacheGet(key) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);

	      return index < 0 ? undefined$1 : data[index][1];
	    }

	    /**
	     * Checks if a list cache value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf ListCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function listCacheHas(key) {
	      return assocIndexOf(this.__data__, key) > -1;
	    }

	    /**
	     * Sets the list cache `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf ListCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the list cache instance.
	     */
	    function listCacheSet(key, value) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);

	      if (index < 0) {
	        ++this.size;
	        data.push([key, value]);
	      } else {
	        data[index][1] = value;
	      }
	      return this;
	    }

	    // Add methods to `ListCache`.
	    ListCache.prototype.clear = listCacheClear;
	    ListCache.prototype['delete'] = listCacheDelete;
	    ListCache.prototype.get = listCacheGet;
	    ListCache.prototype.has = listCacheHas;
	    ListCache.prototype.set = listCacheSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a map cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function MapCache(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;

	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the map.
	     *
	     * @private
	     * @name clear
	     * @memberOf MapCache
	     */
	    function mapCacheClear() {
	      this.size = 0;
	      this.__data__ = {
	        'hash': new Hash,
	        'map': new (Map || ListCache),
	        'string': new Hash
	      };
	    }

	    /**
	     * Removes `key` and its value from the map.
	     *
	     * @private
	     * @name delete
	     * @memberOf MapCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function mapCacheDelete(key) {
	      var result = getMapData(this, key)['delete'](key);
	      this.size -= result ? 1 : 0;
	      return result;
	    }

	    /**
	     * Gets the map value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf MapCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function mapCacheGet(key) {
	      return getMapData(this, key).get(key);
	    }

	    /**
	     * Checks if a map value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf MapCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function mapCacheHas(key) {
	      return getMapData(this, key).has(key);
	    }

	    /**
	     * Sets the map `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf MapCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the map cache instance.
	     */
	    function mapCacheSet(key, value) {
	      var data = getMapData(this, key),
	          size = data.size;

	      data.set(key, value);
	      this.size += data.size == size ? 0 : 1;
	      return this;
	    }

	    // Add methods to `MapCache`.
	    MapCache.prototype.clear = mapCacheClear;
	    MapCache.prototype['delete'] = mapCacheDelete;
	    MapCache.prototype.get = mapCacheGet;
	    MapCache.prototype.has = mapCacheHas;
	    MapCache.prototype.set = mapCacheSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     *
	     * Creates an array cache object to store unique values.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [values] The values to cache.
	     */
	    function SetCache(values) {
	      var index = -1,
	          length = values == null ? 0 : values.length;

	      this.__data__ = new MapCache;
	      while (++index < length) {
	        this.add(values[index]);
	      }
	    }

	    /**
	     * Adds `value` to the array cache.
	     *
	     * @private
	     * @name add
	     * @memberOf SetCache
	     * @alias push
	     * @param {*} value The value to cache.
	     * @returns {Object} Returns the cache instance.
	     */
	    function setCacheAdd(value) {
	      this.__data__.set(value, HASH_UNDEFINED);
	      return this;
	    }

	    /**
	     * Checks if `value` is in the array cache.
	     *
	     * @private
	     * @name has
	     * @memberOf SetCache
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `true` if `value` is found, else `false`.
	     */
	    function setCacheHas(value) {
	      return this.__data__.has(value);
	    }

	    // Add methods to `SetCache`.
	    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	    SetCache.prototype.has = setCacheHas;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a stack cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function Stack(entries) {
	      var data = this.__data__ = new ListCache(entries);
	      this.size = data.size;
	    }

	    /**
	     * Removes all key-value entries from the stack.
	     *
	     * @private
	     * @name clear
	     * @memberOf Stack
	     */
	    function stackClear() {
	      this.__data__ = new ListCache;
	      this.size = 0;
	    }

	    /**
	     * Removes `key` and its value from the stack.
	     *
	     * @private
	     * @name delete
	     * @memberOf Stack
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function stackDelete(key) {
	      var data = this.__data__,
	          result = data['delete'](key);

	      this.size = data.size;
	      return result;
	    }

	    /**
	     * Gets the stack value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Stack
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function stackGet(key) {
	      return this.__data__.get(key);
	    }

	    /**
	     * Checks if a stack value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Stack
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function stackHas(key) {
	      return this.__data__.has(key);
	    }

	    /**
	     * Sets the stack `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Stack
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the stack cache instance.
	     */
	    function stackSet(key, value) {
	      var data = this.__data__;
	      if (data instanceof ListCache) {
	        var pairs = data.__data__;
	        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	          pairs.push([key, value]);
	          this.size = ++data.size;
	          return this;
	        }
	        data = this.__data__ = new MapCache(pairs);
	      }
	      data.set(key, value);
	      this.size = data.size;
	      return this;
	    }

	    // Add methods to `Stack`.
	    Stack.prototype.clear = stackClear;
	    Stack.prototype['delete'] = stackDelete;
	    Stack.prototype.get = stackGet;
	    Stack.prototype.has = stackHas;
	    Stack.prototype.set = stackSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of the enumerable property names of the array-like `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @param {boolean} inherited Specify returning inherited property names.
	     * @returns {Array} Returns the array of property names.
	     */
	    function arrayLikeKeys(value, inherited) {
	      var isArr = isArray(value),
	          isArg = !isArr && isArguments(value),
	          isBuff = !isArr && !isArg && isBuffer(value),
	          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
	          skipIndexes = isArr || isArg || isBuff || isType,
	          result = skipIndexes ? baseTimes(value.length, String) : [],
	          length = result.length;

	      for (var key in value) {
	        if ((inherited || hasOwnProperty.call(value, key)) &&
	            !(skipIndexes && (
	               // Safari 9 has enumerable `arguments.length` in strict mode.
	               key == 'length' ||
	               // Node.js 0.10 has enumerable non-index properties on buffers.
	               (isBuff && (key == 'offset' || key == 'parent')) ||
	               // PhantomJS 2 has enumerable non-index properties on typed arrays.
	               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
	               // Skip index properties.
	               isIndex(key, length)
	            ))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.sample` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to sample.
	     * @returns {*} Returns the random element.
	     */
	    function arraySample(array) {
	      var length = array.length;
	      return length ? array[baseRandom(0, length - 1)] : undefined$1;
	    }

	    /**
	     * A specialized version of `_.sampleSize` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to sample.
	     * @param {number} n The number of elements to sample.
	     * @returns {Array} Returns the random elements.
	     */
	    function arraySampleSize(array, n) {
	      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
	    }

	    /**
	     * A specialized version of `_.shuffle` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     */
	    function arrayShuffle(array) {
	      return shuffleSelf(copyArray(array));
	    }

	    /**
	     * This function is like `assignValue` except that it doesn't assign
	     * `undefined` values.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignMergeValue(object, key, value) {
	      if ((value !== undefined$1 && !eq(object[key], value)) ||
	          (value === undefined$1 && !(key in object))) {
	        baseAssignValue(object, key, value);
	      }
	    }

	    /**
	     * Assigns `value` to `key` of `object` if the existing value is not equivalent
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignValue(object, key, value) {
	      var objValue = object[key];
	      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	          (value === undefined$1 && !(key in object))) {
	        baseAssignValue(object, key, value);
	      }
	    }

	    /**
	     * Gets the index at which the `key` is found in `array` of key-value pairs.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {*} key The key to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     */
	    function assocIndexOf(array, key) {
	      var length = array.length;
	      while (length--) {
	        if (eq(array[length][0], key)) {
	          return length;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Aggregates elements of `collection` on `accumulator` with keys transformed
	     * by `iteratee` and values set by `setter`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform keys.
	     * @param {Object} accumulator The initial aggregated object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseAggregator(collection, setter, iteratee, accumulator) {
	      baseEach(collection, function(value, key, collection) {
	        setter(accumulator, value, iteratee(value), collection);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `_.assign` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssign(object, source) {
	      return object && copyObject(source, keys(source), object);
	    }

	    /**
	     * The base implementation of `_.assignIn` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssignIn(object, source) {
	      return object && copyObject(source, keysIn(source), object);
	    }

	    /**
	     * The base implementation of `assignValue` and `assignMergeValue` without
	     * value checks.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function baseAssignValue(object, key, value) {
	      if (key == '__proto__' && defineProperty) {
	        defineProperty(object, key, {
	          'configurable': true,
	          'enumerable': true,
	          'value': value,
	          'writable': true
	        });
	      } else {
	        object[key] = value;
	      }
	    }

	    /**
	     * The base implementation of `_.at` without support for individual paths.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {string[]} paths The property paths to pick.
	     * @returns {Array} Returns the picked elements.
	     */
	    function baseAt(object, paths) {
	      var index = -1,
	          length = paths.length,
	          result = Array(length),
	          skip = object == null;

	      while (++index < length) {
	        result[index] = skip ? undefined$1 : get(object, paths[index]);
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.clamp` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     */
	    function baseClamp(number, lower, upper) {
	      if (number === number) {
	        if (upper !== undefined$1) {
	          number = number <= upper ? number : upper;
	        }
	        if (lower !== undefined$1) {
	          number = number >= lower ? number : lower;
	        }
	      }
	      return number;
	    }

	    /**
	     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	     * traversed objects.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} bitmask The bitmask flags.
	     *  1 - Deep clone
	     *  2 - Flatten inherited properties
	     *  4 - Clone symbols
	     * @param {Function} [customizer] The function to customize cloning.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The parent object of `value`.
	     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	     * @returns {*} Returns the cloned value.
	     */
	    function baseClone(value, bitmask, customizer, key, object, stack) {
	      var result,
	          isDeep = bitmask & CLONE_DEEP_FLAG,
	          isFlat = bitmask & CLONE_FLAT_FLAG,
	          isFull = bitmask & CLONE_SYMBOLS_FLAG;

	      if (customizer) {
	        result = object ? customizer(value, key, object, stack) : customizer(value);
	      }
	      if (result !== undefined$1) {
	        return result;
	      }
	      if (!isObject(value)) {
	        return value;
	      }
	      var isArr = isArray(value);
	      if (isArr) {
	        result = initCloneArray(value);
	        if (!isDeep) {
	          return copyArray(value, result);
	        }
	      } else {
	        var tag = getTag(value),
	            isFunc = tag == funcTag || tag == genTag;

	        if (isBuffer(value)) {
	          return cloneBuffer(value, isDeep);
	        }
	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	          result = (isFlat || isFunc) ? {} : initCloneObject(value);
	          if (!isDeep) {
	            return isFlat
	              ? copySymbolsIn(value, baseAssignIn(result, value))
	              : copySymbols(value, baseAssign(result, value));
	          }
	        } else {
	          if (!cloneableTags[tag]) {
	            return object ? value : {};
	          }
	          result = initCloneByTag(value, tag, isDeep);
	        }
	      }
	      // Check for circular references and return its corresponding clone.
	      stack || (stack = new Stack);
	      var stacked = stack.get(value);
	      if (stacked) {
	        return stacked;
	      }
	      stack.set(value, result);

	      if (isSet(value)) {
	        value.forEach(function(subValue) {
	          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
	        });
	      } else if (isMap(value)) {
	        value.forEach(function(subValue, key) {
	          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
	        });
	      }

	      var keysFunc = isFull
	        ? (isFlat ? getAllKeysIn : getAllKeys)
	        : (isFlat ? keysIn : keys);

	      var props = isArr ? undefined$1 : keysFunc(value);
	      arrayEach(props || value, function(subValue, key) {
	        if (props) {
	          key = subValue;
	          subValue = value[key];
	        }
	        // Recursively populate clone (susceptible to call stack limits).
	        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.conforms` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseConforms(source) {
	      var props = keys(source);
	      return function(object) {
	        return baseConformsTo(object, source, props);
	      };
	    }

	    /**
	     * The base implementation of `_.conformsTo` which accepts `props` to check.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
	     */
	    function baseConformsTo(object, source, props) {
	      var length = props.length;
	      if (object == null) {
	        return !length;
	      }
	      object = Object(object);
	      while (length--) {
	        var key = props[length],
	            predicate = source[key],
	            value = object[key];

	        if ((value === undefined$1 && !(key in object)) || !predicate(value)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.delay` and `_.defer` which accepts `args`
	     * to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Array} args The arguments to provide to `func`.
	     * @returns {number|Object} Returns the timer id or timeout object.
	     */
	    function baseDelay(func, wait, args) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return setTimeout(function() { func.apply(undefined$1, args); }, wait);
	    }

	    /**
	     * The base implementation of methods like `_.difference` without support
	     * for excluding multiple arrays or iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     */
	    function baseDifference(array, values, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          isCommon = true,
	          length = array.length,
	          result = [],
	          valuesLength = values.length;

	      if (!length) {
	        return result;
	      }
	      if (iteratee) {
	        values = arrayMap(values, baseUnary(iteratee));
	      }
	      if (comparator) {
	        includes = arrayIncludesWith;
	        isCommon = false;
	      }
	      else if (values.length >= LARGE_ARRAY_SIZE) {
	        includes = cacheHas;
	        isCommon = false;
	        values = new SetCache(values);
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee == null ? value : iteratee(value);

	        value = (comparator || value !== 0) ? value : 0;
	        if (isCommon && computed === computed) {
	          var valuesIndex = valuesLength;
	          while (valuesIndex--) {
	            if (values[valuesIndex] === computed) {
	              continue outer;
	            }
	          }
	          result.push(value);
	        }
	        else if (!includes(values, computed, comparator)) {
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.forEach` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEach = createBaseEach(baseForOwn);

	    /**
	     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEachRight = createBaseEach(baseForOwnRight, true);

	    /**
	     * The base implementation of `_.every` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */
	    function baseEvery(collection, predicate) {
	      var result = true;
	      baseEach(collection, function(value, index, collection) {
	        result = !!predicate(value, index, collection);
	        return result;
	      });
	      return result;
	    }

	    /**
	     * The base implementation of methods like `_.max` and `_.min` which accepts a
	     * `comparator` to determine the extremum value.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The iteratee invoked per iteration.
	     * @param {Function} comparator The comparator used to compare values.
	     * @returns {*} Returns the extremum value.
	     */
	    function baseExtremum(array, iteratee, comparator) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        var value = array[index],
	            current = iteratee(value);

	        if (current != null && (computed === undefined$1
	              ? (current === current && !isSymbol(current))
	              : comparator(current, computed)
	            )) {
	          var computed = current,
	              result = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function baseFill(array, value, start, end) {
	      var length = array.length;

	      start = toInteger(start);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined$1 || end > length) ? length : toInteger(end);
	      if (end < 0) {
	        end += length;
	      }
	      end = start > end ? 0 : toLength(end);
	      while (start < end) {
	        array[start++] = value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.filter` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function baseFilter(collection, predicate) {
	      var result = [];
	      baseEach(collection, function(value, index, collection) {
	        if (predicate(value, index, collection)) {
	          result.push(value);
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.flatten` with support for restricting flattening.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {number} depth The maximum recursion depth.
	     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	     * @param {Array} [result=[]] The initial result value.
	     * @returns {Array} Returns the new flattened array.
	     */
	    function baseFlatten(array, depth, predicate, isStrict, result) {
	      var index = -1,
	          length = array.length;

	      predicate || (predicate = isFlattenable);
	      result || (result = []);

	      while (++index < length) {
	        var value = array[index];
	        if (depth > 0 && predicate(value)) {
	          if (depth > 1) {
	            // Recursively flatten arrays (susceptible to call stack limits).
	            baseFlatten(value, depth - 1, predicate, isStrict, result);
	          } else {
	            arrayPush(result, value);
	          }
	        } else if (!isStrict) {
	          result[result.length] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `baseForOwn` which iterates over `object`
	     * properties returned by `keysFunc` and invokes `iteratee` for each property.
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseFor = createBaseFor();

	    /**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseForRight = createBaseFor(true);

	    /**
	     * The base implementation of `_.forOwn` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwn(object, iteratee) {
	      return object && baseFor(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwnRight(object, iteratee) {
	      return object && baseForRight(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from `props`.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the function names.
	     */
	    function baseFunctions(object, props) {
	      return arrayFilter(props, function(key) {
	        return isFunction(object[key]);
	      });
	    }

	    /**
	     * The base implementation of `_.get` without support for default values.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseGet(object, path) {
	      path = castPath(path, object);

	      var index = 0,
	          length = path.length;

	      while (object != null && index < length) {
	        object = object[toKey(path[index++])];
	      }
	      return (index && index == length) ? object : undefined$1;
	    }

	    /**
	     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @param {Function} symbolsFunc The function to get the symbols of `object`.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	      var result = keysFunc(object);
	      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	    }

	    /**
	     * The base implementation of `getTag` without fallbacks for buggy environments.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */
	    function baseGetTag(value) {
	      if (value == null) {
	        return value === undefined$1 ? undefinedTag : nullTag;
	      }
	      return (symToStringTag && symToStringTag in Object(value))
	        ? getRawTag(value)
	        : objectToString(value);
	    }

	    /**
	     * The base implementation of `_.gt` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     */
	    function baseGt(value, other) {
	      return value > other;
	    }

	    /**
	     * The base implementation of `_.has` without support for deep paths.
	     *
	     * @private
	     * @param {Object} [object] The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHas(object, key) {
	      return object != null && hasOwnProperty.call(object, key);
	    }

	    /**
	     * The base implementation of `_.hasIn` without support for deep paths.
	     *
	     * @private
	     * @param {Object} [object] The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHasIn(object, key) {
	      return object != null && key in Object(object);
	    }

	    /**
	     * The base implementation of `_.inRange` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {number} number The number to check.
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     */
	    function baseInRange(number, start, end) {
	      return number >= nativeMin(start, end) && number < nativeMax(start, end);
	    }

	    /**
	     * The base implementation of methods like `_.intersection`, without support
	     * for iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of shared values.
	     */
	    function baseIntersection(arrays, iteratee, comparator) {
	      var includes = comparator ? arrayIncludesWith : arrayIncludes,
	          length = arrays[0].length,
	          othLength = arrays.length,
	          othIndex = othLength,
	          caches = Array(othLength),
	          maxLength = Infinity,
	          result = [];

	      while (othIndex--) {
	        var array = arrays[othIndex];
	        if (othIndex && iteratee) {
	          array = arrayMap(array, baseUnary(iteratee));
	        }
	        maxLength = nativeMin(array.length, maxLength);
	        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
	          ? new SetCache(othIndex && array)
	          : undefined$1;
	      }
	      array = arrays[0];

	      var index = -1,
	          seen = caches[0];

	      outer:
	      while (++index < length && result.length < maxLength) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        value = (comparator || value !== 0) ? value : 0;
	        if (!(seen
	              ? cacheHas(seen, computed)
	              : includes(result, computed, comparator)
	            )) {
	          othIndex = othLength;
	          while (--othIndex) {
	            var cache = caches[othIndex];
	            if (!(cache
	                  ? cacheHas(cache, computed)
	                  : includes(arrays[othIndex], computed, comparator))
	                ) {
	              continue outer;
	            }
	          }
	          if (seen) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.invert` and `_.invertBy` which inverts
	     * `object` with values transformed by `iteratee` and set by `setter`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform values.
	     * @param {Object} accumulator The initial inverted object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseInverter(object, setter, iteratee, accumulator) {
	      baseForOwn(object, function(value, key, object) {
	        setter(accumulator, iteratee(value), key, object);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `_.invoke` without support for individual
	     * method arguments.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {Array} args The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     */
	    function baseInvoke(object, path, args) {
	      path = castPath(path, object);
	      object = parent(object, path);
	      var func = object == null ? object : object[toKey(last(path))];
	      return func == null ? undefined$1 : apply(func, object, args);
	    }

	    /**
	     * The base implementation of `_.isArguments`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	     */
	    function baseIsArguments(value) {
	      return isObjectLike(value) && baseGetTag(value) == argsTag;
	    }

	    /**
	     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
	     */
	    function baseIsArrayBuffer(value) {
	      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
	    }

	    /**
	     * The base implementation of `_.isDate` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	     */
	    function baseIsDate(value) {
	      return isObjectLike(value) && baseGetTag(value) == dateTag;
	    }

	    /**
	     * The base implementation of `_.isEqual` which supports partial comparisons
	     * and tracks traversed objects.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {boolean} bitmask The bitmask flags.
	     *  1 - Unordered comparison
	     *  2 - Partial comparison
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
	    function baseIsEqual(value, other, bitmask, customizer, stack) {
	      if (value === other) {
	        return true;
	      }
	      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
	        return value !== value && other !== other;
	      }
	      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
	    }

	    /**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
	      var objIsArr = isArray(object),
	          othIsArr = isArray(other),
	          objTag = objIsArr ? arrayTag : getTag(object),
	          othTag = othIsArr ? arrayTag : getTag(other);

	      objTag = objTag == argsTag ? objectTag : objTag;
	      othTag = othTag == argsTag ? objectTag : othTag;

	      var objIsObj = objTag == objectTag,
	          othIsObj = othTag == objectTag,
	          isSameTag = objTag == othTag;

	      if (isSameTag && isBuffer(object)) {
	        if (!isBuffer(other)) {
	          return false;
	        }
	        objIsArr = true;
	        objIsObj = false;
	      }
	      if (isSameTag && !objIsObj) {
	        stack || (stack = new Stack);
	        return (objIsArr || isTypedArray(object))
	          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
	          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
	      }
	      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
	        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	        if (objIsWrapped || othIsWrapped) {
	          var objUnwrapped = objIsWrapped ? object.value() : object,
	              othUnwrapped = othIsWrapped ? other.value() : other;

	          stack || (stack = new Stack);
	          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
	        }
	      }
	      if (!isSameTag) {
	        return false;
	      }
	      stack || (stack = new Stack);
	      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
	    }

	    /**
	     * The base implementation of `_.isMap` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	     */
	    function baseIsMap(value) {
	      return isObjectLike(value) && getTag(value) == mapTag;
	    }

	    /**
	     * The base implementation of `_.isMatch` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Array} matchData The property names, values, and compare flags to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */
	    function baseIsMatch(object, source, matchData, customizer) {
	      var index = matchData.length,
	          length = index,
	          noCustomizer = !customizer;

	      if (object == null) {
	        return !length;
	      }
	      object = Object(object);
	      while (index--) {
	        var data = matchData[index];
	        if ((noCustomizer && data[2])
	              ? data[1] !== object[data[0]]
	              : !(data[0] in object)
	            ) {
	          return false;
	        }
	      }
	      while (++index < length) {
	        data = matchData[index];
	        var key = data[0],
	            objValue = object[key],
	            srcValue = data[1];

	        if (noCustomizer && data[2]) {
	          if (objValue === undefined$1 && !(key in object)) {
	            return false;
	          }
	        } else {
	          var stack = new Stack;
	          if (customizer) {
	            var result = customizer(objValue, srcValue, key, object, source, stack);
	          }
	          if (!(result === undefined$1
	                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
	                : result
	              )) {
	            return false;
	          }
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.isNative` without bad shim checks.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     */
	    function baseIsNative(value) {
	      if (!isObject(value) || isMasked(value)) {
	        return false;
	      }
	      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
	      return pattern.test(toSource(value));
	    }

	    /**
	     * The base implementation of `_.isRegExp` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	     */
	    function baseIsRegExp(value) {
	      return isObjectLike(value) && baseGetTag(value) == regexpTag;
	    }

	    /**
	     * The base implementation of `_.isSet` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	     */
	    function baseIsSet(value) {
	      return isObjectLike(value) && getTag(value) == setTag;
	    }

	    /**
	     * The base implementation of `_.isTypedArray` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	     */
	    function baseIsTypedArray(value) {
	      return isObjectLike(value) &&
	        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
	    }

	    /**
	     * The base implementation of `_.iteratee`.
	     *
	     * @private
	     * @param {*} [value=_.identity] The value to convert to an iteratee.
	     * @returns {Function} Returns the iteratee.
	     */
	    function baseIteratee(value) {
	      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	      if (typeof value == 'function') {
	        return value;
	      }
	      if (value == null) {
	        return identity;
	      }
	      if (typeof value == 'object') {
	        return isArray(value)
	          ? baseMatchesProperty(value[0], value[1])
	          : baseMatches(value);
	      }
	      return property(value);
	    }

	    /**
	     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeys(object) {
	      if (!isPrototype(object)) {
	        return nativeKeys(object);
	      }
	      var result = [];
	      for (var key in Object(object)) {
	        if (hasOwnProperty.call(object, key) && key != 'constructor') {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeysIn(object) {
	      if (!isObject(object)) {
	        return nativeKeysIn(object);
	      }
	      var isProto = isPrototype(object),
	          result = [];

	      for (var key in object) {
	        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.lt` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     */
	    function baseLt(value, other) {
	      return value < other;
	    }

	    /**
	     * The base implementation of `_.map` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function baseMap(collection, iteratee) {
	      var index = -1,
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value, key, collection) {
	        result[++index] = iteratee(value, key, collection);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.matches` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseMatches(source) {
	      var matchData = getMatchData(source);
	      if (matchData.length == 1 && matchData[0][2]) {
	        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
	      }
	      return function(object) {
	        return object === source || baseIsMatch(object, source, matchData);
	      };
	    }

	    /**
	     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	     *
	     * @private
	     * @param {string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseMatchesProperty(path, srcValue) {
	      if (isKey(path) && isStrictComparable(srcValue)) {
	        return matchesStrictComparable(toKey(path), srcValue);
	      }
	      return function(object) {
	        var objValue = get(object, path);
	        return (objValue === undefined$1 && objValue === srcValue)
	          ? hasIn(object, path)
	          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
	      };
	    }

	    /**
	     * The base implementation of `_.merge` without support for multiple sources.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMerge(object, source, srcIndex, customizer, stack) {
	      if (object === source) {
	        return;
	      }
	      baseFor(source, function(srcValue, key) {
	        stack || (stack = new Stack);
	        if (isObject(srcValue)) {
	          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
	        }
	        else {
	          var newValue = customizer
	            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
	            : undefined$1;

	          if (newValue === undefined$1) {
	            newValue = srcValue;
	          }
	          assignMergeValue(object, key, newValue);
	        }
	      }, keysIn);
	    }

	    /**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
	      var objValue = safeGet(object, key),
	          srcValue = safeGet(source, key),
	          stacked = stack.get(srcValue);

	      if (stacked) {
	        assignMergeValue(object, key, stacked);
	        return;
	      }
	      var newValue = customizer
	        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
	        : undefined$1;

	      var isCommon = newValue === undefined$1;

	      if (isCommon) {
	        var isArr = isArray(srcValue),
	            isBuff = !isArr && isBuffer(srcValue),
	            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

	        newValue = srcValue;
	        if (isArr || isBuff || isTyped) {
	          if (isArray(objValue)) {
	            newValue = objValue;
	          }
	          else if (isArrayLikeObject(objValue)) {
	            newValue = copyArray(objValue);
	          }
	          else if (isBuff) {
	            isCommon = false;
	            newValue = cloneBuffer(srcValue, true);
	          }
	          else if (isTyped) {
	            isCommon = false;
	            newValue = cloneTypedArray(srcValue, true);
	          }
	          else {
	            newValue = [];
	          }
	        }
	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	          newValue = objValue;
	          if (isArguments(objValue)) {
	            newValue = toPlainObject(objValue);
	          }
	          else if (!isObject(objValue) || isFunction(objValue)) {
	            newValue = initCloneObject(srcValue);
	          }
	        }
	        else {
	          isCommon = false;
	        }
	      }
	      if (isCommon) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        stack.set(srcValue, newValue);
	        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
	        stack['delete'](srcValue);
	      }
	      assignMergeValue(object, key, newValue);
	    }

	    /**
	     * The base implementation of `_.nth` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {number} n The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     */
	    function baseNth(array, n) {
	      var length = array.length;
	      if (!length) {
	        return;
	      }
	      n += n < 0 ? length : 0;
	      return isIndex(n, length) ? array[n] : undefined$1;
	    }

	    /**
	     * The base implementation of `_.orderBy` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {string[]} orders The sort orders of `iteratees`.
	     * @returns {Array} Returns the new sorted array.
	     */
	    function baseOrderBy(collection, iteratees, orders) {
	      if (iteratees.length) {
	        iteratees = arrayMap(iteratees, function(iteratee) {
	          if (isArray(iteratee)) {
	            return function(value) {
	              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
	            }
	          }
	          return iteratee;
	        });
	      } else {
	        iteratees = [identity];
	      }

	      var index = -1;
	      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

	      var result = baseMap(collection, function(value, key, collection) {
	        var criteria = arrayMap(iteratees, function(iteratee) {
	          return iteratee(value);
	        });
	        return { 'criteria': criteria, 'index': ++index, 'value': value };
	      });

	      return baseSortBy(result, function(object, other) {
	        return compareMultiple(object, other, orders);
	      });
	    }

	    /**
	     * The base implementation of `_.pick` without support for individual
	     * property identifiers.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} paths The property paths to pick.
	     * @returns {Object} Returns the new object.
	     */
	    function basePick(object, paths) {
	      return basePickBy(object, paths, function(value, path) {
	        return hasIn(object, path);
	      });
	    }

	    /**
	     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} paths The property paths to pick.
	     * @param {Function} predicate The function invoked per property.
	     * @returns {Object} Returns the new object.
	     */
	    function basePickBy(object, paths, predicate) {
	      var index = -1,
	          length = paths.length,
	          result = {};

	      while (++index < length) {
	        var path = paths[index],
	            value = baseGet(object, path);

	        if (predicate(value, path)) {
	          baseSet(result, castPath(path, object), value);
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `baseProperty` which supports deep paths.
	     *
	     * @private
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     */
	    function basePropertyDeep(path) {
	      return function(object) {
	        return baseGet(object, path);
	      };
	    }

	    /**
	     * The base implementation of `_.pullAllBy` without support for iteratee
	     * shorthands.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAll(array, values, iteratee, comparator) {
	      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
	          index = -1,
	          length = values.length,
	          seen = array;

	      if (array === values) {
	        values = copyArray(values);
	      }
	      if (iteratee) {
	        seen = arrayMap(array, baseUnary(iteratee));
	      }
	      while (++index < length) {
	        var fromIndex = 0,
	            value = values[index],
	            computed = iteratee ? iteratee(value) : value;

	        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
	          if (seen !== array) {
	            splice.call(seen, fromIndex, 1);
	          }
	          splice.call(array, fromIndex, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.pullAt` without support for individual
	     * indexes or capturing the removed elements.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAt(array, indexes) {
	      var length = array ? indexes.length : 0,
	          lastIndex = length - 1;

	      while (length--) {
	        var index = indexes[length];
	        if (length == lastIndex || index !== previous) {
	          var previous = index;
	          if (isIndex(index)) {
	            splice.call(array, index, 1);
	          } else {
	            baseUnset(array, index);
	          }
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.random` without support for returning
	     * floating-point numbers.
	     *
	     * @private
	     * @param {number} lower The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the random number.
	     */
	    function baseRandom(lower, upper) {
	      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
	    }

	    /**
	     * The base implementation of `_.range` and `_.rangeRight` which doesn't
	     * coerce arguments.
	     *
	     * @private
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} step The value to increment or decrement by.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the range of numbers.
	     */
	    function baseRange(start, end, step, fromRight) {
	      var index = -1,
	          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
	          result = Array(length);

	      while (length--) {
	        result[fromRight ? length : ++index] = start;
	        start += step;
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.repeat` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {string} string The string to repeat.
	     * @param {number} n The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     */
	    function baseRepeat(string, n) {
	      var result = '';
	      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
	        return result;
	      }
	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	      do {
	        if (n % 2) {
	          result += string;
	        }
	        n = nativeFloor(n / 2);
	        if (n) {
	          string += string;
	        }
	      } while (n);

	      return result;
	    }

	    /**
	     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     */
	    function baseRest(func, start) {
	      return setToString(overRest(func, start, identity), func + '');
	    }

	    /**
	     * The base implementation of `_.sample`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     */
	    function baseSample(collection) {
	      return arraySample(values(collection));
	    }

	    /**
	     * The base implementation of `_.sampleSize` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} n The number of elements to sample.
	     * @returns {Array} Returns the random elements.
	     */
	    function baseSampleSize(collection, n) {
	      var array = values(collection);
	      return shuffleSelf(array, baseClamp(n, 0, array.length));
	    }

	    /**
	     * The base implementation of `_.set`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseSet(object, path, value, customizer) {
	      if (!isObject(object)) {
	        return object;
	      }
	      path = castPath(path, object);

	      var index = -1,
	          length = path.length,
	          lastIndex = length - 1,
	          nested = object;

	      while (nested != null && ++index < length) {
	        var key = toKey(path[index]),
	            newValue = value;

	        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
	          return object;
	        }

	        if (index != lastIndex) {
	          var objValue = nested[key];
	          newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
	          if (newValue === undefined$1) {
	            newValue = isObject(objValue)
	              ? objValue
	              : (isIndex(path[index + 1]) ? [] : {});
	          }
	        }
	        assignValue(nested, key, newValue);
	        nested = nested[key];
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `setData` without support for hot loop shorting.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetData = !metaMap ? identity : function(func, data) {
	      metaMap.set(func, data);
	      return func;
	    };

	    /**
	     * The base implementation of `setToString` without support for hot loop shorting.
	     *
	     * @private
	     * @param {Function} func The function to modify.
	     * @param {Function} string The `toString` result.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetToString = !defineProperty ? identity : function(func, string) {
	      return defineProperty(func, 'toString', {
	        'configurable': true,
	        'enumerable': false,
	        'value': constant(string),
	        'writable': true
	      });
	    };

	    /**
	     * The base implementation of `_.shuffle`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     */
	    function baseShuffle(collection) {
	      return shuffleSelf(values(collection));
	    }

	    /**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseSlice(array, start, end) {
	      var index = -1,
	          length = array.length;

	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = end > length ? length : end;
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : ((end - start) >>> 0);
	      start >>>= 0;

	      var result = Array(length);
	      while (++index < length) {
	        result[index] = array[index + start];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.some` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function baseSome(collection, predicate) {
	      var result;

	      baseEach(collection, function(value, index, collection) {
	        result = predicate(value, index, collection);
	        return !result;
	      });
	      return !!result;
	    }

	    /**
	     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
	     * performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndex(array, value, retHighest) {
	      var low = 0,
	          high = array == null ? low : array.length;

	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	        while (low < high) {
	          var mid = (low + high) >>> 1,
	              computed = array[mid];

	          if (computed !== null && !isSymbol(computed) &&
	              (retHighest ? (computed <= value) : (computed < value))) {
	            low = mid + 1;
	          } else {
	            high = mid;
	          }
	        }
	        return high;
	      }
	      return baseSortedIndexBy(array, value, identity, retHighest);
	    }

	    /**
	     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
	     * which invokes `iteratee` for `value` and each element of `array` to compute
	     * their sort ranking. The iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The iteratee invoked per element.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndexBy(array, value, iteratee, retHighest) {
	      var low = 0,
	          high = array == null ? 0 : array.length;
	      if (high === 0) {
	        return 0;
	      }

	      value = iteratee(value);
	      var valIsNaN = value !== value,
	          valIsNull = value === null,
	          valIsSymbol = isSymbol(value),
	          valIsUndefined = value === undefined$1;

	      while (low < high) {
	        var mid = nativeFloor((low + high) / 2),
	            computed = iteratee(array[mid]),
	            othIsDefined = computed !== undefined$1,
	            othIsNull = computed === null,
	            othIsReflexive = computed === computed,
	            othIsSymbol = isSymbol(computed);

	        if (valIsNaN) {
	          var setLow = retHighest || othIsReflexive;
	        } else if (valIsUndefined) {
	          setLow = othIsReflexive && (retHighest || othIsDefined);
	        } else if (valIsNull) {
	          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
	        } else if (valIsSymbol) {
	          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
	        } else if (othIsNull || othIsSymbol) {
	          setLow = false;
	        } else {
	          setLow = retHighest ? (computed <= value) : (computed < value);
	        }
	        if (setLow) {
	          low = mid + 1;
	        } else {
	          high = mid;
	        }
	      }
	      return nativeMin(high, MAX_ARRAY_INDEX);
	    }

	    /**
	     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
	     * support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseSortedUniq(array, iteratee) {
	      var index = -1,
	          length = array.length,
	          resIndex = 0,
	          result = [];

	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        if (!index || !eq(computed, seen)) {
	          var seen = computed;
	          result[resIndex++] = value === 0 ? 0 : value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.toNumber` which doesn't ensure correct
	     * conversions of binary, hexadecimal, or octal string values.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     */
	    function baseToNumber(value) {
	      if (typeof value == 'number') {
	        return value;
	      }
	      if (isSymbol(value)) {
	        return NAN;
	      }
	      return +value;
	    }

	    /**
	     * The base implementation of `_.toString` which doesn't convert nullish
	     * values to empty strings.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {string} Returns the string.
	     */
	    function baseToString(value) {
	      // Exit early for strings to avoid a performance hit in some environments.
	      if (typeof value == 'string') {
	        return value;
	      }
	      if (isArray(value)) {
	        // Recursively convert values (susceptible to call stack limits).
	        return arrayMap(value, baseToString) + '';
	      }
	      if (isSymbol(value)) {
	        return symbolToString ? symbolToString.call(value) : '';
	      }
	      var result = (value + '');
	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	    }

	    /**
	     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseUniq(array, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          length = array.length,
	          isCommon = true,
	          result = [],
	          seen = result;

	      if (comparator) {
	        isCommon = false;
	        includes = arrayIncludesWith;
	      }
	      else if (length >= LARGE_ARRAY_SIZE) {
	        var set = iteratee ? null : createSet(array);
	        if (set) {
	          return setToArray(set);
	        }
	        isCommon = false;
	        includes = cacheHas;
	        seen = new SetCache;
	      }
	      else {
	        seen = iteratee ? [] : result;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        value = (comparator || value !== 0) ? value : 0;
	        if (isCommon && computed === computed) {
	          var seenIndex = seen.length;
	          while (seenIndex--) {
	            if (seen[seenIndex] === computed) {
	              continue outer;
	            }
	          }
	          if (iteratee) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	        else if (!includes(seen, computed, comparator)) {
	          if (seen !== result) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.unset`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The property path to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     */
	    function baseUnset(object, path) {
	      path = castPath(path, object);
	      object = parent(object, path);
	      return object == null || delete object[toKey(last(path))];
	    }

	    /**
	     * The base implementation of `_.update`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to update.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseUpdate(object, path, updater, customizer) {
	      return baseSet(object, path, updater(baseGet(object, path)), customizer);
	    }

	    /**
	     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
	     * without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseWhile(array, predicate, isDrop, fromRight) {
	      var length = array.length,
	          index = fromRight ? length : -1;

	      while ((fromRight ? index-- : ++index < length) &&
	        predicate(array[index], index, array)) {}

	      return isDrop
	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
	    }

	    /**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to perform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseWrapperValue(value, actions) {
	      var result = value;
	      if (result instanceof LazyWrapper) {
	        result = result.value();
	      }
	      return arrayReduce(actions, function(result, action) {
	        return action.func.apply(action.thisArg, arrayPush([result], action.args));
	      }, result);
	    }

	    /**
	     * The base implementation of methods like `_.xor`, without support for
	     * iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of values.
	     */
	    function baseXor(arrays, iteratee, comparator) {
	      var length = arrays.length;
	      if (length < 2) {
	        return length ? baseUniq(arrays[0]) : [];
	      }
	      var index = -1,
	          result = Array(length);

	      while (++index < length) {
	        var array = arrays[index],
	            othIndex = -1;

	        while (++othIndex < length) {
	          if (othIndex != index) {
	            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
	          }
	        }
	      }
	      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
	    }

	    /**
	     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
	     *
	     * @private
	     * @param {Array} props The property identifiers.
	     * @param {Array} values The property values.
	     * @param {Function} assignFunc The function to assign values.
	     * @returns {Object} Returns the new object.
	     */
	    function baseZipObject(props, values, assignFunc) {
	      var index = -1,
	          length = props.length,
	          valsLength = values.length,
	          result = {};

	      while (++index < length) {
	        var value = index < valsLength ? values[index] : undefined$1;
	        assignFunc(result, props[index], value);
	      }
	      return result;
	    }

	    /**
	     * Casts `value` to an empty array if it's not an array like object.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Array|Object} Returns the cast array-like object.
	     */
	    function castArrayLikeObject(value) {
	      return isArrayLikeObject(value) ? value : [];
	    }

	    /**
	     * Casts `value` to `identity` if it's not a function.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Function} Returns cast function.
	     */
	    function castFunction(value) {
	      return typeof value == 'function' ? value : identity;
	    }

	    /**
	     * Casts `value` to a path array if it's not one.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {Array} Returns the cast property path array.
	     */
	    function castPath(value, object) {
	      if (isArray(value)) {
	        return value;
	      }
	      return isKey(value, object) ? [value] : stringToPath(toString(value));
	    }

	    /**
	     * A `baseRest` alias which can be replaced with `identity` by module
	     * replacement plugins.
	     *
	     * @private
	     * @type {Function}
	     * @param {Function} func The function to apply a rest parameter to.
	     * @returns {Function} Returns the new function.
	     */
	    var castRest = baseRest;

	    /**
	     * Casts `array` to a slice if it's needed.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {number} start The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the cast slice.
	     */
	    function castSlice(array, start, end) {
	      var length = array.length;
	      end = end === undefined$1 ? length : end;
	      return (!start && end >= length) ? array : baseSlice(array, start, end);
	    }

	    /**
	     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
	     *
	     * @private
	     * @param {number|Object} id The timer id or timeout object of the timer to clear.
	     */
	    var clearTimeout = ctxClearTimeout || function(id) {
	      return root.clearTimeout(id);
	    };

	    /**
	     * Creates a clone of  `buffer`.
	     *
	     * @private
	     * @param {Buffer} buffer The buffer to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Buffer} Returns the cloned buffer.
	     */
	    function cloneBuffer(buffer, isDeep) {
	      if (isDeep) {
	        return buffer.slice();
	      }
	      var length = buffer.length,
	          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

	      buffer.copy(result);
	      return result;
	    }

	    /**
	     * Creates a clone of `arrayBuffer`.
	     *
	     * @private
	     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */
	    function cloneArrayBuffer(arrayBuffer) {
	      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	      return result;
	    }

	    /**
	     * Creates a clone of `dataView`.
	     *
	     * @private
	     * @param {Object} dataView The data view to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned data view.
	     */
	    function cloneDataView(dataView, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	    }

	    /**
	     * Creates a clone of `regexp`.
	     *
	     * @private
	     * @param {Object} regexp The regexp to clone.
	     * @returns {Object} Returns the cloned regexp.
	     */
	    function cloneRegExp(regexp) {
	      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	      result.lastIndex = regexp.lastIndex;
	      return result;
	    }

	    /**
	     * Creates a clone of the `symbol` object.
	     *
	     * @private
	     * @param {Object} symbol The symbol object to clone.
	     * @returns {Object} Returns the cloned symbol object.
	     */
	    function cloneSymbol(symbol) {
	      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	    }

	    /**
	     * Creates a clone of `typedArray`.
	     *
	     * @private
	     * @param {Object} typedArray The typed array to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned typed array.
	     */
	    function cloneTypedArray(typedArray, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	    }

	    /**
	     * Compares values to sort them in ascending order.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {number} Returns the sort order indicator for `value`.
	     */
	    function compareAscending(value, other) {
	      if (value !== other) {
	        var valIsDefined = value !== undefined$1,
	            valIsNull = value === null,
	            valIsReflexive = value === value,
	            valIsSymbol = isSymbol(value);

	        var othIsDefined = other !== undefined$1,
	            othIsNull = other === null,
	            othIsReflexive = other === other,
	            othIsSymbol = isSymbol(other);

	        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
	            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
	            (valIsNull && othIsDefined && othIsReflexive) ||
	            (!valIsDefined && othIsReflexive) ||
	            !valIsReflexive) {
	          return 1;
	        }
	        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
	            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
	            (othIsNull && valIsDefined && valIsReflexive) ||
	            (!othIsDefined && valIsReflexive) ||
	            !othIsReflexive) {
	          return -1;
	        }
	      }
	      return 0;
	    }

	    /**
	     * Used by `_.orderBy` to compare multiple properties of a value to another
	     * and stable sort them.
	     *
	     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
	     * specify an order of "desc" for descending or "asc" for ascending sort order
	     * of corresponding values.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {boolean[]|string[]} orders The order to sort by for each property.
	     * @returns {number} Returns the sort order indicator for `object`.
	     */
	    function compareMultiple(object, other, orders) {
	      var index = -1,
	          objCriteria = object.criteria,
	          othCriteria = other.criteria,
	          length = objCriteria.length,
	          ordersLength = orders.length;

	      while (++index < length) {
	        var result = compareAscending(objCriteria[index], othCriteria[index]);
	        if (result) {
	          if (index >= ordersLength) {
	            return result;
	          }
	          var order = orders[index];
	          return result * (order == 'desc' ? -1 : 1);
	        }
	      }
	      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	      // that causes it, under certain circumstances, to provide the same value for
	      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	      // for more details.
	      //
	      // This also ensures a stable sort in V8 and other engines.
	      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
	      return object.index - other.index;
	    }

	    /**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgs(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersLength = holders.length,
	          leftIndex = -1,
	          leftLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(leftLength + rangeLength),
	          isUncurried = !isCurried;

	      while (++leftIndex < leftLength) {
	        result[leftIndex] = partials[leftIndex];
	      }
	      while (++argsIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[holders[argsIndex]] = args[argsIndex];
	        }
	      }
	      while (rangeLength--) {
	        result[leftIndex++] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgsRight(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersIndex = -1,
	          holdersLength = holders.length,
	          rightIndex = -1,
	          rightLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(rangeLength + rightLength),
	          isUncurried = !isCurried;

	      while (++argsIndex < rangeLength) {
	        result[argsIndex] = args[argsIndex];
	      }
	      var offset = argsIndex;
	      while (++rightIndex < rightLength) {
	        result[offset + rightIndex] = partials[rightIndex];
	      }
	      while (++holdersIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[offset + holders[holdersIndex]] = args[argsIndex++];
	        }
	      }
	      return result;
	    }

	    /**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */
	    function copyArray(source, array) {
	      var index = -1,
	          length = source.length;

	      array || (array = Array(length));
	      while (++index < length) {
	        array[index] = source[index];
	      }
	      return array;
	    }

	    /**
	     * Copies properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property identifiers to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @param {Function} [customizer] The function to customize copied values.
	     * @returns {Object} Returns `object`.
	     */
	    function copyObject(source, props, object, customizer) {
	      var isNew = !object;
	      object || (object = {});

	      var index = -1,
	          length = props.length;

	      while (++index < length) {
	        var key = props[index];

	        var newValue = customizer
	          ? customizer(object[key], source[key], key, object, source)
	          : undefined$1;

	        if (newValue === undefined$1) {
	          newValue = source[key];
	        }
	        if (isNew) {
	          baseAssignValue(object, key, newValue);
	        } else {
	          assignValue(object, key, newValue);
	        }
	      }
	      return object;
	    }

	    /**
	     * Copies own symbols of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */
	    function copySymbols(source, object) {
	      return copyObject(source, getSymbols(source), object);
	    }

	    /**
	     * Copies own and inherited symbols of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */
	    function copySymbolsIn(source, object) {
	      return copyObject(source, getSymbolsIn(source), object);
	    }

	    /**
	     * Creates a function like `_.groupBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} [initializer] The accumulator object initializer.
	     * @returns {Function} Returns the new aggregator function.
	     */
	    function createAggregator(setter, initializer) {
	      return function(collection, iteratee) {
	        var func = isArray(collection) ? arrayAggregator : baseAggregator,
	            accumulator = initializer ? initializer() : {};

	        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
	      };
	    }

	    /**
	     * Creates a function like `_.assign`.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */
	    function createAssigner(assigner) {
	      return baseRest(function(object, sources) {
	        var index = -1,
	            length = sources.length,
	            customizer = length > 1 ? sources[length - 1] : undefined$1,
	            guard = length > 2 ? sources[2] : undefined$1;

	        customizer = (assigner.length > 3 && typeof customizer == 'function')
	          ? (length--, customizer)
	          : undefined$1;

	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	          customizer = length < 3 ? undefined$1 : customizer;
	          length = 1;
	        }
	        object = Object(object);
	        while (++index < length) {
	          var source = sources[index];
	          if (source) {
	            assigner(object, source, index, customizer);
	          }
	        }
	        return object;
	      });
	    }

	    /**
	     * Creates a `baseEach` or `baseEachRight` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseEach(eachFunc, fromRight) {
	      return function(collection, iteratee) {
	        if (collection == null) {
	          return collection;
	        }
	        if (!isArrayLike(collection)) {
	          return eachFunc(collection, iteratee);
	        }
	        var length = collection.length,
	            index = fromRight ? length : -1,
	            iterable = Object(collection);

	        while ((fromRight ? index-- : ++index < length)) {
	          if (iteratee(iterable[index], index, iterable) === false) {
	            break;
	          }
	        }
	        return collection;
	      };
	    }

	    /**
	     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseFor(fromRight) {
	      return function(object, iteratee, keysFunc) {
	        var index = -1,
	            iterable = Object(object),
	            props = keysFunc(object),
	            length = props.length;

	        while (length--) {
	          var key = props[fromRight ? length : ++index];
	          if (iteratee(iterable[key], key, iterable) === false) {
	            break;
	          }
	        }
	        return object;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with the optional `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createBind(func, bitmask, thisArg) {
	      var isBind = bitmask & WRAP_BIND_FLAG,
	          Ctor = createCtor(func);

	      function wrapper() {
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(isBind ? thisArg : this, arguments);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a function like `_.lowerFirst`.
	     *
	     * @private
	     * @param {string} methodName The name of the `String` case method to use.
	     * @returns {Function} Returns the new case function.
	     */
	    function createCaseFirst(methodName) {
	      return function(string) {
	        string = toString(string);

	        var strSymbols = hasUnicode(string)
	          ? stringToArray(string)
	          : undefined$1;

	        var chr = strSymbols
	          ? strSymbols[0]
	          : string.charAt(0);

	        var trailing = strSymbols
	          ? castSlice(strSymbols, 1).join('')
	          : string.slice(1);

	        return chr[methodName]() + trailing;
	      };
	    }

	    /**
	     * Creates a function like `_.camelCase`.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */
	    function createCompounder(callback) {
	      return function(string) {
	        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
	      };
	    }

	    /**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCtor(Ctor) {
	      return function() {
	        // Use a `switch` statement to work with class constructors. See
	        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	        // for more details.
	        var args = arguments;
	        switch (args.length) {
	          case 0: return new Ctor;
	          case 1: return new Ctor(args[0]);
	          case 2: return new Ctor(args[0], args[1]);
	          case 3: return new Ctor(args[0], args[1], args[2]);
	          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
	          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	        }
	        var thisBinding = baseCreate(Ctor.prototype),
	            result = Ctor.apply(thisBinding, args);

	        // Mimic the constructor's `return` behavior.
	        // See https://es5.github.io/#x13.2.2 for more details.
	        return isObject(result) ? result : thisBinding;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to enable currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {number} arity The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCurry(func, bitmask, arity) {
	      var Ctor = createCtor(func);

	      function wrapper() {
	        var length = arguments.length,
	            args = Array(length),
	            index = length,
	            placeholder = getHolder(wrapper);

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
	          ? []
	          : replaceHolders(args, placeholder);

	        length -= holders.length;
	        if (length < arity) {
	          return createRecurry(
	            func, bitmask, createHybrid, wrapper.placeholder, undefined$1,
	            args, holders, undefined$1, undefined$1, arity - length);
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return apply(fn, this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.find` or `_.findLast` function.
	     *
	     * @private
	     * @param {Function} findIndexFunc The function to find the collection index.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFind(findIndexFunc) {
	      return function(collection, predicate, fromIndex) {
	        var iterable = Object(collection);
	        if (!isArrayLike(collection)) {
	          var iteratee = getIteratee(predicate, 3);
	          collection = keys(collection);
	          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
	        }
	        var index = findIndexFunc(collection, predicate, fromIndex);
	        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined$1;
	      };
	    }

	    /**
	     * Creates a `_.flow` or `_.flowRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new flow function.
	     */
	    function createFlow(fromRight) {
	      return flatRest(function(funcs) {
	        var length = funcs.length,
	            index = length,
	            prereq = LodashWrapper.prototype.thru;

	        if (fromRight) {
	          funcs.reverse();
	        }
	        while (index--) {
	          var func = funcs[index];
	          if (typeof func != 'function') {
	            throw new TypeError(FUNC_ERROR_TEXT);
	          }
	          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
	            var wrapper = new LodashWrapper([], true);
	          }
	        }
	        index = wrapper ? index : length;
	        while (++index < length) {
	          func = funcs[index];

	          var funcName = getFuncName(func),
	              data = funcName == 'wrapper' ? getData(func) : undefined$1;

	          if (data && isLaziable(data[0]) &&
	                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
	                !data[4].length && data[9] == 1
	              ) {
	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	          } else {
	            wrapper = (func.length == 1 && isLaziable(func))
	              ? wrapper[funcName]()
	              : wrapper.thru(func);
	          }
	        }
	        return function() {
	          var args = arguments,
	              value = args[0];

	          if (wrapper && args.length == 1 && isArray(value)) {
	            return wrapper.plant(value).value();
	          }
	          var index = 0,
	              result = length ? funcs[index].apply(this, args) : value;

	          while (++index < length) {
	            result = funcs[index].call(this, result);
	          }
	          return result;
	        };
	      });
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with optional `this`
	     * binding of `thisArg`, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided
	     *  to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	      var isAry = bitmask & WRAP_ARY_FLAG,
	          isBind = bitmask & WRAP_BIND_FLAG,
	          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
	          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
	          isFlip = bitmask & WRAP_FLIP_FLAG,
	          Ctor = isBindKey ? undefined$1 : createCtor(func);

	      function wrapper() {
	        var length = arguments.length,
	            args = Array(length),
	            index = length;

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        if (isCurried) {
	          var placeholder = getHolder(wrapper),
	              holdersCount = countHolders(args, placeholder);
	        }
	        if (partials) {
	          args = composeArgs(args, partials, holders, isCurried);
	        }
	        if (partialsRight) {
	          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
	        }
	        length -= holdersCount;
	        if (isCurried && length < arity) {
	          var newHolders = replaceHolders(args, placeholder);
	          return createRecurry(
	            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
	            args, newHolders, argPos, ary, arity - length
	          );
	        }
	        var thisBinding = isBind ? thisArg : this,
	            fn = isBindKey ? thisBinding[func] : func;

	        length = args.length;
	        if (argPos) {
	          args = reorder(args, argPos);
	        } else if (isFlip && length > 1) {
	          args.reverse();
	        }
	        if (isAry && ary < length) {
	          args.length = ary;
	        }
	        if (this && this !== root && this instanceof wrapper) {
	          fn = Ctor || createCtor(fn);
	        }
	        return fn.apply(thisBinding, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a function like `_.invertBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} toIteratee The function to resolve iteratees.
	     * @returns {Function} Returns the new inverter function.
	     */
	    function createInverter(setter, toIteratee) {
	      return function(object, iteratee) {
	        return baseInverter(object, setter, toIteratee(iteratee), {});
	      };
	    }

	    /**
	     * Creates a function that performs a mathematical operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @param {number} [defaultValue] The value used for `undefined` arguments.
	     * @returns {Function} Returns the new mathematical operation function.
	     */
	    function createMathOperation(operator, defaultValue) {
	      return function(value, other) {
	        var result;
	        if (value === undefined$1 && other === undefined$1) {
	          return defaultValue;
	        }
	        if (value !== undefined$1) {
	          result = value;
	        }
	        if (other !== undefined$1) {
	          if (result === undefined$1) {
	            return other;
	          }
	          if (typeof value == 'string' || typeof other == 'string') {
	            value = baseToString(value);
	            other = baseToString(other);
	          } else {
	            value = baseToNumber(value);
	            other = baseToNumber(other);
	          }
	          result = operator(value, other);
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function like `_.over`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over iteratees.
	     * @returns {Function} Returns the new over function.
	     */
	    function createOver(arrayFunc) {
	      return flatRest(function(iteratees) {
	        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
	        return baseRest(function(args) {
	          var thisArg = this;
	          return arrayFunc(iteratees, function(iteratee) {
	            return apply(iteratee, thisArg, args);
	          });
	        });
	      });
	    }

	    /**
	     * Creates the padding for `string` based on `length`. The `chars` string
	     * is truncated if the number of characters exceeds `length`.
	     *
	     * @private
	     * @param {number} length The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padding for `string`.
	     */
	    function createPadding(length, chars) {
	      chars = chars === undefined$1 ? ' ' : baseToString(chars);

	      var charsLength = chars.length;
	      if (charsLength < 2) {
	        return charsLength ? baseRepeat(chars, length) : chars;
	      }
	      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
	      return hasUnicode(chars)
	        ? castSlice(stringToArray(result), 0, length).join('')
	        : result.slice(0, length);
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with the `this` binding
	     * of `thisArg` and `partials` prepended to the arguments it receives.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to
	     *  the new function.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createPartial(func, bitmask, thisArg, partials) {
	      var isBind = bitmask & WRAP_BIND_FLAG,
	          Ctor = createCtor(func);

	      function wrapper() {
	        var argsIndex = -1,
	            argsLength = arguments.length,
	            leftIndex = -1,
	            leftLength = partials.length,
	            args = Array(leftLength + argsLength),
	            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

	        while (++leftIndex < leftLength) {
	          args[leftIndex] = partials[leftIndex];
	        }
	        while (argsLength--) {
	          args[leftIndex++] = arguments[++argsIndex];
	        }
	        return apply(fn, isBind ? thisArg : this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.range` or `_.rangeRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new range function.
	     */
	    function createRange(fromRight) {
	      return function(start, end, step) {
	        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
	          end = step = undefined$1;
	        }
	        // Ensure the sign of `-0` is preserved.
	        start = toFinite(start);
	        if (end === undefined$1) {
	          end = start;
	          start = 0;
	        } else {
	          end = toFinite(end);
	        }
	        step = step === undefined$1 ? (start < end ? 1 : -1) : toFinite(step);
	        return baseRange(start, end, step, fromRight);
	      };
	    }

	    /**
	     * Creates a function that performs a relational operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @returns {Function} Returns the new relational operation function.
	     */
	    function createRelationalOperation(operator) {
	      return function(value, other) {
	        if (!(typeof value == 'string' && typeof other == 'string')) {
	          value = toNumber(value);
	          other = toNumber(other);
	        }
	        return operator(value, other);
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to continue currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {Function} wrapFunc The function to create the `func` wrapper.
	     * @param {*} placeholder The placeholder value.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
	      var isCurry = bitmask & WRAP_CURRY_FLAG,
	          newHolders = isCurry ? holders : undefined$1,
	          newHoldersRight = isCurry ? undefined$1 : holders,
	          newPartials = isCurry ? partials : undefined$1,
	          newPartialsRight = isCurry ? undefined$1 : partials;

	      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
	      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

	      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
	        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
	      }
	      var newData = [
	        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
	        newHoldersRight, argPos, ary, arity
	      ];

	      var result = wrapFunc.apply(undefined$1, newData);
	      if (isLaziable(func)) {
	        setData(result, newData);
	      }
	      result.placeholder = placeholder;
	      return setWrapToString(result, func, bitmask);
	    }

	    /**
	     * Creates a function like `_.round`.
	     *
	     * @private
	     * @param {string} methodName The name of the `Math` method to use when rounding.
	     * @returns {Function} Returns the new round function.
	     */
	    function createRound(methodName) {
	      var func = Math[methodName];
	      return function(number, precision) {
	        number = toNumber(number);
	        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
	        if (precision && nativeIsFinite(number)) {
	          // Shift with exponential notation to avoid floating-point issues.
	          // See [MDN](https://mdn.io/round#Examples) for more details.
	          var pair = (toString(number) + 'e').split('e'),
	              value = func(pair[0] + 'e' + (+pair[1] + precision));

	          pair = (toString(value) + 'e').split('e');
	          return +(pair[0] + 'e' + (+pair[1] - precision));
	        }
	        return func(number);
	      };
	    }

	    /**
	     * Creates a set object of `values`.
	     *
	     * @private
	     * @param {Array} values The values to add to the set.
	     * @returns {Object} Returns the new set.
	     */
	    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
	      return new Set(values);
	    };

	    /**
	     * Creates a `_.toPairs` or `_.toPairsIn` function.
	     *
	     * @private
	     * @param {Function} keysFunc The function to get the keys of a given object.
	     * @returns {Function} Returns the new pairs function.
	     */
	    function createToPairs(keysFunc) {
	      return function(object) {
	        var tag = getTag(object);
	        if (tag == mapTag) {
	          return mapToArray(object);
	        }
	        if (tag == setTag) {
	          return setToPairs(object);
	        }
	        return baseToPairs(object, keysFunc(object));
	      };
	    }

	    /**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask flags.
	     *    1 - `_.bind`
	     *    2 - `_.bindKey`
	     *    4 - `_.curry` or `_.curryRight` of a bound function
	     *    8 - `_.curry`
	     *   16 - `_.curryRight`
	     *   32 - `_.partial`
	     *   64 - `_.partialRight`
	     *  128 - `_.rearg`
	     *  256 - `_.ary`
	     *  512 - `_.flip`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
	      if (!isBindKey && typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = partials ? partials.length : 0;
	      if (!length) {
	        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
	        partials = holders = undefined$1;
	      }
	      ary = ary === undefined$1 ? ary : nativeMax(toInteger(ary), 0);
	      arity = arity === undefined$1 ? arity : toInteger(arity);
	      length -= holders ? holders.length : 0;

	      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
	        var partialsRight = partials,
	            holdersRight = holders;

	        partials = holders = undefined$1;
	      }
	      var data = isBindKey ? undefined$1 : getData(func);

	      var newData = [
	        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
	        argPos, ary, arity
	      ];

	      if (data) {
	        mergeData(newData, data);
	      }
	      func = newData[0];
	      bitmask = newData[1];
	      thisArg = newData[2];
	      partials = newData[3];
	      holders = newData[4];
	      arity = newData[9] = newData[9] === undefined$1
	        ? (isBindKey ? 0 : func.length)
	        : nativeMax(newData[9] - length, 0);

	      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
	        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
	      }
	      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
	        var result = createBind(func, bitmask, thisArg);
	      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
	        result = createCurry(func, bitmask, arity);
	      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
	        result = createPartial(func, bitmask, thisArg, partials);
	      } else {
	        result = createHybrid.apply(undefined$1, newData);
	      }
	      var setter = data ? baseSetData : setData;
	      return setWrapToString(setter(result, newData), func, bitmask);
	    }

	    /**
	     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
	     * of source objects to the destination object for all destination properties
	     * that resolve to `undefined`.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to assign.
	     * @param {Object} object The parent object of `objValue`.
	     * @returns {*} Returns the value to assign.
	     */
	    function customDefaultsAssignIn(objValue, srcValue, key, object) {
	      if (objValue === undefined$1 ||
	          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
	        return srcValue;
	      }
	      return objValue;
	    }

	    /**
	     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
	     * objects into destination objects that are passed thru.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to merge.
	     * @param {Object} object The parent object of `objValue`.
	     * @param {Object} source The parent object of `srcValue`.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     * @returns {*} Returns the value to assign.
	     */
	    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
	      if (isObject(objValue) && isObject(srcValue)) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        stack.set(srcValue, objValue);
	        baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
	        stack['delete'](srcValue);
	      }
	      return objValue;
	    }

	    /**
	     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
	     * objects.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @param {string} key The key of the property to inspect.
	     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
	     */
	    function customOmitClone(value) {
	      return isPlainObject(value) ? undefined$1 : value;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `array` and `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */
	    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	          arrLength = array.length,
	          othLength = other.length;

	      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	        return false;
	      }
	      // Check that cyclic values are equal.
	      var arrStacked = stack.get(array);
	      var othStacked = stack.get(other);
	      if (arrStacked && othStacked) {
	        return arrStacked == other && othStacked == array;
	      }
	      var index = -1,
	          result = true,
	          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined$1;

	      stack.set(array, other);
	      stack.set(other, array);

	      // Ignore non-index properties.
	      while (++index < arrLength) {
	        var arrValue = array[index],
	            othValue = other[index];

	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, arrValue, index, other, array, stack)
	            : customizer(arrValue, othValue, index, array, other, stack);
	        }
	        if (compared !== undefined$1) {
	          if (compared) {
	            continue;
	          }
	          result = false;
	          break;
	        }
	        // Recursively compare arrays (susceptible to call stack limits).
	        if (seen) {
	          if (!arraySome(other, function(othValue, othIndex) {
	                if (!cacheHas(seen, othIndex) &&
	                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	                  return seen.push(othIndex);
	                }
	              })) {
	            result = false;
	            break;
	          }
	        } else if (!(
	              arrValue === othValue ||
	                equalFunc(arrValue, othValue, bitmask, customizer, stack)
	            )) {
	          result = false;
	          break;
	        }
	      }
	      stack['delete'](array);
	      stack['delete'](other);
	      return result;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
	      switch (tag) {
	        case dataViewTag:
	          if ((object.byteLength != other.byteLength) ||
	              (object.byteOffset != other.byteOffset)) {
	            return false;
	          }
	          object = object.buffer;
	          other = other.buffer;

	        case arrayBufferTag:
	          if ((object.byteLength != other.byteLength) ||
	              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	            return false;
	          }
	          return true;

	        case boolTag:
	        case dateTag:
	        case numberTag:
	          // Coerce booleans to `1` or `0` and dates to milliseconds.
	          // Invalid dates are coerced to `NaN`.
	          return eq(+object, +other);

	        case errorTag:
	          return object.name == other.name && object.message == other.message;

	        case regexpTag:
	        case stringTag:
	          // Coerce regexes to strings and treat strings, primitives and objects,
	          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	          // for more details.
	          return object == (other + '');

	        case mapTag:
	          var convert = mapToArray;

	        case setTag:
	          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
	          convert || (convert = setToArray);

	          if (object.size != other.size && !isPartial) {
	            return false;
	          }
	          // Assume cyclic values are equal.
	          var stacked = stack.get(object);
	          if (stacked) {
	            return stacked == other;
	          }
	          bitmask |= COMPARE_UNORDERED_FLAG;

	          // Recursively compare objects (susceptible to call stack limits).
	          stack.set(object, other);
	          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
	          stack['delete'](object);
	          return result;

	        case symbolTag:
	          if (symbolValueOf) {
	            return symbolValueOf.call(object) == symbolValueOf.call(other);
	          }
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	          objProps = getAllKeys(object),
	          objLength = objProps.length,
	          othProps = getAllKeys(other),
	          othLength = othProps.length;

	      if (objLength != othLength && !isPartial) {
	        return false;
	      }
	      var index = objLength;
	      while (index--) {
	        var key = objProps[index];
	        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
	          return false;
	        }
	      }
	      // Check that cyclic values are equal.
	      var objStacked = stack.get(object);
	      var othStacked = stack.get(other);
	      if (objStacked && othStacked) {
	        return objStacked == other && othStacked == object;
	      }
	      var result = true;
	      stack.set(object, other);
	      stack.set(other, object);

	      var skipCtor = isPartial;
	      while (++index < objLength) {
	        key = objProps[index];
	        var objValue = object[key],
	            othValue = other[key];

	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, objValue, key, other, object, stack)
	            : customizer(objValue, othValue, key, object, other, stack);
	        }
	        // Recursively compare objects (susceptible to call stack limits).
	        if (!(compared === undefined$1
	              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
	              : compared
	            )) {
	          result = false;
	          break;
	        }
	        skipCtor || (skipCtor = key == 'constructor');
	      }
	      if (result && !skipCtor) {
	        var objCtor = object.constructor,
	            othCtor = other.constructor;

	        // Non `Object` object instances with different constructors are not equal.
	        if (objCtor != othCtor &&
	            ('constructor' in object && 'constructor' in other) &&
	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	          result = false;
	        }
	      }
	      stack['delete'](object);
	      stack['delete'](other);
	      return result;
	    }

	    /**
	     * A specialized version of `baseRest` which flattens the rest array.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @returns {Function} Returns the new function.
	     */
	    function flatRest(func) {
	      return setToString(overRest(func, undefined$1, flatten), func + '');
	    }

	    /**
	     * Creates an array of own enumerable property names and symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeys(object) {
	      return baseGetAllKeys(object, keys, getSymbols);
	    }

	    /**
	     * Creates an array of own and inherited enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeysIn(object) {
	      return baseGetAllKeys(object, keysIn, getSymbolsIn);
	    }

	    /**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */
	    var getData = !metaMap ? noop : function(func) {
	      return metaMap.get(func);
	    };

	    /**
	     * Gets the name of `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {string} Returns the function name.
	     */
	    function getFuncName(func) {
	      var result = (func.name + ''),
	          array = realNames[result],
	          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

	      while (length--) {
	        var data = array[length],
	            otherFunc = data.func;
	        if (otherFunc == null || otherFunc == func) {
	          return data.name;
	        }
	      }
	      return result;
	    }

	    /**
	     * Gets the argument placeholder value for `func`.
	     *
	     * @private
	     * @param {Function} func The function to inspect.
	     * @returns {*} Returns the placeholder value.
	     */
	    function getHolder(func) {
	      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
	      return object.placeholder;
	    }

	    /**
	     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
	     * this function returns the custom method, otherwise it returns `baseIteratee`.
	     * If arguments are provided, the chosen function is invoked with them and
	     * its result is returned.
	     *
	     * @private
	     * @param {*} [value] The value to convert to an iteratee.
	     * @param {number} [arity] The arity of the created iteratee.
	     * @returns {Function} Returns the chosen function or its result.
	     */
	    function getIteratee() {
	      var result = lodash.iteratee || iteratee;
	      result = result === iteratee ? baseIteratee : result;
	      return arguments.length ? result(arguments[0], arguments[1]) : result;
	    }

	    /**
	     * Gets the data for `map`.
	     *
	     * @private
	     * @param {Object} map The map to query.
	     * @param {string} key The reference key.
	     * @returns {*} Returns the map data.
	     */
	    function getMapData(map, key) {
	      var data = map.__data__;
	      return isKeyable(key)
	        ? data[typeof key == 'string' ? 'string' : 'hash']
	        : data.map;
	    }

	    /**
	     * Gets the property names, values, and compare flags of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the match data of `object`.
	     */
	    function getMatchData(object) {
	      var result = keys(object),
	          length = result.length;

	      while (length--) {
	        var key = result[length],
	            value = object[key];

	        result[length] = [key, value, isStrictComparable(value)];
	      }
	      return result;
	    }

	    /**
	     * Gets the native function at `key` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the method to get.
	     * @returns {*} Returns the function if it's native, else `undefined`.
	     */
	    function getNative(object, key) {
	      var value = getValue(object, key);
	      return baseIsNative(value) ? value : undefined$1;
	    }

	    /**
	     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the raw `toStringTag`.
	     */
	    function getRawTag(value) {
	      var isOwn = hasOwnProperty.call(value, symToStringTag),
	          tag = value[symToStringTag];

	      try {
	        value[symToStringTag] = undefined$1;
	        var unmasked = true;
	      } catch (e) {}

	      var result = nativeObjectToString.call(value);
	      if (unmasked) {
	        if (isOwn) {
	          value[symToStringTag] = tag;
	        } else {
	          delete value[symToStringTag];
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of the own enumerable symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
	      if (object == null) {
	        return [];
	      }
	      object = Object(object);
	      return arrayFilter(nativeGetSymbols(object), function(symbol) {
	        return propertyIsEnumerable.call(object, symbol);
	      });
	    };

	    /**
	     * Creates an array of the own and inherited enumerable symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
	      var result = [];
	      while (object) {
	        arrayPush(result, getSymbols(object));
	        object = getPrototype(object);
	      }
	      return result;
	    };

	    /**
	     * Gets the `toStringTag` of `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */
	    var getTag = baseGetTag;

	    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
	    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	        (Map && getTag(new Map) != mapTag) ||
	        (Promise && getTag(Promise.resolve()) != promiseTag) ||
	        (Set && getTag(new Set) != setTag) ||
	        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	      getTag = function(value) {
	        var result = baseGetTag(value),
	            Ctor = result == objectTag ? value.constructor : undefined$1,
	            ctorString = Ctor ? toSource(Ctor) : '';

	        if (ctorString) {
	          switch (ctorString) {
	            case dataViewCtorString: return dataViewTag;
	            case mapCtorString: return mapTag;
	            case promiseCtorString: return promiseTag;
	            case setCtorString: return setTag;
	            case weakMapCtorString: return weakMapTag;
	          }
	        }
	        return result;
	      };
	    }

	    /**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} transforms The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */
	    function getView(start, end, transforms) {
	      var index = -1,
	          length = transforms.length;

	      while (++index < length) {
	        var data = transforms[index],
	            size = data.size;

	        switch (data.type) {
	          case 'drop':      start += size; break;
	          case 'dropRight': end -= size; break;
	          case 'take':      end = nativeMin(end, start + size); break;
	          case 'takeRight': start = nativeMax(start, end - size); break;
	        }
	      }
	      return { 'start': start, 'end': end };
	    }

	    /**
	     * Extracts wrapper details from the `source` body comment.
	     *
	     * @private
	     * @param {string} source The source to inspect.
	     * @returns {Array} Returns the wrapper details.
	     */
	    function getWrapDetails(source) {
	      var match = source.match(reWrapDetails);
	      return match ? match[1].split(reSplitDetails) : [];
	    }

	    /**
	     * Checks if `path` exists on `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @param {Function} hasFunc The function to check properties.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     */
	    function hasPath(object, path, hasFunc) {
	      path = castPath(path, object);

	      var index = -1,
	          length = path.length,
	          result = false;

	      while (++index < length) {
	        var key = toKey(path[index]);
	        if (!(result = object != null && hasFunc(object, key))) {
	          break;
	        }
	        object = object[key];
	      }
	      if (result || ++index != length) {
	        return result;
	      }
	      length = object == null ? 0 : object.length;
	      return !!length && isLength(length) && isIndex(key, length) &&
	        (isArray(object) || isArguments(object));
	    }

	    /**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */
	    function initCloneArray(array) {
	      var length = array.length,
	          result = new array.constructor(length);

	      // Add properties assigned by `RegExp#exec`.
	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	        result.index = array.index;
	        result.input = array.input;
	      }
	      return result;
	    }

	    /**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneObject(object) {
	      return (typeof object.constructor == 'function' && !isPrototype(object))
	        ? baseCreate(getPrototype(object))
	        : {};
	    }

	    /**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneByTag(object, tag, isDeep) {
	      var Ctor = object.constructor;
	      switch (tag) {
	        case arrayBufferTag:
	          return cloneArrayBuffer(object);

	        case boolTag:
	        case dateTag:
	          return new Ctor(+object);

	        case dataViewTag:
	          return cloneDataView(object, isDeep);

	        case float32Tag: case float64Tag:
	        case int8Tag: case int16Tag: case int32Tag:
	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	          return cloneTypedArray(object, isDeep);

	        case mapTag:
	          return new Ctor;

	        case numberTag:
	        case stringTag:
	          return new Ctor(object);

	        case regexpTag:
	          return cloneRegExp(object);

	        case setTag:
	          return new Ctor;

	        case symbolTag:
	          return cloneSymbol(object);
	      }
	    }

	    /**
	     * Inserts wrapper `details` in a comment at the top of the `source` body.
	     *
	     * @private
	     * @param {string} source The source to modify.
	     * @returns {Array} details The details to insert.
	     * @returns {string} Returns the modified source.
	     */
	    function insertWrapDetails(source, details) {
	      var length = details.length;
	      if (!length) {
	        return source;
	      }
	      var lastIndex = length - 1;
	      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
	      details = details.join(length > 2 ? ', ' : ' ');
	      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
	    }

	    /**
	     * Checks if `value` is a flattenable `arguments` object or array.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	     */
	    function isFlattenable(value) {
	      return isArray(value) || isArguments(value) ||
	        !!(spreadableSymbol && value && value[spreadableSymbol]);
	    }

	    /**
	     * Checks if `value` is a valid array-like index.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	     */
	    function isIndex(value, length) {
	      var type = typeof value;
	      length = length == null ? MAX_SAFE_INTEGER : length;

	      return !!length &&
	        (type == 'number' ||
	          (type != 'symbol' && reIsUint.test(value))) &&
	            (value > -1 && value % 1 == 0 && value < length);
	    }

	    /**
	     * Checks if the given arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	     *  else `false`.
	     */
	    function isIterateeCall(value, index, object) {
	      if (!isObject(object)) {
	        return false;
	      }
	      var type = typeof index;
	      if (type == 'number'
	            ? (isArrayLike(object) && isIndex(index, object.length))
	            : (type == 'string' && index in object)
	          ) {
	        return eq(object[index], value);
	      }
	      return false;
	    }

	    /**
	     * Checks if `value` is a property name and not a property path.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	     */
	    function isKey(value, object) {
	      if (isArray(value)) {
	        return false;
	      }
	      var type = typeof value;
	      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
	          value == null || isSymbol(value)) {
	        return true;
	      }
	      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	        (object != null && value in Object(object));
	    }

	    /**
	     * Checks if `value` is suitable for use as unique object key.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	     */
	    function isKeyable(value) {
	      var type = typeof value;
	      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	        ? (value !== '__proto__')
	        : (value === null);
	    }

	    /**
	     * Checks if `func` has a lazy counterpart.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
	     *  else `false`.
	     */
	    function isLaziable(func) {
	      var funcName = getFuncName(func),
	          other = lodash[funcName];

	      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
	        return false;
	      }
	      if (func === other) {
	        return true;
	      }
	      var data = getData(other);
	      return !!data && func === data[0];
	    }

	    /**
	     * Checks if `func` has its source masked.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	     */
	    function isMasked(func) {
	      return !!maskSrcKey && (maskSrcKey in func);
	    }

	    /**
	     * Checks if `func` is capable of being masked.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
	     */
	    var isMaskable = coreJsData ? isFunction : stubFalse;

	    /**
	     * Checks if `value` is likely a prototype object.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	     */
	    function isPrototype(value) {
	      var Ctor = value && value.constructor,
	          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	      return value === proto;
	    }

	    /**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */
	    function isStrictComparable(value) {
	      return value === value && !isObject(value);
	    }

	    /**
	     * A specialized version of `matchesProperty` for source values suitable
	     * for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function matchesStrictComparable(key, srcValue) {
	      return function(object) {
	        if (object == null) {
	          return false;
	        }
	        return object[key] === srcValue &&
	          (srcValue !== undefined$1 || (key in Object(object)));
	      };
	    }

	    /**
	     * A specialized version of `_.memoize` which clears the memoized function's
	     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
	     *
	     * @private
	     * @param {Function} func The function to have its output memoized.
	     * @returns {Function} Returns the new memoized function.
	     */
	    function memoizeCapped(func) {
	      var result = memoize(func, function(key) {
	        if (cache.size === MAX_MEMOIZE_SIZE) {
	          cache.clear();
	        }
	        return key;
	      });

	      var cache = result.cache;
	      return result;
	    }

	    /**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers used to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and
	     * `_.rearg` modify function arguments, making the order in which they are
	     * executed important, preventing the merging of metadata. However, we make
	     * an exception for a safe combined case where curried functions have `_.ary`
	     * and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */
	    function mergeData(data, source) {
	      var bitmask = data[1],
	          srcBitmask = source[1],
	          newBitmask = bitmask | srcBitmask,
	          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

	      var isCombo =
	        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
	        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
	        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

	      // Exit early if metadata can't be merged.
	      if (!(isCommon || isCombo)) {
	        return data;
	      }
	      // Use source `thisArg` if available.
	      if (srcBitmask & WRAP_BIND_FLAG) {
	        data[2] = source[2];
	        // Set when currying a bound function.
	        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
	      }
	      // Compose partial arguments.
	      var value = source[3];
	      if (value) {
	        var partials = data[3];
	        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
	      }
	      // Compose partial right arguments.
	      value = source[5];
	      if (value) {
	        partials = data[5];
	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
	      }
	      // Use source `argPos` if available.
	      value = source[7];
	      if (value) {
	        data[7] = value;
	      }
	      // Use source `ary` if it's smaller.
	      if (srcBitmask & WRAP_ARY_FLAG) {
	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	      }
	      // Use source `arity` if one is not provided.
	      if (data[9] == null) {
	        data[9] = source[9];
	      }
	      // Use source `func` and merge bitmasks.
	      data[0] = source[0];
	      data[1] = newBitmask;

	      return data;
	    }

	    /**
	     * This function is like
	     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	     * except that it includes inherited enumerable properties.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function nativeKeysIn(object) {
	      var result = [];
	      if (object != null) {
	        for (var key in Object(object)) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to a string using `Object.prototype.toString`.
	     *
	     * @private
	     * @param {*} value The value to convert.
	     * @returns {string} Returns the converted string.
	     */
	    function objectToString(value) {
	      return nativeObjectToString.call(value);
	    }

	    /**
	     * A specialized version of `baseRest` which transforms the rest array.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @param {Function} transform The rest array transform.
	     * @returns {Function} Returns the new function.
	     */
	    function overRest(func, start, transform) {
	      start = nativeMax(start === undefined$1 ? (func.length - 1) : start, 0);
	      return function() {
	        var args = arguments,
	            index = -1,
	            length = nativeMax(args.length - start, 0),
	            array = Array(length);

	        while (++index < length) {
	          array[index] = args[start + index];
	        }
	        index = -1;
	        var otherArgs = Array(start + 1);
	        while (++index < start) {
	          otherArgs[index] = args[index];
	        }
	        otherArgs[start] = transform(array);
	        return apply(func, this, otherArgs);
	      };
	    }

	    /**
	     * Gets the parent value at `path` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} path The path to get the parent value of.
	     * @returns {*} Returns the parent value.
	     */
	    function parent(object, path) {
	      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
	    }

	    /**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */
	    function reorder(array, indexes) {
	      var arrLength = array.length,
	          length = nativeMin(indexes.length, arrLength),
	          oldArray = copyArray(array);

	      while (length--) {
	        var index = indexes[length];
	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined$1;
	      }
	      return array;
	    }

	    /**
	     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the property to get.
	     * @returns {*} Returns the property value.
	     */
	    function safeGet(object, key) {
	      if (key === 'constructor' && typeof object[key] === 'function') {
	        return;
	      }

	      if (key == '__proto__') {
	        return;
	      }

	      return object[key];
	    }

	    /**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity
	     * function to avoid garbage collection pauses in V8. See
	     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var setData = shortOut(baseSetData);

	    /**
	     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @returns {number|Object} Returns the timer id or timeout object.
	     */
	    var setTimeout = ctxSetTimeout || function(func, wait) {
	      return root.setTimeout(func, wait);
	    };

	    /**
	     * Sets the `toString` method of `func` to return `string`.
	     *
	     * @private
	     * @param {Function} func The function to modify.
	     * @param {Function} string The `toString` result.
	     * @returns {Function} Returns `func`.
	     */
	    var setToString = shortOut(baseSetToString);

	    /**
	     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
	     * with wrapper details in a comment at the top of the source body.
	     *
	     * @private
	     * @param {Function} wrapper The function to modify.
	     * @param {Function} reference The reference function.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @returns {Function} Returns `wrapper`.
	     */
	    function setWrapToString(wrapper, reference, bitmask) {
	      var source = (reference + '');
	      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
	    }

	    /**
	     * Creates a function that'll short out and invoke `identity` instead
	     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
	     * milliseconds.
	     *
	     * @private
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new shortable function.
	     */
	    function shortOut(func) {
	      var count = 0,
	          lastCalled = 0;

	      return function() {
	        var stamp = nativeNow(),
	            remaining = HOT_SPAN - (stamp - lastCalled);

	        lastCalled = stamp;
	        if (remaining > 0) {
	          if (++count >= HOT_COUNT) {
	            return arguments[0];
	          }
	        } else {
	          count = 0;
	        }
	        return func.apply(undefined$1, arguments);
	      };
	    }

	    /**
	     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
	     *
	     * @private
	     * @param {Array} array The array to shuffle.
	     * @param {number} [size=array.length] The size of `array`.
	     * @returns {Array} Returns `array`.
	     */
	    function shuffleSelf(array, size) {
	      var index = -1,
	          length = array.length,
	          lastIndex = length - 1;

	      size = size === undefined$1 ? length : size;
	      while (++index < size) {
	        var rand = baseRandom(index, lastIndex),
	            value = array[rand];

	        array[rand] = array[index];
	        array[index] = value;
	      }
	      array.length = size;
	      return array;
	    }

	    /**
	     * Converts `string` to a property path array.
	     *
	     * @private
	     * @param {string} string The string to convert.
	     * @returns {Array} Returns the property path array.
	     */
	    var stringToPath = memoizeCapped(function(string) {
	      var result = [];
	      if (string.charCodeAt(0) === 46 /* . */) {
	        result.push('');
	      }
	      string.replace(rePropName, function(match, number, quote, subString) {
	        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
	      });
	      return result;
	    });

	    /**
	     * Converts `value` to a string key if it's not a string or symbol.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {string|symbol} Returns the key.
	     */
	    function toKey(value) {
	      if (typeof value == 'string' || isSymbol(value)) {
	        return value;
	      }
	      var result = (value + '');
	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	    }

	    /**
	     * Converts `func` to its source code.
	     *
	     * @private
	     * @param {Function} func The function to convert.
	     * @returns {string} Returns the source code.
	     */
	    function toSource(func) {
	      if (func != null) {
	        try {
	          return funcToString.call(func);
	        } catch (e) {}
	        try {
	          return (func + '');
	        } catch (e) {}
	      }
	      return '';
	    }

	    /**
	     * Updates wrapper `details` based on `bitmask` flags.
	     *
	     * @private
	     * @returns {Array} details The details to modify.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @returns {Array} Returns `details`.
	     */
	    function updateWrapDetails(details, bitmask) {
	      arrayEach(wrapFlags, function(pair) {
	        var value = '_.' + pair[0];
	        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
	          details.push(value);
	        }
	      });
	      return details.sort();
	    }

	    /**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */
	    function wrapperClone(wrapper) {
	      if (wrapper instanceof LazyWrapper) {
	        return wrapper.clone();
	      }
	      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
	      result.__actions__ = copyArray(wrapper.__actions__);
	      result.__index__  = wrapper.__index__;
	      result.__values__ = wrapper.__values__;
	      return result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `array` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=1] The length of each chunk
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the new array of chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */
	    function chunk(array, size, guard) {
	      if ((guard ? isIterateeCall(array, size, guard) : size === undefined$1)) {
	        size = 1;
	      } else {
	        size = nativeMax(toInteger(size), 0);
	      }
	      var length = array == null ? 0 : array.length;
	      if (!length || size < 1) {
	        return [];
	      }
	      var index = 0,
	          resIndex = 0,
	          result = Array(nativeCeil(length / size));

	      while (index < length) {
	        result[resIndex++] = baseSlice(array, index, (index += size));
	      }
	      return result;
	    }

	    /**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
	    function compact(array) {
	      var index = -1,
	          length = array == null ? 0 : array.length,
	          resIndex = 0,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (value) {
	          result[resIndex++] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates a new array concatenating `array` with any additional arrays
	     * and/or values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to concatenate.
	     * @param {...*} [values] The values to concatenate.
	     * @returns {Array} Returns the new concatenated array.
	     * @example
	     *
	     * var array = [1];
	     * var other = _.concat(array, 2, [3], [[4]]);
	     *
	     * console.log(other);
	     * // => [1, 2, 3, [4]]
	     *
	     * console.log(array);
	     * // => [1]
	     */
	    function concat() {
	      var length = arguments.length;
	      if (!length) {
	        return [];
	      }
	      var args = Array(length - 1),
	          array = arguments[0],
	          index = length;

	      while (index--) {
	        args[index - 1] = arguments[index];
	      }
	      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
	    }

	    /**
	     * Creates an array of `array` values not included in the other given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. The order and references of result values are
	     * determined by the first array.
	     *
	     * **Note:** Unlike `_.pullAll`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.without, _.xor
	     * @example
	     *
	     * _.difference([2, 1], [2, 3]);
	     * // => [1]
	     */
	    var difference = baseRest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
	        : [];
	    });

	    /**
	     * This method is like `_.difference` except that it accepts `iteratee` which
	     * is invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The order and references of result values are
	     * determined by the first array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var differenceBy = baseRest(function(array, values) {
	      var iteratee = last(values);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined$1;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
	        : [];
	    });

	    /**
	     * This method is like `_.difference` except that it accepts `comparator`
	     * which is invoked to compare elements of `array` to `values`. The order and
	     * references of result values are determined by the first array. The comparator
	     * is invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     *
	     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }]
	     */
	    var differenceWith = baseRest(function(array, values) {
	      var comparator = last(values);
	      if (isArrayLikeObject(comparator)) {
	        comparator = undefined$1;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined$1, comparator)
	        : [];
	    });

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function drop(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function dropRight(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.dropRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropRightWhile(users, ['active', false]);
	     * // => objects for ['barney']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropRightWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.dropWhile(users, function(o) { return !o.active; });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropWhile(users, ['active', false]);
	     * // => objects for ['pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true)
	        : [];
	    }

	    /**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.fill(array, 'a');
	     * console.log(array);
	     * // => ['a', 'a', 'a']
	     *
	     * _.fill(Array(3), 2);
	     * // => [2, 2, 2]
	     *
	     * _.fill([4, 6, 8, 10], '*', 1, 3);
	     * // => [4, '*', '*', 10]
	     */
	    function fill(array, value, start, end) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	        start = 0;
	        end = length;
	      }
	      return baseFill(array, value, start, end);
	    }

	    /**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(o) { return o.user == 'barney'; });
	     * // => 0
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findIndex(users, ['active', false]);
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findIndex(users, 'active');
	     * // => 2
	     */
	    function findIndex(array, predicate, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
	      if (index < 0) {
	        index = nativeMax(length + index, 0);
	      }
	      return baseFindIndex(array, getIteratee(predicate, 3), index);
	    }

	    /**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
	     * // => 2
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastIndex(users, ['active', false]);
	     * // => 2
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */
	    function findLastIndex(array, predicate, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = length - 1;
	      if (fromIndex !== undefined$1) {
	        index = toInteger(fromIndex);
	        index = fromIndex < 0
	          ? nativeMax(length + index, 0)
	          : nativeMin(index, length - 1);
	      }
	      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
	    }

	    /**
	     * Flattens `array` a single level deep.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, [3, [4]], 5]
	     */
	    function flatten(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseFlatten(array, 1) : [];
	    }

	    /**
	     * Recursively flattens `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, 3, 4, 5]
	     */
	    function flattenDeep(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseFlatten(array, INFINITY) : [];
	    }

	    /**
	     * Recursively flatten `array` up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * var array = [1, [2, [3, [4]], 5]];
	     *
	     * _.flattenDepth(array, 1);
	     * // => [1, 2, [3, [4]], 5]
	     *
	     * _.flattenDepth(array, 2);
	     * // => [1, 2, 3, [4], 5]
	     */
	    function flattenDepth(array, depth) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      depth = depth === undefined$1 ? 1 : toInteger(depth);
	      return baseFlatten(array, depth);
	    }

	    /**
	     * The inverse of `_.toPairs`; this method returns an object composed
	     * from key-value `pairs`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} pairs The key-value pairs.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.fromPairs([['a', 1], ['b', 2]]);
	     * // => { 'a': 1, 'b': 2 }
	     */
	    function fromPairs(pairs) {
	      var index = -1,
	          length = pairs == null ? 0 : pairs.length,
	          result = {};

	      while (++index < length) {
	        var pair = pairs[index];
	        result[pair[0]] = pair[1];
	      }
	      return result;
	    }

	    /**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias first
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.head([1, 2, 3]);
	     * // => 1
	     *
	     * _.head([]);
	     * // => undefined
	     */
	    function head(array) {
	      return (array && array.length) ? array[0] : undefined$1;
	    }

	    /**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it's used as the
	     * offset from the end of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // Search from the `fromIndex`.
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     */
	    function indexOf(array, value, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
	      if (index < 0) {
	        index = nativeMax(length + index, 0);
	      }
	      return baseIndexOf(array, value, index);
	    }

	    /**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */
	    function initial(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseSlice(array, 0, -1) : [];
	    }

	    /**
	     * Creates an array of unique values that are included in all given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. The order and references of result values are
	     * determined by the first array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersection([2, 1], [2, 3]);
	     * // => [2]
	     */
	    var intersection = baseRest(function(arrays) {
	      var mapped = arrayMap(arrays, castArrayLikeObject);
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped)
	        : [];
	    });

	    /**
	     * This method is like `_.intersection` except that it accepts `iteratee`
	     * which is invoked for each element of each `arrays` to generate the criterion
	     * by which they're compared. The order and references of result values are
	     * determined by the first array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [2.1]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }]
	     */
	    var intersectionBy = baseRest(function(arrays) {
	      var iteratee = last(arrays),
	          mapped = arrayMap(arrays, castArrayLikeObject);

	      if (iteratee === last(mapped)) {
	        iteratee = undefined$1;
	      } else {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, getIteratee(iteratee, 2))
	        : [];
	    });

	    /**
	     * This method is like `_.intersection` except that it accepts `comparator`
	     * which is invoked to compare elements of `arrays`. The order and references
	     * of result values are determined by the first array. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.intersectionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }]
	     */
	    var intersectionWith = baseRest(function(arrays) {
	      var comparator = last(arrays),
	          mapped = arrayMap(arrays, castArrayLikeObject);

	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
	      if (comparator) {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, undefined$1, comparator)
	        : [];
	    });

	    /**
	     * Converts all elements in `array` into a string separated by `separator`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to convert.
	     * @param {string} [separator=','] The element separator.
	     * @returns {string} Returns the joined string.
	     * @example
	     *
	     * _.join(['a', 'b', 'c'], '~');
	     * // => 'a~b~c'
	     */
	    function join(array, separator) {
	      return array == null ? '' : nativeJoin.call(array, separator);
	    }

	    /**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */
	    function last(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? array[length - 1] : undefined$1;
	    }

	    /**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // Search from the `fromIndex`.
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     */
	    function lastIndexOf(array, value, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = length;
	      if (fromIndex !== undefined$1) {
	        index = toInteger(fromIndex);
	        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
	      }
	      return value === value
	        ? strictLastIndexOf(array, value, index)
	        : baseFindIndex(array, baseIsNaN, index, true);
	    }

	    /**
	     * Gets the element at index `n` of `array`. If `n` is negative, the nth
	     * element from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.11.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=0] The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     *
	     * _.nth(array, 1);
	     * // => 'b'
	     *
	     * _.nth(array, -2);
	     * // => 'c';
	     */
	    function nth(array, n) {
	      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined$1;
	    }

	    /**
	     * Removes all given values from `array` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
	     * to remove elements from an array by predicate.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	     *
	     * _.pull(array, 'a', 'c');
	     * console.log(array);
	     * // => ['b', 'b']
	     */
	    var pull = baseRest(pullAll);

	    /**
	     * This method is like `_.pull` except that it accepts an array of values to remove.
	     *
	     * **Note:** Unlike `_.difference`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	     *
	     * _.pullAll(array, ['a', 'c']);
	     * console.log(array);
	     * // => ['b', 'b']
	     */
	    function pullAll(array, values) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values)
	        : array;
	    }

	    /**
	     * This method is like `_.pullAll` except that it accepts `iteratee` which is
	     * invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The iteratee is invoked with one argument: (value).
	     *
	     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
	     *
	     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
	     * console.log(array);
	     * // => [{ 'x': 2 }]
	     */
	    function pullAllBy(array, values, iteratee) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, getIteratee(iteratee, 2))
	        : array;
	    }

	    /**
	     * This method is like `_.pullAll` except that it accepts `comparator` which
	     * is invoked to compare elements of `array` to `values`. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
	     *
	     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
	     * console.log(array);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
	     */
	    function pullAllWith(array, values, comparator) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, undefined$1, comparator)
	        : array;
	    }

	    /**
	     * Removes elements from `array` corresponding to `indexes` and returns an
	     * array of removed elements.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     * var pulled = _.pullAt(array, [1, 3]);
	     *
	     * console.log(array);
	     * // => ['a', 'c']
	     *
	     * console.log(pulled);
	     * // => ['b', 'd']
	     */
	    var pullAt = flatRest(function(array, indexes) {
	      var length = array == null ? 0 : array.length,
	          result = baseAt(array, indexes);

	      basePullAt(array, arrayMap(indexes, function(index) {
	        return isIndex(index, length) ? +index : index;
	      }).sort(compareAscending));

	      return result;
	    });

	    /**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is invoked
	     * with three arguments: (value, index, array).
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
	     * to pull elements from an array by value.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */
	    function remove(array, predicate) {
	      var result = [];
	      if (!(array && array.length)) {
	        return result;
	      }
	      var index = -1,
	          indexes = [],
	          length = array.length;

	      predicate = getIteratee(predicate, 3);
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result.push(value);
	          indexes.push(index);
	        }
	      }
	      basePullAt(array, indexes);
	      return result;
	    }

	    /**
	     * Reverses `array` so that the first element becomes the last, the second
	     * element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates `array` and is based on
	     * [`Array#reverse`](https://mdn.io/Array/reverse).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.reverse(array);
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function reverse(array) {
	      return array == null ? array : nativeReverse.call(array);
	    }

	    /**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This method is used instead of
	     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
	     * returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function slice(array, start, end) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	        start = 0;
	        end = length;
	      }
	      else {
	        start = start == null ? 0 : toInteger(start);
	        end = end === undefined$1 ? length : toInteger(end);
	      }
	      return baseSlice(array, start, end);
	    }

	    /**
	     * Uses a binary search to determine the lowest index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     */
	    function sortedIndex(array, value) {
	      return baseSortedIndex(array, value);
	    }

	    /**
	     * This method is like `_.sortedIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
	     *
	     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
	     * // => 0
	     */
	    function sortedIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
	    }

	    /**
	     * This method is like `_.indexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
	     * // => 1
	     */
	    function sortedIndexOf(array, value) {
	      var length = array == null ? 0 : array.length;
	      if (length) {
	        var index = baseSortedIndex(array, value);
	        if (index < length && eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
	     * // => 4
	     */
	    function sortedLastIndex(array, value) {
	      return baseSortedIndex(array, value, true);
	    }

	    /**
	     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
	     *
	     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
	     * // => 1
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
	     * // => 1
	     */
	    function sortedLastIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
	    }

	    /**
	     * This method is like `_.lastIndexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
	     * // => 3
	     */
	    function sortedLastIndexOf(array, value) {
	      var length = array == null ? 0 : array.length;
	      if (length) {
	        var index = baseSortedIndex(array, value, true) - 1;
	        if (eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * This method is like `_.uniq` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniq([1, 1, 2]);
	     * // => [1, 2]
	     */
	    function sortedUniq(array) {
	      return (array && array.length)
	        ? baseSortedUniq(array)
	        : [];
	    }

	    /**
	     * This method is like `_.uniqBy` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
	     * // => [1.1, 2.3]
	     */
	    function sortedUniqBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSortedUniq(array, getIteratee(iteratee, 2))
	        : [];
	    }

	    /**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.tail([1, 2, 3]);
	     * // => [2, 3]
	     */
	    function tail(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseSlice(array, 1, length) : [];
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */
	    function take(array, n, guard) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */
	    function takeRight(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.takeRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeRightWhile(users, ['active', false]);
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeRightWhile(users, 'active');
	     * // => []
	     */
	    function takeRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), false, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.takeWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeWhile(users, ['active', false]);
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeWhile(users, 'active');
	     * // => []
	     */
	    function takeWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3))
	        : [];
	    }

	    /**
	     * Creates an array of unique values, in order, from all given arrays using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([2], [1, 2]);
	     * // => [2, 1]
	     */
	    var union = baseRest(function(arrays) {
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
	    });

	    /**
	     * This method is like `_.union` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which uniqueness is computed. Result values are chosen from the first
	     * array in which the value occurs. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    var unionBy = baseRest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined$1;
	      }
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
	    });

	    /**
	     * This method is like `_.union` except that it accepts `comparator` which
	     * is invoked to compare elements of `arrays`. Result values are chosen from
	     * the first array in which the value occurs. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.unionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var unionWith = baseRest(function(arrays) {
	      var comparator = last(arrays);
	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
	    });

	    /**
	     * Creates a duplicate-free version of an array, using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons, in which only the first occurrence of each element
	     * is kept. The order of result values is determined by the order they occur
	     * in the array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniq([2, 1, 2]);
	     * // => [2, 1]
	     */
	    function uniq(array) {
	      return (array && array.length) ? baseUniq(array) : [];
	    }

	    /**
	     * This method is like `_.uniq` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * uniqueness is computed. The order of result values is determined by the
	     * order they occur in the array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    function uniqBy(array, iteratee) {
	      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
	    }

	    /**
	     * This method is like `_.uniq` except that it accepts `comparator` which
	     * is invoked to compare elements of `array`. The order of result values is
	     * determined by the order they occur in the array.The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.uniqWith(objects, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
	     */
	    function uniqWith(array, comparator) {
	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
	      return (array && array.length) ? baseUniq(array, undefined$1, comparator) : [];
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-zip
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.2.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
	     * // => [['a', 1, true], ['b', 2, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['a', 'b'], [1, 2], [true, false]]
	     */
	    function unzip(array) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var length = 0;
	      array = arrayFilter(array, function(group) {
	        if (isArrayLikeObject(group)) {
	          length = nativeMax(group.length, length);
	          return true;
	        }
	      });
	      return baseTimes(length, function(index) {
	        return arrayMap(array, baseProperty(index));
	      });
	    }

	    /**
	     * This method is like `_.unzip` except that it accepts `iteratee` to specify
	     * how regrouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  regrouped values.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	     * // => [[1, 10, 100], [2, 20, 200]]
	     *
	     * _.unzipWith(zipped, _.add);
	     * // => [3, 30, 300]
	     */
	    function unzipWith(array, iteratee) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var result = unzip(array);
	      if (iteratee == null) {
	        return result;
	      }
	      return arrayMap(result, function(group) {
	        return apply(iteratee, undefined$1, group);
	      });
	    }

	    /**
	     * Creates an array excluding all given values using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.pull`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.difference, _.xor
	     * @example
	     *
	     * _.without([2, 1, 2, 3], 1, 2);
	     * // => [3]
	     */
	    var without = baseRest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, values)
	        : [];
	    });

	    /**
	     * Creates an array of unique values that is the
	     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	     * of the given arrays. The order of result values is determined by the order
	     * they occur in the arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.difference, _.without
	     * @example
	     *
	     * _.xor([2, 1], [2, 3]);
	     * // => [1, 3]
	     */
	    var xor = baseRest(function(arrays) {
	      return baseXor(arrayFilter(arrays, isArrayLikeObject));
	    });

	    /**
	     * This method is like `_.xor` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which by which they're compared. The order of result values is determined
	     * by the order they occur in the arrays. The iteratee is invoked with one
	     * argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [1.2, 3.4]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var xorBy = baseRest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined$1;
	      }
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
	    });

	    /**
	     * This method is like `_.xor` except that it accepts `comparator` which is
	     * invoked to compare elements of `arrays`. The order of result values is
	     * determined by the order they occur in the arrays. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.xorWith(objects, others, _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var xorWith = baseRest(function(arrays) {
	      var comparator = last(arrays);
	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
	    });

	    /**
	     * Creates an array of grouped elements, the first of which contains the
	     * first elements of the given arrays, the second of which contains the
	     * second elements of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['a', 'b'], [1, 2], [true, false]);
	     * // => [['a', 1, true], ['b', 2, false]]
	     */
	    var zip = baseRest(unzip);

	    /**
	     * This method is like `_.fromPairs` except that it accepts two arrays,
	     * one of property identifiers and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.4.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject(['a', 'b'], [1, 2]);
	     * // => { 'a': 1, 'b': 2 }
	     */
	    function zipObject(props, values) {
	      return baseZipObject(props || [], values || [], assignValue);
	    }

	    /**
	     * This method is like `_.zipObject` except that it supports property paths.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
	     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
	     */
	    function zipObjectDeep(props, values) {
	      return baseZipObject(props || [], values || [], baseSet);
	    }

	    /**
	     * This method is like `_.zip` except that it accepts `iteratee` to specify
	     * how grouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  grouped values.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
	     *   return a + b + c;
	     * });
	     * // => [111, 222]
	     */
	    var zipWith = baseRest(function(arrays) {
	      var length = arrays.length,
	          iteratee = length > 1 ? arrays[length - 1] : undefined$1;

	      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined$1;
	      return unzipWith(arrays, iteratee);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
	     * chain sequences enabled. The result of such sequences must be unwrapped
	     * with `_#value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Seq
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _
	     *   .chain(users)
	     *   .sortBy('age')
	     *   .map(function(o) {
	     *     return o.user + ' is ' + o.age;
	     *   })
	     *   .head()
	     *   .value();
	     * // => 'pebbles is 1'
	     */
	    function chain(value) {
	      var result = lodash(value);
	      result.__chain__ = true;
	      return result;
	    }

	    /**
	     * This method invokes `interceptor` and returns `value`. The interceptor
	     * is invoked with one argument; (value). The purpose of this method is to
	     * "tap into" a method chain sequence in order to modify intermediate results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    // Mutate input array.
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */
	    function tap(value, interceptor) {
	      interceptor(value);
	      return value;
	    }

	    /**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     * The purpose of this method is to "pass thru" values replacing intermediate
	     * results in a method chain sequence.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _('  abc  ')
	     *  .chain()
	     *  .trim()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => ['abc']
	     */
	    function thru(value, interceptor) {
	      return interceptor(value);
	    }

	    /**
	     * This method is the wrapper version of `_.at`.
	     *
	     * @name at
	     * @memberOf _
	     * @since 1.0.0
	     * @category Seq
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _(object).at(['a[0].b.c', 'a[1]']).value();
	     * // => [3, 4]
	     */
	    var wrapperAt = flatRest(function(paths) {
	      var length = paths.length,
	          start = length ? paths[0] : 0,
	          value = this.__wrapped__,
	          interceptor = function(object) { return baseAt(object, paths); };

	      if (length > 1 || this.__actions__.length ||
	          !(value instanceof LazyWrapper) || !isIndex(start)) {
	        return this.thru(interceptor);
	      }
	      value = value.slice(start, +start + (length ? 1 : 0));
	      value.__actions__.push({
	        'func': thru,
	        'args': [interceptor],
	        'thisArg': undefined$1
	      });
	      return new LodashWrapper(value, this.__chain__).thru(function(array) {
	        if (length && !array.length) {
	          array.push(undefined$1);
	        }
	        return array;
	      });
	    });

	    /**
	     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
	     *
	     * @name chain
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // A sequence without explicit chaining.
	     * _(users).head();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // A sequence with explicit chaining.
	     * _(users)
	     *   .chain()
	     *   .head()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */
	    function wrapperChain() {
	      return chain(this);
	    }

	    /**
	     * Executes the chain sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapped = wrapped.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapped.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */
	    function wrapperCommit() {
	      return new LodashWrapper(this.value(), this.__chain__);
	    }

	    /**
	     * Gets the next value on a wrapped object following the
	     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
	     *
	     * @name next
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the next iterator value.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 1 }
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 2 }
	     *
	     * wrapped.next();
	     * // => { 'done': true, 'value': undefined }
	     */
	    function wrapperNext() {
	      if (this.__values__ === undefined$1) {
	        this.__values__ = toArray(this.value());
	      }
	      var done = this.__index__ >= this.__values__.length,
	          value = done ? undefined$1 : this.__values__[this.__index__++];

	      return { 'done': done, 'value': value };
	    }

	    /**
	     * Enables the wrapper to be iterable.
	     *
	     * @name Symbol.iterator
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the wrapper object.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped[Symbol.iterator]() === wrapped;
	     * // => true
	     *
	     * Array.from(wrapped);
	     * // => [1, 2]
	     */
	    function wrapperToIterator() {
	      return this;
	    }

	    /**
	     * Creates a clone of the chain sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @param {*} value The value to plant.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2]).map(square);
	     * var other = wrapped.plant([3, 4]);
	     *
	     * other.value();
	     * // => [9, 16]
	     *
	     * wrapped.value();
	     * // => [1, 4]
	     */
	    function wrapperPlant(value) {
	      var result,
	          parent = this;

	      while (parent instanceof baseLodash) {
	        var clone = wrapperClone(parent);
	        clone.__index__ = 0;
	        clone.__values__ = undefined$1;
	        if (result) {
	          previous.__wrapped__ = clone;
	        } else {
	          result = clone;
	        }
	        var previous = clone;
	        parent = parent.__wrapped__;
	      }
	      previous.__wrapped__ = value;
	      return result;
	    }

	    /**
	     * This method is the wrapper version of `_.reverse`.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function wrapperReverse() {
	      var value = this.__wrapped__;
	      if (value instanceof LazyWrapper) {
	        var wrapped = value;
	        if (this.__actions__.length) {
	          wrapped = new LazyWrapper(this);
	        }
	        wrapped = wrapped.reverse();
	        wrapped.__actions__.push({
	          'func': thru,
	          'args': [reverse],
	          'thisArg': undefined$1
	        });
	        return new LodashWrapper(wrapped, this.__chain__);
	      }
	      return this.thru(reverse);
	    }

	    /**
	     * Executes the chain sequence to resolve the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @since 0.1.0
	     * @alias toJSON, valueOf
	     * @category Seq
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */
	    function wrapperValue() {
	      return baseWrapperValue(this.__wrapped__, this.__actions__);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the number of times the key was returned by `iteratee`. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': 1, '6': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */
	    var countBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        ++result[key];
	      } else {
	        baseAssignValue(result, key, 1);
	      }
	    });

	    /**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * Iteration is stopped once `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * **Note:** This method returns `true` for
	     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
	     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
	     * elements of empty collections.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.every(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.every(users, 'active');
	     * // => false
	     */
	    function every(collection, predicate, guard) {
	      var func = isArray(collection) ? arrayEvery : baseEvery;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined$1;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * **Note:** Unlike `_.remove`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.reject
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, { 'age': 36, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.filter(users, 'active');
	     * // => objects for ['barney']
	     *
	     * // Combining several predicates using `_.overEvery` or `_.overSome`.
	     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
	     * // => objects for ['fred', 'barney']
	     */
	    function filter(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.find(users, function(o) { return o.age < 40; });
	     * // => object for 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.find(users, { 'age': 1, 'active': true });
	     * // => object for 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.find(users, ['active', false]);
	     * // => object for 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.find(users, 'active');
	     * // => object for 'barney'
	     */
	    var find = createFind(findIndex);

	    /**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=collection.length-1] The index to search from.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */
	    var findLast = createFind(findLastIndex);

	    /**
	     * Creates a flattened array of values by running each element in `collection`
	     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
	     * with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [n, n];
	     * }
	     *
	     * _.flatMap([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMap(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), 1);
	    }

	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDeep([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMapDeep(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), INFINITY);
	    }

	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDepth([1, 2], duplicate, 2);
	     * // => [[1, 1], [2, 2]]
	     */
	    function flatMapDepth(collection, iteratee, depth) {
	      depth = depth === undefined$1 ? 1 : toInteger(depth);
	      return baseFlatten(map(collection, iteratee), depth);
	    }

	    /**
	     * Iterates over elements of `collection` and invokes `iteratee` for each element.
	     * The iteratee is invoked with three arguments: (value, index|key, collection).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a "length"
	     * property are iterated like arrays. To avoid this behavior use `_.forIn`
	     * or `_.forOwn` for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias each
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEachRight
	     * @example
	     *
	     * _.forEach([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `1` then `2`.
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forEach(collection, iteratee) {
	      var func = isArray(collection) ? arrayEach : baseEach;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEach
	     * @example
	     *
	     * _.forEachRight([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `2` then `1`.
	     */
	    function forEachRight(collection, iteratee) {
	      var func = isArray(collection) ? arrayEachRight : baseEachRight;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The order of grouped values
	     * is determined by the order they occur in `collection`. The corresponding
	     * value of each key is an array of elements responsible for generating the
	     * key. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': [4.2], '6': [6.1, 6.3] }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */
	    var groupBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        result[key].push(value);
	      } else {
	        baseAssignValue(result, key, [value]);
	      }
	    });

	    /**
	     * Checks if `value` is in `collection`. If `collection` is a string, it's
	     * checked for a substring of `value`, otherwise
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * is used for equality comparisons. If `fromIndex` is negative, it's used as
	     * the offset from the end of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {boolean} Returns `true` if `value` is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'a': 1, 'b': 2 }, 1);
	     * // => true
	     *
	     * _.includes('abcd', 'bc');
	     * // => true
	     */
	    function includes(collection, value, fromIndex, guard) {
	      collection = isArrayLike(collection) ? collection : values(collection);
	      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

	      var length = collection.length;
	      if (fromIndex < 0) {
	        fromIndex = nativeMax(length + fromIndex, 0);
	      }
	      return isString(collection)
	        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
	        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
	    }

	    /**
	     * Invokes the method at `path` of each element in `collection`, returning
	     * an array of the results of each invoked method. Any additional arguments
	     * are provided to each invoked method. If `path` is a function, it's invoked
	     * for, and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|string} path The path of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke each method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invokeMap([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */
	    var invokeMap = baseRest(function(collection, path, args) {
	      var index = -1,
	          isFunc = typeof path == 'function',
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value) {
	        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
	      });
	      return result;
	    });

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the last element responsible for generating the key. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var array = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.keyBy(array, function(o) {
	     *   return String.fromCharCode(o.code);
	     * });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.keyBy(array, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     */
	    var keyBy = createAggregator(function(result, value, key) {
	      baseAssignValue(result, key, value);
	    });

	    /**
	     * Creates an array of values by running each element in `collection` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
	     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
	     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
	     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * _.map([4, 8], square);
	     * // => [16, 64]
	     *
	     * _.map({ 'a': 4, 'b': 8 }, square);
	     * // => [16, 64] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */
	    function map(collection, iteratee) {
	      var func = isArray(collection) ? arrayMap : baseMap;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.sortBy` except that it allows specifying the sort
	     * orders of the iteratees to sort by. If `orders` is unspecified, all values
	     * are sorted in ascending order. Otherwise, specify an order of "desc" for
	     * descending or "asc" for ascending sort order of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @param {string[]} [orders] The sort orders of `iteratees`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 34 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * // Sort by `user` in ascending order and by `age` in descending order.
	     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     */
	    function orderBy(collection, iteratees, orders, guard) {
	      if (collection == null) {
	        return [];
	      }
	      if (!isArray(iteratees)) {
	        iteratees = iteratees == null ? [] : [iteratees];
	      }
	      orders = guard ? undefined$1 : orders;
	      if (!isArray(orders)) {
	        orders = orders == null ? [] : [orders];
	      }
	      return baseOrderBy(collection, iteratees, orders);
	    }

	    /**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, the second of which
	     * contains elements `predicate` returns falsey for. The predicate is
	     * invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * _.partition(users, function(o) { return o.active; });
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.partition(users, { 'age': 1, 'active': false });
	     * // => objects for [['pebbles'], ['barney', 'fred']]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.partition(users, ['active', false]);
	     * // => objects for [['barney', 'pebbles'], ['fred']]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.partition(users, 'active');
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     */
	    var partition = createAggregator(function(result, value, key) {
	      result[key ? 0 : 1].push(value);
	    }, function() { return [[], []]; });

	    /**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` thru `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not given, the first element of `collection` is used as the initial
	     * value. The iteratee is invoked with four arguments:
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
	     * and `sortBy`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduceRight
	     * @example
	     *
	     * _.reduce([1, 2], function(sum, n) {
	     *   return sum + n;
	     * }, 0);
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     *   return result;
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
	     */
	    function reduce(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduce : baseReduce,
	          initAccum = arguments.length < 3;

	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
	    }

	    /**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduce
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
	    function reduceRight(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduceRight : baseReduce,
	          initAccum = arguments.length < 3;

	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
	    }

	    /**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.filter
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * _.reject(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.reject(users, { 'age': 40, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.reject(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.reject(users, 'active');
	     * // => objects for ['barney']
	     */
	    function reject(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      return func(collection, negate(getIteratee(predicate, 3)));
	    }

	    /**
	     * Gets a random element from `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     */
	    function sample(collection) {
	      var func = isArray(collection) ? arraySample : baseSample;
	      return func(collection);
	    }

	    /**
	     * Gets `n` random elements at unique keys from `collection` up to the
	     * size of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} [n=1] The number of elements to sample.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the random elements.
	     * @example
	     *
	     * _.sampleSize([1, 2, 3], 2);
	     * // => [3, 1]
	     *
	     * _.sampleSize([1, 2, 3], 4);
	     * // => [2, 3, 1]
	     */
	    function sampleSize(collection, n, guard) {
	      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined$1)) {
	        n = 1;
	      } else {
	        n = toInteger(n);
	      }
	      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
	      return func(collection, n);
	    }

	    /**
	     * Creates an array of shuffled values, using a version of the
	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */
	    function shuffle(collection) {
	      var func = isArray(collection) ? arrayShuffle : baseShuffle;
	      return func(collection);
	    }

	    /**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable string keyed properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @returns {number} Returns the collection size.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
	    function size(collection) {
	      if (collection == null) {
	        return 0;
	      }
	      if (isArrayLike(collection)) {
	        return isString(collection) ? stringSize(collection) : collection.length;
	      }
	      var tag = getTag(collection);
	      if (tag == mapTag || tag == setTag) {
	        return collection.size;
	      }
	      return baseKeys(collection).length;
	    }

	    /**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * Iteration is stopped once `predicate` returns truthy. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.some(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.some(users, 'active');
	     * // => true
	     */
	    function some(collection, predicate, guard) {
	      var func = isArray(collection) ? arraySome : baseSome;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined$1;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection thru each iteratee. This method
	     * performs a stable sort, that is, it preserves the original sort order of
	     * equal elements. The iteratees are invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 30 },
	     *   { 'user': 'barney', 'age': 34 }
	     * ];
	     *
	     * _.sortBy(users, [function(o) { return o.user; }]);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
	     *
	     * _.sortBy(users, ['user', 'age']);
	     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
	     */
	    var sortBy = baseRest(function(collection, iteratees) {
	      if (collection == null) {
	        return [];
	      }
	      var length = iteratees.length;
	      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
	        iteratees = [];
	      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
	        iteratees = [iteratees[0]];
	      }
	      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Gets the timestamp of the number of milliseconds that have elapsed since
	     * the Unix epoch (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Date
	     * @returns {number} Returns the timestamp.
	     * @example
	     *
	     * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
	     * // => Logs the number of milliseconds it took for the deferred invocation.
	     */
	    var now = ctxNow || function() {
	      return root.Date.now();
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it's called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => Logs 'done saving!' after the two async saves have completed.
	     */
	    function after(n, func) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    }

	    /**
	     * Creates a function that invokes `func`, with up to `n` arguments,
	     * ignoring any additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */
	    function ary(func, n, guard) {
	      n = guard ? undefined$1 : n;
	      n = (func && n == null) ? func.length : n;
	      return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
	    }

	    /**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it's called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery(element).on('click', _.before(5, addContactToList));
	     * // => Allows adding up to 4 contacts to the list.
	     */
	    function before(n, func) {
	      var result;
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n > 0) {
	          result = func.apply(this, arguments);
	        }
	        if (n <= 1) {
	          func = undefined$1;
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and `partials` prepended to the arguments it receives.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * function greet(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * }
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */
	    var bind = baseRest(function(func, thisArg, partials) {
	      var bitmask = WRAP_BIND_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getHolder(bind));
	        bitmask |= WRAP_PARTIAL_FLAG;
	      }
	      return createWrap(func, bitmask, thisArg, partials, holders);
	    });

	    /**
	     * Creates a function that invokes the method at `object[key]` with `partials`
	     * prepended to the arguments it receives.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist. See
	     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Function
	     * @param {Object} object The object to invoke the method on.
	     * @param {string} key The key of the method.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */
	    var bindKey = baseRest(function(object, key, partials) {
	      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getHolder(bindKey));
	        bitmask |= WRAP_PARTIAL_FLAG;
	      }
	      return createWrap(key, bitmask, object, partials, holders);
	    });

	    /**
	     * Creates a function that accepts arguments of `func` and either invokes
	     * `func` returning its result, if at least `arity` number of arguments have
	     * been provided, or returns a function that accepts the remaining `func`
	     * arguments, and so on. The arity of `func` may be specified if `func.length`
	     * is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */
	    function curry(func, arity, guard) {
	      arity = guard ? undefined$1 : arity;
	      var result = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
	      result.placeholder = curry.placeholder;
	      return result;
	    }

	    /**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */
	    function curryRight(func, arity, guard) {
	      arity = guard ? undefined$1 : arity;
	      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
	      result.placeholder = curryRight.placeholder;
	      return result;
	    }

	    /**
	     * Creates a debounced function that delays invoking `func` until after `wait`
	     * milliseconds have elapsed since the last time the debounced function was
	     * invoked. The debounced function comes with a `cancel` method to cancel
	     * delayed `func` invocations and a `flush` method to immediately invoke them.
	     * Provide `options` to indicate whether `func` should be invoked on the
	     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	     * with the last arguments provided to the debounced function. Subsequent
	     * calls to the debounced function return the result of the last `func`
	     * invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the debounced function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=false]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {number} [options.maxWait]
	     *  The maximum time `func` is allowed to be delayed before it's invoked.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // Avoid costly calculations while the window size is in flux.
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	     * jQuery(element).on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', debounced);
	     *
	     * // Cancel the trailing debounced invocation.
	     * jQuery(window).on('popstate', debounced.cancel);
	     */
	    function debounce(func, wait, options) {
	      var lastArgs,
	          lastThis,
	          maxWait,
	          result,
	          timerId,
	          lastCallTime,
	          lastInvokeTime = 0,
	          leading = false,
	          maxing = false,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      wait = toNumber(wait) || 0;
	      if (isObject(options)) {
	        leading = !!options.leading;
	        maxing = 'maxWait' in options;
	        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }

	      function invokeFunc(time) {
	        var args = lastArgs,
	            thisArg = lastThis;

	        lastArgs = lastThis = undefined$1;
	        lastInvokeTime = time;
	        result = func.apply(thisArg, args);
	        return result;
	      }

	      function leadingEdge(time) {
	        // Reset any `maxWait` timer.
	        lastInvokeTime = time;
	        // Start the timer for the trailing edge.
	        timerId = setTimeout(timerExpired, wait);
	        // Invoke the leading edge.
	        return leading ? invokeFunc(time) : result;
	      }

	      function remainingWait(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime,
	            timeWaiting = wait - timeSinceLastCall;

	        return maxing
	          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
	          : timeWaiting;
	      }

	      function shouldInvoke(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime;

	        // Either this is the first call, activity has stopped and we're at the
	        // trailing edge, the system time has gone backwards and we're treating
	        // it as the trailing edge, or we've hit the `maxWait` limit.
	        return (lastCallTime === undefined$1 || (timeSinceLastCall >= wait) ||
	          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
	      }

	      function timerExpired() {
	        var time = now();
	        if (shouldInvoke(time)) {
	          return trailingEdge(time);
	        }
	        // Restart the timer.
	        timerId = setTimeout(timerExpired, remainingWait(time));
	      }

	      function trailingEdge(time) {
	        timerId = undefined$1;

	        // Only invoke if we have `lastArgs` which means `func` has been
	        // debounced at least once.
	        if (trailing && lastArgs) {
	          return invokeFunc(time);
	        }
	        lastArgs = lastThis = undefined$1;
	        return result;
	      }

	      function cancel() {
	        if (timerId !== undefined$1) {
	          clearTimeout(timerId);
	        }
	        lastInvokeTime = 0;
	        lastArgs = lastCallTime = lastThis = timerId = undefined$1;
	      }

	      function flush() {
	        return timerId === undefined$1 ? result : trailingEdge(now());
	      }

	      function debounced() {
	        var time = now(),
	            isInvoking = shouldInvoke(time);

	        lastArgs = arguments;
	        lastThis = this;
	        lastCallTime = time;

	        if (isInvoking) {
	          if (timerId === undefined$1) {
	            return leadingEdge(lastCallTime);
	          }
	          if (maxing) {
	            // Handle invocations in a tight loop.
	            clearTimeout(timerId);
	            timerId = setTimeout(timerExpired, wait);
	            return invokeFunc(lastCallTime);
	          }
	        }
	        if (timerId === undefined$1) {
	          timerId = setTimeout(timerExpired, wait);
	        }
	        return result;
	      }
	      debounced.cancel = cancel;
	      debounced.flush = flush;
	      return debounced;
	    }

	    /**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
	     * // => Logs 'deferred' after one millisecond.
	     */
	    var defer = baseRest(function(func, args) {
	      return baseDelay(func, 1, args);
	    });

	    /**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
	     * // => Logs 'later' after one second.
	     */
	    var delay = baseRest(function(func, wait, args) {
	      return baseDelay(func, toNumber(wait) || 0, args);
	    });

	    /**
	     * Creates a function that invokes `func` with arguments reversed.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to flip arguments for.
	     * @returns {Function} Returns the new flipped function.
	     * @example
	     *
	     * var flipped = _.flip(function() {
	     *   return _.toArray(arguments);
	     * });
	     *
	     * flipped('a', 'b', 'c', 'd');
	     * // => ['d', 'c', 'b', 'a']
	     */
	    function flip(func) {
	      return createWrap(func, WRAP_FLIP_FLAG);
	    }

	    /**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided, it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is used as the map cache key. The `func`
	     * is invoked with the `this` binding of the memoized function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the
	     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoized function.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     * var other = { 'c': 3, 'd': 4 };
	     *
	     * var values = _.memoize(_.values);
	     * values(object);
	     * // => [1, 2]
	     *
	     * values(other);
	     * // => [3, 4]
	     *
	     * object.a = 2;
	     * values(object);
	     * // => [1, 2]
	     *
	     * // Modify the result cache.
	     * values.cache.set(object, ['a', 'b']);
	     * values(object);
	     * // => ['a', 'b']
	     *
	     * // Replace `_.memoize.Cache`.
	     * _.memoize.Cache = WeakMap;
	     */
	    function memoize(func, resolver) {
	      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var memoized = function() {
	        var args = arguments,
	            key = resolver ? resolver.apply(this, args) : args[0],
	            cache = memoized.cache;

	        if (cache.has(key)) {
	          return cache.get(key);
	        }
	        var result = func.apply(this, args);
	        memoized.cache = cache.set(key, result) || cache;
	        return result;
	      };
	      memoized.cache = new (memoize.Cache || MapCache);
	      return memoized;
	    }

	    // Expose `MapCache`.
	    memoize.Cache = MapCache;

	    /**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new negated function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */
	    function negate(predicate) {
	      if (typeof predicate != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        var args = arguments;
	        switch (args.length) {
	          case 0: return !predicate.call(this);
	          case 1: return !predicate.call(this, args[0]);
	          case 2: return !predicate.call(this, args[0], args[1]);
	          case 3: return !predicate.call(this, args[0], args[1], args[2]);
	        }
	        return !predicate.apply(this, args);
	      };
	    }

	    /**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first invocation. The `func` is
	     * invoked with the `this` binding and arguments of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // => `createApplication` is invoked once
	     */
	    function once(func) {
	      return before(2, func);
	    }

	    /**
	     * Creates a function that invokes `func` with its arguments transformed.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to wrap.
	     * @param {...(Function|Function[])} [transforms=[_.identity]]
	     *  The argument transforms.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function doubled(n) {
	     *   return n * 2;
	     * }
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var func = _.overArgs(function(x, y) {
	     *   return [x, y];
	     * }, [square, doubled]);
	     *
	     * func(9, 3);
	     * // => [81, 6]
	     *
	     * func(10, 5);
	     * // => [100, 10]
	     */
	    var overArgs = castRest(function(func, transforms) {
	      transforms = (transforms.length == 1 && isArray(transforms[0]))
	        ? arrayMap(transforms[0], baseUnary(getIteratee()))
	        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

	      var funcsLength = transforms.length;
	      return baseRest(function(args) {
	        var index = -1,
	            length = nativeMin(args.length, funcsLength);

	        while (++index < length) {
	          args[index] = transforms[index].call(this, args[index]);
	        }
	        return apply(func, this, args);
	      });
	    });

	    /**
	     * Creates a function that invokes `func` with `partials` prepended to the
	     * arguments it receives. This method is like `_.bind` except it does **not**
	     * alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.2.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * function greet(greeting, name) {
	     *   return greeting + ' ' + name;
	     * }
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // Partially applied with placeholders.
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */
	    var partial = baseRest(function(func, partials) {
	      var holders = replaceHolders(partials, getHolder(partial));
	      return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
	    });

	    /**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to the arguments it receives.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * function greet(greeting, name) {
	     *   return greeting + ' ' + name;
	     * }
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // Partially applied with placeholders.
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */
	    var partialRight = baseRest(function(func, partials) {
	      var holders = replaceHolders(partials, getHolder(partialRight));
	      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
	    });

	    /**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified `indexes` where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, [2, 0, 1]);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     */
	    var rearg = flatRest(function(func, indexes) {
	      return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and arguments from `start` and beyond provided as
	     * an array.
	     *
	     * **Note:** This method is based on the
	     * [rest parameter](https://mdn.io/rest_parameters).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.rest(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
	     *
	     * say('hello', 'fred', 'barney', 'pebbles');
	     * // => 'hello fred, barney, & pebbles'
	     */
	    function rest(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = start === undefined$1 ? start : toInteger(start);
	      return baseRest(func, start);
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * create function and an array of arguments much like
	     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
	     *
	     * **Note:** This method is based on the
	     * [spread operator](https://mdn.io/spread_operator).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @param {number} [start=0] The start position of the spread.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * say(['fred', 'hello']);
	     * // => 'fred says hello'
	     *
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */
	    function spread(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = start == null ? 0 : nativeMax(toInteger(start), 0);
	      return baseRest(function(args) {
	        var array = args[start],
	            otherArgs = castSlice(args, 0, start);

	        if (array) {
	          arrayPush(otherArgs, array);
	        }
	        return apply(func, this, otherArgs);
	      });
	    }

	    /**
	     * Creates a throttled function that only invokes `func` at most once per
	     * every `wait` milliseconds. The throttled function comes with a `cancel`
	     * method to cancel delayed `func` invocations and a `flush` method to
	     * immediately invoke them. Provide `options` to indicate whether `func`
	     * should be invoked on the leading and/or trailing edge of the `wait`
	     * timeout. The `func` is invoked with the last arguments provided to the
	     * throttled function. Subsequent calls to the throttled function return the
	     * result of the last `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the throttled function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=true]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // Avoid excessively updating the position while scrolling.
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
	     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
	     * jQuery(element).on('click', throttled);
	     *
	     * // Cancel the trailing throttled invocation.
	     * jQuery(window).on('popstate', throttled.cancel);
	     */
	    function throttle(func, wait, options) {
	      var leading = true,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (isObject(options)) {
	        leading = 'leading' in options ? !!options.leading : leading;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	      return debounce(func, wait, {
	        'leading': leading,
	        'maxWait': wait,
	        'trailing': trailing
	      });
	    }

	    /**
	     * Creates a function that accepts up to one argument, ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.unary(parseInt));
	     * // => [6, 8, 10]
	     */
	    function unary(func) {
	      return ary(func, 1);
	    }

	    /**
	     * Creates a function that provides `value` to `wrapper` as its first
	     * argument. Any additional arguments provided to the function are appended
	     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
	     * binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} [wrapper=identity] The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */
	    function wrap(value, wrapper) {
	      return partial(castFunction(wrapper), value);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Casts `value` as an array if it's not one.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Lang
	     * @param {*} value The value to inspect.
	     * @returns {Array} Returns the cast array.
	     * @example
	     *
	     * _.castArray(1);
	     * // => [1]
	     *
	     * _.castArray({ 'a': 1 });
	     * // => [{ 'a': 1 }]
	     *
	     * _.castArray('abc');
	     * // => ['abc']
	     *
	     * _.castArray(null);
	     * // => [null]
	     *
	     * _.castArray(undefined);
	     * // => [undefined]
	     *
	     * _.castArray();
	     * // => []
	     *
	     * var array = [1, 2, 3];
	     * console.log(_.castArray(array) === array);
	     * // => true
	     */
	    function castArray() {
	      if (!arguments.length) {
	        return [];
	      }
	      var value = arguments[0];
	      return isArray(value) ? value : [value];
	    }

	    /**
	     * Creates a shallow clone of `value`.
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
	     * and supports cloning arrays, array buffers, booleans, date objects, maps,
	     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
	     * arrays. The own enumerable properties of `arguments` objects are cloned
	     * as plain objects. An empty object is returned for uncloneable values such
	     * as error objects, functions, DOM nodes, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeep
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var shallow = _.clone(objects);
	     * console.log(shallow[0] === objects[0]);
	     * // => true
	     */
	    function clone(value) {
	      return baseClone(value, CLONE_SYMBOLS_FLAG);
	    }

	    /**
	     * This method is like `_.clone` except that it accepts `customizer` which
	     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
	     * cloning is handled by the method instead. The `customizer` is invoked with
	     * up to four arguments; (value [, index|key, object, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeepWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * }
	     *
	     * var el = _.cloneWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 0
	     */
	    function cloneWith(value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
	    }

	    /**
	     * This method is like `_.clone` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.clone
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var deep = _.cloneDeep(objects);
	     * console.log(deep[0] === objects[0]);
	     * // => false
	     */
	    function cloneDeep(value) {
	      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
	    }

	    /**
	     * This method is like `_.cloneWith` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.cloneWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * }
	     *
	     * var el = _.cloneDeepWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 20
	     */
	    function cloneDeepWith(value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
	    }

	    /**
	     * Checks if `object` conforms to `source` by invoking the predicate
	     * properties of `source` with the corresponding property values of `object`.
	     *
	     * **Note:** This method is equivalent to `_.conforms` when `source` is
	     * partially applied.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.14.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     *
	     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
	     * // => true
	     *
	     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
	     * // => false
	     */
	    function conformsTo(object, source) {
	      return source == null || baseConformsTo(object, source, keys(source));
	    }

	    /**
	     * Performs a
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * comparison between two values to determine if they are equivalent.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     * var other = { 'a': 1 };
	     *
	     * _.eq(object, object);
	     * // => true
	     *
	     * _.eq(object, other);
	     * // => false
	     *
	     * _.eq('a', 'a');
	     * // => true
	     *
	     * _.eq('a', Object('a'));
	     * // => false
	     *
	     * _.eq(NaN, NaN);
	     * // => true
	     */
	    function eq(value, other) {
	      return value === other || (value !== value && other !== other);
	    }

	    /**
	     * Checks if `value` is greater than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     * @see _.lt
	     * @example
	     *
	     * _.gt(3, 1);
	     * // => true
	     *
	     * _.gt(3, 3);
	     * // => false
	     *
	     * _.gt(1, 3);
	     * // => false
	     */
	    var gt = createRelationalOperation(baseGt);

	    /**
	     * Checks if `value` is greater than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than or equal to
	     *  `other`, else `false`.
	     * @see _.lte
	     * @example
	     *
	     * _.gte(3, 1);
	     * // => true
	     *
	     * _.gte(3, 3);
	     * // => true
	     *
	     * _.gte(1, 3);
	     * // => false
	     */
	    var gte = createRelationalOperation(function(value, other) {
	      return value >= other;
	    });

	    /**
	     * Checks if `value` is likely an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
	    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
	      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
	        !propertyIsEnumerable.call(value, 'callee');
	    };

	    /**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * _.isArray(document.body.children);
	     * // => false
	     *
	     * _.isArray('abc');
	     * // => false
	     *
	     * _.isArray(_.noop);
	     * // => false
	     */
	    var isArray = Array.isArray;

	    /**
	     * Checks if `value` is classified as an `ArrayBuffer` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
	     * @example
	     *
	     * _.isArrayBuffer(new ArrayBuffer(2));
	     * // => true
	     *
	     * _.isArrayBuffer(new Array(2));
	     * // => false
	     */
	    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

	    /**
	     * Checks if `value` is array-like. A value is considered array-like if it's
	     * not a function and has a `value.length` that's an integer greater than or
	     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	     * @example
	     *
	     * _.isArrayLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLike(document.body.children);
	     * // => true
	     *
	     * _.isArrayLike('abc');
	     * // => true
	     *
	     * _.isArrayLike(_.noop);
	     * // => false
	     */
	    function isArrayLike(value) {
	      return value != null && isLength(value.length) && !isFunction(value);
	    }

	    /**
	     * This method is like `_.isArrayLike` except that it also checks if `value`
	     * is an object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array-like object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArrayLikeObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLikeObject(document.body.children);
	     * // => true
	     *
	     * _.isArrayLikeObject('abc');
	     * // => false
	     *
	     * _.isArrayLikeObject(_.noop);
	     * // => false
	     */
	    function isArrayLikeObject(value) {
	      return isObjectLike(value) && isArrayLike(value);
	    }

	    /**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
	    function isBoolean(value) {
	      return value === true || value === false ||
	        (isObjectLike(value) && baseGetTag(value) == boolTag);
	    }

	    /**
	     * Checks if `value` is a buffer.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	     * @example
	     *
	     * _.isBuffer(new Buffer(2));
	     * // => true
	     *
	     * _.isBuffer(new Uint8Array(2));
	     * // => false
	     */
	    var isBuffer = nativeIsBuffer || stubFalse;

	    /**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */
	    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

	    /**
	     * Checks if `value` is likely a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */
	    function isElement(value) {
	      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
	    }

	    /**
	     * Checks if `value` is an empty object, collection, map, or set.
	     *
	     * Objects are considered empty if they have no own enumerable string keyed
	     * properties.
	     *
	     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
	     * jQuery-like collections are considered empty if they have a `length` of `0`.
	     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */
	    function isEmpty(value) {
	      if (value == null) {
	        return true;
	      }
	      if (isArrayLike(value) &&
	          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
	            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
	        return !value.length;
	      }
	      var tag = getTag(value);
	      if (tag == mapTag || tag == setTag) {
	        return !value.size;
	      }
	      if (isPrototype(value)) {
	        return !baseKeys(value).length;
	      }
	      for (var key in value) {
	        if (hasOwnProperty.call(value, key)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent.
	     *
	     * **Note:** This method supports comparing arrays, array buffers, booleans,
	     * date objects, error objects, maps, numbers, `Object` objects, regexes,
	     * sets, strings, symbols, and typed arrays. `Object` objects are compared
	     * by their own, not inherited, enumerable properties. Functions and DOM
	     * nodes are compared by strict equality, i.e. `===`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     * var other = { 'a': 1 };
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * object === other;
	     * // => false
	     */
	    function isEqual(value, other) {
	      return baseIsEqual(value, other);
	    }

	    /**
	     * This method is like `_.isEqual` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with up to
	     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, othValue) {
	     *   if (isGreeting(objValue) && isGreeting(othValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqualWith(array, other, customizer);
	     * // => true
	     */
	    function isEqualWith(value, other, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      var result = customizer ? customizer(value, other) : undefined$1;
	      return result === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result;
	    }

	    /**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */
	    function isError(value) {
	      if (!isObjectLike(value)) {
	        return false;
	      }
	      var tag = baseGetTag(value);
	      return tag == errorTag || tag == domExcTag ||
	        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
	    }

	    /**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on
	     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	     * @example
	     *
	     * _.isFinite(3);
	     * // => true
	     *
	     * _.isFinite(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     *
	     * _.isFinite('3');
	     * // => false
	     */
	    function isFinite(value) {
	      return typeof value == 'number' && nativeIsFinite(value);
	    }

	    /**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */
	    function isFunction(value) {
	      if (!isObject(value)) {
	        return false;
	      }
	      // The use of `Object#toString` avoids issues with the `typeof` operator
	      // in Safari 9 which returns 'object' for typed arrays and other constructors.
	      var tag = baseGetTag(value);
	      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	    }

	    /**
	     * Checks if `value` is an integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
	     * @example
	     *
	     * _.isInteger(3);
	     * // => true
	     *
	     * _.isInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isInteger(Infinity);
	     * // => false
	     *
	     * _.isInteger('3');
	     * // => false
	     */
	    function isInteger(value) {
	      return typeof value == 'number' && value == toInteger(value);
	    }

	    /**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This method is loosely based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	     * @example
	     *
	     * _.isLength(3);
	     * // => true
	     *
	     * _.isLength(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isLength(Infinity);
	     * // => false
	     *
	     * _.isLength('3');
	     * // => false
	     */
	    function isLength(value) {
	      return typeof value == 'number' &&
	        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is the
	     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(_.noop);
	     * // => true
	     *
	     * _.isObject(null);
	     * // => false
	     */
	    function isObject(value) {
	      var type = typeof value;
	      return value != null && (type == 'object' || type == 'function');
	    }

	    /**
	     * Checks if `value` is object-like. A value is object-like if it's not `null`
	     * and has a `typeof` result of "object".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	     * @example
	     *
	     * _.isObjectLike({});
	     * // => true
	     *
	     * _.isObjectLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isObjectLike(_.noop);
	     * // => false
	     *
	     * _.isObjectLike(null);
	     * // => false
	     */
	    function isObjectLike(value) {
	      return value != null && typeof value == 'object';
	    }

	    /**
	     * Checks if `value` is classified as a `Map` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	     * @example
	     *
	     * _.isMap(new Map);
	     * // => true
	     *
	     * _.isMap(new WeakMap);
	     * // => false
	     */
	    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

	    /**
	     * Performs a partial deep comparison between `object` and `source` to
	     * determine if `object` contains equivalent property values.
	     *
	     * **Note:** This method is equivalent to `_.matches` when `source` is
	     * partially applied.
	     *
	     * Partial comparisons will match empty array and empty object `source`
	     * values against any array or object value, respectively. See `_.isEqual`
	     * for a list of supported value comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     *
	     * _.isMatch(object, { 'b': 2 });
	     * // => true
	     *
	     * _.isMatch(object, { 'b': 1 });
	     * // => false
	     */
	    function isMatch(object, source) {
	      return object === source || baseIsMatch(object, source, getMatchData(source));
	    }

	    /**
	     * This method is like `_.isMatch` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with five
	     * arguments: (objValue, srcValue, index|key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatchWith(object, source, customizer);
	     * // => true
	     */
	    function isMatchWith(object, source, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      return baseIsMatch(object, source, getMatchData(source), customizer);
	    }

	    /**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is based on
	     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
	     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
	     * `undefined` and other non-number values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
	    function isNaN(value) {
	      // An `NaN` primitive is the only value that is not equal to itself.
	      // Perform the `toStringTag` check first to avoid errors with some
	      // ActiveX objects in IE.
	      return isNumber(value) && value != +value;
	    }

	    /**
	     * Checks if `value` is a pristine native function.
	     *
	     * **Note:** This method can't reliably detect native functions in the presence
	     * of the core-js package because core-js circumvents this kind of detection.
	     * Despite multiple requests, the core-js maintainer has made it clear: any
	     * attempt to fix the detection will be obstructed. As a result, we're left
	     * with little choice but to throw an error. Unfortunately, this also affects
	     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
	     * which rely on core-js.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */
	    function isNative(value) {
	      if (isMaskable(value)) {
	        throw new Error(CORE_ERROR_TEXT);
	      }
	      return baseIsNative(value);
	    }

	    /**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */
	    function isNull(value) {
	      return value === null;
	    }

	    /**
	     * Checks if `value` is `null` or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
	     * @example
	     *
	     * _.isNil(null);
	     * // => true
	     *
	     * _.isNil(void 0);
	     * // => true
	     *
	     * _.isNil(NaN);
	     * // => false
	     */
	    function isNil(value) {
	      return value == null;
	    }

	    /**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
	     * classified as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
	     * @example
	     *
	     * _.isNumber(3);
	     * // => true
	     *
	     * _.isNumber(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isNumber(Infinity);
	     * // => true
	     *
	     * _.isNumber('3');
	     * // => false
	     */
	    function isNumber(value) {
	      return typeof value == 'number' ||
	        (isObjectLike(value) && baseGetTag(value) == numberTag);
	    }

	    /**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.8.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */
	    function isPlainObject(value) {
	      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
	        return false;
	      }
	      var proto = getPrototype(value);
	      if (proto === null) {
	        return true;
	      }
	      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
	        funcToString.call(Ctor) == objectCtorString;
	    }

	    /**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */
	    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

	    /**
	     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
	     * double precision number which isn't the result of a rounded unsafe integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
	     * @example
	     *
	     * _.isSafeInteger(3);
	     * // => true
	     *
	     * _.isSafeInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isSafeInteger(Infinity);
	     * // => false
	     *
	     * _.isSafeInteger('3');
	     * // => false
	     */
	    function isSafeInteger(value) {
	      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is classified as a `Set` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	     * @example
	     *
	     * _.isSet(new Set);
	     * // => true
	     *
	     * _.isSet(new WeakSet);
	     * // => false
	     */
	    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

	    /**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */
	    function isString(value) {
	      return typeof value == 'string' ||
	        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
	    }

	    /**
	     * Checks if `value` is classified as a `Symbol` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	     * @example
	     *
	     * _.isSymbol(Symbol.iterator);
	     * // => true
	     *
	     * _.isSymbol('abc');
	     * // => false
	     */
	    function isSymbol(value) {
	      return typeof value == 'symbol' ||
	        (isObjectLike(value) && baseGetTag(value) == symbolTag);
	    }

	    /**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */
	    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

	    /**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */
	    function isUndefined(value) {
	      return value === undefined$1;
	    }

	    /**
	     * Checks if `value` is classified as a `WeakMap` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
	     * @example
	     *
	     * _.isWeakMap(new WeakMap);
	     * // => true
	     *
	     * _.isWeakMap(new Map);
	     * // => false
	     */
	    function isWeakMap(value) {
	      return isObjectLike(value) && getTag(value) == weakMapTag;
	    }

	    /**
	     * Checks if `value` is classified as a `WeakSet` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
	     * @example
	     *
	     * _.isWeakSet(new WeakSet);
	     * // => true
	     *
	     * _.isWeakSet(new Set);
	     * // => false
	     */
	    function isWeakSet(value) {
	      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
	    }

	    /**
	     * Checks if `value` is less than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     * @see _.gt
	     * @example
	     *
	     * _.lt(1, 3);
	     * // => true
	     *
	     * _.lt(3, 3);
	     * // => false
	     *
	     * _.lt(3, 1);
	     * // => false
	     */
	    var lt = createRelationalOperation(baseLt);

	    /**
	     * Checks if `value` is less than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than or equal to
	     *  `other`, else `false`.
	     * @see _.gte
	     * @example
	     *
	     * _.lte(1, 3);
	     * // => true
	     *
	     * _.lte(3, 3);
	     * // => true
	     *
	     * _.lte(3, 1);
	     * // => false
	     */
	    var lte = createRelationalOperation(function(value, other) {
	      return value <= other;
	    });

	    /**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * _.toArray({ 'a': 1, 'b': 2 });
	     * // => [1, 2]
	     *
	     * _.toArray('abc');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toArray(1);
	     * // => []
	     *
	     * _.toArray(null);
	     * // => []
	     */
	    function toArray(value) {
	      if (!value) {
	        return [];
	      }
	      if (isArrayLike(value)) {
	        return isString(value) ? stringToArray(value) : copyArray(value);
	      }
	      if (symIterator && value[symIterator]) {
	        return iteratorToArray(value[symIterator]());
	      }
	      var tag = getTag(value),
	          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

	      return func(value);
	    }

	    /**
	     * Converts `value` to a finite number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.12.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted number.
	     * @example
	     *
	     * _.toFinite(3.2);
	     * // => 3.2
	     *
	     * _.toFinite(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toFinite(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toFinite('3.2');
	     * // => 3.2
	     */
	    function toFinite(value) {
	      if (!value) {
	        return value === 0 ? value : 0;
	      }
	      value = toNumber(value);
	      if (value === INFINITY || value === -INFINITY) {
	        var sign = (value < 0 ? -1 : 1);
	        return sign * MAX_INTEGER;
	      }
	      return value === value ? value : 0;
	    }

	    /**
	     * Converts `value` to an integer.
	     *
	     * **Note:** This method is loosely based on
	     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toInteger(3.2);
	     * // => 3
	     *
	     * _.toInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toInteger(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toInteger('3.2');
	     * // => 3
	     */
	    function toInteger(value) {
	      var result = toFinite(value),
	          remainder = result % 1;

	      return result === result ? (remainder ? result - remainder : result) : 0;
	    }

	    /**
	     * Converts `value` to an integer suitable for use as the length of an
	     * array-like object.
	     *
	     * **Note:** This method is based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toLength(3.2);
	     * // => 3
	     *
	     * _.toLength(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toLength(Infinity);
	     * // => 4294967295
	     *
	     * _.toLength('3.2');
	     * // => 3
	     */
	    function toLength(value) {
	      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
	    }

	    /**
	     * Converts `value` to a number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     * @example
	     *
	     * _.toNumber(3.2);
	     * // => 3.2
	     *
	     * _.toNumber(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toNumber(Infinity);
	     * // => Infinity
	     *
	     * _.toNumber('3.2');
	     * // => 3.2
	     */
	    function toNumber(value) {
	      if (typeof value == 'number') {
	        return value;
	      }
	      if (isSymbol(value)) {
	        return NAN;
	      }
	      if (isObject(value)) {
	        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	        value = isObject(other) ? (other + '') : other;
	      }
	      if (typeof value != 'string') {
	        return value === 0 ? value : +value;
	      }
	      value = value.replace(reTrim, '');
	      var isBinary = reIsBinary.test(value);
	      return (isBinary || reIsOctal.test(value))
	        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	        : (reIsBadHex.test(value) ? NAN : +value);
	    }

	    /**
	     * Converts `value` to a plain object flattening inherited enumerable string
	     * keyed properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */
	    function toPlainObject(value) {
	      return copyObject(value, keysIn(value));
	    }

	    /**
	     * Converts `value` to a safe integer. A safe integer can be compared and
	     * represented correctly.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toSafeInteger(3.2);
	     * // => 3
	     *
	     * _.toSafeInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toSafeInteger(Infinity);
	     * // => 9007199254740991
	     *
	     * _.toSafeInteger('3.2');
	     * // => 3
	     */
	    function toSafeInteger(value) {
	      return value
	        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
	        : (value === 0 ? value : 0);
	    }

	    /**
	     * Converts `value` to a string. An empty string is returned for `null`
	     * and `undefined` values. The sign of `-0` is preserved.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.toString(null);
	     * // => ''
	     *
	     * _.toString(-0);
	     * // => '-0'
	     *
	     * _.toString([1, 2, 3]);
	     * // => '1,2,3'
	     */
	    function toString(value) {
	      return value == null ? '' : baseToString(value);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Assigns own enumerable string keyed properties of source objects to the
	     * destination object. Source objects are applied from left to right.
	     * Subsequent sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object` and is loosely based on
	     * [`Object.assign`](https://mdn.io/Object/assign).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.assignIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * function Bar() {
	     *   this.c = 3;
	     * }
	     *
	     * Foo.prototype.b = 2;
	     * Bar.prototype.d = 4;
	     *
	     * _.assign({ 'a': 0 }, new Foo, new Bar);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    var assign = createAssigner(function(object, source) {
	      if (isPrototype(source) || isArrayLike(source)) {
	        copyObject(source, keys(source), object);
	        return;
	      }
	      for (var key in source) {
	        if (hasOwnProperty.call(source, key)) {
	          assignValue(object, key, source[key]);
	        }
	      }
	    });

	    /**
	     * This method is like `_.assign` except that it iterates over own and
	     * inherited source properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.assign
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * function Bar() {
	     *   this.c = 3;
	     * }
	     *
	     * Foo.prototype.b = 2;
	     * Bar.prototype.d = 4;
	     *
	     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
	     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
	     */
	    var assignIn = createAssigner(function(object, source) {
	      copyObject(source, keysIn(source), object);
	    });

	    /**
	     * This method is like `_.assignIn` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extendWith
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @see _.assignWith
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignInWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObject(source, keysIn(source), object, customizer);
	    });

	    /**
	     * This method is like `_.assign` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @see _.assignInWith
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObject(source, keys(source), object, customizer);
	    });

	    /**
	     * Creates an array of values corresponding to `paths` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Array} Returns the picked values.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _.at(object, ['a[0].b.c', 'a[1]']);
	     * // => [3, 4]
	     */
	    var at = flatRest(baseAt);

	    /**
	     * Creates an object that inherits from the `prototype` object. If a
	     * `properties` object is given, its own enumerable string keyed properties
	     * are assigned to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
	    function create(prototype, properties) {
	      var result = baseCreate(prototype);
	      return properties == null ? result : baseAssign(result, properties);
	    }

	    /**
	     * Assigns own and inherited enumerable string keyed properties of source
	     * objects to the destination object for all destination properties that
	     * resolve to `undefined`. Source objects are applied from left to right.
	     * Once a property is set, additional values of the same property are ignored.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.defaultsDeep
	     * @example
	     *
	     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var defaults = baseRest(function(object, sources) {
	      object = Object(object);

	      var index = -1;
	      var length = sources.length;
	      var guard = length > 2 ? sources[2] : undefined$1;

	      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	        length = 1;
	      }

	      while (++index < length) {
	        var source = sources[index];
	        var props = keysIn(source);
	        var propsIndex = -1;
	        var propsLength = props.length;

	        while (++propsIndex < propsLength) {
	          var key = props[propsIndex];
	          var value = object[key];

	          if (value === undefined$1 ||
	              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
	            object[key] = source[key];
	          }
	        }
	      }

	      return object;
	    });

	    /**
	     * This method is like `_.defaults` except that it recursively assigns
	     * default properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.defaults
	     * @example
	     *
	     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
	     * // => { 'a': { 'b': 2, 'c': 3 } }
	     */
	    var defaultsDeep = baseRest(function(args) {
	      args.push(undefined$1, customDefaultsMerge);
	      return apply(mergeWith, undefined$1, args);
	    });

	    /**
	     * This method is like `_.find` except that it returns the key of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(o) { return o.age < 40; });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */
	    function findKey(object, predicate) {
	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
	    }

	    /**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(o) { return o.age < 40; });
	     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */
	    function findLastKey(object, predicate) {
	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
	    }

	    /**
	     * Iterates over own and inherited enumerable string keyed properties of an
	     * object and invokes `iteratee` for each property. The iteratee is invoked
	     * with three arguments: (value, key, object). Iteratee functions may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forInRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
	     */
	    function forIn(object, iteratee) {
	      return object == null
	        ? object
	        : baseFor(object, getIteratee(iteratee, 3), keysIn);
	    }

	    /**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
	     */
	    function forInRight(object, iteratee) {
	      return object == null
	        ? object
	        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
	    }

	    /**
	     * Iterates over own enumerable string keyed properties of an object and
	     * invokes `iteratee` for each property. The iteratee is invoked with three
	     * arguments: (value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwnRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forOwn(object, iteratee) {
	      return object && baseForOwn(object, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
	     */
	    function forOwnRight(object, iteratee) {
	      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
	    }

	    /**
	     * Creates an array of function property names from own enumerable properties
	     * of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functionsIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functions(new Foo);
	     * // => ['a', 'b']
	     */
	    function functions(object) {
	      return object == null ? [] : baseFunctions(object, keys(object));
	    }

	    /**
	     * Creates an array of function property names from own and inherited
	     * enumerable properties of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functions
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functionsIn(new Foo);
	     * // => ['a', 'b', 'c']
	     */
	    function functionsIn(object) {
	      return object == null ? [] : baseFunctions(object, keysIn(object));
	    }

	    /**
	     * Gets the value at `path` of `object`. If the resolved value is
	     * `undefined`, the `defaultValue` is returned in its place.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.get(object, 'a[0].b.c');
	     * // => 3
	     *
	     * _.get(object, ['a', '0', 'b', 'c']);
	     * // => 3
	     *
	     * _.get(object, 'a.b.c', 'default');
	     * // => 'default'
	     */
	    function get(object, path, defaultValue) {
	      var result = object == null ? undefined$1 : baseGet(object, path);
	      return result === undefined$1 ? defaultValue : result;
	    }

	    /**
	     * Checks if `path` is a direct property of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = { 'a': { 'b': 2 } };
	     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.has(object, 'a');
	     * // => true
	     *
	     * _.has(object, 'a.b');
	     * // => true
	     *
	     * _.has(object, ['a', 'b']);
	     * // => true
	     *
	     * _.has(other, 'a');
	     * // => false
	     */
	    function has(object, path) {
	      return object != null && hasPath(object, path, baseHas);
	    }

	    /**
	     * Checks if `path` is a direct or inherited property of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.hasIn(object, 'a');
	     * // => true
	     *
	     * _.hasIn(object, 'a.b');
	     * // => true
	     *
	     * _.hasIn(object, ['a', 'b']);
	     * // => true
	     *
	     * _.hasIn(object, 'b');
	     * // => false
	     */
	    function hasIn(object, path) {
	      return object != null && hasPath(object, path, baseHasIn);
	    }

	    /**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite
	     * property assignments of previous values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invert(object);
	     * // => { '1': 'c', '2': 'b' }
	     */
	    var invert = createInverter(function(result, value, key) {
	      if (value != null &&
	          typeof value.toString != 'function') {
	        value = nativeObjectToString.call(value);
	      }

	      result[value] = key;
	    }, constant(identity));

	    /**
	     * This method is like `_.invert` except that the inverted object is generated
	     * from the results of running each element of `object` thru `iteratee`. The
	     * corresponding inverted value of each inverted key is an array of keys
	     * responsible for generating the inverted value. The iteratee is invoked
	     * with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invertBy(object);
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     *
	     * _.invertBy(object, function(value) {
	     *   return 'group' + value;
	     * });
	     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
	     */
	    var invertBy = createInverter(function(result, value, key) {
	      if (value != null &&
	          typeof value.toString != 'function') {
	        value = nativeObjectToString.call(value);
	      }

	      if (hasOwnProperty.call(result, value)) {
	        result[value].push(key);
	      } else {
	        result[value] = [key];
	      }
	    }, getIteratee);

	    /**
	     * Invokes the method at `path` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
	     *
	     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
	     * // => [2, 3]
	     */
	    var invoke = baseRest(baseInvoke);

	    /**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */
	    function keys(object) {
	      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	    }

	    /**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */
	    function keysIn(object) {
	      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
	    }

	    /**
	     * The opposite of `_.mapValues`; this method creates an object with the
	     * same values as `object` and keys generated by running each own enumerable
	     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
	     * with three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapValues
	     * @example
	     *
	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   return key + value;
	     * });
	     * // => { 'a1': 1, 'b2': 2 }
	     */
	    function mapKeys(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);

	      baseForOwn(object, function(value, key, object) {
	        baseAssignValue(result, iteratee(value, key, object), value);
	      });
	      return result;
	    }

	    /**
	     * Creates an object with the same keys as `object` and values generated
	     * by running each own enumerable string keyed property of `object` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapKeys
	     * @example
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * _.mapValues(users, function(o) { return o.age; });
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */
	    function mapValues(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);

	      baseForOwn(object, function(value, key, object) {
	        baseAssignValue(result, key, iteratee(value, key, object));
	      });
	      return result;
	    }

	    /**
	     * This method is like `_.assign` except that it recursively merges own and
	     * inherited enumerable string keyed properties of source objects into the
	     * destination object. Source properties that resolve to `undefined` are
	     * skipped if a destination value exists. Array and plain object properties
	     * are merged recursively. Other objects and value types are overridden by
	     * assignment. Source objects are applied from left to right. Subsequent
	     * sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {
	     *   'a': [{ 'b': 2 }, { 'd': 4 }]
	     * };
	     *
	     * var other = {
	     *   'a': [{ 'c': 3 }, { 'e': 5 }]
	     * };
	     *
	     * _.merge(object, other);
	     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
	     */
	    var merge = createAssigner(function(object, source, srcIndex) {
	      baseMerge(object, source, srcIndex);
	    });

	    /**
	     * This method is like `_.merge` except that it accepts `customizer` which
	     * is invoked to produce the merged values of the destination and source
	     * properties. If `customizer` returns `undefined`, merging is handled by the
	     * method instead. The `customizer` is invoked with six arguments:
	     * (objValue, srcValue, key, object, source, stack).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (_.isArray(objValue)) {
	     *     return objValue.concat(srcValue);
	     *   }
	     * }
	     *
	     * var object = { 'a': [1], 'b': [2] };
	     * var other = { 'a': [3], 'b': [4] };
	     *
	     * _.mergeWith(object, other, customizer);
	     * // => { 'a': [1, 3], 'b': [2, 4] }
	     */
	    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
	      baseMerge(object, source, srcIndex, customizer);
	    });

	    /**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable property paths of `object` that are not omitted.
	     *
	     * **Note:** This method is considerably slower than `_.pick`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [paths] The property paths to omit.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omit(object, ['a', 'c']);
	     * // => { 'b': '2' }
	     */
	    var omit = flatRest(function(object, paths) {
	      var result = {};
	      if (object == null) {
	        return result;
	      }
	      var isDeep = false;
	      paths = arrayMap(paths, function(path) {
	        path = castPath(path, object);
	        isDeep || (isDeep = path.length > 1);
	        return path;
	      });
	      copyObject(object, getAllKeysIn(object), result);
	      if (isDeep) {
	        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
	      }
	      var length = paths.length;
	      while (length--) {
	        baseUnset(result, paths[length]);
	      }
	      return result;
	    });

	    /**
	     * The opposite of `_.pickBy`; this method creates an object composed of
	     * the own and inherited enumerable string keyed properties of `object` that
	     * `predicate` doesn't return truthy for. The predicate is invoked with two
	     * arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function} [predicate=_.identity] The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omitBy(object, _.isNumber);
	     * // => { 'b': '2' }
	     */
	    function omitBy(object, predicate) {
	      return pickBy(object, negate(getIteratee(predicate)));
	    }

	    /**
	     * Creates an object composed of the picked `object` properties.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pick(object, ['a', 'c']);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    var pick = flatRest(function(object, paths) {
	      return object == null ? {} : basePick(object, paths);
	    });

	    /**
	     * Creates an object composed of the `object` properties `predicate` returns
	     * truthy for. The predicate is invoked with two arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function} [predicate=_.identity] The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pickBy(object, _.isNumber);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    function pickBy(object, predicate) {
	      if (object == null) {
	        return {};
	      }
	      var props = arrayMap(getAllKeysIn(object), function(prop) {
	        return [prop];
	      });
	      predicate = getIteratee(predicate);
	      return basePickBy(object, props, function(value, path) {
	        return predicate(value, path[0]);
	      });
	    }

	    /**
	     * This method is like `_.get` except that if the resolved value is a
	     * function it's invoked with the `this` binding of its parent object and
	     * its result is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to resolve.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	     *
	     * _.result(object, 'a[0].b.c1');
	     * // => 3
	     *
	     * _.result(object, 'a[0].b.c2');
	     * // => 4
	     *
	     * _.result(object, 'a[0].b.c3', 'default');
	     * // => 'default'
	     *
	     * _.result(object, 'a[0].b.c3', _.constant('default'));
	     * // => 'default'
	     */
	    function result(object, path, defaultValue) {
	      path = castPath(path, object);

	      var index = -1,
	          length = path.length;

	      // Ensure the loop is entered when path is empty.
	      if (!length) {
	        length = 1;
	        object = undefined$1;
	      }
	      while (++index < length) {
	        var value = object == null ? undefined$1 : object[toKey(path[index])];
	        if (value === undefined$1) {
	          index = length;
	          value = defaultValue;
	        }
	        object = isFunction(value) ? value.call(object) : value;
	      }
	      return object;
	    }

	    /**
	     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
	     * it's created. Arrays are created for missing index properties while objects
	     * are created for all other missing properties. Use `_.setWith` to customize
	     * `path` creation.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.set(object, 'a[0].b.c', 4);
	     * console.log(object.a[0].b.c);
	     * // => 4
	     *
	     * _.set(object, ['x', '0', 'y', 'z'], 5);
	     * console.log(object.x[0].y.z);
	     * // => 5
	     */
	    function set(object, path, value) {
	      return object == null ? object : baseSet(object, path, value);
	    }

	    /**
	     * This method is like `_.set` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.setWith(object, '[0][1]', 'a', Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function setWith(object, path, value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      return object == null ? object : baseSet(object, path, value, customizer);
	    }

	    /**
	     * Creates an array of own enumerable string keyed-value pairs for `object`
	     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
	     * entries are returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entries
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairs(new Foo);
	     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
	     */
	    var toPairs = createToPairs(keys);

	    /**
	     * Creates an array of own and inherited enumerable string keyed-value pairs
	     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
	     * or set, its entries are returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entriesIn
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairsIn(new Foo);
	     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
	     */
	    var toPairsIn = createToPairs(keysIn);

	    /**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own
	     * enumerable string keyed properties thru `iteratee`, with each invocation
	     * potentially mutating the `accumulator` object. If `accumulator` is not
	     * provided, a new object with the same `[[Prototype]]` will be used. The
	     * iteratee is invoked with four arguments: (accumulator, value, key, object).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * }, []);
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */
	    function transform(object, iteratee, accumulator) {
	      var isArr = isArray(object),
	          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

	      iteratee = getIteratee(iteratee, 4);
	      if (accumulator == null) {
	        var Ctor = object && object.constructor;
	        if (isArrLike) {
	          accumulator = isArr ? new Ctor : [];
	        }
	        else if (isObject(object)) {
	          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
	        }
	        else {
	          accumulator = {};
	        }
	      }
	      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
	        return iteratee(accumulator, value, index, object);
	      });
	      return accumulator;
	    }

	    /**
	     * Removes the property at `path` of `object`.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
	     * _.unset(object, 'a[0].b.c');
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     *
	     * _.unset(object, ['a', '0', 'b', 'c']);
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     */
	    function unset(object, path) {
	      return object == null ? true : baseUnset(object, path);
	    }

	    /**
	     * This method is like `_.set` except that accepts `updater` to produce the
	     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
	     * is invoked with one argument: (value).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
	     * console.log(object.a[0].b.c);
	     * // => 9
	     *
	     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
	     * console.log(object.x[0].y.z);
	     * // => 0
	     */
	    function update(object, path, updater) {
	      return object == null ? object : baseUpdate(object, path, castFunction(updater));
	    }

	    /**
	     * This method is like `_.update` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function updateWith(object, path, updater, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
	    }

	    /**
	     * Creates an array of the own enumerable string keyed property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */
	    function values(object) {
	      return object == null ? [] : baseValues(object, keys(object));
	    }

	    /**
	     * Creates an array of the own and inherited enumerable string keyed property
	     * values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */
	    function valuesIn(object) {
	      return object == null ? [] : baseValues(object, keysIn(object));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Clamps `number` within the inclusive `lower` and `upper` bounds.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Number
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     * @example
	     *
	     * _.clamp(-10, -5, 5);
	     * // => -5
	     *
	     * _.clamp(10, -5, 5);
	     * // => 5
	     */
	    function clamp(number, lower, upper) {
	      if (upper === undefined$1) {
	        upper = lower;
	        lower = undefined$1;
	      }
	      if (upper !== undefined$1) {
	        upper = toNumber(upper);
	        upper = upper === upper ? upper : 0;
	      }
	      if (lower !== undefined$1) {
	        lower = toNumber(lower);
	        lower = lower === lower ? lower : 0;
	      }
	      return baseClamp(toNumber(number), lower, upper);
	    }

	    /**
	     * Checks if `n` is between `start` and up to, but not including, `end`. If
	     * `end` is not specified, it's set to `start` with `start` then set to `0`.
	     * If `start` is greater than `end` the params are swapped to support
	     * negative ranges.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.3.0
	     * @category Number
	     * @param {number} number The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     * @see _.range, _.rangeRight
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     *
	     * _.inRange(-3, -2, -6);
	     * // => true
	     */
	    function inRange(number, start, end) {
	      start = toFinite(start);
	      if (end === undefined$1) {
	        end = start;
	        start = 0;
	      } else {
	        end = toFinite(end);
	      }
	      number = toNumber(number);
	      return baseInRange(number, start, end);
	    }

	    /**
	     * Produces a random number between the inclusive `lower` and `upper` bounds.
	     * If only one argument is provided a number between `0` and the given number
	     * is returned. If `floating` is `true`, or either `lower` or `upper` are
	     * floats, a floating-point number is returned instead of an integer.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Number
	     * @param {number} [lower=0] The lower bound.
	     * @param {number} [upper=1] The upper bound.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
	    function random(lower, upper, floating) {
	      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
	        upper = floating = undefined$1;
	      }
	      if (floating === undefined$1) {
	        if (typeof upper == 'boolean') {
	          floating = upper;
	          upper = undefined$1;
	        }
	        else if (typeof lower == 'boolean') {
	          floating = lower;
	          lower = undefined$1;
	        }
	      }
	      if (lower === undefined$1 && upper === undefined$1) {
	        lower = 0;
	        upper = 1;
	      }
	      else {
	        lower = toFinite(lower);
	        if (upper === undefined$1) {
	          upper = lower;
	          lower = 0;
	        } else {
	          upper = toFinite(upper);
	        }
	      }
	      if (lower > upper) {
	        var temp = lower;
	        lower = upper;
	        upper = temp;
	      }
	      if (floating || lower % 1 || upper % 1) {
	        var rand = nativeRandom();
	        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
	      }
	      return baseRandom(lower, upper);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar--');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__FOO_BAR__');
	     * // => 'fooBar'
	     */
	    var camelCase = createCompounder(function(result, word, index) {
	      word = word.toLowerCase();
	      return result + (index ? capitalize(word) : word);
	    });

	    /**
	     * Converts the first character of `string` to upper case and the remaining
	     * to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('FRED');
	     * // => 'Fred'
	     */
	    function capitalize(string) {
	      return upperFirst(toString(string).toLowerCase());
	    }

	    /**
	     * Deburrs `string` by converting
	     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
	     * letters to basic Latin letters and removing
	     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('dÃ©jÃ  vu');
	     * // => 'deja vu'
	     */
	    function deburr(string) {
	      string = toString(string);
	      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
	    }

	    /**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search up to.
	     * @returns {boolean} Returns `true` if `string` ends with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */
	    function endsWith(string, target, position) {
	      string = toString(string);
	      target = baseToString(target);

	      var length = string.length;
	      position = position === undefined$1
	        ? length
	        : baseClamp(toInteger(position), 0, length);

	      var end = position;
	      position -= target.length;
	      return position >= 0 && string.slice(position, end) == target;
	    }

	    /**
	     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
	     * corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional
	     * characters use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't need escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value. See
	     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * When working with HTML you should always
	     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
	     * XSS vectors.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */
	    function escape(string) {
	      string = toString(string);
	      return (string && reHasUnescapedHtml.test(string))
	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
	        : string;
	    }

	    /**
	     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
	     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https://lodash\.com/\)'
	     */
	    function escapeRegExp(string) {
	      string = toString(string);
	      return (string && reHasRegExpChar.test(string))
	        ? string.replace(reRegExpChar, '\\$&')
	        : string;
	    }

	    /**
	     * Converts `string` to
	     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__FOO_BAR__');
	     * // => 'foo-bar'
	     */
	    var kebabCase = createCompounder(function(result, word, index) {
	      return result + (index ? '-' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts `string`, as space separated words, to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.lowerCase('--Foo-Bar--');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('fooBar');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('__FOO_BAR__');
	     * // => 'foo bar'
	     */
	    var lowerCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts the first character of `string` to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.lowerFirst('Fred');
	     * // => 'fred'
	     *
	     * _.lowerFirst('FRED');
	     * // => 'fRED'
	     */
	    var lowerFirst = createCaseFirst('toLowerCase');

	    /**
	     * Pads `string` on the left and right sides if it's shorter than `length`.
	     * Padding characters are truncated if they can't be evenly divided by `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */
	    function pad(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      if (!length || strLength >= length) {
	        return string;
	      }
	      var mid = (length - strLength) / 2;
	      return (
	        createPadding(nativeFloor(mid), chars) +
	        string +
	        createPadding(nativeCeil(mid), chars)
	      );
	    }

	    /**
	     * Pads `string` on the right side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padEnd('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padEnd('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padEnd('abc', 3);
	     * // => 'abc'
	     */
	    function padEnd(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (string + createPadding(length - strLength, chars))
	        : string;
	    }

	    /**
	     * Pads `string` on the left side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padStart('abc', 6);
	     * // => '   abc'
	     *
	     * _.padStart('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padStart('abc', 3);
	     * // => 'abc'
	     */
	    function padStart(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (createPadding(length - strLength, chars) + string)
	        : string;
	    }

	    /**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
	     * hexadecimal, in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the
	     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix=10] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */
	    function parseInt(string, radix, guard) {
	      if (guard || radix == null) {
	        radix = 0;
	      } else if (radix) {
	        radix = +radix;
	      }
	      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
	    }

	    /**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=1] The number of times to repeat the string.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */
	    function repeat(string, n, guard) {
	      if ((guard ? isIterateeCall(string, n, guard) : n === undefined$1)) {
	        n = 1;
	      } else {
	        n = toInteger(n);
	      }
	      return baseRepeat(toString(string), n);
	    }

	    /**
	     * Replaces matches for `pattern` in `string` with `replacement`.
	     *
	     * **Note:** This method is based on
	     * [`String#replace`](https://mdn.io/String/replace).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to modify.
	     * @param {RegExp|string} pattern The pattern to replace.
	     * @param {Function|string} replacement The match replacement.
	     * @returns {string} Returns the modified string.
	     * @example
	     *
	     * _.replace('Hi Fred', 'Fred', 'Barney');
	     * // => 'Hi Barney'
	     */
	    function replace() {
	      var args = arguments,
	          string = toString(args[0]);

	      return args.length < 3 ? string : string.replace(args[1], args[2]);
	    }

	    /**
	     * Converts `string` to
	     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--FOO-BAR--');
	     * // => 'foo_bar'
	     */
	    var snakeCase = createCompounder(function(result, word, index) {
	      return result + (index ? '_' : '') + word.toLowerCase();
	    });

	    /**
	     * Splits `string` by `separator`.
	     *
	     * **Note:** This method is based on
	     * [`String#split`](https://mdn.io/String/split).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to split.
	     * @param {RegExp|string} separator The separator pattern to split by.
	     * @param {number} [limit] The length to truncate results to.
	     * @returns {Array} Returns the string segments.
	     * @example
	     *
	     * _.split('a-b-c', '-', 2);
	     * // => ['a', 'b']
	     */
	    function split(string, separator, limit) {
	      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
	        separator = limit = undefined$1;
	      }
	      limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
	      if (!limit) {
	        return [];
	      }
	      string = toString(string);
	      if (string && (
	            typeof separator == 'string' ||
	            (separator != null && !isRegExp(separator))
	          )) {
	        separator = baseToString(separator);
	        if (!separator && hasUnicode(string)) {
	          return castSlice(stringToArray(string), 0, limit);
	        }
	      }
	      return string.split(separator, limit);
	    }

	    /**
	     * Converts `string` to
	     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.1.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar--');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__FOO_BAR__');
	     * // => 'FOO BAR'
	     */
	    var startCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + upperFirst(word);
	    });

	    /**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */
	    function startsWith(string, target, position) {
	      string = toString(string);
	      position = position == null
	        ? 0
	        : baseClamp(toInteger(position), 0, string.length);

	      target = baseToString(target);
	      return string.slice(position, position + target.length) == target;
	    }

	    /**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is given, it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes
	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for easier debugging.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options={}] The options object.
	     * @param {RegExp} [options.escape=_.templateSettings.escape]
	     *  The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
	     *  The "evaluate" delimiter.
	     * @param {Object} [options.imports=_.templateSettings.imports]
	     *  An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
	     *  The "interpolate" delimiter.
	     * @param {string} [options.sourceURL='lodash.templateSources[n]']
	     *  The sourceURL of the compiled template.
	     * @param {string} [options.variable='obj']
	     *  The data object variable name.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // Use the "interpolate" delimiter to create a compiled template.
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // Use the HTML "escape" delimiter to escape data property values.
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the internal `print` function in "evaluate" delimiters.
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // Use the ES template literal delimiter as an "interpolate" delimiter.
	     * // Disable support by replacing the "interpolate" delimiter.
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // Use backslashes to treat delimiters as plain text.
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // Use the `imports` option to import `jQuery` as `jq`.
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
	     *
	     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // Use custom template delimiters.
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // Use the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and stack traces.
	     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
	    function template(string, options, guard) {
	      // Based on John Resig's `tmpl` implementation
	      // (http://ejohn.org/blog/javascript-micro-templating/)
	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	      var settings = lodash.templateSettings;

	      if (guard && isIterateeCall(string, options, guard)) {
	        options = undefined$1;
	      }
	      string = toString(string);
	      options = assignInWith({}, options, settings, customDefaultsAssignIn);

	      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
	          importsKeys = keys(imports),
	          importsValues = baseValues(imports, importsKeys);

	      var isEscaping,
	          isEvaluating,
	          index = 0,
	          interpolate = options.interpolate || reNoMatch,
	          source = "__p += '";

	      // Compile the regexp to match each delimiter.
	      var reDelimiters = RegExp(
	        (options.escape || reNoMatch).source + '|' +
	        interpolate.source + '|' +
	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	        (options.evaluate || reNoMatch).source + '|$'
	      , 'g');

	      // Use a sourceURL for easier debugging.
	      // The sourceURL gets injected into the source that's eval-ed, so be careful
	      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
	      // and escape the comment, thus injecting code that gets evaled.
	      var sourceURL = '//# sourceURL=' +
	        (hasOwnProperty.call(options, 'sourceURL')
	          ? (options.sourceURL + '').replace(/\s/g, ' ')
	          : ('lodash.templateSources[' + (++templateCounter) + ']')
	        ) + '\n';

	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	        interpolateValue || (interpolateValue = esTemplateValue);

	        // Escape characters that can't be included in string literals.
	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

	        // Replace delimiters with snippets.
	        if (escapeValue) {
	          isEscaping = true;
	          source += "' +\n__e(" + escapeValue + ") +\n'";
	        }
	        if (evaluateValue) {
	          isEvaluating = true;
	          source += "';\n" + evaluateValue + ";\n__p += '";
	        }
	        if (interpolateValue) {
	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	        }
	        index = offset + match.length;

	        // The JS engine embedded in Adobe products needs `match` returned in
	        // order to produce the correct `offset` value.
	        return match;
	      });

	      source += "';\n";

	      // If `variable` is not specified wrap a with-statement around the generated
	      // code to add the data object to the top of the scope chain.
	      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
	      if (!variable) {
	        source = 'with (obj) {\n' + source + '\n}\n';
	      }
	      // Cleanup code by stripping empty strings.
	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	        .replace(reEmptyStringMiddle, '$1')
	        .replace(reEmptyStringTrailing, '$1;');

	      // Frame code as the function body.
	      source = 'function(' + (variable || 'obj') + ') {\n' +
	        (variable
	          ? ''
	          : 'obj || (obj = {});\n'
	        ) +
	        "var __t, __p = ''" +
	        (isEscaping
	           ? ', __e = _.escape'
	           : ''
	        ) +
	        (isEvaluating
	          ? ', __j = Array.prototype.join;\n' +
	            "function print() { __p += __j.call(arguments, '') }\n"
	          : ';\n'
	        ) +
	        source +
	        'return __p\n}';

	      var result = attempt(function() {
	        return Function(importsKeys, sourceURL + 'return ' + source)
	          .apply(undefined$1, importsValues);
	      });

	      // Provide the compiled function's source by its `toString` method or
	      // the `source` property as a convenience for inlining compiled templates.
	      result.source = source;
	      if (isError(result)) {
	        throw result;
	      }
	      return result;
	    }

	    /**
	     * Converts `string`, as a whole, to lower case just like
	     * [String#toLowerCase](https://mdn.io/toLowerCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.toLower('--Foo-Bar--');
	     * // => '--foo-bar--'
	     *
	     * _.toLower('fooBar');
	     * // => 'foobar'
	     *
	     * _.toLower('__FOO_BAR__');
	     * // => '__foo_bar__'
	     */
	    function toLower(value) {
	      return toString(value).toLowerCase();
	    }

	    /**
	     * Converts `string`, as a whole, to upper case just like
	     * [String#toUpperCase](https://mdn.io/toUpperCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.toUpper('--foo-bar--');
	     * // => '--FOO-BAR--'
	     *
	     * _.toUpper('fooBar');
	     * // => 'FOOBAR'
	     *
	     * _.toUpper('__foo_bar__');
	     * // => '__FOO_BAR__'
	     */
	    function toUpper(value) {
	      return toString(value).toUpperCase();
	    }

	    /**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar']
	     */
	    function trim(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined$1)) {
	        return string.replace(reTrim, '');
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          chrSymbols = stringToArray(chars),
	          start = charsStartIndex(strSymbols, chrSymbols),
	          end = charsEndIndex(strSymbols, chrSymbols) + 1;

	      return castSlice(strSymbols, start, end).join('');
	    }

	    /**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimEnd('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimEnd('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */
	    function trimEnd(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined$1)) {
	        return string.replace(reTrimEnd, '');
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

	      return castSlice(strSymbols, 0, end).join('');
	    }

	    /**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimStart('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimStart('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */
	    function trimStart(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined$1)) {
	        return string.replace(reTrimStart, '');
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          start = charsStartIndex(strSymbols, stringToArray(chars));

	      return castSlice(strSymbols, start).join('');
	    }

	    /**
	     * Truncates `string` if it's longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object} [options={}] The options object.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.truncate('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * // => 'hi-diddly-ho there...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */
	    function truncate(string, options) {
	      var length = DEFAULT_TRUNC_LENGTH,
	          omission = DEFAULT_TRUNC_OMISSION;

	      if (isObject(options)) {
	        var separator = 'separator' in options ? options.separator : separator;
	        length = 'length' in options ? toInteger(options.length) : length;
	        omission = 'omission' in options ? baseToString(options.omission) : omission;
	      }
	      string = toString(string);

	      var strLength = string.length;
	      if (hasUnicode(string)) {
	        var strSymbols = stringToArray(string);
	        strLength = strSymbols.length;
	      }
	      if (length >= strLength) {
	        return string;
	      }
	      var end = length - stringSize(omission);
	      if (end < 1) {
	        return omission;
	      }
	      var result = strSymbols
	        ? castSlice(strSymbols, 0, end).join('')
	        : string.slice(0, end);

	      if (separator === undefined$1) {
	        return result + omission;
	      }
	      if (strSymbols) {
	        end += (result.length - end);
	      }
	      if (isRegExp(separator)) {
	        if (string.slice(end).search(separator)) {
	          var match,
	              substring = result;

	          if (!separator.global) {
	            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
	          }
	          separator.lastIndex = 0;
	          while ((match = separator.exec(substring))) {
	            var newEnd = match.index;
	          }
	          result = result.slice(0, newEnd === undefined$1 ? end : newEnd);
	        }
	      } else if (string.indexOf(baseToString(separator), end) != end) {
	        var index = result.lastIndexOf(separator);
	        if (index > -1) {
	          result = result.slice(0, index);
	        }
	      }
	      return result + omission;
	    }

	    /**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
	     * their corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional
	     * HTML entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.6.0
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */
	    function unescape(string) {
	      string = toString(string);
	      return (string && reHasEscapedHtml.test(string))
	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
	        : string;
	    }

	    /**
	     * Converts `string`, as space separated words, to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.upperCase('--foo-bar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('fooBar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('__foo_bar__');
	     * // => 'FOO BAR'
	     */
	    var upperCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toUpperCase();
	    });

	    /**
	     * Converts the first character of `string` to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.upperFirst('fred');
	     * // => 'Fred'
	     *
	     * _.upperFirst('FRED');
	     * // => 'FRED'
	     */
	    var upperFirst = createCaseFirst('toUpperCase');

	    /**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */
	    function words(string, pattern, guard) {
	      string = toString(string);
	      pattern = guard ? undefined$1 : pattern;

	      if (pattern === undefined$1) {
	        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
	      }
	      return string.match(pattern) || [];
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Function} func The function to attempt.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // Avoid throwing errors for invalid selectors.
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */
	    var attempt = baseRest(function(func, args) {
	      try {
	        return apply(func, undefined$1, args);
	      } catch (e) {
	        return isError(e) ? e : new Error(e);
	      }
	    });

	    /**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method.
	     *
	     * **Note:** This method doesn't set the "length" property of bound functions.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} methodNames The object method names to bind.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'click': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
	     *
	     * _.bindAll(view, ['click']);
	     * jQuery(element).on('click', view.click);
	     * // => Logs 'clicked docs' when clicked.
	     */
	    var bindAll = flatRest(function(object, methodNames) {
	      arrayEach(methodNames, function(key) {
	        key = toKey(key);
	        baseAssignValue(object, key, bind(object[key], object));
	      });
	      return object;
	    });

	    /**
	     * Creates a function that iterates over `pairs` and invokes the corresponding
	     * function of the first predicate to return truthy. The predicate-function
	     * pairs are invoked with the `this` binding and arguments of the created
	     * function.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Array} pairs The predicate-function pairs.
	     * @returns {Function} Returns the new composite function.
	     * @example
	     *
	     * var func = _.cond([
	     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
	     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
	     *   [_.stubTrue,                      _.constant('no match')]
	     * ]);
	     *
	     * func({ 'a': 1, 'b': 2 });
	     * // => 'matches A'
	     *
	     * func({ 'a': 0, 'b': 1 });
	     * // => 'matches B'
	     *
	     * func({ 'a': '1', 'b': '2' });
	     * // => 'no match'
	     */
	    function cond(pairs) {
	      var length = pairs == null ? 0 : pairs.length,
	          toIteratee = getIteratee();

	      pairs = !length ? [] : arrayMap(pairs, function(pair) {
	        if (typeof pair[1] != 'function') {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	        return [toIteratee(pair[0]), pair[1]];
	      });

	      return baseRest(function(args) {
	        var index = -1;
	        while (++index < length) {
	          var pair = pairs[index];
	          if (apply(pair[0], this, args)) {
	            return apply(pair[1], this, args);
	          }
	        }
	      });
	    }

	    /**
	     * Creates a function that invokes the predicate properties of `source` with
	     * the corresponding property values of a given object, returning `true` if
	     * all predicates return truthy, else `false`.
	     *
	     * **Note:** The created function is equivalent to `_.conformsTo` with
	     * `source` partially applied.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 2, 'b': 1 },
	     *   { 'a': 1, 'b': 2 }
	     * ];
	     *
	     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
	     * // => [{ 'a': 1, 'b': 2 }]
	     */
	    function conforms(source) {
	      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new constant function.
	     * @example
	     *
	     * var objects = _.times(2, _.constant({ 'a': 1 }));
	     *
	     * console.log(objects);
	     * // => [{ 'a': 1 }, { 'a': 1 }]
	     *
	     * console.log(objects[0] === objects[1]);
	     * // => true
	     */
	    function constant(value) {
	      return function() {
	        return value;
	      };
	    }

	    /**
	     * Checks `value` to determine whether a default value should be returned in
	     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
	     * or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.14.0
	     * @category Util
	     * @param {*} value The value to check.
	     * @param {*} defaultValue The default value.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * _.defaultTo(1, 10);
	     * // => 1
	     *
	     * _.defaultTo(undefined, 10);
	     * // => 10
	     */
	    function defaultTo(value, defaultValue) {
	      return (value == null || value !== value) ? defaultValue : value;
	    }

	    /**
	     * Creates a function that returns the result of invoking the given functions
	     * with the `this` binding of the created function, where each successive
	     * invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
	     * @returns {Function} Returns the new composite function.
	     * @see _.flowRight
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow([_.add, square]);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flow = createFlow();

	    /**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the given functions from right to left.
	     *
	     * @static
	     * @since 3.0.0
	     * @memberOf _
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
	     * @returns {Function} Returns the new composite function.
	     * @see _.flow
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight([square, _.add]);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flowRight = createFlow(true);

	    /**
	     * This method returns the first argument it receives.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     *
	     * console.log(_.identity(object) === object);
	     * // => true
	     */
	    function identity(value) {
	      return value;
	    }

	    /**
	     * Creates a function that invokes `func` with the arguments of the created
	     * function. If `func` is a property name, the created function returns the
	     * property value for a given element. If `func` is an array or object, the
	     * created function returns `true` for elements that contain the equivalent
	     * source properties, otherwise it returns `false`.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Util
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
	     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, _.iteratee(['user', 'fred']));
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, _.iteratee('user'));
	     * // => ['barney', 'fred']
	     *
	     * // Create custom iteratee shorthands.
	     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
	     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
	     *     return func.test(string);
	     *   };
	     * });
	     *
	     * _.filter(['abc', 'def'], /ef/);
	     * // => ['def']
	     */
	    function iteratee(func) {
	      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that performs a partial deep comparison between a given
	     * object and `source`, returning `true` if the given object has equivalent
	     * property values, else `false`.
	     *
	     * **Note:** The created function is equivalent to `_.isMatch` with `source`
	     * partially applied.
	     *
	     * Partial comparisons will match empty array and empty object `source`
	     * values against any array or object value, respectively. See `_.isEqual`
	     * for a list of supported value comparisons.
	     *
	     * **Note:** Multiple values can be checked by combining several matchers
	     * using `_.overSome`
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 1, 'b': 2, 'c': 3 },
	     *   { 'a': 4, 'b': 5, 'c': 6 }
	     * ];
	     *
	     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
	     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
	     *
	     * // Checking for several possible values
	     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
	     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
	     */
	    function matches(source) {
	      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that performs a partial deep comparison between the
	     * value at `path` of a given object to `srcValue`, returning `true` if the
	     * object value is equivalent, else `false`.
	     *
	     * **Note:** Partial comparisons will match empty array and empty object
	     * `srcValue` values against any array or object value, respectively. See
	     * `_.isEqual` for a list of supported value comparisons.
	     *
	     * **Note:** Multiple values can be checked by combining several matchers
	     * using `_.overSome`
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 1, 'b': 2, 'c': 3 },
	     *   { 'a': 4, 'b': 5, 'c': 6 }
	     * ];
	     *
	     * _.find(objects, _.matchesProperty('a', 4));
	     * // => { 'a': 4, 'b': 5, 'c': 6 }
	     *
	     * // Checking for several possible values
	     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
	     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
	     */
	    function matchesProperty(path, srcValue) {
	      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that invokes the method at `path` of a given object.
	     * Any additional arguments are provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new invoker function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': _.constant(2) } },
	     *   { 'a': { 'b': _.constant(1) } }
	     * ];
	     *
	     * _.map(objects, _.method('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(objects, _.method(['a', 'b']));
	     * // => [2, 1]
	     */
	    var method = baseRest(function(path, args) {
	      return function(object) {
	        return baseInvoke(object, path, args);
	      };
	    });

	    /**
	     * The opposite of `_.method`; this method creates a function that invokes
	     * the method at a given path of `object`. Any additional arguments are
	     * provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new invoker function.
	     * @example
	     *
	     * var array = _.times(3, _.constant),
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	     * // => [2, 0]
	     */
	    var methodOf = baseRest(function(object, args) {
	      return function(path) {
	        return baseInvoke(object, path, args);
	      };
	    });

	    /**
	     * Adds all own enumerable string keyed function properties of a source
	     * object to the destination object. If `object` is a function, then methods
	     * are added to its prototype as well.
	     *
	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	     * avoid conflicts caused by modifying the original.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Function|Object} [object=lodash] The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */
	    function mixin(object, source, options) {
	      var props = keys(source),
	          methodNames = baseFunctions(source, props);

	      if (options == null &&
	          !(isObject(source) && (methodNames.length || !props.length))) {
	        options = source;
	        source = object;
	        object = this;
	        methodNames = baseFunctions(source, keys(source));
	      }
	      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
	          isFunc = isFunction(object);

	      arrayEach(methodNames, function(methodName) {
	        var func = source[methodName];
	        object[methodName] = func;
	        if (isFunc) {
	          object.prototype[methodName] = function() {
	            var chainAll = this.__chain__;
	            if (chain || chainAll) {
	              var result = object(this.__wrapped__),
	                  actions = result.__actions__ = copyArray(this.__actions__);

	              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
	              result.__chain__ = chainAll;
	              return result;
	            }
	            return func.apply(object, arrayPush([this.value()], arguments));
	          };
	        }
	      });

	      return object;
	    }

	    /**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
	    function noConflict() {
	      if (root._ === this) {
	        root._ = oldDash;
	      }
	      return this;
	    }

	    /**
	     * This method returns `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Util
	     * @example
	     *
	     * _.times(2, _.noop);
	     * // => [undefined, undefined]
	     */
	    function noop() {
	      // No operation performed.
	    }

	    /**
	     * Creates a function that gets the argument at index `n`. If `n` is negative,
	     * the nth argument from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [n=0] The index of the argument to return.
	     * @returns {Function} Returns the new pass-thru function.
	     * @example
	     *
	     * var func = _.nthArg(1);
	     * func('a', 'b', 'c', 'd');
	     * // => 'b'
	     *
	     * var func = _.nthArg(-2);
	     * func('a', 'b', 'c', 'd');
	     * // => 'c'
	     */
	    function nthArg(n) {
	      n = toInteger(n);
	      return baseRest(function(args) {
	        return baseNth(args, n);
	      });
	    }

	    /**
	     * Creates a function that invokes `iteratees` with the arguments it receives
	     * and returns their results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
	     *  The iteratees to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.over([Math.max, Math.min]);
	     *
	     * func(1, 2, 3, 4);
	     * // => [4, 1]
	     */
	    var over = createOver(arrayMap);

	    /**
	     * Creates a function that checks if **all** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * Following shorthands are possible for providing predicates.
	     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
	     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [predicates=[_.identity]]
	     *  The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overEvery([Boolean, isFinite]);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => false
	     *
	     * func(NaN);
	     * // => false
	     */
	    var overEvery = createOver(arrayEvery);

	    /**
	     * Creates a function that checks if **any** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * Following shorthands are possible for providing predicates.
	     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
	     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [predicates=[_.identity]]
	     *  The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overSome([Boolean, isFinite]);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => true
	     *
	     * func(NaN);
	     * // => false
	     *
	     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
	     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
	     */
	    var overSome = createOver(arraySome);

	    /**
	     * Creates a function that returns the value at `path` of a given object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': 2 } },
	     *   { 'a': { 'b': 1 } }
	     * ];
	     *
	     * _.map(objects, _.property('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	     * // => [1, 2]
	     */
	    function property(path) {
	      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
	    }

	    /**
	     * The opposite of `_.property`; this method creates a function that returns
	     * the value at a given path of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var array = [0, 1, 2],
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	     * // => [2, 0]
	     */
	    function propertyOf(object) {
	      return function(path) {
	        return object == null ? undefined$1 : baseGet(object, path);
	      };
	    }

	    /**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
	     * `start` is specified without an `end` or `step`. If `end` is not specified,
	     * it's set to `start` with `start` then set to `0`.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the range of numbers.
	     * @see _.inRange, _.rangeRight
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(-4);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */
	    var range = createRange();

	    /**
	     * This method is like `_.range` except that it populates values in
	     * descending order.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the range of numbers.
	     * @see _.inRange, _.range
	     * @example
	     *
	     * _.rangeRight(4);
	     * // => [3, 2, 1, 0]
	     *
	     * _.rangeRight(-4);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 5);
	     * // => [4, 3, 2, 1]
	     *
	     * _.rangeRight(0, 20, 5);
	     * // => [15, 10, 5, 0]
	     *
	     * _.rangeRight(0, -4, -1);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.rangeRight(0);
	     * // => []
	     */
	    var rangeRight = createRange(true);

	    /**
	     * This method returns a new empty array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {Array} Returns the new empty array.
	     * @example
	     *
	     * var arrays = _.times(2, _.stubArray);
	     *
	     * console.log(arrays);
	     * // => [[], []]
	     *
	     * console.log(arrays[0] === arrays[1]);
	     * // => false
	     */
	    function stubArray() {
	      return [];
	    }

	    /**
	     * This method returns `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {boolean} Returns `false`.
	     * @example
	     *
	     * _.times(2, _.stubFalse);
	     * // => [false, false]
	     */
	    function stubFalse() {
	      return false;
	    }

	    /**
	     * This method returns a new empty object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {Object} Returns the new empty object.
	     * @example
	     *
	     * var objects = _.times(2, _.stubObject);
	     *
	     * console.log(objects);
	     * // => [{}, {}]
	     *
	     * console.log(objects[0] === objects[1]);
	     * // => false
	     */
	    function stubObject() {
	      return {};
	    }

	    /**
	     * This method returns an empty string.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {string} Returns the empty string.
	     * @example
	     *
	     * _.times(2, _.stubString);
	     * // => ['', '']
	     */
	    function stubString() {
	      return '';
	    }

	    /**
	     * This method returns `true`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {boolean} Returns `true`.
	     * @example
	     *
	     * _.times(2, _.stubTrue);
	     * // => [true, true]
	     */
	    function stubTrue() {
	      return true;
	    }

	    /**
	     * Invokes the iteratee `n` times, returning an array of the results of
	     * each invocation. The iteratee is invoked with one argument; (index).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.times(3, String);
	     * // => ['0', '1', '2']
	     *
	     *  _.times(4, _.constant(0));
	     * // => [0, 0, 0, 0]
	     */
	    function times(n, iteratee) {
	      n = toInteger(n);
	      if (n < 1 || n > MAX_SAFE_INTEGER) {
	        return [];
	      }
	      var index = MAX_ARRAY_LENGTH,
	          length = nativeMin(n, MAX_ARRAY_LENGTH);

	      iteratee = getIteratee(iteratee);
	      n -= MAX_ARRAY_LENGTH;

	      var result = baseTimes(length, iteratee);
	      while (++index < n) {
	        iteratee(index);
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to a property path array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the new property path array.
	     * @example
	     *
	     * _.toPath('a.b.c');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toPath('a[0].b.c');
	     * // => ['a', '0', 'b', 'c']
	     */
	    function toPath(value) {
	      if (isArray(value)) {
	        return arrayMap(value, toKey);
	      }
	      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
	    }

	    /**
	     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {string} [prefix=''] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
	    function uniqueId(prefix) {
	      var id = ++idCounter;
	      return toString(prefix) + id;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Adds two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {number} augend The first number in an addition.
	     * @param {number} addend The second number in an addition.
	     * @returns {number} Returns the total.
	     * @example
	     *
	     * _.add(6, 4);
	     * // => 10
	     */
	    var add = createMathOperation(function(augend, addend) {
	      return augend + addend;
	    }, 0);

	    /**
	     * Computes `number` rounded up to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round up.
	     * @param {number} [precision=0] The precision to round up to.
	     * @returns {number} Returns the rounded up number.
	     * @example
	     *
	     * _.ceil(4.006);
	     * // => 5
	     *
	     * _.ceil(6.004, 2);
	     * // => 6.01
	     *
	     * _.ceil(6040, -2);
	     * // => 6100
	     */
	    var ceil = createRound('ceil');

	    /**
	     * Divide two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} dividend The first number in a division.
	     * @param {number} divisor The second number in a division.
	     * @returns {number} Returns the quotient.
	     * @example
	     *
	     * _.divide(6, 4);
	     * // => 1.5
	     */
	    var divide = createMathOperation(function(dividend, divisor) {
	      return dividend / divisor;
	    }, 1);

	    /**
	     * Computes `number` rounded down to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round down.
	     * @param {number} [precision=0] The precision to round down to.
	     * @returns {number} Returns the rounded down number.
	     * @example
	     *
	     * _.floor(4.006);
	     * // => 4
	     *
	     * _.floor(0.046, 2);
	     * // => 0.04
	     *
	     * _.floor(4060, -2);
	     * // => 4000
	     */
	    var floor = createRound('floor');

	    /**
	     * Computes the maximum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => undefined
	     */
	    function max(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, baseGt)
	        : undefined$1;
	    }

	    /**
	     * This method is like `_.max` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.maxBy(objects, function(o) { return o.n; });
	     * // => { 'n': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.maxBy(objects, 'n');
	     * // => { 'n': 2 }
	     */
	    function maxBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
	        : undefined$1;
	    }

	    /**
	     * Computes the mean of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * _.mean([4, 2, 8, 6]);
	     * // => 5
	     */
	    function mean(array) {
	      return baseMean(array, identity);
	    }

	    /**
	     * This method is like `_.mean` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be averaged.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.meanBy(objects, function(o) { return o.n; });
	     * // => 5
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.meanBy(objects, 'n');
	     * // => 5
	     */
	    function meanBy(array, iteratee) {
	      return baseMean(array, getIteratee(iteratee, 2));
	    }

	    /**
	     * Computes the minimum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => undefined
	     */
	    function min(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, baseLt)
	        : undefined$1;
	    }

	    /**
	     * This method is like `_.min` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.minBy(objects, function(o) { return o.n; });
	     * // => { 'n': 1 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.minBy(objects, 'n');
	     * // => { 'n': 1 }
	     */
	    function minBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
	        : undefined$1;
	    }

	    /**
	     * Multiply two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} multiplier The first number in a multiplication.
	     * @param {number} multiplicand The second number in a multiplication.
	     * @returns {number} Returns the product.
	     * @example
	     *
	     * _.multiply(6, 4);
	     * // => 24
	     */
	    var multiply = createMathOperation(function(multiplier, multiplicand) {
	      return multiplier * multiplicand;
	    }, 1);

	    /**
	     * Computes `number` rounded to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round.
	     * @param {number} [precision=0] The precision to round to.
	     * @returns {number} Returns the rounded number.
	     * @example
	     *
	     * _.round(4.006);
	     * // => 4
	     *
	     * _.round(4.006, 2);
	     * // => 4.01
	     *
	     * _.round(4060, -2);
	     * // => 4100
	     */
	    var round = createRound('round');

	    /**
	     * Subtract two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {number} minuend The first number in a subtraction.
	     * @param {number} subtrahend The second number in a subtraction.
	     * @returns {number} Returns the difference.
	     * @example
	     *
	     * _.subtract(6, 4);
	     * // => 2
	     */
	    var subtract = createMathOperation(function(minuend, subtrahend) {
	      return minuend - subtrahend;
	    }, 0);

	    /**
	     * Computes the sum of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 2, 8, 6]);
	     * // => 20
	     */
	    function sum(array) {
	      return (array && array.length)
	        ? baseSum(array, identity)
	        : 0;
	    }

	    /**
	     * This method is like `_.sum` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be summed.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.sumBy(objects, function(o) { return o.n; });
	     * // => 20
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sumBy(objects, 'n');
	     * // => 20
	     */
	    function sumBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSum(array, getIteratee(iteratee, 2))
	        : 0;
	    }

	    /*------------------------------------------------------------------------*/

	    // Add methods that return wrapped values in chain sequences.
	    lodash.after = after;
	    lodash.ary = ary;
	    lodash.assign = assign;
	    lodash.assignIn = assignIn;
	    lodash.assignInWith = assignInWith;
	    lodash.assignWith = assignWith;
	    lodash.at = at;
	    lodash.before = before;
	    lodash.bind = bind;
	    lodash.bindAll = bindAll;
	    lodash.bindKey = bindKey;
	    lodash.castArray = castArray;
	    lodash.chain = chain;
	    lodash.chunk = chunk;
	    lodash.compact = compact;
	    lodash.concat = concat;
	    lodash.cond = cond;
	    lodash.conforms = conforms;
	    lodash.constant = constant;
	    lodash.countBy = countBy;
	    lodash.create = create;
	    lodash.curry = curry;
	    lodash.curryRight = curryRight;
	    lodash.debounce = debounce;
	    lodash.defaults = defaults;
	    lodash.defaultsDeep = defaultsDeep;
	    lodash.defer = defer;
	    lodash.delay = delay;
	    lodash.difference = difference;
	    lodash.differenceBy = differenceBy;
	    lodash.differenceWith = differenceWith;
	    lodash.drop = drop;
	    lodash.dropRight = dropRight;
	    lodash.dropRightWhile = dropRightWhile;
	    lodash.dropWhile = dropWhile;
	    lodash.fill = fill;
	    lodash.filter = filter;
	    lodash.flatMap = flatMap;
	    lodash.flatMapDeep = flatMapDeep;
	    lodash.flatMapDepth = flatMapDepth;
	    lodash.flatten = flatten;
	    lodash.flattenDeep = flattenDeep;
	    lodash.flattenDepth = flattenDepth;
	    lodash.flip = flip;
	    lodash.flow = flow;
	    lodash.flowRight = flowRight;
	    lodash.fromPairs = fromPairs;
	    lodash.functions = functions;
	    lodash.functionsIn = functionsIn;
	    lodash.groupBy = groupBy;
	    lodash.initial = initial;
	    lodash.intersection = intersection;
	    lodash.intersectionBy = intersectionBy;
	    lodash.intersectionWith = intersectionWith;
	    lodash.invert = invert;
	    lodash.invertBy = invertBy;
	    lodash.invokeMap = invokeMap;
	    lodash.iteratee = iteratee;
	    lodash.keyBy = keyBy;
	    lodash.keys = keys;
	    lodash.keysIn = keysIn;
	    lodash.map = map;
	    lodash.mapKeys = mapKeys;
	    lodash.mapValues = mapValues;
	    lodash.matches = matches;
	    lodash.matchesProperty = matchesProperty;
	    lodash.memoize = memoize;
	    lodash.merge = merge;
	    lodash.mergeWith = mergeWith;
	    lodash.method = method;
	    lodash.methodOf = methodOf;
	    lodash.mixin = mixin;
	    lodash.negate = negate;
	    lodash.nthArg = nthArg;
	    lodash.omit = omit;
	    lodash.omitBy = omitBy;
	    lodash.once = once;
	    lodash.orderBy = orderBy;
	    lodash.over = over;
	    lodash.overArgs = overArgs;
	    lodash.overEvery = overEvery;
	    lodash.overSome = overSome;
	    lodash.partial = partial;
	    lodash.partialRight = partialRight;
	    lodash.partition = partition;
	    lodash.pick = pick;
	    lodash.pickBy = pickBy;
	    lodash.property = property;
	    lodash.propertyOf = propertyOf;
	    lodash.pull = pull;
	    lodash.pullAll = pullAll;
	    lodash.pullAllBy = pullAllBy;
	    lodash.pullAllWith = pullAllWith;
	    lodash.pullAt = pullAt;
	    lodash.range = range;
	    lodash.rangeRight = rangeRight;
	    lodash.rearg = rearg;
	    lodash.reject = reject;
	    lodash.remove = remove;
	    lodash.rest = rest;
	    lodash.reverse = reverse;
	    lodash.sampleSize = sampleSize;
	    lodash.set = set;
	    lodash.setWith = setWith;
	    lodash.shuffle = shuffle;
	    lodash.slice = slice;
	    lodash.sortBy = sortBy;
	    lodash.sortedUniq = sortedUniq;
	    lodash.sortedUniqBy = sortedUniqBy;
	    lodash.split = split;
	    lodash.spread = spread;
	    lodash.tail = tail;
	    lodash.take = take;
	    lodash.takeRight = takeRight;
	    lodash.takeRightWhile = takeRightWhile;
	    lodash.takeWhile = takeWhile;
	    lodash.tap = tap;
	    lodash.throttle = throttle;
	    lodash.thru = thru;
	    lodash.toArray = toArray;
	    lodash.toPairs = toPairs;
	    lodash.toPairsIn = toPairsIn;
	    lodash.toPath = toPath;
	    lodash.toPlainObject = toPlainObject;
	    lodash.transform = transform;
	    lodash.unary = unary;
	    lodash.union = union;
	    lodash.unionBy = unionBy;
	    lodash.unionWith = unionWith;
	    lodash.uniq = uniq;
	    lodash.uniqBy = uniqBy;
	    lodash.uniqWith = uniqWith;
	    lodash.unset = unset;
	    lodash.unzip = unzip;
	    lodash.unzipWith = unzipWith;
	    lodash.update = update;
	    lodash.updateWith = updateWith;
	    lodash.values = values;
	    lodash.valuesIn = valuesIn;
	    lodash.without = without;
	    lodash.words = words;
	    lodash.wrap = wrap;
	    lodash.xor = xor;
	    lodash.xorBy = xorBy;
	    lodash.xorWith = xorWith;
	    lodash.zip = zip;
	    lodash.zipObject = zipObject;
	    lodash.zipObjectDeep = zipObjectDeep;
	    lodash.zipWith = zipWith;

	    // Add aliases.
	    lodash.entries = toPairs;
	    lodash.entriesIn = toPairsIn;
	    lodash.extend = assignIn;
	    lodash.extendWith = assignInWith;

	    // Add methods to `lodash.prototype`.
	    mixin(lodash, lodash);

	    /*------------------------------------------------------------------------*/

	    // Add methods that return unwrapped values in chain sequences.
	    lodash.add = add;
	    lodash.attempt = attempt;
	    lodash.camelCase = camelCase;
	    lodash.capitalize = capitalize;
	    lodash.ceil = ceil;
	    lodash.clamp = clamp;
	    lodash.clone = clone;
	    lodash.cloneDeep = cloneDeep;
	    lodash.cloneDeepWith = cloneDeepWith;
	    lodash.cloneWith = cloneWith;
	    lodash.conformsTo = conformsTo;
	    lodash.deburr = deburr;
	    lodash.defaultTo = defaultTo;
	    lodash.divide = divide;
	    lodash.endsWith = endsWith;
	    lodash.eq = eq;
	    lodash.escape = escape;
	    lodash.escapeRegExp = escapeRegExp;
	    lodash.every = every;
	    lodash.find = find;
	    lodash.findIndex = findIndex;
	    lodash.findKey = findKey;
	    lodash.findLast = findLast;
	    lodash.findLastIndex = findLastIndex;
	    lodash.findLastKey = findLastKey;
	    lodash.floor = floor;
	    lodash.forEach = forEach;
	    lodash.forEachRight = forEachRight;
	    lodash.forIn = forIn;
	    lodash.forInRight = forInRight;
	    lodash.forOwn = forOwn;
	    lodash.forOwnRight = forOwnRight;
	    lodash.get = get;
	    lodash.gt = gt;
	    lodash.gte = gte;
	    lodash.has = has;
	    lodash.hasIn = hasIn;
	    lodash.head = head;
	    lodash.identity = identity;
	    lodash.includes = includes;
	    lodash.indexOf = indexOf;
	    lodash.inRange = inRange;
	    lodash.invoke = invoke;
	    lodash.isArguments = isArguments;
	    lodash.isArray = isArray;
	    lodash.isArrayBuffer = isArrayBuffer;
	    lodash.isArrayLike = isArrayLike;
	    lodash.isArrayLikeObject = isArrayLikeObject;
	    lodash.isBoolean = isBoolean;
	    lodash.isBuffer = isBuffer;
	    lodash.isDate = isDate;
	    lodash.isElement = isElement;
	    lodash.isEmpty = isEmpty;
	    lodash.isEqual = isEqual;
	    lodash.isEqualWith = isEqualWith;
	    lodash.isError = isError;
	    lodash.isFinite = isFinite;
	    lodash.isFunction = isFunction;
	    lodash.isInteger = isInteger;
	    lodash.isLength = isLength;
	    lodash.isMap = isMap;
	    lodash.isMatch = isMatch;
	    lodash.isMatchWith = isMatchWith;
	    lodash.isNaN = isNaN;
	    lodash.isNative = isNative;
	    lodash.isNil = isNil;
	    lodash.isNull = isNull;
	    lodash.isNumber = isNumber;
	    lodash.isObject = isObject;
	    lodash.isObjectLike = isObjectLike;
	    lodash.isPlainObject = isPlainObject;
	    lodash.isRegExp = isRegExp;
	    lodash.isSafeInteger = isSafeInteger;
	    lodash.isSet = isSet;
	    lodash.isString = isString;
	    lodash.isSymbol = isSymbol;
	    lodash.isTypedArray = isTypedArray;
	    lodash.isUndefined = isUndefined;
	    lodash.isWeakMap = isWeakMap;
	    lodash.isWeakSet = isWeakSet;
	    lodash.join = join;
	    lodash.kebabCase = kebabCase;
	    lodash.last = last;
	    lodash.lastIndexOf = lastIndexOf;
	    lodash.lowerCase = lowerCase;
	    lodash.lowerFirst = lowerFirst;
	    lodash.lt = lt;
	    lodash.lte = lte;
	    lodash.max = max;
	    lodash.maxBy = maxBy;
	    lodash.mean = mean;
	    lodash.meanBy = meanBy;
	    lodash.min = min;
	    lodash.minBy = minBy;
	    lodash.stubArray = stubArray;
	    lodash.stubFalse = stubFalse;
	    lodash.stubObject = stubObject;
	    lodash.stubString = stubString;
	    lodash.stubTrue = stubTrue;
	    lodash.multiply = multiply;
	    lodash.nth = nth;
	    lodash.noConflict = noConflict;
	    lodash.noop = noop;
	    lodash.now = now;
	    lodash.pad = pad;
	    lodash.padEnd = padEnd;
	    lodash.padStart = padStart;
	    lodash.parseInt = parseInt;
	    lodash.random = random;
	    lodash.reduce = reduce;
	    lodash.reduceRight = reduceRight;
	    lodash.repeat = repeat;
	    lodash.replace = replace;
	    lodash.result = result;
	    lodash.round = round;
	    lodash.runInContext = runInContext;
	    lodash.sample = sample;
	    lodash.size = size;
	    lodash.snakeCase = snakeCase;
	    lodash.some = some;
	    lodash.sortedIndex = sortedIndex;
	    lodash.sortedIndexBy = sortedIndexBy;
	    lodash.sortedIndexOf = sortedIndexOf;
	    lodash.sortedLastIndex = sortedLastIndex;
	    lodash.sortedLastIndexBy = sortedLastIndexBy;
	    lodash.sortedLastIndexOf = sortedLastIndexOf;
	    lodash.startCase = startCase;
	    lodash.startsWith = startsWith;
	    lodash.subtract = subtract;
	    lodash.sum = sum;
	    lodash.sumBy = sumBy;
	    lodash.template = template;
	    lodash.times = times;
	    lodash.toFinite = toFinite;
	    lodash.toInteger = toInteger;
	    lodash.toLength = toLength;
	    lodash.toLower = toLower;
	    lodash.toNumber = toNumber;
	    lodash.toSafeInteger = toSafeInteger;
	    lodash.toString = toString;
	    lodash.toUpper = toUpper;
	    lodash.trim = trim;
	    lodash.trimEnd = trimEnd;
	    lodash.trimStart = trimStart;
	    lodash.truncate = truncate;
	    lodash.unescape = unescape;
	    lodash.uniqueId = uniqueId;
	    lodash.upperCase = upperCase;
	    lodash.upperFirst = upperFirst;

	    // Add aliases.
	    lodash.each = forEach;
	    lodash.eachRight = forEachRight;
	    lodash.first = head;

	    mixin(lodash, (function() {
	      var source = {};
	      baseForOwn(lodash, function(func, methodName) {
	        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
	          source[methodName] = func;
	        }
	      });
	      return source;
	    }()), { 'chain': false });

	    /*------------------------------------------------------------------------*/

	    /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type {string}
	     */
	    lodash.VERSION = VERSION;

	    // Assign default placeholders.
	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
	      lodash[methodName].placeholder = lodash;
	    });

	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	    arrayEach(['drop', 'take'], function(methodName, index) {
	      LazyWrapper.prototype[methodName] = function(n) {
	        n = n === undefined$1 ? 1 : nativeMax(toInteger(n), 0);

	        var result = (this.__filtered__ && !index)
	          ? new LazyWrapper(this)
	          : this.clone();

	        if (result.__filtered__) {
	          result.__takeCount__ = nativeMin(n, result.__takeCount__);
	        } else {
	          result.__views__.push({
	            'size': nativeMin(n, MAX_ARRAY_LENGTH),
	            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
	          });
	        }
	        return result;
	      };

	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
	        return this.reverse()[methodName](n).reverse();
	      };
	    });

	    // Add `LazyWrapper` methods that accept an `iteratee` value.
	    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
	      var type = index + 1,
	          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

	      LazyWrapper.prototype[methodName] = function(iteratee) {
	        var result = this.clone();
	        result.__iteratees__.push({
	          'iteratee': getIteratee(iteratee, 3),
	          'type': type
	        });
	        result.__filtered__ = result.__filtered__ || isFilter;
	        return result;
	      };
	    });

	    // Add `LazyWrapper` methods for `_.head` and `_.last`.
	    arrayEach(['head', 'last'], function(methodName, index) {
	      var takeName = 'take' + (index ? 'Right' : '');

	      LazyWrapper.prototype[methodName] = function() {
	        return this[takeName](1).value()[0];
	      };
	    });

	    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
	    arrayEach(['initial', 'tail'], function(methodName, index) {
	      var dropName = 'drop' + (index ? '' : 'Right');

	      LazyWrapper.prototype[methodName] = function() {
	        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
	      };
	    });

	    LazyWrapper.prototype.compact = function() {
	      return this.filter(identity);
	    };

	    LazyWrapper.prototype.find = function(predicate) {
	      return this.filter(predicate).head();
	    };

	    LazyWrapper.prototype.findLast = function(predicate) {
	      return this.reverse().find(predicate);
	    };

	    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
	      if (typeof path == 'function') {
	        return new LazyWrapper(this);
	      }
	      return this.map(function(value) {
	        return baseInvoke(value, path, args);
	      });
	    });

	    LazyWrapper.prototype.reject = function(predicate) {
	      return this.filter(negate(getIteratee(predicate)));
	    };

	    LazyWrapper.prototype.slice = function(start, end) {
	      start = toInteger(start);

	      var result = this;
	      if (result.__filtered__ && (start > 0 || end < 0)) {
	        return new LazyWrapper(result);
	      }
	      if (start < 0) {
	        result = result.takeRight(-start);
	      } else if (start) {
	        result = result.drop(start);
	      }
	      if (end !== undefined$1) {
	        end = toInteger(end);
	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
	      }
	      return result;
	    };

	    LazyWrapper.prototype.takeRightWhile = function(predicate) {
	      return this.reverse().takeWhile(predicate).reverse();
	    };

	    LazyWrapper.prototype.toArray = function() {
	      return this.take(MAX_ARRAY_LENGTH);
	    };

	    // Add `LazyWrapper` methods to `lodash.prototype`.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
	          isTaker = /^(?:head|last)$/.test(methodName),
	          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
	          retUnwrapped = isTaker || /^find/.test(methodName);

	      if (!lodashFunc) {
	        return;
	      }
	      lodash.prototype[methodName] = function() {
	        var value = this.__wrapped__,
	            args = isTaker ? [1] : arguments,
	            isLazy = value instanceof LazyWrapper,
	            iteratee = args[0],
	            useLazy = isLazy || isArray(value);

	        var interceptor = function(value) {
	          var result = lodashFunc.apply(lodash, arrayPush([value], args));
	          return (isTaker && chainAll) ? result[0] : result;
	        };

	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
	          // Avoid lazy use if the iteratee has a "length" value other than `1`.
	          isLazy = useLazy = false;
	        }
	        var chainAll = this.__chain__,
	            isHybrid = !!this.__actions__.length,
	            isUnwrapped = retUnwrapped && !chainAll,
	            onlyLazy = isLazy && !isHybrid;

	        if (!retUnwrapped && useLazy) {
	          value = onlyLazy ? value : new LazyWrapper(this);
	          var result = func.apply(value, args);
	          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined$1 });
	          return new LodashWrapper(result, chainAll);
	        }
	        if (isUnwrapped && onlyLazy) {
	          return func.apply(this, args);
	        }
	        result = this.thru(interceptor);
	        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
	      };
	    });

	    // Add `Array` methods to `lodash.prototype`.
	    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
	      var func = arrayProto[methodName],
	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
	          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

	      lodash.prototype[methodName] = function() {
	        var args = arguments;
	        if (retUnwrapped && !this.__chain__) {
	          var value = this.value();
	          return func.apply(isArray(value) ? value : [], args);
	        }
	        return this[chainName](function(value) {
	          return func.apply(isArray(value) ? value : [], args);
	        });
	      };
	    });

	    // Map minified method names to their real names.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName];
	      if (lodashFunc) {
	        var key = lodashFunc.name + '';
	        if (!hasOwnProperty.call(realNames, key)) {
	          realNames[key] = [];
	        }
	        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
	      }
	    });

	    realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
	      'name': 'wrapper',
	      'func': undefined$1
	    }];

	    // Add methods to `LazyWrapper`.
	    LazyWrapper.prototype.clone = lazyClone;
	    LazyWrapper.prototype.reverse = lazyReverse;
	    LazyWrapper.prototype.value = lazyValue;

	    // Add chain sequence methods to the `lodash` wrapper.
	    lodash.prototype.at = wrapperAt;
	    lodash.prototype.chain = wrapperChain;
	    lodash.prototype.commit = wrapperCommit;
	    lodash.prototype.next = wrapperNext;
	    lodash.prototype.plant = wrapperPlant;
	    lodash.prototype.reverse = wrapperReverse;
	    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

	    // Add lazy aliases.
	    lodash.prototype.first = lodash.prototype.head;

	    if (symIterator) {
	      lodash.prototype[symIterator] = wrapperToIterator;
	    }
	    return lodash;
	  });

	  /*--------------------------------------------------------------------------*/

	  // Export lodash.
	  var _ = runInContext();

	  // Some AMD build optimizers, like r.js, check for condition patterns like:
	  if (freeModule) {
	    // Export for Node.js.
	    (freeModule.exports = _)._ = _;
	    // Export for CommonJS support.
	    freeExports._ = _;
	  }
	  else {
	    // Export to the global object.
	    root._ = _;
	  }
	}.call(commonjsGlobal));
	});

	var data$1 = 'dinosaurdata.csv'; // export const fossilData = 'ftgreenetrees2.csv';
	// export const fossilData = 'fossilsJurassic1.csv';

	var fossilData = 'jurassic_bigdata.csv'; // export const fossilData = 'westernUSjurassicfossils.csv';

	var fossilData2 = 'triassicFossils.csv';
	var fossilData3 = 'cretaceousFossils.csv'; // export const data = '/data/DFRLab_interference2020.csv';

	var spotData = 'timelinedates.csv'; // export const coronaData = 'us.csv';

	var images = 'images/'; // export const googleTrendsApiPath = '-cove-42135.herokuapp.com/keyword/';

	var parseDate = timeParse('%m/%d/%Y'); // extract attribution date range from data

	var preloadImages = function preloadImages(data) {
	  data.forEach(function (d) {
	    return new Image().src = "".concat(images).concat(d.periodEra, ".jpg");
	  });
	  data.forEach(function (d) {
	    return new Image().src = "".concat(images).concat(d.name.toLowerCase(), "1.jpg");
	  });
	}; // split string in array

	var splitString = function splitString(s) {
	  if (s === '' || s === ',') return ['unspecified'];
	  return s.split(',').map(function (d) {
	    return d.trim();
	  }).filter(function (d) {
	    return d !== '';
	  });
	}; // check, if there's an overlap between array and filter

	var haveOverlap = function haveOverlap(filter, arr) {
	  return filter.filter(function (d) {
	    return d.selected;
	  }).map(function (d) {
	    return d.id;
	  }).some(function (item) {
	    return arr.includes(item);
	  });
	}; // check, if a number is within a 2D range (given as array with length 2)

	var withinRange = function withinRange(arr, num) {
	  var bypass = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	  return bypass ? true : num >= arr[0] && num <= arr[1];
	}; // check, if a search string (filter) is included in a string

	var includesTextSearch = function includesTextSearch(filter, s) {
	  var filterArr = filter.toLowerCase().split(' or ');
	  if (filterArr.length === 0) return true;
	  return filterArr.some(function (f) {
	    return s.indexOf(f) > -1;
	  });
	}; // check if case id filter is set and if id is matching

	var isCaseId = function isCaseId(filter, id) {
	  return filter === undefined ? true : filter === id;
	}; // check, if polarization data can be shown

	var showPolarization = function showPolarization(filter, polarization) {
	  if (!filter) return true;
	  return polarization.fulfills10Articles || polarization.fulfills25Percent;
	}; // check, if cib data can be shown

	var showCib = function showCib(filter, cib) {
	  if (!filter) return true;
	  return cib.hasCib;
	}; // extract filter items from data
	// https://www.d3-graph-gallery.com/graph/density_basic.html

	var kernelEpanechnikov = function kernelEpanechnikov(k) {
	  return function (v) {
	    return Math.abs(v /= k) <= 1 ? 0.75 * (1 - v * v) / k : 0;
	  };
	};
	var kernelDensityEstimator = function kernelDensityEstimator(kernel, X) {
	  return function (V) {
	    return X.map(function (x) {
	      return [x, mean(V, function (v) {
	        return kernel(x - v);
	      })];
	    });
	  };
	}; // extract host name from URL
	// https://stackoverflow.com/questions/8498592/extract-hostname-name-from-string

	var extractHostname = function extractHostname(url) {
	  var hostname = url.indexOf('//') > -1 ? url.split('/')[2] : url.split('/')[0];
	  hostname = hostname.split(':')[0];
	  hostname = hostname.split('?')[0];
	  return hostname;
	}; // consistent sort function

	var sortConsistently = function sortConsistently(itemA, itemB, property, key) {
	  var valueA = itemA[property];
	  var valueB = itemB[property];
	  if (typeof valueA === 'string') valueA = valueA.trim().toLowerCase();
	  if (typeof valueB === 'string') valueB = valueB.trim().toLowerCase();
	  if (typeof valueA === 'number') valueA = +valueA;
	  if (typeof valueB === 'number') valueB = +valueB;
	  if (typeof valueA === 'number' && isNaN(valueA)) valueA = 0;
	  if (typeof valueB === 'number' && isNaN(valueB)) valueB = 0;
	  var r = valueA > valueB ? -1 : valueA < valueB ? 1 : 0;

	  if (r === 0) {
	    r = typeof itemA[key] !== 'undefined' && typeof itemB[key] !== 'undefined' ? +itemA[key] - +itemB[key] : 0;
	  }

	  return r;
	}; // scroll-to function (also set on window to make it available outside svelte)

	var scrollTo = function scrollTo(targetId, collapsibleId) {
	  if (collapsibleId) {
	    document.getElementById(collapsibleId).checked = true;
	  }

	  document.querySelector('.draw-wrapper').classList.add('no-pointer-events');
	  setTimeout(function () {
	    document.getElementById(targetId).scrollIntoView({
	      behavior: 'smooth'
	    });
	    setTimeout(function () {
	      document.querySelector('.draw-wrapper').classList.remove('no-pointer-events');
	    }, 1000);
	  }, 200);
	  return false;
	};
	window.scrollsmooth = scrollTo;

	var parseTimestamp = timeParse('%m/%d/%Y %H:%M %Z');
	var parseDate$1 = timeParse('%m/%d/%Y');

	var loadData = /*#__PURE__*/function () {
	  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	    var data;
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            _context.next = 2;
	            return csv$1(data$1, function (d, i) {
	              var source = d.source_for_display !== '' ? d.source_for_display : d.source;
	              var sizeTotal = d.size === '' ? Number.NaN : +d.size;
	              return {
	                id: i,
	                name: d.name,
	                diet: d.diet,
	                image_location: d.image_location,
	                periodEra: d.case_hash,
	                sizeIndex: d.size_index,
	                tooltipContent: d.tooltip_content,
	                testDate: parseInt(d.test_date),
	                wikiURL: d.wikiURL,
	                extraImage: d.extra_image,
	                //     size: d.size,
	                weight: d.weight,
	                size: d.size,
	                // timestamp: parseTimestamp([d.timestamp, '-0400'].join(' ')),
	                timestamp: parseTimestamp([d.timestamp, '-0400'].join(' ')),
	                //   source: splitString(source),
	                //   sourceFilter: splitString(d.source_subcategory !== '' ? d.source_subcategory : source),
	                //   sourceSubcategory: splitString(d.source_subcategory),
	                //   sourceCategory: splitString(d.source_category),
	                //   sourceNation: d.source_nation,
	                //   disinformant: d.disinformant,
	                disinformantNation: splitString(d.regions),
	                //   disinformantAttribution: d.disinformant_attribution,
	                shortTitle: d.short_title,
	                shortDescription: d.short_description,
	                //    attributionUrl: d.attribution_url,
	                //    attributionArchiveUrl: d.archived_attribution_url,
	                //    platforms: splitString([d.social_media, d.messaging_platforms].join(',')),
	                startDate: parseDate$1(d.start_date),
	                endDate: parseDate$1(d.end_date),
	                attributionDate: parseDate$1(d.attribution_date),
	                //     methods: splitString(d.methods),
	                sizeTotal: sizeTotal,
	                attributionScore: +d.attribution_total_score,
	                //   tags: splitString(d.tags),
	                articleCount: +d.articleCount
	              };
	            });

	          case 2:
	            data = _context.sent;
	            console.log('csv data: ', data);
	            return _context.abrupt("return", data.filter(function (d) {
	              return d.timestamp !== null;
	            }));

	          case 5:
	          case "end":
	            return _context.stop();
	        }
	      }
	    }, _callee);
	  }));

	  return function loadData() {
	    return _ref.apply(this, arguments);
	  };
	}();

	var subscriber_queue = [];
	/**
	 * Creates a `Readable` store that allows reading by subscription.
	 * @param value initial value
	 * @param {StartStopNotifier}start start and stop notifications for subscriptions
	 */

	function readable(value, start) {
	  return {
	    subscribe: writable(value, start).subscribe
	  };
	}
	/**
	 * Create a `Writable` store that allows both updating and reading by subscription.
	 * @param {*=}value initial value
	 * @param {StartStopNotifier=}start start and stop notifications for subscriptions
	 */


	function writable(value) {
	  var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
	  var stop;
	  var subscribers = [];

	  function set(new_value) {
	    if (safe_not_equal(value, new_value)) {
	      value = new_value;

	      if (stop) {
	        // store is ready
	        var run_queue = !subscriber_queue.length;

	        for (var i = 0; i < subscribers.length; i += 1) {
	          var s = subscribers[i];
	          s[1]();
	          subscriber_queue.push(s, value);
	        }

	        if (run_queue) {
	          for (var _i = 0; _i < subscriber_queue.length; _i += 2) {
	            subscriber_queue[_i][0](subscriber_queue[_i + 1]);
	          }

	          subscriber_queue.length = 0;
	        }
	      }
	    }
	  }

	  function update(fn) {
	    set(fn(value));
	  }

	  function subscribe(run) {
	    var invalidate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
	    var subscriber = [run, invalidate];
	    subscribers.push(subscriber);

	    if (subscribers.length === 1) {
	      stop = start(set) || noop;
	    }

	    run(value);
	    return function () {
	      var index = subscribers.indexOf(subscriber);

	      if (index !== -1) {
	        subscribers.splice(index, 1);
	      }

	      if (subscribers.length === 0) {
	        stop();
	        stop = null;
	      }
	    };
	  }

	  return {
	    set: set,
	    update: update,
	    subscribe: subscribe
	  };
	}

	function derived(stores, fn, initial_value) {
	  var single = !Array.isArray(stores);
	  var stores_array = single ? [stores] : stores;
	  var auto = fn.length < 2;
	  return readable(initial_value, function (set) {
	    var inited = false;
	    var values = [];
	    var pending = 0;
	    var cleanup = noop;

	    var sync = function sync() {
	      if (pending) {
	        return;
	      }

	      cleanup();
	      var result = fn(single ? values[0] : values, set);

	      if (auto) {
	        set(result);
	      } else {
	        cleanup = is_function(result) ? result : noop;
	      }
	    };

	    var unsubscribers = stores_array.map(function (store, i) {
	      return subscribe(store, function (value) {
	        values[i] = value;
	        pending &= ~(1 << i);

	        if (inited) {
	          sync();
	        }
	      }, function () {
	        pending |= 1 << i;
	      });
	    });
	    inited = true;
	    sync();
	    return function stop() {
	      run_all(unsubscribers);
	      cleanup();
	    };
	  });
	}

	var width = writable();
	var height = writable();
	var panelHeight = derived(height, function ($height) {
	  return $height / 1.5;
	});
	var mapHeight = derived([height, panelHeight], function (_ref) {
	  var _ref2 = _slicedToArray(_ref, 2),
	      $height = _ref2[0],
	      $panelHeight = _ref2[1];

	  return $height - $panelHeight;
	});
	var margin = derived(panelHeight, function ($panelHeight) {
	  return {
	    top: $panelHeight / 2.5,
	    right: 100,
	    bottom: 0,
	    left: 100
	  };
	});
	var minDim = derived([width, panelHeight], function (_ref3) {
	  var _ref4 = _slicedToArray(_ref3, 2),
	      $width = _ref4[0],
	      $panelHeight = _ref4[1];

	  return $width > $panelHeight ? $panelHeight : $width;
	});
	var maxDim = derived([width, panelHeight], function (_ref5) {
	  var _ref6 = _slicedToArray(_ref5, 2),
	      $width = _ref6[0],
	      $panelHeight = _ref6[1];

	  return $width > $panelHeight ? $width : $panelHeight;
	});
	var controlsHeight = writable();

	var offsetFactor = 1.25;
	var countries = writable([]);
	var pangeaRegions = writable([]);
	var projection$1 = derived([width, mapHeight, pangeaRegions], function (_ref) {
	  var _ref2 = _slicedToArray(_ref, 3),
	      $width = _ref2[0],
	      $mapHeight = _ref2[1],
	      $pangeaRegions = _ref2[2];

	  if ($pangeaRegions.length === 0) return;
	  var unitProjection = geoMercator().scale(1).translate([0, 0]);
	  var tmpPath = d3geoPath().projection(unitProjection);
	  var allBounds = $pangeaRegions.map(tmpPath.bounds);
	  var bounds = [[min$7(allBounds, function (d) {
	    return d[0][0];
	  }), min$7(allBounds, function (d) {
	    return d[0][1];
	  })], [max$4(allBounds, function (d) {
	    return d[1][0];
	  }), max$4(allBounds, function (d) {
	    return d[1][1];
	  })]];
	  var scale = .95 / Math.max((bounds[1][0] - bounds[0][0]) / $width, (bounds[1][1] - bounds[0][1]) / $mapHeight / offsetFactor);
	  var offset = [($width - scale * (bounds[1][0] + bounds[0][0])) / 2, ($mapHeight / offsetFactor - scale * (bounds[1][1] + bounds[0][1])) / 2];
	  return unitProjection.translate(offset).scale(scale);
	});
	var geoPath = derived(projection$1, function ($projection) {
	  return d3geoPath().projection($projection);
	});
	var pangeaGeoPath = derived(projection$1, function ($projection) {
	  return d3geoPath().projection($projection);
	});

	function identity$7(x) {
	  return x;
	}

	function transform(transform) {
	  if (transform == null) return identity$7;
	  var x0,
	      y0,
	      kx = transform.scale[0],
	      ky = transform.scale[1],
	      dx = transform.translate[0],
	      dy = transform.translate[1];
	  return function(input, i) {
	    if (!i) x0 = y0 = 0;
	    var j = 2, n = input.length, output = new Array(n);
	    output[0] = (x0 += input[0]) * kx + dx;
	    output[1] = (y0 += input[1]) * ky + dy;
	    while (j < n) output[j] = input[j], ++j;
	    return output;
	  };
	}

	function reverse(array, n) {
	  var t, j = array.length, i = j - n;
	  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;
	}

	function feature(topology, o) {
	  return o.type === "GeometryCollection"
	      ? {type: "FeatureCollection", features: o.geometries.map(function(o) { return feature$1(topology, o); })}
	      : feature$1(topology, o);
	}

	function feature$1(topology, o) {
	  var id = o.id,
	      bbox = o.bbox,
	      properties = o.properties == null ? {} : o.properties,
	      geometry = object$1(topology, o);
	  return id == null && bbox == null ? {type: "Feature", properties: properties, geometry: geometry}
	      : bbox == null ? {type: "Feature", id: id, properties: properties, geometry: geometry}
	      : {type: "Feature", id: id, bbox: bbox, properties: properties, geometry: geometry};
	}

	function object$1(topology, o) {
	  var transformPoint = transform(topology.transform),
	      arcs = topology.arcs;

	  function arc(i, points) {
	    if (points.length) points.pop();
	    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {
	      points.push(transformPoint(a[k], k));
	    }
	    if (i < 0) reverse(points, n);
	  }

	  function point(p) {
	    return transformPoint(p);
	  }

	  function line(arcs) {
	    var points = [];
	    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);
	    if (points.length < 2) points.push(points[0]); // This should never happen per the specification.
	    return points;
	  }

	  function ring(arcs) {
	    var points = line(arcs);
	    while (points.length < 4) points.push(points[0]); // This may happen if an arc has only two points.
	    return points;
	  }

	  function polygon(arcs) {
	    return arcs.map(ring);
	  }

	  function geometry(o) {
	    var type = o.type, coordinates;
	    switch (type) {
	      case "GeometryCollection": return {type: type, geometries: o.geometries.map(geometry)};
	      case "Point": coordinates = point(o.coordinates); break;
	      case "MultiPoint": coordinates = o.coordinates.map(point); break;
	      case "LineString": coordinates = line(o.arcs); break;
	      case "MultiLineString": coordinates = o.arcs.map(line); break;
	      case "Polygon": coordinates = polygon(o.arcs); break;
	      case "MultiPolygon": coordinates = o.arcs.map(polygon); break;
	      default: return null;
	    }
	    return {type: type, coordinates: coordinates};
	  }

	  return geometry(o);
	}

	var dataPath = 'countries-50m.json';

	var loadMapData = /*#__PURE__*/function () {
	  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	    var world;
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            _context.next = 2;
	            return json(dataPath);

	          case 2:
	            world = _context.sent;
	            countries.set(feature(world, world.objects.countries).features //   .filter((d) => d.properties.name !== 'Antarctica')
	            );

	          case 4:
	          case "end":
	            return _context.stop();
	        }
	      }
	    }, _callee);
	  }));

	  return function loadMapData() {
	    return _ref.apply(this, arguments);
	  };
	}();

	var loadPangeaData = /*#__PURE__*/function () {
	  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	    var response, json;
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            _context.next = 2;
	            return fetch("pangeanamed.json");

	          case 2:
	            response = _context.sent;
	            _context.next = 5;
	            return response.json();

	          case 5:
	            json = _context.sent;
	            console.log('json: ', json);
	            pangeaRegions.set(json.features // .filter((d) => d.properties.OBJECTID !== 1)
	            );

	          case 8:
	          case "end":
	            return _context.stop();
	        }
	      }
	    }, _callee);
	  }));

	  return function loadPangeaData() {
	    return _ref.apply(this, arguments);
	  };
	}();

	var timeScale = writable();
	var sizeTotalYScale = writable();
	var sizeTotalRScale = writable();
	var sizeShareRScale = writable();
	var attributionScoreScale = writable();
	var centroidScale = writable();
	var polarizationScale = writable();
	var scaleFactor = readable(window.devicePixelRatio || 1);

	var bg = '#F9F8F8';
	var usaBlue = '#3c3b6e';
	var usaRed = '#b22234';
	var usaLightRed = '#b22234';
	var usaLightLightRed = '#dbb6b6';
	var preGreen = '#147C47';
	var polBlue = '#2e64a0';
	var polPurple = '#96659e';
	var polRed = '#ca0800';

	var setScales = function setScales(data, width, minDim, maxDim, panelHeight, margin) {
	  if (!data) return;
	  /*
	  // time scale
	  timeScale.set(scaleTime()
	    .domain(getTimeRange(data))
	    .range([margin.left, width - margin.right]));
	  */
	  // time scale

	  timeScale.set(linear$1().domain([-25, max$4(data, function (d) {
	    return d.testDate + 25;
	  })]).range([margin.left, width - margin.right])); // total scale for the y axis

	  sizeTotalYScale.set(log$5().domain([10, max$4(data, function (d) {
	    return d.sizeTotal;
	  })]).range([panelHeight - margin.bottom, margin.top])); // total scale for the radii

	  sizeTotalRScale.set(sqrt$2().domain([0, max$4(data, function (d) {
	    return d.sizeTotal;
	  })]).range([width * 0.009, width * 0.04])); // share scale for the radii

	  sizeShareRScale.set(linear$1().domain([0, 1]).range([0, minDim * 0.15])); // attribution score scale

	  attributionScoreScale.set(linear$1().domain([-1, 1.1 * max$4(data, function (d) {
	    return d.attributionScore;
	  })]).range(['#FFFFFF', usaRed])); // centroid scale

	  var casesPerCountry = _toConsumableArray(group(data.map(function (d) {
	    return d.disinformantNation;
	  }).flat(), function (d) {
	    return d;
	  })).map(function (d) {
	    return d[1].length;
	  });

	  centroidScale.set(sqrt$2().domain([0, max$4(casesPerCountry)]).range([maxDim * 0.0005, maxDim * 0.01])); // polarization scale

	  polarizationScale.set(linear$1().domain([-2, 0, 2]).range([polBlue, polPurple, polRed]));
	};

	function createRangeFilter() {
	  var _writable = writable([0, 0]),
	      subscribe = _writable.subscribe,
	      set = _writable.set,
	      update = _writable.update;

	  return {
	    subscribe: subscribe,
	    set: set,
	    setMin: function setMin(value) {
	      return update(function (f) {
	        return f[0] = value;
	      });
	    },
	    setMax: function setMax(value) {
	      return update(function (f) {
	        return f[1] = value;
	      });
	    }
	  };
	}

	function createInclusiveFilter() {
	  var _writable2 = writable([]),
	      subscribe = _writable2.subscribe,
	      _set = _writable2.set,
	      update = _writable2.update;

	  var select = function select(id) {
	    return update(function (f) {
	      return f.map(function (d) {
	        return _objectSpread2(_objectSpread2({}, d), {}, {
	          selected: [id].flat().includes(d.id) ? true : d.selected
	        });
	      });
	    });
	  };

	  var unselectAll = function unselectAll() {
	    return update(function (f) {
	      return f.map(function (d) {
	        return _objectSpread2(_objectSpread2({}, d), {}, {
	          selected: false
	        });
	      });
	    });
	  };

	  var applyBoolArray = function applyBoolArray(arr) {
	    var tmpArr = _toConsumableArray(arr).reverse();

	    update(function (f) {
	      return f.reverse().map(function (d, i) {
	        return _objectSpread2(_objectSpread2({}, d), {}, {
	          selected: tmpArr[i] !== undefined ? tmpArr[i] : false
	        });
	      }).reverse();
	    });
	  };

	  return {
	    subscribe: subscribe,
	    set: function set(value) {
	      return _set(value);
	    },
	    init: function init(values, id) {
	      return _set(lodash.uniq(values.map(function (d) {
	        return d[id];
	      }).flat()).map(function (id) {
	        return {
	          id: id,
	          name: id,
	          selected: true
	        };
	      }));
	    },
	    select: select,
	    selectOne: function selectOne(id) {
	      unselectAll();
	      select(id);
	    },
	    selectAll: function selectAll() {
	      return update(function (f) {
	        return f.map(function (d) {
	          return _objectSpread2(_objectSpread2({}, d), {}, {
	            selected: true
	          });
	        });
	      });
	    },
	    unselect: function unselect(id) {
	      return update(function (f) {
	        return f.map(function (d) {
	          return _objectSpread2(_objectSpread2({}, d), {}, {
	            selected: [id].flat().includes(d.id) ? false : d.selected
	          });
	        });
	      });
	    },
	    unselectAll: unselectAll,
	    applyBoolArray: applyBoolArray
	  };
	}

	function createTextSearchFilter() {
	  var _writable3 = writable(''),
	      subscribe = _writable3.subscribe,
	      set = _writable3.set;

	  return {
	    subscribe: subscribe,
	    set: set,
	    reset: function reset() {
	      return set('');
	    }
	  };
	}

	var disinformantNationFilter = createInclusiveFilter();
	var platformFilter = createInclusiveFilter();
	var methodFilter = createInclusiveFilter();
	var timeperiodFilter = createInclusiveFilter();
	var sourceFilter$1 = createInclusiveFilter();
	var sourceCategoryFilter = createInclusiveFilter();
	var dietFilter = createInclusiveFilter();
	var tagFilter = createInclusiveFilter();
	var attributionScoreFilter = createRangeFilter();
	var attributionScoreDef = [0, 18];
	var polarizationFilter = createRangeFilter();
	var polarizationDef = [-2, 2];
	var unselectAllFilters = function unselectAllFilters() {
	  var disinformantNation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
	  if (disinformantNation) disinformantNationFilter.unselectAll();
	  platformFilter.unselectAll();
	  methodFilter.unselectAll();
	  timeperiodFilter.unselectAll();
	  sourceFilter$1.unselectAll();
	  sourceCategoryFilter.unselectAll();
	  dietFilter.unselectAll();
	  tagFilter.unselectAll();
	  attributionScoreFilter.set(attributionScoreDef);
	  polarizationFilter.set(polarizationDef);
	};
	var selectAllFilters = function selectAllFilters() {
	  var disinformantNation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
	  if (disinformantNation) disinformantNationFilter.selectAll();
	  platformFilter.selectAll();
	  methodFilter.selectAll();
	  timeperiodFilter.selectAll();
	  sourceFilter$1.selectAll();
	  sourceCategoryFilter.selectAll();
	  dietFilter.selectAll();
	  tagFilter.selectAll();
	  attributionScoreFilter.set(attributionScoreDef);
	  polarizationFilter.set(polarizationDef);
	  textSearchFilter.reset();
	  caseIdFilter.set(undefined);
	};
	var textSearchFilter = createTextSearchFilter();
	var contextData = createInclusiveFilter();
	var originalTimeDomain = writable(null);
	var caseIdFilter = writable();
	var highlightPolarization = writable(false);
	var highlightCib = writable(false);
	var controlsFilter = writable(false);
	var sourcesSwitch = writable(false);
	var centroidSwitch = writable(false);

	function createSelected() {
	  var _writable = writable([]),
	      subscribe = _writable.subscribe,
	      set = _writable.set,
	      update = _writable.update;

	  return {
	    subscribe: subscribe,
	    add: function add(obj) {
	      return update(function (f) {
	        return !f.map(function (d) {
	          return d.id;
	        }).includes(obj.id) ? [].concat(_toConsumableArray(f), [obj]) : f;
	      });
	    },
	    remove: function remove(obj) {
	      return update(function (f) {
	        return f.filter(function (d) {
	          return d.id !== obj.id;
	        });
	      });
	    },
	    reset: function reset() {
	      return set([]);
	    }
	  };
	}

	var hovered = writable(null);
	var selected = createSelected();
	var tooltip = derived([hovered, selected], function (_ref) {
	  var _ref2 = _slicedToArray(_ref, 2),
	      $hovered = _ref2[0],
	      $selected = _ref2[1];

	  // if ($selected && $selected.length > 0) return $selected.slice(-1)[0];
	  return $hovered;
	});

	var drawWrapper = writable();
	var fossilDatapoints = writable({
	  "cretaceous": [],
	  "jurassic": [],
	  "triassic": [],
	  "originalcretaceous": [],
	  "originaljurassic": [],
	  "originaltriassic": []
	});
	var switchValueStore = writable();

	var baseUrl = 'https://interference2020.org'; // export const baseUrl = 'http://localhost:5000';

	var urlFromFilters = function urlFromFilters(disinformantNations, platforms, methods, sources, sourceCategories, tags, attributionScores, polarization, textSearch, contextData) {
	  var caseId = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : '';
	  var highlightPolarization = arguments.length > 11 ? arguments[11] : undefined;
	  var highlightCib = arguments.length > 12 ? arguments[12] : undefined;
	  var params = {
	    ts: encodeURIComponent(textSearch),
	    as: [attributionScores[0], attributionScores[1]].join(';'),
	    pol: [Math.round(100 * polarization[0]) / 100, Math.round(100 * polarization[1]) / 100].join(';'),
	    f: filtersToHex([disinformantNations, platforms, methods, sources, sourceCategories, tags, contextData]),
	    id: caseId,
	    bool: filtersToBin([highlightPolarization, highlightCib])
	  };
	  return "".concat(baseUrl, "/#").concat(params.f, "&").concat(params.id, "&").concat(params.ts, "&").concat(params.as, "&").concat(params.pol, "&").concat(params.bool);
	};
	var filtersToHex = function filtersToHex(arr) {
	  var hex = arr.map(function (d) {
	    return binaryToHex(d.map(function (d) {
	      return +d.selected;
	    }).join(''));
	  }).join('&');
	  return hex;
	};
	var filtersToBin = function filtersToBin(arr) {
	  var bin = arr.map(function (d) {
	    return d ? 1 : 0;
	  }).join('');
	  return bin;
	};
	var binaryToHex = function binaryToHex(binary) {
	  return parseInt(binary, 2).toString(16).toLowerCase();
	};
	var hexToBinary = function hexToBinary(hex) {
	  return parseInt(hex, 16).toString(2);
	};
	var binaryToBool = function binaryToBool(binary) {
	  return binary.split('').map(function (d) {
	    return d === '0' ? false : true;
	  });
	};
	var parseUrl = function parseUrl(hash) {
	  var s = hash.substring(1);

	  var _s$split = s.split('&'),
	      _s$split2 = _slicedToArray(_s$split, 12),
	      disinformantNations = _s$split2[0],
	      platforms = _s$split2[1],
	      methods = _s$split2[2],
	      sources = _s$split2[3],
	      sourceCategories = _s$split2[4],
	      tags = _s$split2[5],
	      contextData = _s$split2[6],
	      caseId = _s$split2[7],
	      textSearch = _s$split2[8],
	      attributionScores = _s$split2[9],
	      polarization = _s$split2[10],
	      bools = _s$split2[11];

	  var boolArray = bools.split('').map(function (d) {
	    return +d === 1 ? true : false;
	  });
	  return {
	    disinformantNations: binaryToBool(hexToBinary(disinformantNations)),
	    platforms: binaryToBool(hexToBinary(platforms)),
	    methods: binaryToBool(hexToBinary(methods)),
	    sources: binaryToBool(hexToBinary(sources)),
	    sourceCategories: binaryToBool(hexToBinary(sourceCategories)),
	    tags: binaryToBool(hexToBinary(tags)),
	    contextData: binaryToBool(hexToBinary(contextData)),
	    caseId: caseId === '' ? undefined : +caseId,
	    textSearch: decodeURIComponent(textSearch),
	    attributionScores: attributionScores.split(';').map(function (d) {
	      return +d;
	    }),
	    polarization: polarization.split(';').map(function (d) {
	      return +d;
	    }),
	    highlightPolarization: boolArray[0],
	    highlightCib: boolArray[1]
	  };
	};

	function cubicInOut$1(t) {
	  return t < 0.5 ? 4.0 * t * t * t : 0.5 * Math.pow(2.0 * t - 2.0, 3.0) + 1.0;
	}

	function cubicOut(t) {
	  var f = t - 1.0;
	  return f * f * f + 1.0;
	}

	function fade(node, _ref2) {
	  var _ref2$delay = _ref2.delay,
	      delay = _ref2$delay === void 0 ? 0 : _ref2$delay,
	      _ref2$duration = _ref2.duration,
	      duration = _ref2$duration === void 0 ? 400 : _ref2$duration,
	      _ref2$easing = _ref2.easing,
	      easing = _ref2$easing === void 0 ? identity : _ref2$easing;
	  var o = +getComputedStyle(node).opacity;
	  return {
	    delay: delay,
	    duration: duration,
	    easing: easing,
	    css: function css(t) {
	      return "opacity: ".concat(t * o);
	    }
	  };
	}

	function fly(node, _ref3) {
	  var _ref3$delay = _ref3.delay,
	      delay = _ref3$delay === void 0 ? 0 : _ref3$delay,
	      _ref3$duration = _ref3.duration,
	      duration = _ref3$duration === void 0 ? 400 : _ref3$duration,
	      _ref3$easing = _ref3.easing,
	      easing = _ref3$easing === void 0 ? cubicOut : _ref3$easing,
	      _ref3$x = _ref3.x,
	      x = _ref3$x === void 0 ? 0 : _ref3$x,
	      _ref3$y = _ref3.y,
	      y = _ref3$y === void 0 ? 0 : _ref3$y,
	      _ref3$opacity = _ref3.opacity,
	      opacity = _ref3$opacity === void 0 ? 0 : _ref3$opacity;
	  var style = getComputedStyle(node);
	  var target_opacity = +style.opacity;
	  var transform = style.transform === 'none' ? '' : style.transform;
	  var od = target_opacity * (1 - opacity);
	  return {
	    delay: delay,
	    duration: duration,
	    easing: easing,
	    css: function css(t, u) {
	      return "\n\t\t\ttransform: ".concat(transform, " translate(").concat((1 - t) * x, "px, ").concat((1 - t) * y, "px);\n\t\t\topacity: ").concat(target_opacity - od * u);
	    }
	  };
	}

	function slide(node, _ref4) {
	  var _ref4$delay = _ref4.delay,
	      delay = _ref4$delay === void 0 ? 0 : _ref4$delay,
	      _ref4$duration = _ref4.duration,
	      duration = _ref4$duration === void 0 ? 400 : _ref4$duration,
	      _ref4$easing = _ref4.easing,
	      easing = _ref4$easing === void 0 ? cubicOut : _ref4$easing;
	  var style = getComputedStyle(node);
	  var opacity = +style.opacity;
	  var height = parseFloat(style.height);
	  var padding_top = parseFloat(style.paddingTop);
	  var padding_bottom = parseFloat(style.paddingBottom);
	  var margin_top = parseFloat(style.marginTop);
	  var margin_bottom = parseFloat(style.marginBottom);
	  var border_top_width = parseFloat(style.borderTopWidth);
	  var border_bottom_width = parseFloat(style.borderBottomWidth);
	  return {
	    delay: delay,
	    duration: duration,
	    easing: easing,
	    css: function css(t) {
	      return "overflow: hidden;" + "opacity: ".concat(Math.min(t * 20, 1) * opacity, ";") + "height: ".concat(t * height, "px;") + "padding-top: ".concat(t * padding_top, "px;") + "padding-bottom: ".concat(t * padding_bottom, "px;") + "margin-top: ".concat(t * margin_top, "px;") + "margin-bottom: ".concat(t * margin_bottom, "px;") + "border-top-width: ".concat(t * border_top_width, "px;") + "border-bottom-width: ".concat(t * border_bottom_width, "px;");
	    }
	  };
	}

	function draw(node, _ref6) {
	  var _ref6$delay = _ref6.delay,
	      delay = _ref6$delay === void 0 ? 0 : _ref6$delay,
	      speed = _ref6.speed,
	      duration = _ref6.duration,
	      _ref6$easing = _ref6.easing,
	      easing = _ref6$easing === void 0 ? cubicInOut$1 : _ref6$easing;
	  var len = node.getTotalLength();

	  if (duration === undefined) {
	    if (speed === undefined) {
	      duration = 800;
	    } else {
	      duration = len / speed;
	    }
	  } else if (typeof duration === 'function') {
	    duration = duration(len);
	  }

	  return {
	    delay: delay,
	    duration: duration,
	    easing: easing,
	    css: function css(t, u) {
	      return "stroke-dasharray: ".concat(t * len, " ").concat(u * len);
	    }
	  };
	}

	var window_1 = globals.window;
	var file$1 = "src/components/ToTop.svelte"; // (23:0) {#if (show)}

	function create_if_block(ctx) {
	  var div;
	  var span0;
	  var t1;
	  var span1;
	  var div_transition;
	  var current;
	  var mounted;
	  var dispose;
	  var block = {
	    c: function create() {
	      div = element("div");
	      span0 = element("span");
	      span0.textContent = "To Top";
	      t1 = space();
	      span1 = element("span");
	      span1.textContent = "To Visualization";
	      attr_dev(span0, "class", "pseudolink svelte-gdqxus");
	      add_location(span0, file$1, 24, 4, 500);
	      attr_dev(span1, "class", "pseudolink svelte-gdqxus");
	      add_location(span1, file$1, 25, 4, 583);
	      attr_dev(div, "class", "to-top svelte-gdqxus");
	      add_location(div, file$1, 23, 2, 434);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div, anchor);
	      append_dev(div, span0);
	      append_dev(div, t1);
	      append_dev(div, span1);
	      current = true;

	      if (!mounted) {
	        dispose = [listen_dev(span0, "click",
	        /*click_handler*/
	        ctx[3], false, false, false), listen_dev(span1, "click",
	        /*click_handler_1*/
	        ctx[4], false, false, false)];
	        mounted = true;
	      }
	    },
	    p: noop,
	    i: function intro(local) {
	      if (current) return;
	      add_render_callback(function () {
	        if (!div_transition) div_transition = create_bidirectional_transition(div, fly, {
	          duration: 400,
	          y: 100
	        }, true);
	        div_transition.run(1);
	      });
	      current = true;
	    },
	    o: function outro(local) {
	      if (!div_transition) div_transition = create_bidirectional_transition(div, fly, {
	        duration: 400,
	        y: 100
	      }, false);
	      div_transition.run(0);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div);
	      if (detaching && div_transition) div_transition.end();
	      mounted = false;
	      run_all(dispose);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block.name,
	    type: "if",
	    source: "(23:0) {#if (show)}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$1(ctx) {
	  var if_block_anchor;
	  var current;
	  var mounted;
	  var dispose;
	  var if_block =
	  /*show*/
	  ctx[0] && create_if_block(ctx);
	  var block = {
	    c: function create() {
	      if (if_block) if_block.c();
	      if_block_anchor = empty();
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      if (if_block) if_block.m(target, anchor);
	      insert_dev(target, if_block_anchor, anchor);
	      current = true;

	      if (!mounted) {
	        dispose = listen_dev(window_1, "scroll",
	        /*handleScroll*/
	        ctx[1], false, false, false);
	        mounted = true;
	      }
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (
	      /*show*/
	      ctx[0]) {
	        if (if_block) {
	          if_block.p(ctx, dirty);

	          if (dirty &
	          /*show*/
	          1) {
	            transition_in(if_block, 1);
	          }
	        } else {
	          if_block = create_if_block(ctx);
	          if_block.c();
	          transition_in(if_block, 1);
	          if_block.m(if_block_anchor.parentNode, if_block_anchor);
	        }
	      } else if (if_block) {
	        group_outros();
	        transition_out(if_block, 1, 1, function () {
	          if_block = null;
	        });
	        check_outros();
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(if_block);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(if_block);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (if_block) if_block.d(detaching);
	      if (detaching) detach_dev(if_block_anchor);
	      mounted = false;
	      dispose();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$1.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$1($$self, $$props, $$invalidate) {
	  var show = false;

	  function handleScroll() {
	    if (window.pageYOffset > window.innerHeight) {
	      $$invalidate(0, show = true);
	    } else {
	      $$invalidate(0, show = false);
	    }
	  }

	  function handleSpanClick(id) {
	    scrollTo(id);
	  }

	  var writable_props = [];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<ToTop> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("ToTop", $$slots, []);

	  var click_handler = function click_handler() {
	    return handleSpanClick("top");
	  };

	  var click_handler_1 = function click_handler_1() {
	    return handleSpanClick("viz");
	  };

	  $$self.$capture_state = function () {
	    return {
	      fly: fly,
	      scrollTo: scrollTo,
	      show: show,
	      handleScroll: handleScroll,
	      handleSpanClick: handleSpanClick
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("show" in $$props) $$invalidate(0, show = $$props.show);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [show, handleScroll, handleSpanClick, click_handler, click_handler_1];
	}

	var ToTop = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(ToTop, _SvelteComponentDev);

	  var _super = _createSuper(ToTop);

	  function ToTop(options) {
	    var _this;

	    _classCallCheck(this, ToTop);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$1, create_fragment$1, safe_not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "ToTop",
	      options: options,
	      id: create_fragment$1.name
	    });
	    return _this;
	  }

	  return ToTop;
	}(SvelteComponentDev);

	var file$2 = "src/components/CopyTooltip.svelte"; // (37:4) {#if (showClickMessage)}

	function create_if_block$1(ctx) {
	  var p;
	  var block = {
	    c: function create() {
	      p = element("p");
	      p.textContent = "Click to read more.";
	      attr_dev(p, "class", "footer svelte-1xm34sw");
	      add_location(p, file$2, 37, 6, 792);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, p, anchor);
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(p);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$1.name,
	    type: "if",
	    source: "(37:4) {#if (showClickMessage)}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$2(ctx) {
	  var div1;
	  var div0;
	  var h2;
	  var t0;
	  var t1;
	  var p;
	  var t2;
	  var t3;
	  var div1_resize_listener;
	  var div1_transition;
	  var current;
	  var if_block =
	  /*showClickMessage*/
	  ctx[3] && create_if_block$1(ctx);
	  var block = {
	    c: function create() {
	      div1 = element("div");
	      div0 = element("div");
	      h2 = element("h2");
	      t0 = text(
	      /*title*/
	      ctx[0]);
	      t1 = space();
	      p = element("p");
	      t2 = text(
	      /*content*/
	      ctx[1]);
	      t3 = space();
	      if (if_block) if_block.c();
	      attr_dev(h2, "class", "svelte-1xm34sw");
	      add_location(h2, file$2, 34, 4, 719);
	      attr_dev(p, "class", "svelte-1xm34sw");
	      add_location(p, file$2, 35, 4, 740);
	      attr_dev(div0, "class", "content svelte-1xm34sw");
	      add_location(div0, file$2, 33, 2, 693);
	      attr_dev(div1, "class", "copy-tooltip svelte-1xm34sw");
	      set_style(div1, "left",
	      /*left*/
	      ctx[5] + "px");
	      set_style(div1, "top",
	      /*y*/
	      ctx[2] + "px");
	      set_style(div1, "width", maxWidth + "px");
	      add_render_callback(function () {
	        return (
	          /*div1_elementresize_handler*/
	          ctx[7].call(div1)
	        );
	      });
	      add_location(div1, file$2, 29, 0, 533);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div1, anchor);
	      append_dev(div1, div0);
	      append_dev(div0, h2);
	      append_dev(h2, t0);
	      append_dev(div0, t1);
	      append_dev(div0, p);
	      append_dev(p, t2);
	      append_dev(div0, t3);
	      if (if_block) if_block.m(div0, null);
	      div1_resize_listener = add_resize_listener(div1,
	      /*div1_elementresize_handler*/
	      ctx[7].bind(div1));
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (!current || dirty &
	      /*title*/
	      1) set_data_dev(t0,
	      /*title*/
	      ctx[0]);
	      if (!current || dirty &
	      /*content*/
	      2) set_data_dev(t2,
	      /*content*/
	      ctx[1]);

	      if (
	      /*showClickMessage*/
	      ctx[3]) {
	        if (if_block) ; else {
	          if_block = create_if_block$1(ctx);
	          if_block.c();
	          if_block.m(div0, null);
	        }
	      } else if (if_block) {
	        if_block.d(1);
	        if_block = null;
	      }

	      if (!current || dirty &
	      /*left*/
	      32) {
	        set_style(div1, "left",
	        /*left*/
	        ctx[5] + "px");
	      }

	      if (!current || dirty &
	      /*y*/
	      4) {
	        set_style(div1, "top",
	        /*y*/
	        ctx[2] + "px");
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      add_render_callback(function () {
	        if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {
	          duration: 200
	        }, true);
	        div1_transition.run(1);
	      });
	      current = true;
	    },
	    o: function outro(local) {
	      if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {
	        duration: 200
	      }, false);
	      div1_transition.run(0);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div1);
	      if (if_block) if_block.d();
	      div1_resize_listener();
	      if (detaching && div1_transition) div1_transition.end();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$2.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	var maxWidth = 300;
	var margin$1 = 10;

	function instance$2($$self, $$props, $$invalidate) {
	  var _$$props$title = $$props.title,
	      title = _$$props$title === void 0 ? "" : _$$props$title;
	  var _$$props$content = $$props.content,
	      content = _$$props$content === void 0 ? "" : _$$props$content;
	  var _$$props$x = $$props.x,
	      x = _$$props$x === void 0 ? 0 : _$$props$x;
	  var _$$props$y = $$props.y,
	      y = _$$props$y === void 0 ? 0 : _$$props$y;
	  var _$$props$showClickMes = $$props.showClickMessage,
	      showClickMessage = _$$props$showClickMes === void 0 ? true : _$$props$showClickMes;
	  var width = maxWidth;
	  var left = 0;
	  var writable_props = ["title", "content", "x", "y", "showClickMessage"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<CopyTooltip> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("CopyTooltip", $$slots, []);

	  function div1_elementresize_handler() {
	    width = this.clientWidth;
	    $$invalidate(4, width);
	  }

	  $$self.$$set = function ($$props) {
	    if ("title" in $$props) $$invalidate(0, title = $$props.title);
	    if ("content" in $$props) $$invalidate(1, content = $$props.content);
	    if ("x" in $$props) $$invalidate(6, x = $$props.x);
	    if ("y" in $$props) $$invalidate(2, y = $$props.y);
	    if ("showClickMessage" in $$props) $$invalidate(3, showClickMessage = $$props.showClickMessage);
	  };

	  $$self.$capture_state = function () {
	    return {
	      fade: fade,
	      title: title,
	      content: content,
	      x: x,
	      y: y,
	      showClickMessage: showClickMessage,
	      maxWidth: maxWidth,
	      margin: margin$1,
	      width: width,
	      left: left
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("title" in $$props) $$invalidate(0, title = $$props.title);
	    if ("content" in $$props) $$invalidate(1, content = $$props.content);
	    if ("x" in $$props) $$invalidate(6, x = $$props.x);
	    if ("y" in $$props) $$invalidate(2, y = $$props.y);
	    if ("showClickMessage" in $$props) $$invalidate(3, showClickMessage = $$props.showClickMessage);
	    if ("width" in $$props) $$invalidate(4, width = $$props.width);
	    if ("left" in $$props) $$invalidate(5, left = $$props.left);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  $$self.$$.update = function () {
	    if ($$self.$$.dirty &
	    /*x, width*/
	    80) {
	       {
	        if (x - width / 2 < 0) {
	          $$invalidate(5, left = margin$1);
	        } else {
	          $$invalidate(5, left = x - width / 2);
	        }

	        if (x + width - document.body.offsetWidth > 0) {
	          $$invalidate(5, left = document.body.offsetWidth - width - margin$1);
	        }
	      }
	    }
	  };

	  return [title, content, y, showClickMessage, width, left, x, div1_elementresize_handler];
	}

	var CopyTooltip = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(CopyTooltip, _SvelteComponentDev);

	  var _super = _createSuper(CopyTooltip);

	  function CopyTooltip(options) {
	    var _this;

	    _classCallCheck(this, CopyTooltip);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$2, create_fragment$2, safe_not_equal, {
	      title: 0,
	      content: 1,
	      x: 6,
	      y: 2,
	      showClickMessage: 3
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "CopyTooltip",
	      options: options,
	      id: create_fragment$2.name
	    });
	    return _this;
	  }

	  _createClass(CopyTooltip, [{
	    key: "title",
	    get: function get() {
	      throw new Error("<CopyTooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<CopyTooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "content",
	    get: function get() {
	      throw new Error("<CopyTooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<CopyTooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "x",
	    get: function get() {
	      throw new Error("<CopyTooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<CopyTooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "y",
	    get: function get() {
	      throw new Error("<CopyTooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<CopyTooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "showClickMessage",
	    get: function get() {
	      throw new Error("<CopyTooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<CopyTooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return CopyTooltip;
	}(SvelteComponentDev);

	function copytooltipable(node, _ref) {
	  var content = _ref.content,
	      _ref$showClickMessage = _ref.showClickMessage,
	      showClickMessage = _ref$showClickMessage === void 0 ? true : _ref$showClickMessage;
	  var component;

	  function handleMouseleave(e) {
	    component.$destroy();
	    node.removeEventListener('mouseleave', handleMouseleave);
	  }

	  function handleMouseenter(e) {
	    var target = document.body;
	    var x = e.pageX;
	    var y = e.pageY + 20;
	    component = new CopyTooltip({
	      target: target,
	      props: {
	        title: node.innerHTML,
	        content: content,
	        x: x,
	        y: y,
	        showClickMessage: showClickMessage
	      },
	      intro: true
	    });
	    node.addEventListener('mouseleave', handleMouseleave);
	  }

	  node.addEventListener('mouseenter', handleMouseenter);
	  return {
	    destroy: function destroy() {
	      node.removeEventListener('mouseenter', handleMouseenter);
	    }
	  };
	}

	var file$3 = "src/components/TopVisualContent.svelte"; // (45:0) {#if (data.length > 0 && $fossilDatapoints)}

	function create_if_block$2(ctx) {
	  var section0;
	  var input0;
	  var t0;
	  var label0;
	  var t2;
	  var div0;
	  var p0;
	  var t4;
	  var p1;
	  var t5;
	  var em0;
	  var t6_value =
	  /*data*/
	  ctx[0].length + "";
	  var t6;
	  var t7;
	  var t8;
	  var em1;
	  var t10;
	  var p2;
	  var t11;
	  var em2;
	  var t12_value =
	  /*$fossilDatapoints*/
	  ctx[1].originaljurassic.length +
	  /*$fossilDatapoints*/
	  ctx[1].originalcretaceous.length +
	  /*$fossilDatapoints*/
	  ctx[1].originaltriassic.length + "";
	  var t12;
	  var t13;
	  var t14;
	  var t15;
	  var ul0;
	  var li0;
	  var em3;
	  var t16_value =
	  /*$fossilDatapoints*/
	  ctx[1].originalcretaceous.length + "";
	  var t16;
	  var t17;
	  var t18;
	  var t19;
	  var li1;
	  var em4;
	  var t20_value =
	  /*$fossilDatapoints*/
	  ctx[1].originaljurassic.length + "";
	  var t20;
	  var t21;
	  var t22;
	  var t23;
	  var li2;
	  var em5;
	  var t24_value =
	  /*$fossilDatapoints*/
	  ctx[1].originaltriassic.length + "";
	  var t24;
	  var t25;
	  var t26;
	  var t27;
	  var input1;
	  var t28;
	  var label1;
	  var t30;
	  var div1;
	  var p3;
	  var em6;
	  var t32;
	  var span0;
	  var copytooltipable_action;
	  var t34;
	  var span1;
	  var copytooltipable_action_1;
	  var t36;
	  var span2;
	  var copytooltipable_action_2;
	  var t38;
	  var span3;
	  var copytooltipable_action_3;
	  var t40;
	  var span4;
	  var copytooltipable_action_4;
	  var t42;
	  var span5;
	  var copytooltipable_action_5;
	  var t44;
	  var t45;
	  var p4;
	  var em7;
	  var t47;
	  var t48;
	  var p5;
	  var em8;
	  var t50;
	  var t51;
	  var p6;
	  var em9;
	  var t53;
	  var em10;
	  var t55;
	  var a;
	  var t57;
	  var t58;
	  var section1;
	  var p7;
	  var t60;
	  var ul1;
	  var li3;
	  var t62;
	  var li4;
	  var t64;
	  var li5;
	  var mounted;
	  var dispose;
	  var block = {
	    c: function create() {
	      section0 = element("section");
	      input0 = element("input");
	      t0 = space();
	      label0 = element("label");
	      label0.textContent = "Overview";
	      t2 = space();
	      div0 = element("div");
	      p0 = element("p");
	      p0.textContent = "The Prehistoric Life Timeline Mapping is an interactive, open-source database that shows a variety of information about prehistoric creatures. It maps these creatures to their geographic location and period in time they existed. It also maps fossils to their current era discovery sites.";
	      t4 = space();
	      p1 = element("p");
	      t5 = text("This dataset contains ");
	      em0 = element("em");
	      t6 = text(t6_value);
	      t7 = text(" creatures");
	      t8 = text(" that existed up to ");
	      em1 = element("em");
	      em1.textContent = "300 million years ago";
	      t10 = space();
	      p2 = element("p");
	      t11 = text("The fossil dataset contains a total of ");
	      em2 = element("em");
	      t12 = text(t12_value);
	      t13 = text(" Dinosaur fossils");
	      t14 = text(":");
	      t15 = space();
	      ul0 = element("ul");
	      li0 = element("li");
	      em3 = element("em");
	      t16 = text(t16_value);
	      t17 = text(" fossils");
	      t18 = text(" from the Cretaceous era");
	      t19 = space();
	      li1 = element("li");
	      em4 = element("em");
	      t20 = text(t20_value);
	      t21 = text(" fossils");
	      t22 = text(" from the Jurassic era");
	      t23 = space();
	      li2 = element("li");
	      em5 = element("em");
	      t24 = text(t24_value);
	      t25 = text(" and fossils");
	      t26 = text(" from the Triassic era");
	      t27 = space();
	      input1 = element("input");
	      t28 = space();
	      label1 = element("label");
	      label1.textContent = "How To Use This Tool";
	      t30 = space();
	      div1 = element("div");
	      p3 = element("p");
	      em6 = element("em");
	      em6.textContent = "Filters";
	      t32 = text(" enable users to adjust the visibility of cases by ");
	      span0 = element("span");
	      span0.textContent = "Attribution Score";
	      t34 = text(", ");
	      span1 = element("span");
	      span1.textContent = "Disinformant Nation";
	      t36 = text(", ");
	      span2 = element("span");
	      span2.textContent = "Platform";
	      t38 = text(", ");
	      span3 = element("span");
	      span3.textContent = "Method";
	      t40 = text(", ");
	      span4 = element("span");
	      span4.textContent = "Source";
	      t42 = text(", and ");
	      span5 = element("span");
	      span5.textContent = "Source Category";
	      t44 = text(". Free text search is also supported. This view also supports the addition of contextual datasets.");
	      t45 = space();
	      p4 = element("p");
	      em7 = element("em");
	      em7.textContent = "Timeline View";
	      t47 = text(" enables cases to be ordered chronologically from left to right. Noteworthy U.S. events in the U.S. 2020 election cycle are plotted on the timeline for context and reference. Additional timeline elements can be introduced with the Context Datasets filter. By clicking and dragging on the timeline, users can filter their view to a particular date range. They can return to the default view by clicking \"Reset time scale\" on the left-hand side of the timeline.");
	      t48 = space();
	      p5 = element("p");
	      em8 = element("em");
	      em8.textContent = "Map View";
	      t50 = text(" shows a Mercator projection of the Earth. Cases are plotted on the map by means of tails connected to particular Disinformant Nations: the more lines a particular country has originating from it, the more it has been implicated in allegations of foreign interference. By hovering over a particular country, users can see a density plot of attributions over time (if n > 5), as well as breakdowns of Platform, Method, Source, and Source Category. Each of these can be auto-filtered together with the selected country.");
	      t51 = space();
	      p6 = element("p");
	      em9 = element("em");
	      em9.textContent = "Dataset View";
	      t53 = text(" presents a simplified spreadsheet view of the FIAT dataset. Cases are affected by all applied filters. By clicking on one or more cases in the Case View, users can \"pin\" them to the top of the Dataset View for easy comparison. The ");
	      em10 = element("em");
	      em10.textContent = "Dataset View";
	      t55 = text(" for easy comparison. The ");
	      a = element("a");
	      a.textContent = "full dataset";
	      t57 = text(" can also be downloaded from this view.");
	      t58 = space();
	      section1 = element("section");
	      p7 = element("p");
	      p7.textContent = "enables users to filter and examine data in a multitude of ways. As you get started, consider filtering by:";
	      t60 = space();
	      ul1 = element("ul");
	      li3 = element("li");
	      li3.textContent = "Jurassic";
	      t62 = space();
	      li4 = element("li");
	      li4.textContent = "Cretaceous";
	      t64 = space();
	      li5 = element("li");
	      li5.textContent = "Triassic";
	      attr_dev(input0, "id", "collapsible-status-quo");
	      attr_dev(input0, "class", "toggle");
	      attr_dev(input0, "type", "checkbox");
	      add_location(input0, file$3, 46, 4, 1296);
	      attr_dev(label0, "for", "collapsible-status-quo");
	      attr_dev(label0, "class", "lbl-toggle top");
	      add_location(label0, file$3, 47, 4, 1367);
	      add_location(p0, file$3, 49, 6, 1487);
	      add_location(em0, file$3, 53, 30, 1838);
	      add_location(em1, file$3, 53, 82, 1890);
	      add_location(p1, file$3, 52, 6, 1804);
	      add_location(em2, file$3, 56, 47, 1991);
	      add_location(p2, file$3, 55, 6, 1940);
	      add_location(em3, file$3, 59, 42, 2247);
	      add_location(li0, file$3, 59, 38, 2243);
	      add_location(em4, file$3, 60, 42, 2382);
	      add_location(li1, file$3, 60, 38, 2378);
	      add_location(em5, file$3, 61, 42, 2513);
	      add_location(li2, file$3, 61, 38, 2509);
	      add_location(ul0, file$3, 58, 37, 2200);
	      attr_dev(div0, "class", "collapsible-content");
	      add_location(div0, file$3, 48, 4, 1447);
	      attr_dev(input1, "id", "collapsible-how-to");
	      attr_dev(input1, "class", "toggle");
	      attr_dev(input1, "type", "checkbox");
	      add_location(input1, file$3, 65, 4, 2698);
	      attr_dev(label1, "for", "collapsible-how-to");
	      attr_dev(label1, "class", "lbl-toggle top");
	      add_location(label1, file$3, 66, 4, 2765);
	      add_location(em6, file$3, 70, 8, 2906);
	      attr_dev(span0, "class", "pseudolink copy-tooltip");
	      add_location(span0, file$3, 70, 75, 2973);
	      attr_dev(span1, "class", "pseudolink copy-tooltip");
	      add_location(span1, file$3, 70, 424, 3322);
	      attr_dev(span2, "class", "pseudolink copy-tooltip");
	      add_location(span2, file$3, 70, 746, 3644);
	      attr_dev(span3, "class", "pseudolink copy-tooltip");
	      add_location(span3, file$3, 70, 1074, 3972);
	      attr_dev(span4, "class", "pseudolink copy-tooltip");
	      add_location(span4, file$3, 70, 1390, 4288);
	      attr_dev(span5, "class", "pseudolink copy-tooltip");
	      add_location(span5, file$3, 70, 1630, 4528);
	      add_location(p3, file$3, 69, 6, 2894);
	      add_location(em7, file$3, 73, 8, 4924);
	      add_location(p4, file$3, 72, 6, 4912);
	      add_location(em8, file$3, 76, 8, 5436);
	      add_location(p5, file$3, 75, 6, 5424);
	      add_location(em9, file$3, 79, 8, 6000);
	      add_location(em10, file$3, 79, 261, 6253);
	      attr_dev(a, "href", "https://github.com/DFRLab/Interference2020-Data");
	      add_location(a, file$3, 79, 308, 6300);
	      add_location(p6, file$3, 78, 6, 5988);
	      attr_dev(div1, "class", "collapsible-content");
	      add_location(div1, file$3, 67, 4, 2853);
	      attr_dev(section0, "class", "content no-upper-margin");
	      add_location(section0, file$3, 45, 2, 1250);
	      add_location(p7, file$3, 84, 4, 6482);
	      add_location(li3, file$3, 88, 6, 6646);
	      add_location(li4, file$3, 89, 6, 6713);
	      add_location(li5, file$3, 90, 6, 6782);
	      attr_dev(ul1, "class", "filter-list");
	      add_location(ul1, file$3, 87, 4, 6615);
	      attr_dev(section1, "class", "content");
	      add_location(section1, file$3, 83, 2, 6452);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, section0, anchor);
	      append_dev(section0, input0);
	      append_dev(section0, t0);
	      append_dev(section0, label0);
	      append_dev(section0, t2);
	      append_dev(section0, div0);
	      append_dev(div0, p0);
	      append_dev(div0, t4);
	      append_dev(div0, p1);
	      append_dev(p1, t5);
	      append_dev(p1, em0);
	      append_dev(em0, t6);
	      append_dev(em0, t7);
	      append_dev(p1, t8);
	      append_dev(p1, em1);
	      append_dev(div0, t10);
	      append_dev(div0, p2);
	      append_dev(p2, t11);
	      append_dev(p2, em2);
	      append_dev(em2, t12);
	      append_dev(em2, t13);
	      append_dev(p2, t14);
	      append_dev(div0, t15);
	      append_dev(div0, ul0);
	      append_dev(ul0, li0);
	      append_dev(li0, em3);
	      append_dev(em3, t16);
	      append_dev(em3, t17);
	      append_dev(li0, t18);
	      append_dev(ul0, t19);
	      append_dev(ul0, li1);
	      append_dev(li1, em4);
	      append_dev(em4, t20);
	      append_dev(em4, t21);
	      append_dev(li1, t22);
	      append_dev(ul0, t23);
	      append_dev(ul0, li2);
	      append_dev(li2, em5);
	      append_dev(em5, t24);
	      append_dev(em5, t25);
	      append_dev(li2, t26);
	      append_dev(section0, t27);
	      append_dev(section0, input1);
	      append_dev(section0, t28);
	      append_dev(section0, label1);
	      append_dev(section0, t30);
	      append_dev(section0, div1);
	      append_dev(div1, p3);
	      append_dev(p3, em6);
	      append_dev(p3, t32);
	      append_dev(p3, span0);
	      append_dev(p3, t34);
	      append_dev(p3, span1);
	      append_dev(p3, t36);
	      append_dev(p3, span2);
	      append_dev(p3, t38);
	      append_dev(p3, span3);
	      append_dev(p3, t40);
	      append_dev(p3, span4);
	      append_dev(p3, t42);
	      append_dev(p3, span5);
	      append_dev(p3, t44);
	      append_dev(div1, t45);
	      append_dev(div1, p4);
	      append_dev(p4, em7);
	      append_dev(p4, t47);
	      append_dev(div1, t48);
	      append_dev(div1, p5);
	      append_dev(p5, em8);
	      append_dev(p5, t50);
	      append_dev(div1, t51);
	      append_dev(div1, p6);
	      append_dev(p6, em9);
	      append_dev(p6, t53);
	      append_dev(p6, em10);
	      append_dev(p6, t55);
	      append_dev(p6, a);
	      append_dev(p6, t57);
	      insert_dev(target, t58, anchor);
	      insert_dev(target, section1, anchor);
	      append_dev(section1, p7);
	      append_dev(section1, t60);
	      append_dev(section1, ul1);
	      append_dev(ul1, li3);
	      append_dev(ul1, t62);
	      append_dev(ul1, li4);
	      append_dev(ul1, t64);
	      append_dev(ul1, li5);

	      if (!mounted) {
	        dispose = [listen_dev(span0, "click",
	        /*click_handler*/
	        ctx[3], false, false, false), action_destroyer(copytooltipable_action = copytooltipable.call(null, span0, {
	          content: "The Attribution Score is a framework of eighteen binary statements (true or false) intended to assess the credibility, objectivity, evidence, and transparency of a given case."
	        })), listen_dev(span1, "click",
	        /*click_handler_1*/
	        ctx[4], false, false, false), action_destroyer(copytooltipable_action_1 = copytooltipable.call(null, span1, {
	          content: "Disinformant Nation is the nation from which the case allegedly originated. This does not necessarily denote that the activity was associated with a government."
	        })), listen_dev(span2, "click",
	        /*click_handler_2*/
	        ctx[5], false, false, false), action_destroyer(copytooltipable_action_2 = copytooltipable.call(null, span2, {
	          content: "Platform(s) on which the case allegedly took place, divided between the open web, social media platforms, messaging platforms, and other platforms like email and forum boards."
	        })), listen_dev(span3, "click",
	        /*click_handler_3*/
	        ctx[6], false, false, false), action_destroyer(copytooltipable_action_3 = copytooltipable.call(null, span3, {
	          content: "Method(s) involved in both the creation and amplification of content related to the case. Sockpuppets are one method; hacking by means of data exfiltration is another."
	        })), listen_dev(span4, "click",
	        /*click_handler_4*/
	        ctx[7], false, false, false), action_destroyer(copytooltipable_action_4 = copytooltipable.call(null, span4, {
	          content: "Source describes the individual or entity that originated a foreign interference claim."
	        })), listen_dev(span5, "click",
	        /*click_handler_5*/
	        ctx[8], false, false, false), action_destroyer(copytooltipable_action_5 = copytooltipable.call(null, span5, {
	          content: "Source Category is the broad classification (e.g. Government, Technology Company) of the Source of a given case."
	        })), listen_dev(li3, "click", self$1(
	        /*click_handler_6*/
	        ctx[9]), false, false, false), listen_dev(li4, "click", self$1(
	        /*click_handler_7*/
	        ctx[10]), false, false, false), listen_dev(li5, "click", self$1(
	        /*click_handler_8*/
	        ctx[11]), false, false, false)];
	        mounted = true;
	      }
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*data*/
	      1 && t6_value !== (t6_value =
	      /*data*/
	      ctx[0].length + "")) set_data_dev(t6, t6_value);
	      if (dirty &
	      /*$fossilDatapoints*/
	      2 && t12_value !== (t12_value =
	      /*$fossilDatapoints*/
	      ctx[1].originaljurassic.length +
	      /*$fossilDatapoints*/
	      ctx[1].originalcretaceous.length +
	      /*$fossilDatapoints*/
	      ctx[1].originaltriassic.length + "")) set_data_dev(t12, t12_value);
	      if (dirty &
	      /*$fossilDatapoints*/
	      2 && t16_value !== (t16_value =
	      /*$fossilDatapoints*/
	      ctx[1].originalcretaceous.length + "")) set_data_dev(t16, t16_value);
	      if (dirty &
	      /*$fossilDatapoints*/
	      2 && t20_value !== (t20_value =
	      /*$fossilDatapoints*/
	      ctx[1].originaljurassic.length + "")) set_data_dev(t20, t20_value);
	      if (dirty &
	      /*$fossilDatapoints*/
	      2 && t24_value !== (t24_value =
	      /*$fossilDatapoints*/
	      ctx[1].originaltriassic.length + "")) set_data_dev(t24, t24_value);
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(section0);
	      if (detaching) detach_dev(t58);
	      if (detaching) detach_dev(section1);
	      mounted = false;
	      run_all(dispose);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$2.name,
	    type: "if",
	    source: "(45:0) {#if (data.length > 0 && $fossilDatapoints)}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$3(ctx) {
	  var if_block_anchor;
	  var if_block =
	  /*data*/
	  ctx[0].length > 0 &&
	  /*$fossilDatapoints*/
	  ctx[1] && create_if_block$2(ctx);
	  var block = {
	    c: function create() {
	      if (if_block) if_block.c();
	      if_block_anchor = empty();
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      if (if_block) if_block.m(target, anchor);
	      insert_dev(target, if_block_anchor, anchor);
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (
	      /*data*/
	      ctx[0].length > 0 &&
	      /*$fossilDatapoints*/
	      ctx[1]) {
	        if (if_block) {
	          if_block.p(ctx, dirty);
	        } else {
	          if_block = create_if_block$2(ctx);
	          if_block.c();
	          if_block.m(if_block_anchor.parentNode, if_block_anchor);
	        }
	      } else if (if_block) {
	        if_block.d(1);
	        if_block = null;
	      }
	    },
	    i: noop,
	    o: noop,
	    d: function destroy(detaching) {
	      if (if_block) if_block.d(detaching);
	      if (detaching) detach_dev(if_block_anchor);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$3.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$3($$self, $$props, $$invalidate) {
	  var $highlightPolarization;
	  var $highlightCib;
	  var $attributionScoreFilter;
	  var $drawWrapper;
	  var $fossilDatapoints;
	  validate_store(highlightPolarization, "highlightPolarization");
	  component_subscribe($$self, highlightPolarization, function ($$value) {
	    return $$invalidate(12, $highlightPolarization = $$value);
	  });
	  validate_store(highlightCib, "highlightCib");
	  component_subscribe($$self, highlightCib, function ($$value) {
	    return $$invalidate(13, $highlightCib = $$value);
	  });
	  validate_store(attributionScoreFilter, "attributionScoreFilter");
	  component_subscribe($$self, attributionScoreFilter, function ($$value) {
	    return $$invalidate(14, $attributionScoreFilter = $$value);
	  });
	  validate_store(drawWrapper, "drawWrapper");
	  component_subscribe($$self, drawWrapper, function ($$value) {
	    return $$invalidate(15, $drawWrapper = $$value);
	  });
	  validate_store(fossilDatapoints, "fossilDatapoints");
	  component_subscribe($$self, fossilDatapoints, function ($$value) {
	    return $$invalidate(1, $fossilDatapoints = $$value);
	  });
	  var _$$props$data = $$props.data,
	      data = _$$props$data === void 0 ? [] : _$$props$data;
	  var commaFormat = format(",");
	  var tf = timeFormat("%B %d, %Y");

	  function handleApplyFilter(id) {
	    selectAllFilters();
	    contextData.unselectAll();
	    set_store_value(highlightPolarization, $highlightPolarization = false);
	    set_store_value(highlightCib, $highlightCib = false);

	    switch (id) {
	      case 0:
	        disinformantNationFilter.selectOne("China");
	        contextData.selectOne("corona");
	        break;

	      case 1:
	        sourceFilter$1.selectOne("Facebook");
	        set_store_value(highlightCib, $highlightCib = true);
	        break;

	      case 2:
	        set_store_value(attributionScoreFilter, $attributionScoreFilter = [$attributionScoreFilter[0], 6]);
	        break;
	    }

	    $drawWrapper.scrollIntoView({
	      behavior: "smooth"
	    });
	  }

	  var writable_props = ["data"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<TopVisualContent> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("TopVisualContent", $$slots, []);

	  var click_handler = function click_handler() {
	    return scrollTo("attribution-score", "collapsible-methodology");
	  };

	  var click_handler_1 = function click_handler_1() {
	    return scrollTo("source", "collapsible-codebook");
	  };

	  var click_handler_2 = function click_handler_2() {
	    return scrollTo("platform", "collapsible-codebook");
	  };

	  var click_handler_3 = function click_handler_3() {
	    return scrollTo("method", "collapsible-codebook");
	  };

	  var click_handler_4 = function click_handler_4() {
	    return scrollTo("source", "collapsible-codebook");
	  };

	  var click_handler_5 = function click_handler_5() {
	    return scrollTo("source", "collapsible-codebook");
	  };

	  var click_handler_6 = function click_handler_6() {
	    return handleApplyFilter(0);
	  };

	  var click_handler_7 = function click_handler_7() {
	    return handleApplyFilter(1);
	  };

	  var click_handler_8 = function click_handler_8() {
	    return handleApplyFilter(2);
	  };

	  $$self.$$set = function ($$props) {
	    if ("data" in $$props) $$invalidate(0, data = $$props.data);
	  };

	  $$self.$capture_state = function () {
	    return {
	      disinformantNationFilter: disinformantNationFilter,
	      contextData: contextData,
	      sourceFilter: sourceFilter$1,
	      attributionScoreFilter: attributionScoreFilter,
	      selectAllFilters: selectAllFilters,
	      highlightPolarization: highlightPolarization,
	      highlightCib: highlightCib,
	      format: format,
	      timeFormat: timeFormat,
	      drawWrapper: drawWrapper,
	      copytooltipable: copytooltipable,
	      scrollTo: scrollTo,
	      fossilDatapoints: fossilDatapoints,
	      data: data,
	      commaFormat: commaFormat,
	      tf: tf,
	      handleApplyFilter: handleApplyFilter,
	      $highlightPolarization: $highlightPolarization,
	      $highlightCib: $highlightCib,
	      $attributionScoreFilter: $attributionScoreFilter,
	      $drawWrapper: $drawWrapper,
	      $fossilDatapoints: $fossilDatapoints
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("data" in $$props) $$invalidate(0, data = $$props.data);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [data, $fossilDatapoints, handleApplyFilter, click_handler, click_handler_1, click_handler_2, click_handler_3, click_handler_4, click_handler_5, click_handler_6, click_handler_7, click_handler_8];
	}

	var TopVisualContent = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(TopVisualContent, _SvelteComponentDev);

	  var _super = _createSuper(TopVisualContent);

	  function TopVisualContent(options) {
	    var _this;

	    _classCallCheck(this, TopVisualContent);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$3, create_fragment$3, safe_not_equal, {
	      data: 0
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "TopVisualContent",
	      options: options,
	      id: create_fragment$3.name
	    });
	    return _this;
	  }

	  _createClass(TopVisualContent, [{
	    key: "data",
	    get: function get() {
	      throw new Error("<TopVisualContent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<TopVisualContent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return TopVisualContent;
	}(SvelteComponentDev);

	var file$4 = "src/components/LoadingInfo.svelte";

	function create_fragment$4(ctx) {
	  var div;
	  var p;
	  var block = {
	    c: function create() {
	      div = element("div");
	      p = element("p");
	      p.textContent = "Loading and visualizing...";
	      attr_dev(p, "class", "svelte-1effa9r");
	      add_location(p, file$4, 5, 2, 69);
	      attr_dev(div, "class", "loading-info svelte-1effa9r");
	      add_location(div, file$4, 4, 0, 40);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div, anchor);
	      append_dev(div, p);
	    },
	    p: noop,
	    i: noop,
	    o: noop,
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$4.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$4($$self, $$props) {
	  var writable_props = [];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<LoadingInfo> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("LoadingInfo", $$slots, []);
	  return [];
	}

	var LoadingInfo = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(LoadingInfo, _SvelteComponentDev);

	  var _super = _createSuper(LoadingInfo);

	  function LoadingInfo(options) {
	    var _this;

	    _classCallCheck(this, LoadingInfo);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$4, create_fragment$4, safe_not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "LoadingInfo",
	      options: options,
	      id: create_fragment$4.name
	    });
	    return _this;
	  }

	  return LoadingInfo;
	}(SvelteComponentDev);

	var file$5 = "src/components/Checkbox.svelte";

	function create_fragment$5(ctx) {
	  var input;
	  var input_id_value;
	  var t;
	  var label;
	  var label_for_value;
	  var current;
	  var mounted;
	  var dispose;
	  var default_slot_template =
	  /*$$slots*/
	  ctx[3].default;
	  var default_slot = create_slot(default_slot_template, ctx,
	  /*$$scope*/
	  ctx[2], null);
	  var block = {
	    c: function create() {
	      input = element("input");
	      t = space();
	      label = element("label");
	      if (default_slot) default_slot.c();
	      attr_dev(input, "type", "checkbox");
	      attr_dev(input, "id", input_id_value = "checkbox-" +
	      /*id*/
	      ctx[0]);
	      attr_dev(input, "class", "svelte-agwbpb");
	      toggle_class(input, "checked",
	      /*checked*/
	      ctx[1]);
	      add_location(input, file$5, 6, 0, 88);
	      attr_dev(label, "for", label_for_value = "checkbox-" +
	      /*id*/
	      ctx[0]);
	      attr_dev(label, "class", "choice-entry-name svelte-agwbpb");
	      add_location(label, file$5, 10, 0, 193);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, input, anchor);
	      insert_dev(target, t, anchor);
	      insert_dev(target, label, anchor);

	      if (default_slot) {
	        default_slot.m(label, null);
	      }

	      current = true;

	      if (!mounted) {
	        dispose = listen_dev(input, "click", stop_propagation(
	        /*click_handler*/
	        ctx[4]), false, false, true);
	        mounted = true;
	      }
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (!current || dirty &
	      /*id*/
	      1 && input_id_value !== (input_id_value = "checkbox-" +
	      /*id*/
	      ctx[0])) {
	        attr_dev(input, "id", input_id_value);
	      }

	      if (dirty &
	      /*checked*/
	      2) {
	        toggle_class(input, "checked",
	        /*checked*/
	        ctx[1]);
	      }

	      if (default_slot) {
	        if (default_slot.p && dirty &
	        /*$$scope*/
	        4) {
	          update_slot(default_slot, default_slot_template, ctx,
	          /*$$scope*/
	          ctx[2], dirty, null, null);
	        }
	      }

	      if (!current || dirty &
	      /*id*/
	      1 && label_for_value !== (label_for_value = "checkbox-" +
	      /*id*/
	      ctx[0])) {
	        attr_dev(label, "for", label_for_value);
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(default_slot, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(default_slot, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(input);
	      if (detaching) detach_dev(t);
	      if (detaching) detach_dev(label);
	      if (default_slot) default_slot.d(detaching);
	      mounted = false;
	      dispose();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$5.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$5($$self, $$props, $$invalidate) {
	  var id = $$props.id;
	  var _$$props$checked = $$props.checked,
	      checked = _$$props$checked === void 0 ? false : _$$props$checked;
	  var writable_props = ["id", "checked"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Checkbox> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Checkbox", $$slots, ['default']);

	  function click_handler(event) {
	    bubble($$self, event);
	  }

	  $$self.$$set = function ($$props) {
	    if ("id" in $$props) $$invalidate(0, id = $$props.id);
	    if ("checked" in $$props) $$invalidate(1, checked = $$props.checked);
	    if ("$$scope" in $$props) $$invalidate(2, $$scope = $$props.$$scope);
	  };

	  $$self.$capture_state = function () {
	    return {
	      id: id,
	      checked: checked
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("id" in $$props) $$invalidate(0, id = $$props.id);
	    if ("checked" in $$props) $$invalidate(1, checked = $$props.checked);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [id, checked, $$scope, $$slots, click_handler];
	}

	var Checkbox = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(Checkbox, _SvelteComponentDev);

	  var _super = _createSuper(Checkbox);

	  function Checkbox(options) {
	    var _this;

	    _classCallCheck(this, Checkbox);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$5, create_fragment$5, safe_not_equal, {
	      id: 0,
	      checked: 1
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "Checkbox",
	      options: options,
	      id: create_fragment$5.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*id*/
	    ctx[0] === undefined && !("id" in props)) {
	      console.warn("<Checkbox> was created without expected prop 'id'");
	    }

	    return _this;
	  }

	  _createClass(Checkbox, [{
	    key: "id",
	    get: function get() {
	      throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "checked",
	    get: function get() {
	      throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return Checkbox;
	}(SvelteComponentDev);

	var console_1 = globals.console;
	var file$6 = "src/components/Dropdown.svelte";

	function get_each_context(ctx, list, i) {
	  var child_ctx = ctx.slice();
	  child_ctx[21] = list[i];
	  child_ctx[23] = i;
	  return child_ctx;
	} // (72:4) {#if (expanded)}


	function create_if_block$3(ctx) {
	  var div1;
	  var div0;
	  var button0;
	  var t1;
	  var button1;
	  var t3;
	  var ul;
	  var each_blocks = [];
	  var each_1_lookup = new Map();
	  var t4;
	  var div1_transition;
	  var current;
	  var mounted;
	  var dispose;
	  var each_value =
	  /*items*/
	  ctx[0].sort(
	  /*func_4*/
	  ctx[16]);
	  validate_each_argument(each_value);

	  var get_key = function get_key(ctx) {
	    return (
	      /*item*/
	      ctx[21].id
	    );
	  };

	  validate_each_keys(ctx, each_value, get_each_context, get_key);

	  for (var i = 0; i < each_value.length; i += 1) {
	    var child_ctx = get_each_context(ctx, each_value, i);
	    var key = get_key(child_ctx);
	    each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	  }

	  var if_block =
	  /*hideOneHitWonders*/
	  ctx[3] && create_if_block_1(ctx);
	  var block = {
	    c: function create() {
	      div1 = element("div");
	      div0 = element("div");
	      button0 = element("button");
	      button0.textContent = "Select all";
	      t1 = space();
	      button1 = element("button");
	      button1.textContent = "Unselect all";
	      t3 = space();
	      ul = element("ul");

	      for (var _i = 0; _i < each_blocks.length; _i += 1) {
	        each_blocks[_i].c();
	      }

	      t4 = space();
	      if (if_block) if_block.c();
	      attr_dev(button0, "class", "choice-controls-selectall svelte-cap7e8");
	      add_location(button0, file$6, 74, 10, 1927);
	      attr_dev(button1, "class", "choice-controls-unselectall svelte-cap7e8");
	      add_location(button1, file$6, 75, 10, 2036);
	      attr_dev(div0, "class", "choice-controls svelte-cap7e8");
	      add_location(div0, file$6, 73, 8, 1887);
	      attr_dev(ul, "class", "choice-list svelte-cap7e8");
	      add_location(ul, file$6, 77, 8, 2164);
	      attr_dev(div1, "class", "choice svelte-cap7e8");
	      toggle_class(div1, "superior",
	      /*superior*/
	      ctx[4]);
	      add_location(div1, file$6, 72, 6, 1826);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div1, anchor);
	      append_dev(div1, div0);
	      append_dev(div0, button0);
	      append_dev(div0, t1);
	      append_dev(div0, button1);
	      append_dev(div1, t3);
	      append_dev(div1, ul);

	      for (var _i2 = 0; _i2 < each_blocks.length; _i2 += 1) {
	        each_blocks[_i2].m(ul, null);
	      }

	      append_dev(div1, t4);
	      if (if_block) if_block.m(div1, null);
	      current = true;

	      if (!mounted) {
	        dispose = [listen_dev(button0, "click", stop_propagation(
	        /*selectAll*/
	        ctx[8]), false, false, true), listen_dev(button1, "click", stop_propagation(
	        /*unselectAll*/
	        ctx[9]), false, false, true)];
	        mounted = true;
	      }
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*label, items, sortConsistently, handleChoiceClick, nameField, hideOneHitWonders*/
	      2063) {
	        var _each_value =
	        /*items*/
	        ctx[0].sort(
	        /*func_4*/
	        ctx[16]);

	        validate_each_argument(_each_value);
	        group_outros();
	        validate_each_keys(ctx, _each_value, get_each_context, get_key);
	        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, _each_value, each_1_lookup, ul, outro_and_destroy_block, create_each_block, null, get_each_context);
	        check_outros();
	      }

	      if (
	      /*hideOneHitWonders*/
	      ctx[3]) {
	        if (if_block) {
	          if_block.p(ctx, dirty);
	        } else {
	          if_block = create_if_block_1(ctx);
	          if_block.c();
	          if_block.m(div1, null);
	        }
	      } else if (if_block) {
	        if_block.d(1);
	        if_block = null;
	      }

	      if (dirty &
	      /*superior*/
	      16) {
	        toggle_class(div1, "superior",
	        /*superior*/
	        ctx[4]);
	      }
	    },
	    i: function intro(local) {
	      if (current) return;

	      for (var _i3 = 0; _i3 < each_value.length; _i3 += 1) {
	        transition_in(each_blocks[_i3]);
	      }

	      add_render_callback(function () {
	        if (!div1_transition) div1_transition = create_bidirectional_transition(div1, slide, {}, true);
	        div1_transition.run(1);
	      });
	      current = true;
	    },
	    o: function outro(local) {
	      for (var _i4 = 0; _i4 < each_blocks.length; _i4 += 1) {
	        transition_out(each_blocks[_i4]);
	      }

	      if (!div1_transition) div1_transition = create_bidirectional_transition(div1, slide, {}, false);
	      div1_transition.run(0);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div1);

	      for (var _i5 = 0; _i5 < each_blocks.length; _i5 += 1) {
	        each_blocks[_i5].d();
	      }

	      if (if_block) if_block.d();
	      if (detaching && div1_transition) div1_transition.end();
	      mounted = false;
	      run_all(dispose);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$3.name,
	    type: "if",
	    source: "(72:4) {#if (expanded)}",
	    ctx: ctx
	  });
	  return block;
	} // (80:12) {#if (!(hideOneHitWonders && item.count === 1))}


	function create_if_block_2(ctx) {
	  var li;
	  var checkbox;
	  var t;
	  var current;
	  var mounted;
	  var dispose;

	  function click_handler_2() {
	    var _ctx;

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return (
	      /*click_handler_2*/
	      (_ctx = ctx)[17].apply(_ctx, [
	      /*item*/
	      ctx[21]].concat(args))
	    );
	  }

	  checkbox = new Checkbox({
	    props: {
	      id: "" + (
	      /*label*/
	      ctx[1] + "-" +
	      /*i*/
	      ctx[23]),
	      checked:
	      /*item*/
	      ctx[21].selected,
	      $$slots: {
	        default: [create_default_slot]
	      },
	      $$scope: {
	        ctx: ctx
	      }
	    },
	    $$inline: true
	  });
	  checkbox.$on("click", click_handler_2);
	  var block = {
	    c: function create() {
	      li = element("li");
	      create_component(checkbox.$$.fragment);
	      t = space();
	      attr_dev(li, "class", "svelte-cap7e8");
	      add_location(li, file$6, 80, 14, 2361);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, li, anchor);
	      mount_component(checkbox, li, null);
	      append_dev(li, t);
	      current = true;

	      if (!mounted) {
	        dispose = listen_dev(li, "click", stop_propagation(
	        /*click_handler*/
	        ctx[12]), false, false, true);
	        mounted = true;
	      }
	    },
	    p: function update(new_ctx, dirty) {
	      ctx = new_ctx;
	      var checkbox_changes = {};
	      if (dirty &
	      /*label, items*/
	      3) checkbox_changes.id = "" + (
	      /*label*/
	      ctx[1] + "-" +
	      /*i*/
	      ctx[23]);
	      if (dirty &
	      /*items*/
	      1) checkbox_changes.checked =
	      /*item*/
	      ctx[21].selected;

	      if (dirty &
	      /*$$scope, items, nameField*/
	      16777221) {
	        checkbox_changes.$$scope = {
	          dirty: dirty,
	          ctx: ctx
	        };
	      }

	      checkbox.$set(checkbox_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(checkbox.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(checkbox.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(li);
	      destroy_component(checkbox);
	      mounted = false;
	      dispose();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_2.name,
	    type: "if",
	    source: "(80:12) {#if (!(hideOneHitWonders && item.count === 1))}",
	    ctx: ctx
	  });
	  return block;
	} // (88:42) 


	function create_if_block_4(ctx) {
	  var span;
	  var t0;
	  var t1_value =
	  /*item*/
	  ctx[21].source + "";
	  var t1;
	  var t2;
	  var block = {
	    c: function create() {
	      span = element("span");
	      t0 = text("(");
	      t1 = text(t1_value);
	      t2 = text(")");
	      attr_dev(span, "class", "choice-entry-source svelte-cap7e8");
	      add_location(span, file$6, 88, 20, 2813);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, span, anchor);
	      append_dev(span, t0);
	      append_dev(span, t1);
	      append_dev(span, t2);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*items*/
	      1 && t1_value !== (t1_value =
	      /*item*/
	      ctx[21].source + "")) set_data_dev(t1, t1_value);
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(span);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_4.name,
	    type: "if",
	    source: "(88:42) ",
	    ctx: ctx
	  });
	  return block;
	} // (86:18) {#if (item.liveCount)}


	function create_if_block_3(ctx) {
	  var span;
	  var t0;
	  var t1_value =
	  /*item*/
	  ctx[21].liveCount + "";
	  var t1;
	  var t2;
	  var block = {
	    c: function create() {
	      span = element("span");
	      t0 = text("(");
	      t1 = text(t1_value);
	      t2 = text(")");
	      attr_dev(span, "class", "choice-entry-count svelte-cap7e8");
	      add_location(span, file$6, 86, 20, 2691);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, span, anchor);
	      append_dev(span, t0);
	      append_dev(span, t1);
	      append_dev(span, t2);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*items*/
	      1 && t1_value !== (t1_value =
	      /*item*/
	      ctx[21].liveCount + "")) set_data_dev(t1, t1_value);
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(span);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_3.name,
	    type: "if",
	    source: "(86:18) {#if (item.liveCount)}",
	    ctx: ctx
	  });
	  return block;
	} // (82:16) <Checkbox id="{label}-{i}"                           checked={item.selected}                           on:click={() => handleChoiceClick(item.id)}>


	function create_default_slot(ctx) {
	  var span;
	  var t0_value =
	  /*item*/
	  ctx[21][
	  /*nameField*/
	  ctx[2]] + "";
	  var t0;
	  var t1;
	  var if_block_anchor;

	  function select_block_type(ctx, dirty) {
	    if (
	    /*item*/
	    ctx[21].liveCount) return create_if_block_3;
	    if (
	    /*item*/
	    ctx[21].source) return create_if_block_4;
	  }

	  var current_block_type = select_block_type(ctx);
	  var if_block = current_block_type && current_block_type(ctx);
	  var block = {
	    c: function create() {
	      span = element("span");
	      t0 = text(t0_value);
	      t1 = space();
	      if (if_block) if_block.c();
	      if_block_anchor = empty();
	      attr_dev(span, "class", "choice-entry-name");
	      add_location(span, file$6, 84, 18, 2573);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, span, anchor);
	      append_dev(span, t0);
	      insert_dev(target, t1, anchor);
	      if (if_block) if_block.m(target, anchor);
	      insert_dev(target, if_block_anchor, anchor);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*items, nameField*/
	      5 && t0_value !== (t0_value =
	      /*item*/
	      ctx[21][
	      /*nameField*/
	      ctx[2]] + "")) set_data_dev(t0, t0_value);

	      if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
	        if_block.p(ctx, dirty);
	      } else {
	        if (if_block) if_block.d(1);
	        if_block = current_block_type && current_block_type(ctx);

	        if (if_block) {
	          if_block.c();
	          if_block.m(if_block_anchor.parentNode, if_block_anchor);
	        }
	      }
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(span);
	      if (detaching) detach_dev(t1);

	      if (if_block) {
	        if_block.d(detaching);
	      }

	      if (detaching) detach_dev(if_block_anchor);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_default_slot.name,
	    type: "slot",
	    source: "(82:16) <Checkbox id=\\\"{label}-{i}\\\"                           checked={item.selected}                           on:click={() => handleChoiceClick(item.id)}>",
	    ctx: ctx
	  });
	  return block;
	} // (79:10) {#each items.sort((a, b) => -sortConsistently(a, b, 'id', 'id')) as item, i (item.id)}


	function create_each_block(key_1, ctx) {
	  var first;
	  var if_block_anchor;
	  var current;
	  var if_block = !(
	  /*hideOneHitWonders*/
	  ctx[3] &&
	  /*item*/
	  ctx[21].count === 1) && create_if_block_2(ctx);
	  var block = {
	    key: key_1,
	    first: null,
	    c: function create() {
	      first = empty();
	      if (if_block) if_block.c();
	      if_block_anchor = empty();
	      this.first = first;
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, first, anchor);
	      if (if_block) if_block.m(target, anchor);
	      insert_dev(target, if_block_anchor, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      if (!(
	      /*hideOneHitWonders*/
	      ctx[3] &&
	      /*item*/
	      ctx[21].count === 1)) {
	        if (if_block) {
	          if_block.p(ctx, dirty);

	          if (dirty &
	          /*hideOneHitWonders, items*/
	          9) {
	            transition_in(if_block, 1);
	          }
	        } else {
	          if_block = create_if_block_2(ctx);
	          if_block.c();
	          transition_in(if_block, 1);
	          if_block.m(if_block_anchor.parentNode, if_block_anchor);
	        }
	      } else if (if_block) {
	        group_outros();
	        transition_out(if_block, 1, 1, function () {
	          if_block = null;
	        });
	        check_outros();
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(if_block);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(if_block);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(first);
	      if (if_block) if_block.d(detaching);
	      if (detaching) detach_dev(if_block_anchor);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_each_block.name,
	    type: "each",
	    source: "(79:10) {#each items.sort((a, b) => -sortConsistently(a, b, 'id', 'id')) as item, i (item.id)}",
	    ctx: ctx
	  });
	  return block;
	} // (96:8) {#if (hideOneHitWonders)}


	function create_if_block_1(ctx) {
	  var p;
	  var t0;
	  var t1;
	  var block = {
	    c: function create() {
	      p = element("p");
	      t0 = text(
	      /*label*/
	      ctx[1]);
	      t1 = text("s with only one result in the dataset are hidden.");
	      attr_dev(p, "class", "info svelte-cap7e8");
	      add_location(p, file$6, 96, 10, 3036);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, p, anchor);
	      append_dev(p, t0);
	      append_dev(p, t1);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*label*/
	      2) set_data_dev(t0,
	      /*label*/
	      ctx[1]);
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(p);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_1.name,
	    type: "if",
	    source: "(96:8) {#if (hideOneHitWonders)}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$6(ctx) {
	  var t0;
	  var div3;
	  var div0;
	  var t1;
	  var t2;
	  var div1;
	  var span0;
	  var t3;
	  var span1;
	  var t4_value = (
	  /*items*/
	  ctx[0].filter(func).length === 0 ? "none" :
	  /*items*/
	  ctx[0].every(
	  /*func_1*/
	  ctx[14]) ? "all" :
	  /*items*/
	  ctx[0].filter(func_2).map(
	  /*func_3*/
	  ctx[15]).join(", ")) + "";
	  var t4;
	  var t5;
	  var button;
	  var svg;
	  var path;
	  var t6;
	  var div2;
	  var current;
	  var mounted;
	  var dispose;
	  var if_block =
	  /*expanded*/
	  ctx[6] && create_if_block$3(ctx);
	  var block = {
	    c: function create() {
	      t0 = space();
	      div3 = element("div");
	      div0 = element("div");
	      t1 = text(
	      /*label*/
	      ctx[1]);
	      t2 = space();
	      div1 = element("div");
	      span0 = element("span");
	      t3 = space();
	      span1 = element("span");
	      t4 = text(t4_value);
	      t5 = space();
	      button = element("button");
	      svg = svg_element("svg");
	      path = svg_element("path");
	      t6 = space();
	      div2 = element("div");
	      if (if_block) if_block.c();
	      attr_dev(div0, "class", "label svelte-cap7e8");
	      add_location(div0, file$6, 52, 2, 1149);
	      attr_dev(span0, "class", "selected-items-icon");
	      add_location(span0, file$6, 56, 4, 1272);
	      attr_dev(span1, "class", "selected-items-text svelte-cap7e8");
	      add_location(span1, file$6, 57, 4, 1318);
	      attr_dev(path, "d", "M0 0L15 0L7.5 10Z");
	      add_location(path, file$6, 66, 8, 1696);
	      attr_dev(svg, "width", "15");
	      attr_dev(svg, "height", "10");
	      attr_dev(svg, "class", "svelte-cap7e8");
	      toggle_class(svg, "expanded",
	      /*expanded*/
	      ctx[6]);
	      add_location(svg, file$6, 65, 6, 1644);
	      attr_dev(button, "class", "selected-items-arrow svelte-cap7e8");
	      add_location(button, file$6, 64, 4, 1600);
	      attr_dev(div1, "class", "selected-items svelte-cap7e8");
	      add_location(div1, file$6, 55, 2, 1192);
	      attr_dev(div2, "class", "choice-wrapper svelte-cap7e8");
	      add_location(div2, file$6, 70, 2, 1770);
	      attr_dev(div3, "class", "dropdown svelte-cap7e8");
	      add_location(div3, file$6, 51, 0, 1107);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, t0, anchor);
	      insert_dev(target, div3, anchor);
	      append_dev(div3, div0);
	      append_dev(div0, t1);
	      append_dev(div3, t2);
	      append_dev(div3, div1);
	      append_dev(div1, span0);
	      append_dev(div1, t3);
	      append_dev(div1, span1);
	      append_dev(span1, t4);
	      append_dev(div1, t5);
	      append_dev(div1, button);
	      append_dev(button, svg);
	      append_dev(svg, path);
	      append_dev(div3, t6);
	      append_dev(div3, div2);
	      if (if_block) if_block.m(div2, null);
	      /*div3_binding*/

	      ctx[18](div3);
	      current = true;

	      if (!mounted) {
	        dispose = [listen_dev(document.body, "click",
	        /*click_handler_1*/
	        ctx[13], false, false, false), listen_dev(div1, "click", stop_propagation(
	        /*handleDropdownClick*/
	        ctx[10]), false, false, true)];
	        mounted = true;
	      }
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (!current || dirty &
	      /*label*/
	      2) set_data_dev(t1,
	      /*label*/
	      ctx[1]);
	      if ((!current || dirty &
	      /*items, nameField*/
	      5) && t4_value !== (t4_value = (
	      /*items*/
	      ctx[0].filter(func).length === 0 ? "none" :
	      /*items*/
	      ctx[0].every(
	      /*func_1*/
	      ctx[14]) ? "all" :
	      /*items*/
	      ctx[0].filter(func_2).map(
	      /*func_3*/
	      ctx[15]).join(", ")) + "")) set_data_dev(t4, t4_value);

	      if (dirty &
	      /*expanded*/
	      64) {
	        toggle_class(svg, "expanded",
	        /*expanded*/
	        ctx[6]);
	      }

	      if (
	      /*expanded*/
	      ctx[6]) {
	        if (if_block) {
	          if_block.p(ctx, dirty);

	          if (dirty &
	          /*expanded*/
	          64) {
	            transition_in(if_block, 1);
	          }
	        } else {
	          if_block = create_if_block$3(ctx);
	          if_block.c();
	          transition_in(if_block, 1);
	          if_block.m(div2, null);
	        }
	      } else if (if_block) {
	        group_outros();
	        transition_out(if_block, 1, 1, function () {
	          if_block = null;
	        });
	        check_outros();
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(if_block);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(if_block);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(t0);
	      if (detaching) detach_dev(div3);
	      if (if_block) if_block.d();
	      /*div3_binding*/

	      ctx[18](null);
	      mounted = false;
	      run_all(dispose);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$6.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	var func = function func(d) {
	  return d.selected;
	};

	var func_2 = function func_2(d) {
	  return d.selected;
	};

	function instance$6($$self, $$props, $$invalidate) {
	  var _$$props$items = $$props.items,
	      items = _$$props$items === void 0 ? [] : _$$props$items;
	  var _$$props$label = $$props.label,
	      label = _$$props$label === void 0 ? "" : _$$props$label;
	  var _$$props$nameField = $$props.nameField,
	      nameField = _$$props$nameField === void 0 ? "id" : _$$props$nameField;
	  var _$$props$hideOneHitWo = $$props.hideOneHitWonders,
	      hideOneHitWonders = _$$props$hideOneHitWo === void 0 ? false : _$$props$hideOneHitWo;
	  var _$$props$superior = $$props.superior,
	      superior = _$$props$superior === void 0 ? false : _$$props$superior;
	  var dispatch = createEventDispatcher();
	  var elem;
	  var expanded = false;

	  function handleBodyClick() {
	    $$invalidate(6, expanded = false);
	  }

	  function toggleExpanded() {
	    $$invalidate(6, expanded = !expanded);
	  }

	  function selectAll() {
	    dispatch("itemsAdded", items.map(function (d) {
	      return d.id;
	    }));
	  }

	  function unselectAll() {
	    dispatch("itemsRemoved", items.map(function (d) {
	      return d.id;
	    }));
	  }

	  function handleDropdownClick() {
	    toggleExpanded();
	  }

	  function handleChoiceClick(id) {
	    console.log(id);

	    if (!items.filter(function (d) {
	      return d.selected;
	    }).map(function (d) {
	      return d.id;
	    }).includes(id)) {
	      dispatch("itemsAdded", id);
	    } else {
	      dispatch("itemsRemoved", id);
	    }
	  }

	  var writable_props = ["items", "label", "nameField", "hideOneHitWonders", "superior"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn("<Dropdown> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Dropdown", $$slots, []);

	  function click_handler(event) {
	    bubble($$self, event);
	  }

	  var click_handler_1 = function click_handler_1(e) {
	    return handleBodyClick();
	  };

	  var func_1 = function func_1(d) {
	    return d.selected && items.length > 1;
	  };

	  var func_3 = function func_3(d) {
	    return d[nameField];
	  };

	  var func_4 = function func_4(a, b) {
	    return -sortConsistently(a, b, "id", "id");
	  };

	  var click_handler_2 = function click_handler_2(item) {
	    return handleChoiceClick(item.id);
	  };

	  function div3_binding($$value) {
	    binding_callbacks[$$value ? "unshift" : "push"](function () {
	      elem = $$value;
	      $$invalidate(5, elem);
	    });
	  }

	  $$self.$$set = function ($$props) {
	    if ("items" in $$props) $$invalidate(0, items = $$props.items);
	    if ("label" in $$props) $$invalidate(1, label = $$props.label);
	    if ("nameField" in $$props) $$invalidate(2, nameField = $$props.nameField);
	    if ("hideOneHitWonders" in $$props) $$invalidate(3, hideOneHitWonders = $$props.hideOneHitWonders);
	    if ("superior" in $$props) $$invalidate(4, superior = $$props.superior);
	  };

	  $$self.$capture_state = function () {
	    return {
	      createEventDispatcher: createEventDispatcher,
	      slide: slide,
	      sortConsistently: sortConsistently,
	      Checkbox: Checkbox,
	      items: items,
	      label: label,
	      nameField: nameField,
	      hideOneHitWonders: hideOneHitWonders,
	      superior: superior,
	      dispatch: dispatch,
	      elem: elem,
	      expanded: expanded,
	      handleBodyClick: handleBodyClick,
	      toggleExpanded: toggleExpanded,
	      selectAll: selectAll,
	      unselectAll: unselectAll,
	      handleDropdownClick: handleDropdownClick,
	      handleChoiceClick: handleChoiceClick
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("items" in $$props) $$invalidate(0, items = $$props.items);
	    if ("label" in $$props) $$invalidate(1, label = $$props.label);
	    if ("nameField" in $$props) $$invalidate(2, nameField = $$props.nameField);
	    if ("hideOneHitWonders" in $$props) $$invalidate(3, hideOneHitWonders = $$props.hideOneHitWonders);
	    if ("superior" in $$props) $$invalidate(4, superior = $$props.superior);
	    if ("elem" in $$props) $$invalidate(5, elem = $$props.elem);
	    if ("expanded" in $$props) $$invalidate(6, expanded = $$props.expanded);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [items, label, nameField, hideOneHitWonders, superior, elem, expanded, handleBodyClick, selectAll, unselectAll, handleDropdownClick, handleChoiceClick, click_handler, click_handler_1, func_1, func_3, func_4, click_handler_2, div3_binding];
	}

	var Dropdown = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(Dropdown, _SvelteComponentDev);

	  var _super = _createSuper(Dropdown);

	  function Dropdown(options) {
	    var _this;

	    _classCallCheck(this, Dropdown);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$6, create_fragment$6, safe_not_equal, {
	      items: 0,
	      label: 1,
	      nameField: 2,
	      hideOneHitWonders: 3,
	      superior: 4
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "Dropdown",
	      options: options,
	      id: create_fragment$6.name
	    });
	    return _this;
	  }

	  _createClass(Dropdown, [{
	    key: "items",
	    get: function get() {
	      throw new Error("<Dropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Dropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "label",
	    get: function get() {
	      throw new Error("<Dropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Dropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "nameField",
	    get: function get() {
	      throw new Error("<Dropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Dropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "hideOneHitWonders",
	    get: function get() {
	      throw new Error("<Dropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Dropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "superior",
	    get: function get() {
	      throw new Error("<Dropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Dropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return Dropdown;
	}(SvelteComponentDev);

	var file$7 = "src/components/FossilCheckbox.svelte";

	function create_fragment$7(ctx) {
	  var input;
	  var input_id_value;
	  var t;
	  var label;
	  var label_for_value;
	  var current;
	  var mounted;
	  var dispose;
	  var default_slot_template =
	  /*$$slots*/
	  ctx[5].default;
	  var default_slot = create_slot(default_slot_template, ctx,
	  /*$$scope*/
	  ctx[4], null);
	  var block = {
	    c: function create() {
	      input = element("input");
	      t = space();
	      label = element("label");
	      if (default_slot) default_slot.c();
	      attr_dev(input, "type", "checkbox");
	      attr_dev(input, "id", input_id_value = "checkbox-" +
	      /*id*/
	      ctx[0]);
	      attr_dev(input, "fossilera",
	      /*fossilera*/
	      ctx[2]);
	      attr_dev(input, "added",
	      /*added*/
	      ctx[3]);
	      attr_dev(input, "class", "svelte-agwbpb");
	      toggle_class(input, "checked",
	      /*checked*/
	      ctx[1]);
	      add_location(input, file$7, 10, 0, 144);
	      attr_dev(label, "for", label_for_value = "checkbox-" +
	      /*id*/
	      ctx[0]);
	      attr_dev(label, "class", "choice-entry-name svelte-agwbpb");
	      add_location(label, file$7, 16, 0, 299);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, input, anchor);
	      insert_dev(target, t, anchor);
	      insert_dev(target, label, anchor);

	      if (default_slot) {
	        default_slot.m(label, null);
	      }

	      current = true;

	      if (!mounted) {
	        dispose = listen_dev(input, "click", stop_propagation(
	        /*click_handler*/
	        ctx[6]), false, false, true);
	        mounted = true;
	      }
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (!current || dirty &
	      /*id*/
	      1 && input_id_value !== (input_id_value = "checkbox-" +
	      /*id*/
	      ctx[0])) {
	        attr_dev(input, "id", input_id_value);
	      }

	      if (!current || dirty &
	      /*fossilera*/
	      4) {
	        attr_dev(input, "fossilera",
	        /*fossilera*/
	        ctx[2]);
	      }

	      if (!current || dirty &
	      /*added*/
	      8) {
	        attr_dev(input, "added",
	        /*added*/
	        ctx[3]);
	      }

	      if (dirty &
	      /*checked*/
	      2) {
	        toggle_class(input, "checked",
	        /*checked*/
	        ctx[1]);
	      }

	      if (default_slot) {
	        if (default_slot.p && dirty &
	        /*$$scope*/
	        16) {
	          update_slot(default_slot, default_slot_template, ctx,
	          /*$$scope*/
	          ctx[4], dirty, null, null);
	        }
	      }

	      if (!current || dirty &
	      /*id*/
	      1 && label_for_value !== (label_for_value = "checkbox-" +
	      /*id*/
	      ctx[0])) {
	        attr_dev(label, "for", label_for_value);
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(default_slot, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(default_slot, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(input);
	      if (detaching) detach_dev(t);
	      if (detaching) detach_dev(label);
	      if (default_slot) default_slot.d(detaching);
	      mounted = false;
	      dispose();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$7.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$7($$self, $$props, $$invalidate) {
	  var id = $$props.id;
	  var _$$props$checked = $$props.checked,
	      checked = _$$props$checked === void 0 ? false : _$$props$checked;
	  var _$$props$fossilera = $$props.fossilera,
	      fossilera = _$$props$fossilera === void 0 ? "" : _$$props$fossilera;
	  var _$$props$added = $$props.added,
	      added = _$$props$added === void 0 ? "" : _$$props$added;
	  var writable_props = ["id", "checked", "fossilera", "added"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<FossilCheckbox> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("FossilCheckbox", $$slots, ['default']);

	  function click_handler(event) {
	    bubble($$self, event);
	  }

	  $$self.$$set = function ($$props) {
	    if ("id" in $$props) $$invalidate(0, id = $$props.id);
	    if ("checked" in $$props) $$invalidate(1, checked = $$props.checked);
	    if ("fossilera" in $$props) $$invalidate(2, fossilera = $$props.fossilera);
	    if ("added" in $$props) $$invalidate(3, added = $$props.added);
	    if ("$$scope" in $$props) $$invalidate(4, $$scope = $$props.$$scope);
	  };

	  $$self.$capture_state = function () {
	    return {
	      id: id,
	      checked: checked,
	      fossilera: fossilera,
	      added: added
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("id" in $$props) $$invalidate(0, id = $$props.id);
	    if ("checked" in $$props) $$invalidate(1, checked = $$props.checked);
	    if ("fossilera" in $$props) $$invalidate(2, fossilera = $$props.fossilera);
	    if ("added" in $$props) $$invalidate(3, added = $$props.added);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [id, checked, fossilera, added, $$scope, $$slots, click_handler];
	}

	var FossilCheckbox = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(FossilCheckbox, _SvelteComponentDev);

	  var _super = _createSuper(FossilCheckbox);

	  function FossilCheckbox(options) {
	    var _this;

	    _classCallCheck(this, FossilCheckbox);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$7, create_fragment$7, safe_not_equal, {
	      id: 0,
	      checked: 1,
	      fossilera: 2,
	      added: 3
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "FossilCheckbox",
	      options: options,
	      id: create_fragment$7.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*id*/
	    ctx[0] === undefined && !("id" in props)) {
	      console.warn("<FossilCheckbox> was created without expected prop 'id'");
	    }

	    return _this;
	  }

	  _createClass(FossilCheckbox, [{
	    key: "id",
	    get: function get() {
	      throw new Error("<FossilCheckbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<FossilCheckbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "checked",
	    get: function get() {
	      throw new Error("<FossilCheckbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<FossilCheckbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "fossilera",
	    get: function get() {
	      throw new Error("<FossilCheckbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<FossilCheckbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "added",
	    get: function get() {
	      throw new Error("<FossilCheckbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<FossilCheckbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return FossilCheckbox;
	}(SvelteComponentDev);

	var console_1$1 = globals.console;
	var file$8 = "src/components/Fossildropdown.svelte";

	function get_each_context$1(ctx, list, i) {
	  var child_ctx = ctx.slice();
	  child_ctx[25] = list[i];
	  child_ctx[27] = i;
	  return child_ctx;
	} // (142:4) {#if (expanded)}


	function create_if_block$4(ctx) {
	  var div1;
	  var div0;
	  var button0;
	  var t1;
	  var button1;
	  var t3;
	  var ul;
	  var each_blocks = [];
	  var each_1_lookup = new Map();
	  var t4;
	  var div1_transition;
	  var current;
	  var mounted;
	  var dispose;
	  var each_value =
	  /*items*/
	  ctx[0].sort(
	  /*func_4*/
	  ctx[16]);
	  validate_each_argument(each_value);

	  var get_key = function get_key(ctx) {
	    return (
	      /*item*/
	      ctx[25].id
	    );
	  };

	  validate_each_keys(ctx, each_value, get_each_context$1, get_key);

	  for (var i = 0; i < each_value.length; i += 1) {
	    var child_ctx = get_each_context$1(ctx, each_value, i);
	    var key = get_key(child_ctx);
	    each_1_lookup.set(key, each_blocks[i] = create_each_block$1(key, child_ctx));
	  }

	  var if_block =
	  /*hideOneHitWonders*/
	  ctx[3] && create_if_block_1$1(ctx);
	  var block = {
	    c: function create() {
	      div1 = element("div");
	      div0 = element("div");
	      button0 = element("button");
	      button0.textContent = "Select all";
	      t1 = space();
	      button1 = element("button");
	      button1.textContent = "Unselect all";
	      t3 = space();
	      ul = element("ul");

	      for (var _i = 0; _i < each_blocks.length; _i += 1) {
	        each_blocks[_i].c();
	      }

	      t4 = space();
	      if (if_block) if_block.c();
	      attr_dev(button0, "class", "choice-controls-selectall svelte-cap7e8");
	      add_location(button0, file$8, 144, 10, 2929);
	      attr_dev(button1, "class", "choice-controls-unselectall svelte-cap7e8");
	      add_location(button1, file$8, 145, 10, 3038);
	      attr_dev(div0, "class", "choice-controls svelte-cap7e8");
	      add_location(div0, file$8, 143, 8, 2889);
	      attr_dev(ul, "class", "choice-list svelte-cap7e8");
	      add_location(ul, file$8, 147, 8, 3166);
	      attr_dev(div1, "class", "choice svelte-cap7e8");
	      toggle_class(div1, "superior",
	      /*superior*/
	      ctx[4]);
	      add_location(div1, file$8, 142, 6, 2828);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div1, anchor);
	      append_dev(div1, div0);
	      append_dev(div0, button0);
	      append_dev(div0, t1);
	      append_dev(div0, button1);
	      append_dev(div1, t3);
	      append_dev(div1, ul);

	      for (var _i2 = 0; _i2 < each_blocks.length; _i2 += 1) {
	        each_blocks[_i2].m(ul, null);
	      }

	      append_dev(div1, t4);
	      if (if_block) if_block.m(div1, null);
	      current = true;

	      if (!mounted) {
	        dispose = [listen_dev(button0, "click", stop_propagation(
	        /*selectAll*/
	        ctx[8]), false, false, true), listen_dev(button1, "click", stop_propagation(
	        /*unselectAll*/
	        ctx[9]), false, false, true)];
	        mounted = true;
	      }
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*label, items, sortConsistently, handleFossilClick, hideOneHitWonders*/
	      2059) {
	        var _each_value =
	        /*items*/
	        ctx[0].sort(
	        /*func_4*/
	        ctx[16]);

	        validate_each_argument(_each_value);
	        group_outros();
	        validate_each_keys(ctx, _each_value, get_each_context$1, get_key);
	        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, _each_value, each_1_lookup, ul, outro_and_destroy_block, create_each_block$1, null, get_each_context$1);
	        check_outros();
	      }

	      if (
	      /*hideOneHitWonders*/
	      ctx[3]) {
	        if (if_block) {
	          if_block.p(ctx, dirty);
	        } else {
	          if_block = create_if_block_1$1(ctx);
	          if_block.c();
	          if_block.m(div1, null);
	        }
	      } else if (if_block) {
	        if_block.d(1);
	        if_block = null;
	      }

	      if (dirty &
	      /*superior*/
	      16) {
	        toggle_class(div1, "superior",
	        /*superior*/
	        ctx[4]);
	      }
	    },
	    i: function intro(local) {
	      if (current) return;

	      for (var _i3 = 0; _i3 < each_value.length; _i3 += 1) {
	        transition_in(each_blocks[_i3]);
	      }

	      add_render_callback(function () {
	        if (!div1_transition) div1_transition = create_bidirectional_transition(div1, slide, {}, true);
	        div1_transition.run(1);
	      });
	      current = true;
	    },
	    o: function outro(local) {
	      for (var _i4 = 0; _i4 < each_blocks.length; _i4 += 1) {
	        transition_out(each_blocks[_i4]);
	      }

	      if (!div1_transition) div1_transition = create_bidirectional_transition(div1, slide, {}, false);
	      div1_transition.run(0);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div1);

	      for (var _i5 = 0; _i5 < each_blocks.length; _i5 += 1) {
	        each_blocks[_i5].d();
	      }

	      if (if_block) if_block.d();
	      if (detaching && div1_transition) div1_transition.end();
	      mounted = false;
	      run_all(dispose);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$4.name,
	    type: "if",
	    source: "(142:4) {#if (expanded)}",
	    ctx: ctx
	  });
	  return block;
	} // (150:12) {#if (!(hideOneHitWonders && item.count === 1))}


	function create_if_block_2$1(ctx) {
	  var li;
	  var fossilcheckbox;
	  var t;
	  var current;
	  var mounted;
	  var dispose;
	  fossilcheckbox = new FossilCheckbox({
	    props: {
	      id: "" + (
	      /*label*/
	      ctx[1] + "-" +
	      /*i*/
	      ctx[27]),
	      checked:
	      /*item*/
	      ctx[25].liveCount,
	      added:
	      /*item*/
	      ctx[25].liveCount,
	      fossilera:
	      /*item*/
	      ctx[25].title,
	      $$slots: {
	        default: [create_default_slot$1]
	      },
	      $$scope: {
	        ctx: ctx
	      }
	    },
	    $$inline: true
	  });
	  fossilcheckbox.$on("click",
	  /*handleFossilClick*/
	  ctx[11]);
	  var block = {
	    c: function create() {
	      li = element("li");
	      create_component(fossilcheckbox.$$.fragment);
	      t = space();
	      attr_dev(li, "class", "svelte-cap7e8");
	      add_location(li, file$8, 150, 14, 3363);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, li, anchor);
	      mount_component(fossilcheckbox, li, null);
	      append_dev(li, t);
	      current = true;

	      if (!mounted) {
	        dispose = listen_dev(li, "click", stop_propagation(
	        /*click_handler*/
	        ctx[12]), false, false, true);
	        mounted = true;
	      }
	    },
	    p: function update(ctx, dirty) {
	      var fossilcheckbox_changes = {};
	      if (dirty &
	      /*label, items*/
	      3) fossilcheckbox_changes.id = "" + (
	      /*label*/
	      ctx[1] + "-" +
	      /*i*/
	      ctx[27]);
	      if (dirty &
	      /*items*/
	      1) fossilcheckbox_changes.checked =
	      /*item*/
	      ctx[25].liveCount;
	      if (dirty &
	      /*items*/
	      1) fossilcheckbox_changes.added =
	      /*item*/
	      ctx[25].liveCount;
	      if (dirty &
	      /*items*/
	      1) fossilcheckbox_changes.fossilera =
	      /*item*/
	      ctx[25].title;

	      if (dirty &
	      /*$$scope, items*/
	      268435457) {
	        fossilcheckbox_changes.$$scope = {
	          dirty: dirty,
	          ctx: ctx
	        };
	      }

	      fossilcheckbox.$set(fossilcheckbox_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(fossilcheckbox.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(fossilcheckbox.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(li);
	      destroy_component(fossilcheckbox);
	      mounted = false;
	      dispose();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_2$1.name,
	    type: "if",
	    source: "(150:12) {#if (!(hideOneHitWonders && item.count === 1))}",
	    ctx: ctx
	  });
	  return block;
	} // (162:42) 


	function create_if_block_4$1(ctx) {
	  var span;
	  var t0;
	  var t1_value =
	  /*item*/
	  ctx[25].source + "";
	  var t1;
	  var t2;
	  var block = {
	    c: function create() {
	      span = element("span");
	      t0 = text("(");
	      t1 = text(t1_value);
	      t2 = text(")");
	      attr_dev(span, "class", "choice-entry-source svelte-cap7e8");
	      add_location(span, file$8, 162, 20, 3916);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, span, anchor);
	      append_dev(span, t0);
	      append_dev(span, t1);
	      append_dev(span, t2);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*items*/
	      1 && t1_value !== (t1_value =
	      /*item*/
	      ctx[25].source + "")) set_data_dev(t1, t1_value);
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(span);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_4$1.name,
	    type: "if",
	    source: "(162:42) ",
	    ctx: ctx
	  });
	  return block;
	} // (160:18) {#if (item.liveCount)}


	function create_if_block_3$1(ctx) {
	  var span;
	  var t0;
	  var t1_value =
	  /*item*/
	  ctx[25].liveCount + "";
	  var t1;
	  var t2;
	  var block = {
	    c: function create() {
	      span = element("span");
	      t0 = text("(");
	      t1 = text(t1_value);
	      t2 = text(")");
	      attr_dev(span, "class", "choice-entry-count svelte-cap7e8");
	      add_location(span, file$8, 160, 20, 3794);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, span, anchor);
	      append_dev(span, t0);
	      append_dev(span, t1);
	      append_dev(span, t2);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*items*/
	      1 && t1_value !== (t1_value =
	      /*item*/
	      ctx[25].liveCount + "")) set_data_dev(t1, t1_value);
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(span);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_3$1.name,
	    type: "if",
	    source: "(160:18) {#if (item.liveCount)}",
	    ctx: ctx
	  });
	  return block;
	} // (153:16) <FossilCheckbox id="{label}-{i}"                           checked={item.liveCount}                           added={item.liveCount}                           fossilera={item.title}                           on:click={handleFossilClick}>


	function create_default_slot$1(ctx) {
	  var span;
	  var t0_value =
	  /*item*/
	  ctx[25].title + "";
	  var t0;
	  var t1;
	  var if_block_anchor;

	  function select_block_type(ctx, dirty) {
	    if (
	    /*item*/
	    ctx[25].liveCount) return create_if_block_3$1;
	    if (
	    /*item*/
	    ctx[25].source) return create_if_block_4$1;
	  }

	  var current_block_type = select_block_type(ctx);
	  var if_block = current_block_type && current_block_type(ctx);
	  var block = {
	    c: function create() {
	      span = element("span");
	      t0 = text(t0_value);
	      t1 = space();
	      if (if_block) if_block.c();
	      if_block_anchor = empty();
	      attr_dev(span, "class", "choice-entry-name");
	      add_location(span, file$8, 157, 18, 3680);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, span, anchor);
	      append_dev(span, t0);
	      insert_dev(target, t1, anchor);
	      if (if_block) if_block.m(target, anchor);
	      insert_dev(target, if_block_anchor, anchor);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*items*/
	      1 && t0_value !== (t0_value =
	      /*item*/
	      ctx[25].title + "")) set_data_dev(t0, t0_value);

	      if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
	        if_block.p(ctx, dirty);
	      } else {
	        if (if_block) if_block.d(1);
	        if_block = current_block_type && current_block_type(ctx);

	        if (if_block) {
	          if_block.c();
	          if_block.m(if_block_anchor.parentNode, if_block_anchor);
	        }
	      }
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(span);
	      if (detaching) detach_dev(t1);

	      if (if_block) {
	        if_block.d(detaching);
	      }

	      if (detaching) detach_dev(if_block_anchor);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_default_slot$1.name,
	    type: "slot",
	    source: "(153:16) <FossilCheckbox id=\\\"{label}-{i}\\\"                           checked={item.liveCount}                           added={item.liveCount}                           fossilera={item.title}                           on:click={handleFossilClick}>",
	    ctx: ctx
	  });
	  return block;
	} // (149:10) {#each items.sort((a, b) => -sortConsistently(a, b, 'id', 'id')) as item, i (item.id)}


	function create_each_block$1(key_1, ctx) {
	  var first;
	  var if_block_anchor;
	  var current;
	  var if_block = !(
	  /*hideOneHitWonders*/
	  ctx[3] &&
	  /*item*/
	  ctx[25].count === 1) && create_if_block_2$1(ctx);
	  var block = {
	    key: key_1,
	    first: null,
	    c: function create() {
	      first = empty();
	      if (if_block) if_block.c();
	      if_block_anchor = empty();
	      this.first = first;
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, first, anchor);
	      if (if_block) if_block.m(target, anchor);
	      insert_dev(target, if_block_anchor, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      if (!(
	      /*hideOneHitWonders*/
	      ctx[3] &&
	      /*item*/
	      ctx[25].count === 1)) {
	        if (if_block) {
	          if_block.p(ctx, dirty);

	          if (dirty &
	          /*hideOneHitWonders, items*/
	          9) {
	            transition_in(if_block, 1);
	          }
	        } else {
	          if_block = create_if_block_2$1(ctx);
	          if_block.c();
	          transition_in(if_block, 1);
	          if_block.m(if_block_anchor.parentNode, if_block_anchor);
	        }
	      } else if (if_block) {
	        group_outros();
	        transition_out(if_block, 1, 1, function () {
	          if_block = null;
	        });
	        check_outros();
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(if_block);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(if_block);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(first);
	      if (if_block) if_block.d(detaching);
	      if (detaching) detach_dev(if_block_anchor);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_each_block$1.name,
	    type: "each",
	    source: "(149:10) {#each items.sort((a, b) => -sortConsistently(a, b, 'id', 'id')) as item, i (item.id)}",
	    ctx: ctx
	  });
	  return block;
	} // (170:8) {#if (hideOneHitWonders)}


	function create_if_block_1$1(ctx) {
	  var p;
	  var t0;
	  var t1;
	  var block = {
	    c: function create() {
	      p = element("p");
	      t0 = text(
	      /*label*/
	      ctx[1]);
	      t1 = text("s with only one result in the dataset are hidden.");
	      attr_dev(p, "class", "info svelte-cap7e8");
	      add_location(p, file$8, 170, 10, 4145);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, p, anchor);
	      append_dev(p, t0);
	      append_dev(p, t1);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*label*/
	      2) set_data_dev(t0,
	      /*label*/
	      ctx[1]);
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(p);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_1$1.name,
	    type: "if",
	    source: "(170:8) {#if (hideOneHitWonders)}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$8(ctx) {
	  var t0;
	  var div3;
	  var div0;
	  var t1;
	  var t2;
	  var div1;
	  var span0;
	  var t3;
	  var span1;
	  var t4_value = (
	  /*items*/
	  ctx[0].filter(func$1).length === 0 ? "none" :
	  /*items*/
	  ctx[0].every(
	  /*func_1*/
	  ctx[14]) ? "all" :
	  /*items*/
	  ctx[0].filter(func_2$1).map(
	  /*func_3*/
	  ctx[15]).join(", ")) + "";
	  var t4;
	  var t5;
	  var button;
	  var svg;
	  var path;
	  var t6;
	  var div2;
	  var current;
	  var mounted;
	  var dispose;
	  var if_block =
	  /*expanded*/
	  ctx[6] && create_if_block$4(ctx);
	  var block = {
	    c: function create() {
	      t0 = space();
	      div3 = element("div");
	      div0 = element("div");
	      t1 = text(
	      /*label*/
	      ctx[1]);
	      t2 = space();
	      div1 = element("div");
	      span0 = element("span");
	      t3 = space();
	      span1 = element("span");
	      t4 = text(t4_value);
	      t5 = space();
	      button = element("button");
	      svg = svg_element("svg");
	      path = svg_element("path");
	      t6 = space();
	      div2 = element("div");
	      if (if_block) if_block.c();
	      attr_dev(div0, "class", "label svelte-cap7e8");
	      add_location(div0, file$8, 122, 2, 2160);
	      attr_dev(span0, "class", "selected-items-icon");
	      add_location(span0, file$8, 126, 4, 2283);
	      attr_dev(span1, "class", "selected-items-text svelte-cap7e8");
	      add_location(span1, file$8, 127, 4, 2329);
	      attr_dev(path, "d", "M0 0L15 0L7.5 10Z");
	      add_location(path, file$8, 136, 8, 2698);
	      attr_dev(svg, "width", "15");
	      attr_dev(svg, "height", "10");
	      attr_dev(svg, "class", "svelte-cap7e8");
	      toggle_class(svg, "expanded",
	      /*expanded*/
	      ctx[6]);
	      add_location(svg, file$8, 135, 6, 2646);
	      attr_dev(button, "class", "selected-items-arrow svelte-cap7e8");
	      add_location(button, file$8, 134, 4, 2602);
	      attr_dev(div1, "class", "selected-items svelte-cap7e8");
	      add_location(div1, file$8, 125, 2, 2203);
	      attr_dev(div2, "class", "choice-wrapper svelte-cap7e8");
	      add_location(div2, file$8, 140, 2, 2772);
	      attr_dev(div3, "class", "dropdown svelte-cap7e8");
	      add_location(div3, file$8, 121, 0, 2118);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, t0, anchor);
	      insert_dev(target, div3, anchor);
	      append_dev(div3, div0);
	      append_dev(div0, t1);
	      append_dev(div3, t2);
	      append_dev(div3, div1);
	      append_dev(div1, span0);
	      append_dev(div1, t3);
	      append_dev(div1, span1);
	      append_dev(span1, t4);
	      append_dev(div1, t5);
	      append_dev(div1, button);
	      append_dev(button, svg);
	      append_dev(svg, path);
	      append_dev(div3, t6);
	      append_dev(div3, div2);
	      if (if_block) if_block.m(div2, null);
	      /*div3_binding*/

	      ctx[17](div3);
	      current = true;

	      if (!mounted) {
	        dispose = [listen_dev(document.body, "click",
	        /*click_handler_1*/
	        ctx[13], false, false, false), listen_dev(div1, "click", stop_propagation(
	        /*handleDropdownClick*/
	        ctx[10]), false, false, true)];
	        mounted = true;
	      }
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (!current || dirty &
	      /*label*/
	      2) set_data_dev(t1,
	      /*label*/
	      ctx[1]);
	      if ((!current || dirty &
	      /*items, nameField*/
	      5) && t4_value !== (t4_value = (
	      /*items*/
	      ctx[0].filter(func$1).length === 0 ? "none" :
	      /*items*/
	      ctx[0].every(
	      /*func_1*/
	      ctx[14]) ? "all" :
	      /*items*/
	      ctx[0].filter(func_2$1).map(
	      /*func_3*/
	      ctx[15]).join(", ")) + "")) set_data_dev(t4, t4_value);

	      if (dirty &
	      /*expanded*/
	      64) {
	        toggle_class(svg, "expanded",
	        /*expanded*/
	        ctx[6]);
	      }

	      if (
	      /*expanded*/
	      ctx[6]) {
	        if (if_block) {
	          if_block.p(ctx, dirty);

	          if (dirty &
	          /*expanded*/
	          64) {
	            transition_in(if_block, 1);
	          }
	        } else {
	          if_block = create_if_block$4(ctx);
	          if_block.c();
	          transition_in(if_block, 1);
	          if_block.m(div2, null);
	        }
	      } else if (if_block) {
	        group_outros();
	        transition_out(if_block, 1, 1, function () {
	          if_block = null;
	        });
	        check_outros();
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(if_block);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(if_block);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(t0);
	      if (detaching) detach_dev(div3);
	      if (if_block) if_block.d();
	      /*div3_binding*/

	      ctx[17](null);
	      mounted = false;
	      run_all(dispose);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$8.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	var func$1 = function func(d) {
	  return d.added;
	};

	var func_2$1 = function func_2(d) {
	  return d.added;
	};

	function instance$8($$self, $$props, $$invalidate) {
	  var $fossilDatapoints;
	  validate_store(fossilDatapoints, "fossilDatapoints");
	  component_subscribe($$self, fossilDatapoints, function ($$value) {
	    return $$invalidate(18, $fossilDatapoints = $$value);
	  });
	  var _$$props$items = $$props.items,
	      items = _$$props$items === void 0 ? [] : _$$props$items;
	  var _$$props$label = $$props.label,
	      label = _$$props$label === void 0 ? "" : _$$props$label;
	  var _$$props$nameField = $$props.nameField,
	      nameField = _$$props$nameField === void 0 ? "id" : _$$props$nameField;
	  var _$$props$hideOneHitWo = $$props.hideOneHitWonders,
	      hideOneHitWonders = _$$props$hideOneHitWo === void 0 ? false : _$$props$hideOneHitWo;
	  var _$$props$superior = $$props.superior,
	      superior = _$$props$superior === void 0 ? false : _$$props$superior;
	  var dispatch = createEventDispatcher();
	  var elem;
	  var expanded = false;

	  function handleBodyClick() {
	    $$invalidate(6, expanded = false);
	  }

	  function toggleExpanded() {
	    $$invalidate(6, expanded = !expanded);
	  }

	  function selectAll() {
	    dispatch("itemsAdded", items.map(function (d) {
	      return d.id;
	    }));
	  }

	  function unselectAll() {
	    dispatch("itemsRemoved", items.map(function (d) {
	      return d.id;
	    }));
	  }

	  function handleDropdownClick() {
	    toggleExpanded();
	  }

	  function handleChoiceClick(id) {
	    if (!items.filter(function (d) {
	      return d.selected;
	    }).map(function (d) {
	      return d.id;
	    }).includes(id)) {
	      dispatch("itemsAdded", id);
	    } else {
	      dispatch("itemsRemoved", id);
	    }
	  }

	  function handleFossilClick(event, fossilEra) {
	    var target = event.target;
	    console.log("target: ", target);
	    fossilEra = target.getAttribute("fossilera");
	    var state = target.getAttribute("added");

	    if (state === "false" || state === "0") {
	      addFossils(fossilEra);
	      target.classList.add("checked");
	    } else {
	      removeFossils(fossilEra);
	      target.classList.remove("checked");
	    }

	    console.log("items: ", items);
	  }

	  function removeFossils(fossilEra) {
	    set_store_value(fossilDatapoints, $fossilDatapoints[fossilEra] = [], $fossilDatapoints);
	    reDraw();
	    return $fossilDatapoints;
	  }

	  function addFossils(fossilEra) {
	    var originalEra = "original" + fossilEra;
	    set_store_value(fossilDatapoints, $fossilDatapoints[fossilEra] = $fossilDatapoints[originalEra], $fossilDatapoints);
	    reDraw();
	    return $fossilDatapoints;
	  }

	  function reDraw() {
	    var locations = select("#points");
	    var elements = locations.selectAll("points.arc");
	    elements.each(function (d, i) {
	      var node = select(this);
	      this.remove();
	    });
	  }

	  var writable_props = ["items", "label", "nameField", "hideOneHitWonders", "superior"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$1.warn("<Fossildropdown> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Fossildropdown", $$slots, []);

	  function click_handler(event) {
	    bubble($$self, event);
	  }

	  var click_handler_1 = function click_handler_1(e) {
	    return handleBodyClick();
	  };

	  var func_1 = function func_1(d) {
	    return d.added && items.length > 1;
	  };

	  var func_3 = function func_3(d) {
	    return d[nameField];
	  };

	  var func_4 = function func_4(a, b) {
	    return -sortConsistently(a, b, "id", "id");
	  };

	  function div3_binding($$value) {
	    binding_callbacks[$$value ? "unshift" : "push"](function () {
	      elem = $$value;
	      $$invalidate(5, elem);
	    });
	  }

	  $$self.$$set = function ($$props) {
	    if ("items" in $$props) $$invalidate(0, items = $$props.items);
	    if ("label" in $$props) $$invalidate(1, label = $$props.label);
	    if ("nameField" in $$props) $$invalidate(2, nameField = $$props.nameField);
	    if ("hideOneHitWonders" in $$props) $$invalidate(3, hideOneHitWonders = $$props.hideOneHitWonders);
	    if ("superior" in $$props) $$invalidate(4, superior = $$props.superior);
	  };

	  $$self.$capture_state = function () {
	    return {
	      createEventDispatcher: createEventDispatcher,
	      onMount: onMount,
	      slide: slide,
	      sortConsistently: sortConsistently,
	      select: select,
	      fossilDatapoints: fossilDatapoints,
	      FossilCheckbox: FossilCheckbox,
	      items: items,
	      label: label,
	      nameField: nameField,
	      hideOneHitWonders: hideOneHitWonders,
	      superior: superior,
	      dispatch: dispatch,
	      elem: elem,
	      expanded: expanded,
	      handleBodyClick: handleBodyClick,
	      toggleExpanded: toggleExpanded,
	      selectAll: selectAll,
	      unselectAll: unselectAll,
	      handleDropdownClick: handleDropdownClick,
	      handleChoiceClick: handleChoiceClick,
	      handleFossilClick: handleFossilClick,
	      removeFossils: removeFossils,
	      addFossils: addFossils,
	      reDraw: reDraw,
	      $fossilDatapoints: $fossilDatapoints
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("items" in $$props) $$invalidate(0, items = $$props.items);
	    if ("label" in $$props) $$invalidate(1, label = $$props.label);
	    if ("nameField" in $$props) $$invalidate(2, nameField = $$props.nameField);
	    if ("hideOneHitWonders" in $$props) $$invalidate(3, hideOneHitWonders = $$props.hideOneHitWonders);
	    if ("superior" in $$props) $$invalidate(4, superior = $$props.superior);
	    if ("elem" in $$props) $$invalidate(5, elem = $$props.elem);
	    if ("expanded" in $$props) $$invalidate(6, expanded = $$props.expanded);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [items, label, nameField, hideOneHitWonders, superior, elem, expanded, handleBodyClick, selectAll, unselectAll, handleDropdownClick, handleFossilClick, click_handler, click_handler_1, func_1, func_3, func_4, div3_binding];
	}

	var Fossildropdown = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(Fossildropdown, _SvelteComponentDev);

	  var _super = _createSuper(Fossildropdown);

	  function Fossildropdown(options) {
	    var _this;

	    _classCallCheck(this, Fossildropdown);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$8, create_fragment$8, safe_not_equal, {
	      items: 0,
	      label: 1,
	      nameField: 2,
	      hideOneHitWonders: 3,
	      superior: 4
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "Fossildropdown",
	      options: options,
	      id: create_fragment$8.name
	    });
	    return _this;
	  }

	  _createClass(Fossildropdown, [{
	    key: "items",
	    get: function get() {
	      throw new Error("<Fossildropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Fossildropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "label",
	    get: function get() {
	      throw new Error("<Fossildropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Fossildropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "nameField",
	    get: function get() {
	      throw new Error("<Fossildropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Fossildropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "hideOneHitWonders",
	    get: function get() {
	      throw new Error("<Fossildropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Fossildropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "superior",
	    get: function get() {
	      throw new Error("<Fossildropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Fossildropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return Fossildropdown;
	}(SvelteComponentDev);

	function slidable(node) {
	  var x;
	  var left;

	  function handleMousedown(event) {
	    x = event.clientX;
	    node.dispatchEvent(new CustomEvent('slidestart', {
	      detail: {
	        x: x
	      }
	    }));
	    window.addEventListener('mousemove', handleMousemove);
	    window.addEventListener('mouseup', handleMouseup);
	  }

	  function handleMousemove(event) {
	    var dx = event.clientX - x;
	    x = event.clientX;
	    node.dispatchEvent(new CustomEvent('slide', {
	      detail: {
	        x: x,
	        dx: dx
	      }
	    }));
	  }

	  function handleMouseup(event) {
	    x = event.clientX;
	    left = node.offsetLeft;
	    node.dispatchEvent(new CustomEvent('slideend', {
	      detail: {
	        x: x,
	        left: left
	      }
	    }));
	    window.removeEventListener('mousemove', handleMousemove);
	    window.removeEventListener('mouseup', handleMouseup);
	  }

	  node.addEventListener('mousedown', handleMousedown);
	  return {
	    destroy: function destroy() {
	      node.removeEventListener('mousedown', handleMousedown);
	    }
	  };
	}

	var file$9 = "src/components/Slider.svelte"; // (64:2) {#if (showLabel)}

	function create_if_block$5(ctx) {
	  var div;
	  var t;
	  var block = {
	    c: function create() {
	      div = element("div");
	      t = text(
	      /*label*/
	      ctx[0]);
	      attr_dev(div, "class", "label svelte-imorns");
	      add_location(div, file$9, 64, 4, 1845);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div, anchor);
	      append_dev(div, t);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*label*/
	      1) set_data_dev(t,
	      /*label*/
	      ctx[0]);
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$5.name,
	    type: "if",
	    source: "(64:2) {#if (showLabel)}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$9(ctx) {
	  var div4;
	  var t0;
	  var div3;
	  var div0;
	  var t1;
	  var div1;
	  var span0;
	  var t2_value = (
	  /*showHandleLabels*/
	  ctx[3] ? Math.round(
	  /*scale*/
	  ctx[8].invert(
	  /*pos*/
	  ctx[6].left), 0) : "") + "";
	  var t2;
	  var slidable_action;
	  var t3;
	  var div2;
	  var span1;
	  var t4_value = (
	  /*showHandleLabels*/
	  ctx[3] ? Math.round(
	  /*scale*/
	  ctx[8].invert(
	  /*pos*/
	  ctx[6].right), 0) : "") + "";
	  var t4;
	  var slidable_action_1;
	  var div4_resize_listener;
	  var mounted;
	  var dispose;
	  var if_block =
	  /*showLabel*/
	  ctx[1] && create_if_block$5(ctx);
	  var block = {
	    c: function create() {
	      div4 = element("div");
	      if (if_block) if_block.c();
	      t0 = space();
	      div3 = element("div");
	      div0 = element("div");
	      t1 = space();
	      div1 = element("div");
	      span0 = element("span");
	      t2 = text(t2_value);
	      t3 = space();
	      div2 = element("div");
	      span1 = element("span");
	      t4 = text(t4_value);
	      attr_dev(div0, "class", "slider-selected-range svelte-imorns");
	      set_style(div0, "width",
	      /*sliderWidth*/
	      ctx[7] - 2 * handleWidth + "px");
	      set_style(div0, "margin-left", 1 * handleWidth + "px");
	      set_style(div0, "opacity",
	      /*barOpacity*/
	      ctx[4]);
	      set_style(div0, "background",
	      /*background*/
	      ctx[9]);
	      add_location(div0, file$9, 69, 4, 1956);
	      attr_dev(span0, "class", "disable-select svelte-imorns");
	      add_location(span0, file$9, 80, 6, 2490);
	      attr_dev(div1, "class", "slider-handle svelte-imorns");
	      set_style(div1, "left", (Math.abs(
	      /*value*/
	      ctx[2][0] -
	      /*value*/
	      ctx[2][1]) < 0.1 ?
	      /*pos*/
	      ctx[6].left - 5 :
	      /*pos*/
	      ctx[6].left) + "px");
	      toggle_class(div1, "no-label", !
	      /*showHandleLabels*/
	      ctx[3]);
	      add_location(div1, file$9, 74, 4, 2192);
	      attr_dev(span1, "class", "disable-select svelte-imorns");
	      add_location(span1, file$9, 88, 6, 2907);
	      attr_dev(div2, "class", "slider-handle svelte-imorns");
	      set_style(div2, "left", (Math.abs(
	      /*value*/
	      ctx[2][0] -
	      /*value*/
	      ctx[2][1]) < 0.1 ?
	      /*pos*/
	      ctx[6].right + 5 :
	      /*pos*/
	      ctx[6].right) + "px");
	      toggle_class(div2, "no-label", !
	      /*showHandleLabels*/
	      ctx[3]);
	      add_location(div2, file$9, 82, 4, 2605);
	      attr_dev(div3, "class", "slider-body svelte-imorns");
	      toggle_class(div3, "border",
	      /*showBorder*/
	      ctx[5]);
	      add_location(div3, file$9, 68, 2, 1900);
	      attr_dev(div4, "class", "slider svelte-imorns");
	      set_style(div4, "--handle-width", handleWidth + "px");
	      add_render_callback(function () {
	        return (
	          /*div4_elementresize_handler*/
	          ctx[22].call(div4)
	        );
	      });
	      add_location(div4, file$9, 60, 0, 1718);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div4, anchor);
	      if (if_block) if_block.m(div4, null);
	      append_dev(div4, t0);
	      append_dev(div4, div3);
	      append_dev(div3, div0);
	      append_dev(div3, t1);
	      append_dev(div3, div1);
	      append_dev(div1, span0);
	      append_dev(span0, t2);
	      append_dev(div3, t3);
	      append_dev(div3, div2);
	      append_dev(div2, span1);
	      append_dev(span1, t4);
	      div4_resize_listener = add_resize_listener(div4,
	      /*div4_elementresize_handler*/
	      ctx[22].bind(div4));

	      if (!mounted) {
	        dispose = [action_destroyer(slidable_action = slidable.call(null, div1)), listen_dev(div1, "slide",
	        /*slide_handler*/
	        ctx[18], false, false, false), listen_dev(div1, "slideend",
	        /*slideend_handler*/
	        ctx[19], false, false, false), action_destroyer(slidable_action_1 = slidable.call(null, div2)), listen_dev(div2, "slide",
	        /*slide_handler_1*/
	        ctx[20], false, false, false), listen_dev(div2, "slideend",
	        /*slideend_handler_1*/
	        ctx[21], false, false, false)];
	        mounted = true;
	      }
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (
	      /*showLabel*/
	      ctx[1]) {
	        if (if_block) {
	          if_block.p(ctx, dirty);
	        } else {
	          if_block = create_if_block$5(ctx);
	          if_block.c();
	          if_block.m(div4, t0);
	        }
	      } else if (if_block) {
	        if_block.d(1);
	        if_block = null;
	      }

	      if (dirty &
	      /*sliderWidth*/
	      128) {
	        set_style(div0, "width",
	        /*sliderWidth*/
	        ctx[7] - 2 * handleWidth + "px");
	      }

	      if (dirty &
	      /*barOpacity*/
	      16) {
	        set_style(div0, "opacity",
	        /*barOpacity*/
	        ctx[4]);
	      }

	      if (dirty &
	      /*background*/
	      512) {
	        set_style(div0, "background",
	        /*background*/
	        ctx[9]);
	      }

	      if (dirty &
	      /*showHandleLabels, scale, pos*/
	      328 && t2_value !== (t2_value = (
	      /*showHandleLabels*/
	      ctx[3] ? Math.round(
	      /*scale*/
	      ctx[8].invert(
	      /*pos*/
	      ctx[6].left), 0) : "") + "")) set_data_dev(t2, t2_value);

	      if (dirty &
	      /*value, pos*/
	      68) {
	        set_style(div1, "left", (Math.abs(
	        /*value*/
	        ctx[2][0] -
	        /*value*/
	        ctx[2][1]) < 0.1 ?
	        /*pos*/
	        ctx[6].left - 5 :
	        /*pos*/
	        ctx[6].left) + "px");
	      }

	      if (dirty &
	      /*showHandleLabels*/
	      8) {
	        toggle_class(div1, "no-label", !
	        /*showHandleLabels*/
	        ctx[3]);
	      }

	      if (dirty &
	      /*showHandleLabels, scale, pos*/
	      328 && t4_value !== (t4_value = (
	      /*showHandleLabels*/
	      ctx[3] ? Math.round(
	      /*scale*/
	      ctx[8].invert(
	      /*pos*/
	      ctx[6].right), 0) : "") + "")) set_data_dev(t4, t4_value);

	      if (dirty &
	      /*value, pos*/
	      68) {
	        set_style(div2, "left", (Math.abs(
	        /*value*/
	        ctx[2][0] -
	        /*value*/
	        ctx[2][1]) < 0.1 ?
	        /*pos*/
	        ctx[6].right + 5 :
	        /*pos*/
	        ctx[6].right) + "px");
	      }

	      if (dirty &
	      /*showHandleLabels*/
	      8) {
	        toggle_class(div2, "no-label", !
	        /*showHandleLabels*/
	        ctx[3]);
	      }

	      if (dirty &
	      /*showBorder*/
	      32) {
	        toggle_class(div3, "border",
	        /*showBorder*/
	        ctx[5]);
	      }
	    },
	    i: noop,
	    o: noop,
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div4);
	      if (if_block) if_block.d();
	      div4_resize_listener();
	      mounted = false;
	      run_all(dispose);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$9.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	var handleWidth = 17;

	function instance$9($$self, $$props, $$invalidate) {
	  var _$$props$lockInMode = $$props.lockInMode,
	      lockInMode = _$$props$lockInMode === void 0 ? true : _$$props$lockInMode;
	  var _$$props$label = $$props.label,
	      label = _$$props$label === void 0 ? "" : _$$props$label;
	  var _$$props$showLabel = $$props.showLabel,
	      showLabel = _$$props$showLabel === void 0 ? true : _$$props$showLabel;
	  var _$$props$min = $$props.min,
	      min = _$$props$min === void 0 ? 0 : _$$props$min;
	  var _$$props$max = $$props.max,
	      max = _$$props$max === void 0 ? 10 : _$$props$max;
	  var _$$props$value = $$props.value,
	      value = _$$props$value === void 0 ? [0, 10] : _$$props$value;
	  var _$$props$showHandleLa = $$props.showHandleLabels,
	      showHandleLabels = _$$props$showHandleLa === void 0 ? true : _$$props$showHandleLa;
	  var _$$props$startColor = $$props.startColor,
	      startColor = _$$props$startColor === void 0 ? "white" : _$$props$startColor;
	  var _$$props$middleColor = $$props.middleColor,
	      middleColor = _$$props$middleColor === void 0 ? null : _$$props$middleColor;
	  var _$$props$stopColor = $$props.stopColor,
	      stopColor = _$$props$stopColor === void 0 ? "red" : _$$props$stopColor;
	  var _$$props$barOpacity = $$props.barOpacity,
	      barOpacity = _$$props$barOpacity === void 0 ? 1 : _$$props$barOpacity;
	  var _$$props$showBorder = $$props.showBorder,
	      showBorder = _$$props$showBorder === void 0 ? true : _$$props$showBorder;
	  var dispatch = createEventDispatcher();
	  var pos = {
	    left: 0,
	    right: 0
	  };
	  var sliderWidth = 0;

	  function handleSlide(e, side) {
	    var newPos = pos[side] + e.detail.dx;
	    if (newPos < 0 || newPos > sliderWidth) return;
	    if (side === "left" && newPos > pos.right) return;
	    if (side === "left" && newPos < scale.range()[0]) return;
	    if (side === "right" && newPos < pos.left) return;
	    if (side === "right" && newPos > scale.range()[1]) return;
	    $$invalidate(6, pos[side] = newPos, pos);
	  }

	  function handleSlideEnd(e, side) {
	    if (lockInMode) {
	      dispatch("changed", [Math.round(scale.invert(pos.left), 0), Math.round(scale.invert(pos.right), 0)]);
	    } else {
	      dispatch("changed", [scale.invert(pos.left), scale.invert(pos.right)]);
	    }
	  }

	  var writable_props = ["lockInMode", "label", "showLabel", "min", "max", "value", "showHandleLabels", "startColor", "middleColor", "stopColor", "barOpacity", "showBorder"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Slider> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Slider", $$slots, []);

	  var slide_handler = function slide_handler(e) {
	    return handleSlide(e, "left");
	  };

	  var slideend_handler = function slideend_handler(e) {
	    return handleSlideEnd();
	  };

	  var slide_handler_1 = function slide_handler_1(e) {
	    return handleSlide(e, "right");
	  };

	  var slideend_handler_1 = function slideend_handler_1(e) {
	    return handleSlideEnd();
	  };

	  function div4_elementresize_handler() {
	    sliderWidth = this.clientWidth;
	    $$invalidate(7, sliderWidth);
	  }

	  $$self.$$set = function ($$props) {
	    if ("lockInMode" in $$props) $$invalidate(12, lockInMode = $$props.lockInMode);
	    if ("label" in $$props) $$invalidate(0, label = $$props.label);
	    if ("showLabel" in $$props) $$invalidate(1, showLabel = $$props.showLabel);
	    if ("min" in $$props) $$invalidate(13, min = $$props.min);
	    if ("max" in $$props) $$invalidate(14, max = $$props.max);
	    if ("value" in $$props) $$invalidate(2, value = $$props.value);
	    if ("showHandleLabels" in $$props) $$invalidate(3, showHandleLabels = $$props.showHandleLabels);
	    if ("startColor" in $$props) $$invalidate(15, startColor = $$props.startColor);
	    if ("middleColor" in $$props) $$invalidate(16, middleColor = $$props.middleColor);
	    if ("stopColor" in $$props) $$invalidate(17, stopColor = $$props.stopColor);
	    if ("barOpacity" in $$props) $$invalidate(4, barOpacity = $$props.barOpacity);
	    if ("showBorder" in $$props) $$invalidate(5, showBorder = $$props.showBorder);
	  };

	  $$self.$capture_state = function () {
	    return {
	      createEventDispatcher: createEventDispatcher,
	      onMount: onMount,
	      scaleLinear: linear$1,
	      slidable: slidable,
	      lockInMode: lockInMode,
	      label: label,
	      showLabel: showLabel,
	      min: min,
	      max: max,
	      value: value,
	      showHandleLabels: showHandleLabels,
	      startColor: startColor,
	      middleColor: middleColor,
	      stopColor: stopColor,
	      barOpacity: barOpacity,
	      showBorder: showBorder,
	      dispatch: dispatch,
	      handleWidth: handleWidth,
	      pos: pos,
	      sliderWidth: sliderWidth,
	      handleSlide: handleSlide,
	      handleSlideEnd: handleSlideEnd,
	      scale: scale,
	      background: background
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("lockInMode" in $$props) $$invalidate(12, lockInMode = $$props.lockInMode);
	    if ("label" in $$props) $$invalidate(0, label = $$props.label);
	    if ("showLabel" in $$props) $$invalidate(1, showLabel = $$props.showLabel);
	    if ("min" in $$props) $$invalidate(13, min = $$props.min);
	    if ("max" in $$props) $$invalidate(14, max = $$props.max);
	    if ("value" in $$props) $$invalidate(2, value = $$props.value);
	    if ("showHandleLabels" in $$props) $$invalidate(3, showHandleLabels = $$props.showHandleLabels);
	    if ("startColor" in $$props) $$invalidate(15, startColor = $$props.startColor);
	    if ("middleColor" in $$props) $$invalidate(16, middleColor = $$props.middleColor);
	    if ("stopColor" in $$props) $$invalidate(17, stopColor = $$props.stopColor);
	    if ("barOpacity" in $$props) $$invalidate(4, barOpacity = $$props.barOpacity);
	    if ("showBorder" in $$props) $$invalidate(5, showBorder = $$props.showBorder);
	    if ("sliderWidth" in $$props) $$invalidate(7, sliderWidth = $$props.sliderWidth);
	    if ("scale" in $$props) $$invalidate(8, scale = $$props.scale);
	    if ("background" in $$props) $$invalidate(9, background = $$props.background);
	  };

	  var scale;
	  var background;

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  $$self.$$.update = function () {
	    if ($$self.$$.dirty &
	    /*min, max, sliderWidth*/
	    24704) {
	       $$invalidate(8, scale = linear$1().domain([min, max]).range([handleWidth / 2, sliderWidth - 1.7 * handleWidth]));
	    }

	    if ($$self.$$.dirty &
	    /*scale, value*/
	    260) {
	       $$invalidate(6, pos.left = scale(value[0]) || 0, pos);
	    }

	    if ($$self.$$.dirty &
	    /*scale, value*/
	    260) {
	       $$invalidate(6, pos.right = scale(value[1]) || 0, pos);
	    }

	    if ($$self.$$.dirty &
	    /*startColor, middleColor, stopColor*/
	    229376) {
	       $$invalidate(9, background = "linear-gradient(90deg, ".concat(startColor, ", ").concat(middleColor ? middleColor + ", " : "").concat(stopColor, ")"));
	    }
	  };

	  return [label, showLabel, value, showHandleLabels, barOpacity, showBorder, pos, sliderWidth, scale, background, handleSlide, handleSlideEnd, lockInMode, min, max, startColor, middleColor, stopColor, slide_handler, slideend_handler, slide_handler_1, slideend_handler_1, div4_elementresize_handler];
	}

	var Slider = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(Slider, _SvelteComponentDev);

	  var _super = _createSuper(Slider);

	  function Slider(options) {
	    var _this;

	    _classCallCheck(this, Slider);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$9, create_fragment$9, safe_not_equal, {
	      lockInMode: 12,
	      label: 0,
	      showLabel: 1,
	      min: 13,
	      max: 14,
	      value: 2,
	      showHandleLabels: 3,
	      startColor: 15,
	      middleColor: 16,
	      stopColor: 17,
	      barOpacity: 4,
	      showBorder: 5
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "Slider",
	      options: options,
	      id: create_fragment$9.name
	    });
	    return _this;
	  }

	  _createClass(Slider, [{
	    key: "lockInMode",
	    get: function get() {
	      throw new Error("<Slider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "label",
	    get: function get() {
	      throw new Error("<Slider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "showLabel",
	    get: function get() {
	      throw new Error("<Slider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "min",
	    get: function get() {
	      throw new Error("<Slider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "max",
	    get: function get() {
	      throw new Error("<Slider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "value",
	    get: function get() {
	      throw new Error("<Slider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "showHandleLabels",
	    get: function get() {
	      throw new Error("<Slider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "startColor",
	    get: function get() {
	      throw new Error("<Slider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "middleColor",
	    get: function get() {
	      throw new Error("<Slider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "stopColor",
	    get: function get() {
	      throw new Error("<Slider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "barOpacity",
	    get: function get() {
	      throw new Error("<Slider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "showBorder",
	    get: function get() {
	      throw new Error("<Slider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return Slider;
	}(SvelteComponentDev);

	var file$a = "src/components/SearchText.svelte"; // (40:4) {#if (searchString !== '')}

	function create_if_block$6(ctx) {
	  var span2;
	  var span0;
	  var t1;
	  var span1;
	  var mounted;
	  var dispose;
	  var block = {
	    c: function create() {
	      span2 = element("span");
	      span0 = element("span");
	      span0.textContent = "x";
	      t1 = space();
	      span1 = element("span");
	      span1.textContent = "Go";
	      attr_dev(span0, "class", "reset svelte-c5qj0g");
	      toggle_class(span0, "active",
	      /*searchString*/
	      ctx[0]);
	      add_location(span0, file$a, 41, 8, 876);
	      attr_dev(span1, "class", "go svelte-c5qj0g");
	      toggle_class(span1, "active",
	      /*searchString*/
	      ctx[0]);
	      add_location(span1, file$a, 46, 8, 1028);
	      attr_dev(span2, "class", "button-fields svelte-c5qj0g");
	      add_location(span2, file$a, 40, 6, 839);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, span2, anchor);
	      append_dev(span2, span0);
	      append_dev(span2, t1);
	      append_dev(span2, span1);

	      if (!mounted) {
	        dispose = [listen_dev(span0, "click",
	        /*click_handler_1*/
	        ctx[8], false, false, false), listen_dev(span1, "click",
	        /*click_handler_2*/
	        ctx[9], false, false, false)];
	        mounted = true;
	      }
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*searchString*/
	      1) {
	        toggle_class(span0, "active",
	        /*searchString*/
	        ctx[0]);
	      }

	      if (dirty &
	      /*searchString*/
	      1) {
	        toggle_class(span1, "active",
	        /*searchString*/
	        ctx[0]);
	      }
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(span2);
	      mounted = false;
	      run_all(dispose);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$6.name,
	    type: "if",
	    source: "(40:4) {#if (searchString !== '')}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$a(ctx) {
	  var div2;
	  var div0;
	  var p0;
	  var t0;
	  var t1;
	  var p1;
	  var t3;
	  var span;
	  var t5;
	  var div1;
	  var input;
	  var t6;
	  var mounted;
	  var dispose;
	  var if_block =
	  /*searchString*/
	  ctx[0] !== "" && create_if_block$6(ctx);
	  var block = {
	    c: function create() {
	      div2 = element("div");
	      div0 = element("div");
	      p0 = element("p");
	      t0 = text(
	      /*label*/
	      ctx[1]);
	      t1 = space();
	      p1 = element("p");
	      p1.textContent = "|";
	      t3 = space();
	      span = element("span");
	      span.textContent = "Reset";
	      t5 = space();
	      div1 = element("div");
	      input = element("input");
	      t6 = space();
	      if (if_block) if_block.c();
	      attr_dev(p0, "class", "svelte-c5qj0g");
	      add_location(p0, file$a, 29, 4, 501);
	      attr_dev(p1, "class", "svelte-c5qj0g");
	      add_location(p1, file$a, 30, 4, 520);
	      attr_dev(span, "class", "svelte-c5qj0g");
	      add_location(span, file$a, 31, 4, 533);
	      attr_dev(div0, "class", "label svelte-c5qj0g");
	      add_location(div0, file$a, 28, 2, 477);
	      attr_dev(input, "id", "table-search-field");
	      attr_dev(input, "type", "text");
	      attr_dev(input, "placeholder", "Type and press enter");
	      attr_dev(input, "class", "svelte-c5qj0g");
	      add_location(input, file$a, 34, 4, 613);
	      attr_dev(div1, "class", "search svelte-c5qj0g");
	      add_location(div1, file$a, 33, 2, 588);
	      attr_dev(div2, "class", "search-text svelte-c5qj0g");
	      add_location(div2, file$a, 27, 0, 449);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div2, anchor);
	      append_dev(div2, div0);
	      append_dev(div0, p0);
	      append_dev(p0, t0);
	      append_dev(div0, t1);
	      append_dev(div0, p1);
	      append_dev(div0, t3);
	      append_dev(div0, span);
	      append_dev(div2, t5);
	      append_dev(div2, div1);
	      append_dev(div1, input);
	      set_input_value(input,
	      /*searchString*/
	      ctx[0]);
	      append_dev(div1, t6);
	      if (if_block) if_block.m(div1, null);

	      if (!mounted) {
	        dispose = [listen_dev(span, "click",
	        /*click_handler*/
	        ctx[5], false, false, false), listen_dev(input, "input",
	        /*input_input_handler*/
	        ctx[6]), listen_dev(input, "keyup",
	        /*keyup_handler*/
	        ctx[7], false, false, false)];
	        mounted = true;
	      }
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (dirty &
	      /*label*/
	      2) set_data_dev(t0,
	      /*label*/
	      ctx[1]);

	      if (dirty &
	      /*searchString*/
	      1 && input.value !==
	      /*searchString*/
	      ctx[0]) {
	        set_input_value(input,
	        /*searchString*/
	        ctx[0]);
	      }

	      if (
	      /*searchString*/
	      ctx[0] !== "") {
	        if (if_block) {
	          if_block.p(ctx, dirty);
	        } else {
	          if_block = create_if_block$6(ctx);
	          if_block.c();
	          if_block.m(div1, null);
	        }
	      } else if (if_block) {
	        if_block.d(1);
	        if_block = null;
	      }
	    },
	    i: noop,
	    o: noop,
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div2);
	      if (if_block) if_block.d();
	      mounted = false;
	      run_all(dispose);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$a.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$a($$self, $$props, $$invalidate) {
	  var _$$props$searchString = $$props.searchString,
	      searchString = _$$props$searchString === void 0 ? "" : _$$props$searchString;
	  var _$$props$label = $$props.label,
	      label = _$$props$label === void 0 ? "" : _$$props$label;
	  var dispatch = createEventDispatcher();

	  function reset() {
	    $$invalidate(0, searchString = "");
	    search();
	  }

	  function handleKeyUp(e) {
	    if (e && e.keyCode === 13) search();
	  }

	  function handleGoClick() {
	    search();
	  }

	  function search() {
	    dispatch("change", searchString);
	  }

	  var writable_props = ["searchString", "label"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<SearchText> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("SearchText", $$slots, []);

	  var click_handler = function click_handler() {
	    return reset();
	  };

	  function input_input_handler() {
	    searchString = this.value;
	    $$invalidate(0, searchString);
	  }

	  var keyup_handler = function keyup_handler(e) {
	    return handleKeyUp(e);
	  };

	  var click_handler_1 = function click_handler_1() {
	    return $$invalidate(0, searchString = "");
	  };

	  var click_handler_2 = function click_handler_2() {
	    return handleGoClick();
	  };

	  $$self.$$set = function ($$props) {
	    if ("searchString" in $$props) $$invalidate(0, searchString = $$props.searchString);
	    if ("label" in $$props) $$invalidate(1, label = $$props.label);
	  };

	  $$self.$capture_state = function () {
	    return {
	      createEventDispatcher: createEventDispatcher,
	      searchString: searchString,
	      label: label,
	      dispatch: dispatch,
	      reset: reset,
	      handleKeyUp: handleKeyUp,
	      handleGoClick: handleGoClick,
	      search: search
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("searchString" in $$props) $$invalidate(0, searchString = $$props.searchString);
	    if ("label" in $$props) $$invalidate(1, label = $$props.label);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [searchString, label, reset, handleKeyUp, handleGoClick, click_handler, input_input_handler, keyup_handler, click_handler_1, click_handler_2];
	}

	var SearchText = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(SearchText, _SvelteComponentDev);

	  var _super = _createSuper(SearchText);

	  function SearchText(options) {
	    var _this;

	    _classCallCheck(this, SearchText);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$a, create_fragment$a, safe_not_equal, {
	      searchString: 0,
	      label: 1
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "SearchText",
	      options: options,
	      id: create_fragment$a.name
	    });
	    return _this;
	  }

	  _createClass(SearchText, [{
	    key: "searchString",
	    get: function get() {
	      throw new Error("<SearchText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<SearchText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "label",
	    get: function get() {
	      throw new Error("<SearchText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<SearchText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return SearchText;
	}(SvelteComponentDev);

	var file$b = "src/components/CheckboxPanel.svelte"; // (21:4) <Checkbox id="checkboxpanel-checkbox-controlsFilter"               checked={$controlsFilter}               on:click={handleClick}              >

	function create_default_slot$2(ctx) {
	  var span;
	  var copytooltipable_action;
	  var mounted;
	  var dispose;
	  var block = {
	    c: function create() {
	      span = element("span");
	      span.textContent = "Show/Hide Filters";
	      attr_dev(span, "class", "svelte-1f42r7e");
	      add_location(span, file$b, 24, 6, 646);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, span, anchor);

	      if (!mounted) {
	        dispose = action_destroyer(copytooltipable_action = copytooltipable.call(null, span, {
	          content: "Toggles filter visibility.",
	          showClickMessage: false
	        }));
	        mounted = true;
	      }
	    },
	    p: noop,
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(span);
	      mounted = false;
	      dispose();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_default_slot$2.name,
	    type: "slot",
	    source: "(21:4) <Checkbox id=\\\"checkboxpanel-checkbox-controlsFilter\\\"               checked={$controlsFilter}               on:click={handleClick}              >",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$b(ctx) {
	  var ul;
	  var li;
	  var checkbox;
	  var current;
	  checkbox = new Checkbox({
	    props: {
	      id: "checkboxpanel-checkbox-controlsFilter",
	      checked:
	      /*$controlsFilter*/
	      ctx[0],
	      $$slots: {
	        default: [create_default_slot$2]
	      },
	      $$scope: {
	        ctx: ctx
	      }
	    },
	    $$inline: true
	  });
	  checkbox.$on("click",
	  /*handleClick*/
	  ctx[1]);
	  var block = {
	    c: function create() {
	      ul = element("ul");
	      li = element("li");
	      create_component(checkbox.$$.fragment);
	      attr_dev(li, "class", "svelte-1f42r7e");
	      add_location(li, file$b, 19, 2, 486);
	      attr_dev(ul, "class", "checkboxpanel-wrapper svelte-1f42r7e");
	      add_location(ul, file$b, 18, 0, 449);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, ul, anchor);
	      append_dev(ul, li);
	      mount_component(checkbox, li, null);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      var checkbox_changes = {};
	      if (dirty &
	      /*$controlsFilter*/
	      1) checkbox_changes.checked =
	      /*$controlsFilter*/
	      ctx[0];

	      if (dirty &
	      /*$$scope*/
	      4) {
	        checkbox_changes.$$scope = {
	          dirty: dirty,
	          ctx: ctx
	        };
	      }

	      checkbox.$set(checkbox_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(checkbox.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(checkbox.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(ul);
	      destroy_component(checkbox);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$b.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$b($$self, $$props, $$invalidate) {
	  var $controlsFilter;
	  validate_store(controlsFilter, "controlsFilter");
	  component_subscribe($$self, controlsFilter, function ($$value) {
	    return $$invalidate(0, $controlsFilter = $$value);
	  });

	  function handleClick() {
	    set_store_value(controlsFilter, $controlsFilter = !$controlsFilter);
	  }

	  var writable_props = [];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<CheckboxPanel> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("CheckboxPanel", $$slots, []);

	  $$self.$capture_state = function () {
	    return {
	      highlightPolarization: highlightPolarization,
	      highlightCib: highlightCib,
	      controlsFilter: controlsFilter,
	      polarizationFilter: polarizationFilter,
	      polarizationDef: polarizationDef,
	      polarizationScale: polarizationScale,
	      copytooltipable: copytooltipable,
	      Checkbox: Checkbox,
	      Slider: Slider,
	      handleClick: handleClick,
	      $controlsFilter: $controlsFilter
	    };
	  };

	  return [$controlsFilter, handleClick];
	}

	var CheckboxPanel = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(CheckboxPanel, _SvelteComponentDev);

	  var _super = _createSuper(CheckboxPanel);

	  function CheckboxPanel(options) {
	    var _this;

	    _classCallCheck(this, CheckboxPanel);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$b, create_fragment$b, safe_not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "CheckboxPanel",
	      options: options,
	      id: create_fragment$b.name
	    });
	    return _this;
	  }

	  return CheckboxPanel;
	}(SvelteComponentDev);

	/* node_modules/svelte-awesome/components/svg/Path.svelte generated by Svelte v3.24.1 */

	const file$c = "node_modules/svelte-awesome/components/svg/Path.svelte";

	function create_fragment$c(ctx) {
		let path;
		let path_key_value;

		let path_levels = [
			{
				key: path_key_value = "path-" + /*id*/ ctx[0]
			},
			/*data*/ ctx[1]
		];

		let path_data = {};

		for (let i = 0; i < path_levels.length; i += 1) {
			path_data = assign(path_data, path_levels[i]);
		}

		const block = {
			c: function create() {
				path = svg_element("path");
				set_svg_attributes(path, path_data);
				add_location(path, file$c, 0, 0, 0);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, path, anchor);
			},
			p: function update(ctx, [dirty]) {
				set_svg_attributes(path, path_data = get_spread_update(path_levels, [
					dirty & /*id*/ 1 && path_key_value !== (path_key_value = "path-" + /*id*/ ctx[0]) && { key: path_key_value },
					dirty & /*data*/ 2 && /*data*/ ctx[1]
				]));
			},
			i: noop,
			o: noop,
			d: function destroy(detaching) {
				if (detaching) detach_dev(path);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$c.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$c($$self, $$props, $$invalidate) {
		let { id = "" } = $$props;
		let { data = {} } = $$props;
		const writable_props = ["id", "data"];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Path> was created with unknown prop '${key}'`);
		});

		let { $$slots = {}, $$scope } = $$props;
		validate_slots("Path", $$slots, []);

		$$self.$$set = $$props => {
			if ("id" in $$props) $$invalidate(0, id = $$props.id);
			if ("data" in $$props) $$invalidate(1, data = $$props.data);
		};

		$$self.$capture_state = () => ({ id, data });

		$$self.$inject_state = $$props => {
			if ("id" in $$props) $$invalidate(0, id = $$props.id);
			if ("data" in $$props) $$invalidate(1, data = $$props.data);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [id, data];
	}

	class Path$1 extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$c, create_fragment$c, safe_not_equal, { id: 0, data: 1 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Path",
				options,
				id: create_fragment$c.name
			});
		}

		get id() {
			throw new Error("<Path>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set id(value) {
			throw new Error("<Path>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get data() {
			throw new Error("<Path>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set data(value) {
			throw new Error("<Path>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* node_modules/svelte-awesome/components/svg/Polygon.svelte generated by Svelte v3.24.1 */

	const file$d = "node_modules/svelte-awesome/components/svg/Polygon.svelte";

	function create_fragment$d(ctx) {
		let polygon;
		let polygon_key_value;

		let polygon_levels = [
			{
				key: polygon_key_value = "polygon-" + /*id*/ ctx[0]
			},
			/*data*/ ctx[1]
		];

		let polygon_data = {};

		for (let i = 0; i < polygon_levels.length; i += 1) {
			polygon_data = assign(polygon_data, polygon_levels[i]);
		}

		const block = {
			c: function create() {
				polygon = svg_element("polygon");
				set_svg_attributes(polygon, polygon_data);
				add_location(polygon, file$d, 0, 0, 0);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, polygon, anchor);
			},
			p: function update(ctx, [dirty]) {
				set_svg_attributes(polygon, polygon_data = get_spread_update(polygon_levels, [
					dirty & /*id*/ 1 && polygon_key_value !== (polygon_key_value = "polygon-" + /*id*/ ctx[0]) && { key: polygon_key_value },
					dirty & /*data*/ 2 && /*data*/ ctx[1]
				]));
			},
			i: noop,
			o: noop,
			d: function destroy(detaching) {
				if (detaching) detach_dev(polygon);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$d.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$d($$self, $$props, $$invalidate) {
		let { id = "" } = $$props;
		let { data = {} } = $$props;
		const writable_props = ["id", "data"];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Polygon> was created with unknown prop '${key}'`);
		});

		let { $$slots = {}, $$scope } = $$props;
		validate_slots("Polygon", $$slots, []);

		$$self.$$set = $$props => {
			if ("id" in $$props) $$invalidate(0, id = $$props.id);
			if ("data" in $$props) $$invalidate(1, data = $$props.data);
		};

		$$self.$capture_state = () => ({ id, data });

		$$self.$inject_state = $$props => {
			if ("id" in $$props) $$invalidate(0, id = $$props.id);
			if ("data" in $$props) $$invalidate(1, data = $$props.data);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [id, data];
	}

	class Polygon extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$d, create_fragment$d, safe_not_equal, { id: 0, data: 1 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Polygon",
				options,
				id: create_fragment$d.name
			});
		}

		get id() {
			throw new Error("<Polygon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set id(value) {
			throw new Error("<Polygon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get data() {
			throw new Error("<Polygon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set data(value) {
			throw new Error("<Polygon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* node_modules/svelte-awesome/components/svg/Raw.svelte generated by Svelte v3.24.1 */

	const file$e = "node_modules/svelte-awesome/components/svg/Raw.svelte";

	function create_fragment$e(ctx) {
		let g;

		const block = {
			c: function create() {
				g = svg_element("g");
				add_location(g, file$e, 0, 0, 0);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, g, anchor);
				g.innerHTML = /*raw*/ ctx[0];
			},
			p: function update(ctx, [dirty]) {
				if (dirty & /*raw*/ 1) g.innerHTML = /*raw*/ ctx[0];		},
			i: noop,
			o: noop,
			d: function destroy(detaching) {
				if (detaching) detach_dev(g);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$e.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$e($$self, $$props, $$invalidate) {
		let cursor = 870711;

		function getId() {
			cursor += 1;
			return `fa-${cursor.toString(16)}`;
		}

		let raw;
		let { data } = $$props;

		function getRaw(data) {
			if (!data || !data.raw) {
				return null;
			}

			let rawData = data.raw;
			const ids = {};

			rawData = rawData.replace(/\s(?:xml:)?id=["']?([^"')\s]+)/g, (match, id) => {
				const uniqueId = getId();
				ids[id] = uniqueId;
				return ` id="${uniqueId}"`;
			});

			rawData = rawData.replace(/#(?:([^'")\s]+)|xpointer\(id\((['"]?)([^')]+)\2\)\))/g, (match, rawId, _, pointerId) => {
				const id = rawId || pointerId;

				if (!id || !ids[id]) {
					return match;
				}

				return `#${ids[id]}`;
			});

			return rawData;
		}

		const writable_props = ["data"];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Raw> was created with unknown prop '${key}'`);
		});

		let { $$slots = {}, $$scope } = $$props;
		validate_slots("Raw", $$slots, []);

		$$self.$$set = $$props => {
			if ("data" in $$props) $$invalidate(1, data = $$props.data);
		};

		$$self.$capture_state = () => ({ cursor, getId, raw, data, getRaw });

		$$self.$inject_state = $$props => {
			if ("cursor" in $$props) cursor = $$props.cursor;
			if ("raw" in $$props) $$invalidate(0, raw = $$props.raw);
			if ("data" in $$props) $$invalidate(1, data = $$props.data);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*data*/ 2) {
				 $$invalidate(0, raw = getRaw(data));
			}
		};

		return [raw, data];
	}

	class Raw extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$e, create_fragment$e, safe_not_equal, { data: 1 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Raw",
				options,
				id: create_fragment$e.name
			});

			const { ctx } = this.$$;
			const props = options.props || {};

			if (/*data*/ ctx[1] === undefined && !("data" in props)) {
				console.warn("<Raw> was created without expected prop 'data'");
			}
		}

		get data() {
			throw new Error("<Raw>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set data(value) {
			throw new Error("<Raw>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* node_modules/svelte-awesome/components/svg/Svg.svelte generated by Svelte v3.24.1 */

	const file$f = "node_modules/svelte-awesome/components/svg/Svg.svelte";

	function create_fragment$f(ctx) {
		let svg;
		let svg_class_value;
		let svg_role_value;
		let current;
		const default_slot_template = /*$$slots*/ ctx[13].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);

		const block = {
			c: function create() {
				svg = svg_element("svg");
				if (default_slot) default_slot.c();
				attr_dev(svg, "version", "1.1");
				attr_dev(svg, "class", svg_class_value = "fa-icon " + /*className*/ ctx[0] + " svelte-1dof0an");
				attr_dev(svg, "x", /*x*/ ctx[8]);
				attr_dev(svg, "y", /*y*/ ctx[9]);
				attr_dev(svg, "width", /*width*/ ctx[1]);
				attr_dev(svg, "height", /*height*/ ctx[2]);
				attr_dev(svg, "aria-label", /*label*/ ctx[11]);
				attr_dev(svg, "role", svg_role_value = /*label*/ ctx[11] ? "img" : "presentation");
				attr_dev(svg, "viewBox", /*box*/ ctx[3]);
				attr_dev(svg, "style", /*style*/ ctx[10]);
				toggle_class(svg, "fa-spin", /*spin*/ ctx[4]);
				toggle_class(svg, "fa-pulse", /*pulse*/ ctx[6]);
				toggle_class(svg, "fa-inverse", /*inverse*/ ctx[5]);
				toggle_class(svg, "fa-flip-horizontal", /*flip*/ ctx[7] === "horizontal");
				toggle_class(svg, "fa-flip-vertical", /*flip*/ ctx[7] === "vertical");
				add_location(svg, file$f, 0, 0, 0);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, svg, anchor);

				if (default_slot) {
					default_slot.m(svg, null);
				}

				current = true;
			},
			p: function update(ctx, [dirty]) {
				if (default_slot) {
					if (default_slot.p && dirty & /*$$scope*/ 4096) {
						update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[12], dirty, null, null);
					}
				}

				if (!current || dirty & /*className*/ 1 && svg_class_value !== (svg_class_value = "fa-icon " + /*className*/ ctx[0] + " svelte-1dof0an")) {
					attr_dev(svg, "class", svg_class_value);
				}

				if (!current || dirty & /*x*/ 256) {
					attr_dev(svg, "x", /*x*/ ctx[8]);
				}

				if (!current || dirty & /*y*/ 512) {
					attr_dev(svg, "y", /*y*/ ctx[9]);
				}

				if (!current || dirty & /*width*/ 2) {
					attr_dev(svg, "width", /*width*/ ctx[1]);
				}

				if (!current || dirty & /*height*/ 4) {
					attr_dev(svg, "height", /*height*/ ctx[2]);
				}

				if (!current || dirty & /*label*/ 2048) {
					attr_dev(svg, "aria-label", /*label*/ ctx[11]);
				}

				if (!current || dirty & /*label*/ 2048 && svg_role_value !== (svg_role_value = /*label*/ ctx[11] ? "img" : "presentation")) {
					attr_dev(svg, "role", svg_role_value);
				}

				if (!current || dirty & /*box*/ 8) {
					attr_dev(svg, "viewBox", /*box*/ ctx[3]);
				}

				if (!current || dirty & /*style*/ 1024) {
					attr_dev(svg, "style", /*style*/ ctx[10]);
				}

				if (dirty & /*className, spin*/ 17) {
					toggle_class(svg, "fa-spin", /*spin*/ ctx[4]);
				}

				if (dirty & /*className, pulse*/ 65) {
					toggle_class(svg, "fa-pulse", /*pulse*/ ctx[6]);
				}

				if (dirty & /*className, inverse*/ 33) {
					toggle_class(svg, "fa-inverse", /*inverse*/ ctx[5]);
				}

				if (dirty & /*className, flip*/ 129) {
					toggle_class(svg, "fa-flip-horizontal", /*flip*/ ctx[7] === "horizontal");
				}

				if (dirty & /*className, flip*/ 129) {
					toggle_class(svg, "fa-flip-vertical", /*flip*/ ctx[7] === "vertical");
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) detach_dev(svg);
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$f.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$f($$self, $$props, $$invalidate) {
		let { class: className } = $$props;
		let { width } = $$props;
		let { height } = $$props;
		let { box } = $$props;
		let { spin = false } = $$props;
		let { inverse = false } = $$props;
		let { pulse = false } = $$props;
		let { flip = null } = $$props;
		let { x = undefined } = $$props;
		let { y = undefined } = $$props;
		let { style = undefined } = $$props;
		let { label = undefined } = $$props;

		const writable_props = [
			"class",
			"width",
			"height",
			"box",
			"spin",
			"inverse",
			"pulse",
			"flip",
			"x",
			"y",
			"style",
			"label"
		];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Svg> was created with unknown prop '${key}'`);
		});

		let { $$slots = {}, $$scope } = $$props;
		validate_slots("Svg", $$slots, ['default']);

		$$self.$$set = $$props => {
			if ("class" in $$props) $$invalidate(0, className = $$props.class);
			if ("width" in $$props) $$invalidate(1, width = $$props.width);
			if ("height" in $$props) $$invalidate(2, height = $$props.height);
			if ("box" in $$props) $$invalidate(3, box = $$props.box);
			if ("spin" in $$props) $$invalidate(4, spin = $$props.spin);
			if ("inverse" in $$props) $$invalidate(5, inverse = $$props.inverse);
			if ("pulse" in $$props) $$invalidate(6, pulse = $$props.pulse);
			if ("flip" in $$props) $$invalidate(7, flip = $$props.flip);
			if ("x" in $$props) $$invalidate(8, x = $$props.x);
			if ("y" in $$props) $$invalidate(9, y = $$props.y);
			if ("style" in $$props) $$invalidate(10, style = $$props.style);
			if ("label" in $$props) $$invalidate(11, label = $$props.label);
			if ("$$scope" in $$props) $$invalidate(12, $$scope = $$props.$$scope);
		};

		$$self.$capture_state = () => ({
			className,
			width,
			height,
			box,
			spin,
			inverse,
			pulse,
			flip,
			x,
			y,
			style,
			label
		});

		$$self.$inject_state = $$props => {
			if ("className" in $$props) $$invalidate(0, className = $$props.className);
			if ("width" in $$props) $$invalidate(1, width = $$props.width);
			if ("height" in $$props) $$invalidate(2, height = $$props.height);
			if ("box" in $$props) $$invalidate(3, box = $$props.box);
			if ("spin" in $$props) $$invalidate(4, spin = $$props.spin);
			if ("inverse" in $$props) $$invalidate(5, inverse = $$props.inverse);
			if ("pulse" in $$props) $$invalidate(6, pulse = $$props.pulse);
			if ("flip" in $$props) $$invalidate(7, flip = $$props.flip);
			if ("x" in $$props) $$invalidate(8, x = $$props.x);
			if ("y" in $$props) $$invalidate(9, y = $$props.y);
			if ("style" in $$props) $$invalidate(10, style = $$props.style);
			if ("label" in $$props) $$invalidate(11, label = $$props.label);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [
			className,
			width,
			height,
			box,
			spin,
			inverse,
			pulse,
			flip,
			x,
			y,
			style,
			label,
			$$scope,
			$$slots
		];
	}

	class Svg extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance$f, create_fragment$f, safe_not_equal, {
				class: 0,
				width: 1,
				height: 2,
				box: 3,
				spin: 4,
				inverse: 5,
				pulse: 6,
				flip: 7,
				x: 8,
				y: 9,
				style: 10,
				label: 11
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Svg",
				options,
				id: create_fragment$f.name
			});

			const { ctx } = this.$$;
			const props = options.props || {};

			if (/*className*/ ctx[0] === undefined && !("class" in props)) {
				console.warn("<Svg> was created without expected prop 'class'");
			}

			if (/*width*/ ctx[1] === undefined && !("width" in props)) {
				console.warn("<Svg> was created without expected prop 'width'");
			}

			if (/*height*/ ctx[2] === undefined && !("height" in props)) {
				console.warn("<Svg> was created without expected prop 'height'");
			}

			if (/*box*/ ctx[3] === undefined && !("box" in props)) {
				console.warn("<Svg> was created without expected prop 'box'");
			}
		}

		get class() {
			throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get width() {
			throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set width(value) {
			throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get height() {
			throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set height(value) {
			throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get box() {
			throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set box(value) {
			throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get spin() {
			throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set spin(value) {
			throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get inverse() {
			throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set inverse(value) {
			throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get pulse() {
			throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set pulse(value) {
			throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get flip() {
			throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set flip(value) {
			throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get x() {
			throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set x(value) {
			throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get y() {
			throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set y(value) {
			throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get style() {
			throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set style(value) {
			throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get label() {
			throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set label(value) {
			throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* node_modules/svelte-awesome/components/Icon.svelte generated by Svelte v3.24.1 */

	const { Object: Object_1, console: console_1$2 } = globals;

	function get_each_context$2(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[29] = list[i];
		child_ctx[31] = i;
		return child_ctx;
	}

	function get_each_context_1(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[32] = list[i];
		child_ctx[31] = i;
		return child_ctx;
	}

	// (4:4) {#if self}
	function create_if_block$7(ctx) {
		let t0;
		let t1;
		let if_block2_anchor;
		let current;
		let if_block0 = /*self*/ ctx[0].paths && create_if_block_3$2(ctx);
		let if_block1 = /*self*/ ctx[0].polygons && create_if_block_2$2(ctx);
		let if_block2 = /*self*/ ctx[0].raw && create_if_block_1$2(ctx);

		const block = {
			c: function create() {
				if (if_block0) if_block0.c();
				t0 = space();
				if (if_block1) if_block1.c();
				t1 = space();
				if (if_block2) if_block2.c();
				if_block2_anchor = empty();
			},
			m: function mount(target, anchor) {
				if (if_block0) if_block0.m(target, anchor);
				insert_dev(target, t0, anchor);
				if (if_block1) if_block1.m(target, anchor);
				insert_dev(target, t1, anchor);
				if (if_block2) if_block2.m(target, anchor);
				insert_dev(target, if_block2_anchor, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				if (/*self*/ ctx[0].paths) {
					if (if_block0) {
						if_block0.p(ctx, dirty);

						if (dirty[0] & /*self*/ 1) {
							transition_in(if_block0, 1);
						}
					} else {
						if_block0 = create_if_block_3$2(ctx);
						if_block0.c();
						transition_in(if_block0, 1);
						if_block0.m(t0.parentNode, t0);
					}
				} else if (if_block0) {
					group_outros();

					transition_out(if_block0, 1, 1, () => {
						if_block0 = null;
					});

					check_outros();
				}

				if (/*self*/ ctx[0].polygons) {
					if (if_block1) {
						if_block1.p(ctx, dirty);

						if (dirty[0] & /*self*/ 1) {
							transition_in(if_block1, 1);
						}
					} else {
						if_block1 = create_if_block_2$2(ctx);
						if_block1.c();
						transition_in(if_block1, 1);
						if_block1.m(t1.parentNode, t1);
					}
				} else if (if_block1) {
					group_outros();

					transition_out(if_block1, 1, 1, () => {
						if_block1 = null;
					});

					check_outros();
				}

				if (/*self*/ ctx[0].raw) {
					if (if_block2) {
						if_block2.p(ctx, dirty);

						if (dirty[0] & /*self*/ 1) {
							transition_in(if_block2, 1);
						}
					} else {
						if_block2 = create_if_block_1$2(ctx);
						if_block2.c();
						transition_in(if_block2, 1);
						if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
					}
				} else if (if_block2) {
					group_outros();

					transition_out(if_block2, 1, 1, () => {
						if_block2 = null;
					});

					check_outros();
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block0);
				transition_in(if_block1);
				transition_in(if_block2);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block0);
				transition_out(if_block1);
				transition_out(if_block2);
				current = false;
			},
			d: function destroy(detaching) {
				if (if_block0) if_block0.d(detaching);
				if (detaching) detach_dev(t0);
				if (if_block1) if_block1.d(detaching);
				if (detaching) detach_dev(t1);
				if (if_block2) if_block2.d(detaching);
				if (detaching) detach_dev(if_block2_anchor);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$7.name,
			type: "if",
			source: "(4:4) {#if self}",
			ctx
		});

		return block;
	}

	// (5:6) {#if self.paths}
	function create_if_block_3$2(ctx) {
		let each_1_anchor;
		let current;
		let each_value_1 = /*self*/ ctx[0].paths;
		validate_each_argument(each_value_1);
		let each_blocks = [];

		for (let i = 0; i < each_value_1.length; i += 1) {
			each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
		}

		const out = i => transition_out(each_blocks[i], 1, 1, () => {
			each_blocks[i] = null;
		});

		const block = {
			c: function create() {
				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				each_1_anchor = empty();
			},
			m: function mount(target, anchor) {
				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(target, anchor);
				}

				insert_dev(target, each_1_anchor, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				if (dirty[0] & /*self*/ 1) {
					each_value_1 = /*self*/ ctx[0].paths;
					validate_each_argument(each_value_1);
					let i;

					for (i = 0; i < each_value_1.length; i += 1) {
						const child_ctx = get_each_context_1(ctx, each_value_1, i);

						if (each_blocks[i]) {
							each_blocks[i].p(child_ctx, dirty);
							transition_in(each_blocks[i], 1);
						} else {
							each_blocks[i] = create_each_block_1(child_ctx);
							each_blocks[i].c();
							transition_in(each_blocks[i], 1);
							each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
						}
					}

					group_outros();

					for (i = each_value_1.length; i < each_blocks.length; i += 1) {
						out(i);
					}

					check_outros();
				}
			},
			i: function intro(local) {
				if (current) return;

				for (let i = 0; i < each_value_1.length; i += 1) {
					transition_in(each_blocks[i]);
				}

				current = true;
			},
			o: function outro(local) {
				each_blocks = each_blocks.filter(Boolean);

				for (let i = 0; i < each_blocks.length; i += 1) {
					transition_out(each_blocks[i]);
				}

				current = false;
			},
			d: function destroy(detaching) {
				destroy_each(each_blocks, detaching);
				if (detaching) detach_dev(each_1_anchor);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_3$2.name,
			type: "if",
			source: "(5:6) {#if self.paths}",
			ctx
		});

		return block;
	}

	// (6:8) {#each self.paths as path, i}
	function create_each_block_1(ctx) {
		let path;
		let current;

		path = new Path$1({
				props: {
					id: /*i*/ ctx[31],
					data: /*path*/ ctx[32]
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(path.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(path, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const path_changes = {};
				if (dirty[0] & /*self*/ 1) path_changes.data = /*path*/ ctx[32];
				path.$set(path_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(path.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(path.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(path, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_each_block_1.name,
			type: "each",
			source: "(6:8) {#each self.paths as path, i}",
			ctx
		});

		return block;
	}

	// (10:6) {#if self.polygons}
	function create_if_block_2$2(ctx) {
		let each_1_anchor;
		let current;
		let each_value = /*self*/ ctx[0].polygons;
		validate_each_argument(each_value);
		let each_blocks = [];

		for (let i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
		}

		const out = i => transition_out(each_blocks[i], 1, 1, () => {
			each_blocks[i] = null;
		});

		const block = {
			c: function create() {
				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				each_1_anchor = empty();
			},
			m: function mount(target, anchor) {
				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(target, anchor);
				}

				insert_dev(target, each_1_anchor, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				if (dirty[0] & /*self*/ 1) {
					each_value = /*self*/ ctx[0].polygons;
					validate_each_argument(each_value);
					let i;

					for (i = 0; i < each_value.length; i += 1) {
						const child_ctx = get_each_context$2(ctx, each_value, i);

						if (each_blocks[i]) {
							each_blocks[i].p(child_ctx, dirty);
							transition_in(each_blocks[i], 1);
						} else {
							each_blocks[i] = create_each_block$2(child_ctx);
							each_blocks[i].c();
							transition_in(each_blocks[i], 1);
							each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
						}
					}

					group_outros();

					for (i = each_value.length; i < each_blocks.length; i += 1) {
						out(i);
					}

					check_outros();
				}
			},
			i: function intro(local) {
				if (current) return;

				for (let i = 0; i < each_value.length; i += 1) {
					transition_in(each_blocks[i]);
				}

				current = true;
			},
			o: function outro(local) {
				each_blocks = each_blocks.filter(Boolean);

				for (let i = 0; i < each_blocks.length; i += 1) {
					transition_out(each_blocks[i]);
				}

				current = false;
			},
			d: function destroy(detaching) {
				destroy_each(each_blocks, detaching);
				if (detaching) detach_dev(each_1_anchor);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_2$2.name,
			type: "if",
			source: "(10:6) {#if self.polygons}",
			ctx
		});

		return block;
	}

	// (11:8) {#each self.polygons as polygon, i}
	function create_each_block$2(ctx) {
		let polygon;
		let current;

		polygon = new Polygon({
				props: {
					id: /*i*/ ctx[31],
					data: /*polygon*/ ctx[29]
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(polygon.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(polygon, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const polygon_changes = {};
				if (dirty[0] & /*self*/ 1) polygon_changes.data = /*polygon*/ ctx[29];
				polygon.$set(polygon_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(polygon.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(polygon.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(polygon, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_each_block$2.name,
			type: "each",
			source: "(11:8) {#each self.polygons as polygon, i}",
			ctx
		});

		return block;
	}

	// (15:6) {#if self.raw}
	function create_if_block_1$2(ctx) {
		let raw;
		let updating_data;
		let current;

		function raw_data_binding(value) {
			/*raw_data_binding*/ ctx[15].call(null, value);
		}

		let raw_props = {};

		if (/*self*/ ctx[0] !== void 0) {
			raw_props.data = /*self*/ ctx[0];
		}

		raw = new Raw({ props: raw_props, $$inline: true });
		binding_callbacks.push(() => bind$1(raw, "data", raw_data_binding));

		const block = {
			c: function create() {
				create_component(raw.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(raw, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const raw_changes = {};

				if (!updating_data && dirty[0] & /*self*/ 1) {
					updating_data = true;
					raw_changes.data = /*self*/ ctx[0];
					add_flush_callback(() => updating_data = false);
				}

				raw.$set(raw_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(raw.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(raw.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(raw, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_1$2.name,
			type: "if",
			source: "(15:6) {#if self.raw}",
			ctx
		});

		return block;
	}

	// (3:8)      
	function fallback_block(ctx) {
		let if_block_anchor;
		let current;
		let if_block = /*self*/ ctx[0] && create_if_block$7(ctx);

		const block = {
			c: function create() {
				if (if_block) if_block.c();
				if_block_anchor = empty();
			},
			m: function mount(target, anchor) {
				if (if_block) if_block.m(target, anchor);
				insert_dev(target, if_block_anchor, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				if (/*self*/ ctx[0]) {
					if (if_block) {
						if_block.p(ctx, dirty);

						if (dirty[0] & /*self*/ 1) {
							transition_in(if_block, 1);
						}
					} else {
						if_block = create_if_block$7(ctx);
						if_block.c();
						transition_in(if_block, 1);
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				} else if (if_block) {
					group_outros();

					transition_out(if_block, 1, 1, () => {
						if_block = null;
					});

					check_outros();
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (if_block) if_block.d(detaching);
				if (detaching) detach_dev(if_block_anchor);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: fallback_block.name,
			type: "fallback",
			source: "(3:8)      ",
			ctx
		});

		return block;
	}

	// (1:0) <Svg label={label} width={width} height={height} box={box} style={combinedStyle}   spin={spin} flip={flip} inverse={inverse} pulse={pulse} class={className}>
	function create_default_slot$3(ctx) {
		let current;
		const default_slot_template = /*$$slots*/ ctx[14].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[16], null);
		const default_slot_or_fallback = default_slot || fallback_block(ctx);

		const block = {
			c: function create() {
				if (default_slot_or_fallback) default_slot_or_fallback.c();
			},
			m: function mount(target, anchor) {
				if (default_slot_or_fallback) {
					default_slot_or_fallback.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && dirty[0] & /*$$scope*/ 65536) {
						update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[16], dirty, null, null);
					}
				} else {
					if (default_slot_or_fallback && default_slot_or_fallback.p && dirty[0] & /*self*/ 1) {
						default_slot_or_fallback.p(ctx, dirty);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot_or_fallback, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot_or_fallback, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$3.name,
			type: "slot",
			source: "(1:0) <Svg label={label} width={width} height={height} box={box} style={combinedStyle}   spin={spin} flip={flip} inverse={inverse} pulse={pulse} class={className}>",
			ctx
		});

		return block;
	}

	function create_fragment$g(ctx) {
		let svg;
		let current;

		svg = new Svg({
				props: {
					label: /*label*/ ctx[6],
					width: /*width*/ ctx[7],
					height: /*height*/ ctx[8],
					box: /*box*/ ctx[10],
					style: /*combinedStyle*/ ctx[9],
					spin: /*spin*/ ctx[2],
					flip: /*flip*/ ctx[5],
					inverse: /*inverse*/ ctx[3],
					pulse: /*pulse*/ ctx[4],
					class: /*className*/ ctx[1],
					$$slots: { default: [create_default_slot$3] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(svg.$$.fragment);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				mount_component(svg, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const svg_changes = {};
				if (dirty[0] & /*label*/ 64) svg_changes.label = /*label*/ ctx[6];
				if (dirty[0] & /*width*/ 128) svg_changes.width = /*width*/ ctx[7];
				if (dirty[0] & /*height*/ 256) svg_changes.height = /*height*/ ctx[8];
				if (dirty[0] & /*box*/ 1024) svg_changes.box = /*box*/ ctx[10];
				if (dirty[0] & /*combinedStyle*/ 512) svg_changes.style = /*combinedStyle*/ ctx[9];
				if (dirty[0] & /*spin*/ 4) svg_changes.spin = /*spin*/ ctx[2];
				if (dirty[0] & /*flip*/ 32) svg_changes.flip = /*flip*/ ctx[5];
				if (dirty[0] & /*inverse*/ 8) svg_changes.inverse = /*inverse*/ ctx[3];
				if (dirty[0] & /*pulse*/ 16) svg_changes.pulse = /*pulse*/ ctx[4];
				if (dirty[0] & /*className*/ 2) svg_changes.class = /*className*/ ctx[1];

				if (dirty[0] & /*$$scope, self*/ 65537) {
					svg_changes.$$scope = { dirty, ctx };
				}

				svg.$set(svg_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(svg.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(svg.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(svg, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$g.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function normaliseData(data) {
		if ("iconName" in data && "icon" in data) {
			let normalisedData = {};
			let faIcon = data.icon;
			let name = data.iconName;
			let width = faIcon[0];
			let height = faIcon[1];
			let paths = faIcon[4];
			let iconData = { width, height, paths: [{ d: paths }] };
			normalisedData[name] = iconData;
			return normalisedData;
		}

		return data;
	}

	function instance$g($$self, $$props, $$invalidate) {
		let { class: className = "" } = $$props;
		let { data } = $$props;
		let { scale = 1 } = $$props;
		let { spin = false } = $$props;
		let { inverse = false } = $$props;
		let { pulse = false } = $$props;
		let { flip = null } = $$props;
		let { label = null } = $$props;
		let { self = null } = $$props;
		let { style = null } = $$props;

		// internal
		let x = 0;

		let y = 0;
		let childrenHeight = 0;
		let childrenWidth = 0;
		let outerScale = 1;
		let width;
		let height;
		let combinedStyle;
		let box;

		function init() {
			if (typeof data === "undefined") {
				return;
			}

			const normalisedData = normaliseData(data);
			const [name] = Object.keys(normalisedData);
			const icon = normalisedData[name];

			if (!icon.paths) {
				icon.paths = [];
			}

			if (icon.d) {
				icon.paths.push({ d: icon.d });
			}

			if (!icon.polygons) {
				icon.polygons = [];
			}

			if (icon.points) {
				icon.polygons.push({ points: icon.points });
			}

			$$invalidate(0, self = icon);
		}

		function normalisedScale() {
			let numScale = 1;

			if (typeof scale !== "undefined") {
				numScale = Number(scale);
			}

			if (isNaN(numScale) || numScale <= 0) {
				// eslint-disable-line no-restricted-globals
				console.warn("Invalid prop: prop \"scale\" should be a number over 0."); // eslint-disable-line no-console

				return outerScale;
			}

			return numScale * outerScale;
		}

		function calculateBox() {
			if (self) {
				return `0 0 ${self.width} ${self.height}`;
			}

			return `0 0 ${width} ${height}`;
		}

		function calculateRatio() {
			if (!self) {
				return 1;
			}

			return Math.max(self.width, self.height) / 16;
		}

		function calculateWidth() {
			if (childrenWidth) {
				return childrenWidth;
			}

			if (self) {
				return self.width / calculateRatio() * normalisedScale();
			}

			return 0;
		}

		function calculateHeight() {
			if (childrenHeight) {
				return childrenHeight;
			}

			if (self) {
				return self.height / calculateRatio() * normalisedScale();
			}

			return 0;
		}

		function calculateStyle() {
			let combined = "";

			if (style !== null) {
				combined += style;
			}

			let size = normalisedScale();

			if (size === 1) {
				return combined;
			}

			if (combined !== "" && !combined.endsWith(";")) {
				combined += "; ";
			}

			return `${combined}font-size: ${size}em`;
		}

		const writable_props = [
			"class",
			"data",
			"scale",
			"spin",
			"inverse",
			"pulse",
			"flip",
			"label",
			"self",
			"style"
		];

		Object_1.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$2.warn(`<Icon> was created with unknown prop '${key}'`);
		});

		let { $$slots = {}, $$scope } = $$props;
		validate_slots("Icon", $$slots, ['default']);

		function raw_data_binding(value) {
			self = value;
			$$invalidate(0, self);
		}

		$$self.$$set = $$props => {
			if ("class" in $$props) $$invalidate(1, className = $$props.class);
			if ("data" in $$props) $$invalidate(11, data = $$props.data);
			if ("scale" in $$props) $$invalidate(12, scale = $$props.scale);
			if ("spin" in $$props) $$invalidate(2, spin = $$props.spin);
			if ("inverse" in $$props) $$invalidate(3, inverse = $$props.inverse);
			if ("pulse" in $$props) $$invalidate(4, pulse = $$props.pulse);
			if ("flip" in $$props) $$invalidate(5, flip = $$props.flip);
			if ("label" in $$props) $$invalidate(6, label = $$props.label);
			if ("self" in $$props) $$invalidate(0, self = $$props.self);
			if ("style" in $$props) $$invalidate(13, style = $$props.style);
			if ("$$scope" in $$props) $$invalidate(16, $$scope = $$props.$$scope);
		};

		$$self.$capture_state = () => ({
			Path: Path$1,
			Polygon,
			Raw,
			Svg,
			className,
			data,
			scale,
			spin,
			inverse,
			pulse,
			flip,
			label,
			self,
			style,
			x,
			y,
			childrenHeight,
			childrenWidth,
			outerScale,
			width,
			height,
			combinedStyle,
			box,
			init,
			normaliseData,
			normalisedScale,
			calculateBox,
			calculateRatio,
			calculateWidth,
			calculateHeight,
			calculateStyle
		});

		$$self.$inject_state = $$props => {
			if ("className" in $$props) $$invalidate(1, className = $$props.className);
			if ("data" in $$props) $$invalidate(11, data = $$props.data);
			if ("scale" in $$props) $$invalidate(12, scale = $$props.scale);
			if ("spin" in $$props) $$invalidate(2, spin = $$props.spin);
			if ("inverse" in $$props) $$invalidate(3, inverse = $$props.inverse);
			if ("pulse" in $$props) $$invalidate(4, pulse = $$props.pulse);
			if ("flip" in $$props) $$invalidate(5, flip = $$props.flip);
			if ("label" in $$props) $$invalidate(6, label = $$props.label);
			if ("self" in $$props) $$invalidate(0, self = $$props.self);
			if ("style" in $$props) $$invalidate(13, style = $$props.style);
			if ("x" in $$props) x = $$props.x;
			if ("y" in $$props) y = $$props.y;
			if ("childrenHeight" in $$props) childrenHeight = $$props.childrenHeight;
			if ("childrenWidth" in $$props) childrenWidth = $$props.childrenWidth;
			if ("outerScale" in $$props) outerScale = $$props.outerScale;
			if ("width" in $$props) $$invalidate(7, width = $$props.width);
			if ("height" in $$props) $$invalidate(8, height = $$props.height);
			if ("combinedStyle" in $$props) $$invalidate(9, combinedStyle = $$props.combinedStyle);
			if ("box" in $$props) $$invalidate(10, box = $$props.box);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty[0] & /*data, style, scale*/ 14336) {
				 {
					init();
					$$invalidate(7, width = calculateWidth());
					$$invalidate(8, height = calculateHeight());
					$$invalidate(9, combinedStyle = calculateStyle());
					$$invalidate(10, box = calculateBox());
				}
			}
		};

		return [
			self,
			className,
			spin,
			inverse,
			pulse,
			flip,
			label,
			width,
			height,
			combinedStyle,
			box,
			data,
			scale,
			style,
			$$slots,
			raw_data_binding,
			$$scope
		];
	}

	class Icon extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(
				this,
				options,
				instance$g,
				create_fragment$g,
				safe_not_equal,
				{
					class: 1,
					data: 11,
					scale: 12,
					spin: 2,
					inverse: 3,
					pulse: 4,
					flip: 5,
					label: 6,
					self: 0,
					style: 13
				},
				[-1, -1]
			);

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Icon",
				options,
				id: create_fragment$g.name
			});

			const { ctx } = this.$$;
			const props = options.props || {};

			if (/*data*/ ctx[11] === undefined && !("data" in props)) {
				console_1$2.warn("<Icon> was created without expected prop 'data'");
			}
		}

		get class() {
			throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get data() {
			throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set data(value) {
			throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get scale() {
			throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set scale(value) {
			throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get spin() {
			throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set spin(value) {
			throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get inverse() {
			throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set inverse(value) {
			throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get pulse() {
			throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set pulse(value) {
			throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get flip() {
			throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set flip(value) {
			throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get label() {
			throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set label(value) {
			throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get self() {
			throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set self(value) {
			throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get style() {
			throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set style(value) {
			throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var twitter = { twitter: { width: 1664, height: 1792, paths: [{ d: 'M1620 408q-67 98-162 167 1 14 1 42 0 130-38 259.5t-115.5 248.5-184.5 210.5-258 146-323 54.5q-271 0-496-145 35 4 78 4 225 0 401-138-105-2-188-64.5t-114-159.5q33 5 61 5 43 0 85-11-112-23-185.5-111.5t-73.5-205.5v-4q68 38 146 41-66-44-105-115t-39-154q0-88 44-163 121 149 294.5 238.5t371.5 99.5q-8-38-8-74 0-134 94.5-228.5t228.5-94.5q140 0 236 102 109-21 205-78-37 115-142 178 93-10 186-50z' }] } };

	var clipboard = { clipboard: { width: 1792, height: 1792, paths: [{ d: 'M768 1664h896v-640h-416q-40 0-68-28t-28-68v-416h-384v1152zM1024 224v-64q0-13-9.5-22.5t-22.5-9.5h-704q-13 0-22.5 9.5t-9.5 22.5v64q0 13 9.5 22.5t22.5 9.5h704q13 0 22.5-9.5t9.5-22.5zM1280 896h299l-299-299v299zM1792 1024v672q0 40-28 68t-68 28h-960q-40 0-68-28t-28-68v-160h-544q-40 0-68-28t-28-68v-1344q0-40 28-68t68-28h1088q40 0 68 28t28 68v328q21 13 36 28l408 408q28 28 48 76t20 88z' }] } };

	var file$g = "src/components/Share.svelte";

	function create_fragment$h(ctx) {
	  var div;
	  var p;
	  var t0;
	  var t1;
	  var a;
	  var icon0;
	  var a_href_value;
	  var t2;
	  var span;
	  var icon1;
	  var current;
	  var mounted;
	  var dispose;
	  icon0 = new Icon({
	    props: {
	      data: twitter,
	      scale: "1.2"
	    },
	    $$inline: true
	  });
	  icon1 = new Icon({
	    props: {
	      data: clipboard
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      div = element("div");
	      p = element("p");
	      t0 = text(
	      /*text*/
	      ctx[0]);
	      t1 = space();
	      a = element("a");
	      create_component(icon0.$$.fragment);
	      t2 = space();
	      span = element("span");
	      create_component(icon1.$$.fragment);
	      attr_dev(p, "class", "svelte-1etri82");
	      toggle_class(p, "gray",
	      /*mode*/
	      ctx[1] === "tooltip");
	      add_location(p, file$g, 49, 2, 1248);
	      attr_dev(a, "class", "twitter-share-button svelte-1etri82");
	      attr_dev(a, "href", a_href_value = "https://twitter.com/intent/tweet?url=" +
	      /*url*/
	      ctx[2].replace("#", "%23"));
	      attr_dev(a, "data-size", "large");
	      attr_dev(a, "target", "_blank");
	      toggle_class(a, "gray",
	      /*mode*/
	      ctx[1] === "tooltip");
	      add_location(a, file$g, 50, 2, 1296);
	      attr_dev(span, "class", "pseudolink svelte-1etri82");
	      toggle_class(span, "gray",
	      /*mode*/
	      ctx[1] === "tooltip");
	      add_location(span, file$g, 57, 2, 1534);
	      attr_dev(div, "class", "share svelte-1etri82");
	      add_location(div, file$g, 48, 0, 1226);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div, anchor);
	      append_dev(div, p);
	      append_dev(p, t0);
	      append_dev(div, t1);
	      append_dev(div, a);
	      mount_component(icon0, a, null);
	      append_dev(div, t2);
	      append_dev(div, span);
	      mount_component(icon1, span, null);
	      current = true;

	      if (!mounted) {
	        dispose = listen_dev(span, "click",
	        /*copyToClipBoard*/
	        ctx[3], false, false, false);
	        mounted = true;
	      }
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (!current || dirty &
	      /*text*/
	      1) set_data_dev(t0,
	      /*text*/
	      ctx[0]);

	      if (dirty &
	      /*mode*/
	      2) {
	        toggle_class(p, "gray",
	        /*mode*/
	        ctx[1] === "tooltip");
	      }

	      if (!current || dirty &
	      /*url*/
	      4 && a_href_value !== (a_href_value = "https://twitter.com/intent/tweet?url=" +
	      /*url*/
	      ctx[2].replace("#", "%23"))) {
	        attr_dev(a, "href", a_href_value);
	      }

	      if (dirty &
	      /*mode*/
	      2) {
	        toggle_class(a, "gray",
	        /*mode*/
	        ctx[1] === "tooltip");
	      }

	      if (dirty &
	      /*mode*/
	      2) {
	        toggle_class(span, "gray",
	        /*mode*/
	        ctx[1] === "tooltip");
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(icon0.$$.fragment, local);
	      transition_in(icon1.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(icon0.$$.fragment, local);
	      transition_out(icon1.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div);
	      destroy_component(icon0);
	      destroy_component(icon1);
	      mounted = false;
	      dispose();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$h.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$h($$self, $$props, $$invalidate) {
	  var $disinformantNationFilter;
	  var $platformFilter;
	  var $methodFilter;
	  var $sourceFilter;
	  var $sourceCategoryFilter;
	  var $tagFilter;
	  var $attributionScoreFilter;
	  var $polarizationFilter;
	  var $textSearchFilter;
	  var $contextData;
	  var $highlightPolarization;
	  var $highlightCib;
	  validate_store(disinformantNationFilter, "disinformantNationFilter");
	  component_subscribe($$self, disinformantNationFilter, function ($$value) {
	    return $$invalidate(5, $disinformantNationFilter = $$value);
	  });
	  validate_store(platformFilter, "platformFilter");
	  component_subscribe($$self, platformFilter, function ($$value) {
	    return $$invalidate(6, $platformFilter = $$value);
	  });
	  validate_store(methodFilter, "methodFilter");
	  component_subscribe($$self, methodFilter, function ($$value) {
	    return $$invalidate(7, $methodFilter = $$value);
	  });
	  validate_store(sourceFilter$1, "sourceFilter");
	  component_subscribe($$self, sourceFilter$1, function ($$value) {
	    return $$invalidate(8, $sourceFilter = $$value);
	  });
	  validate_store(sourceCategoryFilter, "sourceCategoryFilter");
	  component_subscribe($$self, sourceCategoryFilter, function ($$value) {
	    return $$invalidate(9, $sourceCategoryFilter = $$value);
	  });
	  validate_store(tagFilter, "tagFilter");
	  component_subscribe($$self, tagFilter, function ($$value) {
	    return $$invalidate(10, $tagFilter = $$value);
	  });
	  validate_store(attributionScoreFilter, "attributionScoreFilter");
	  component_subscribe($$self, attributionScoreFilter, function ($$value) {
	    return $$invalidate(11, $attributionScoreFilter = $$value);
	  });
	  validate_store(polarizationFilter, "polarizationFilter");
	  component_subscribe($$self, polarizationFilter, function ($$value) {
	    return $$invalidate(12, $polarizationFilter = $$value);
	  });
	  validate_store(textSearchFilter, "textSearchFilter");
	  component_subscribe($$self, textSearchFilter, function ($$value) {
	    return $$invalidate(13, $textSearchFilter = $$value);
	  });
	  validate_store(contextData, "contextData");
	  component_subscribe($$self, contextData, function ($$value) {
	    return $$invalidate(14, $contextData = $$value);
	  });
	  validate_store(highlightPolarization, "highlightPolarization");
	  component_subscribe($$self, highlightPolarization, function ($$value) {
	    return $$invalidate(15, $highlightPolarization = $$value);
	  });
	  validate_store(highlightCib, "highlightCib");
	  component_subscribe($$self, highlightCib, function ($$value) {
	    return $$invalidate(16, $highlightCib = $$value);
	  });
	  var _$$props$text = $$props.text,
	      text = _$$props$text === void 0 ? "Share this view." : _$$props$text;
	  var _$$props$caseId = $$props.caseId,
	      caseId = _$$props$caseId === void 0 ? "" : _$$props$caseId;
	  var _$$props$mode = $$props.mode,
	      mode = _$$props$mode === void 0 ? "standard" : _$$props$mode;

	  function copyToClipBoard() {
	    return _copyToClipBoard.apply(this, arguments);
	  }

	  function _copyToClipBoard() {
	    _copyToClipBoard = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	      var previousText;
	      return regeneratorRuntime.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              _context.next = 2;
	              return navigator.clipboard.writeText(url);

	            case 2:
	              previousText = text;
	              $$invalidate(0, text = "Copied!");
	              setTimeout(function () {
	                return $$invalidate(0, text = previousText);
	              }, 3000);

	            case 5:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee);
	    }));
	    return _copyToClipBoard.apply(this, arguments);
	  }

	  var writable_props = ["text", "caseId", "mode"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Share> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Share", $$slots, []);

	  $$self.$$set = function ($$props) {
	    if ("text" in $$props) $$invalidate(0, text = $$props.text);
	    if ("caseId" in $$props) $$invalidate(4, caseId = $$props.caseId);
	    if ("mode" in $$props) $$invalidate(1, mode = $$props.mode);
	  };

	  $$self.$capture_state = function () {
	    return {
	      disinformantNationFilter: disinformantNationFilter,
	      platformFilter: platformFilter,
	      methodFilter: methodFilter,
	      timeperiodFilter: timeperiodFilter,
	      sourceFilter: sourceFilter$1,
	      sourceCategoryFilter: sourceCategoryFilter,
	      tagFilter: tagFilter,
	      attributionScoreFilter: attributionScoreFilter,
	      polarizationFilter: polarizationFilter,
	      textSearchFilter: textSearchFilter,
	      originalTimeDomain: originalTimeDomain,
	      contextData: contextData,
	      highlightPolarization: highlightPolarization,
	      highlightCib: highlightCib,
	      urlFromFilters: urlFromFilters,
	      Icon: Icon,
	      twitter: twitter,
	      clipboard: clipboard,
	      text: text,
	      caseId: caseId,
	      mode: mode,
	      copyToClipBoard: copyToClipBoard,
	      url: url,
	      $disinformantNationFilter: $disinformantNationFilter,
	      $platformFilter: $platformFilter,
	      $methodFilter: $methodFilter,
	      $sourceFilter: $sourceFilter,
	      $sourceCategoryFilter: $sourceCategoryFilter,
	      $tagFilter: $tagFilter,
	      $attributionScoreFilter: $attributionScoreFilter,
	      $polarizationFilter: $polarizationFilter,
	      $textSearchFilter: $textSearchFilter,
	      $contextData: $contextData,
	      $highlightPolarization: $highlightPolarization,
	      $highlightCib: $highlightCib
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("text" in $$props) $$invalidate(0, text = $$props.text);
	    if ("caseId" in $$props) $$invalidate(4, caseId = $$props.caseId);
	    if ("mode" in $$props) $$invalidate(1, mode = $$props.mode);
	    if ("url" in $$props) $$invalidate(2, url = $$props.url);
	  };

	  var url;

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  $$self.$$.update = function () {
	    if ($$self.$$.dirty &
	    /*$disinformantNationFilter, $platformFilter, $methodFilter, $sourceFilter, $sourceCategoryFilter, $tagFilter, $attributionScoreFilter, $polarizationFilter, $textSearchFilter, $contextData, caseId, $highlightPolarization, $highlightCib*/
	    131056) {
	       $$invalidate(2, url = urlFromFilters($disinformantNationFilter, $platformFilter, $methodFilter, $sourceFilter, $sourceCategoryFilter, $tagFilter, $attributionScoreFilter, $polarizationFilter, $textSearchFilter, $contextData, caseId, $highlightPolarization, $highlightCib));
	    }
	  };

	  return [text, mode, url, copyToClipBoard, caseId];
	}

	var Share = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(Share, _SvelteComponentDev);

	  var _super = _createSuper(Share);

	  function Share(options) {
	    var _this;

	    _classCallCheck(this, Share);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$h, create_fragment$h, safe_not_equal, {
	      text: 0,
	      caseId: 4,
	      mode: 1
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "Share",
	      options: options,
	      id: create_fragment$h.name
	    });
	    return _this;
	  }

	  _createClass(Share, [{
	    key: "text",
	    get: function get() {
	      throw new Error("<Share>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Share>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "caseId",
	    get: function get() {
	      throw new Error("<Share>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Share>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "mode",
	    get: function get() {
	      throw new Error("<Share>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Share>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return Share;
	}(SvelteComponentDev);

	var file$h = "src/components/Switch.svelte";

	function get_each_context$3(ctx, list, i) {
	  var child_ctx = ctx.slice();
	  child_ctx[11] = list[i];
	  return child_ctx;
	} // (59:0) {:else}


	function create_else_block(ctx) {
	  var div2;
	  var div1;
	  var div0;
	  var t0;
	  var div0_id_value;
	  var t1;
	  var div1_aria_labelledby_value;
	  var div1_id_value;
	  var each_value =
	  /*options*/
	  ctx[3];
	  validate_each_argument(each_value);
	  var each_blocks = [];

	  for (var i = 0; i < each_value.length; i += 1) {
	    each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
	  }

	  var block = {
	    c: function create() {
	      div2 = element("div");
	      div1 = element("div");
	      div0 = element("div");
	      t0 = text(
	      /*label*/
	      ctx[1]);
	      t1 = space();

	      for (var _i = 0; _i < each_blocks.length; _i += 1) {
	        each_blocks[_i].c();
	      }

	      attr_dev(div0, "class", "legend svelte-ao2ii4");
	      attr_dev(div0, "id", div0_id_value = "label-".concat(
	      /*uniqueID*/
	      ctx[6]));
	      add_location(div0, file$h, 65, 4, 1754);
	      attr_dev(div1, "role", "radiogroup");
	      attr_dev(div1, "class", "group-container svelte-ao2ii4");
	      attr_dev(div1, "aria-labelledby", div1_aria_labelledby_value = "label-".concat(
	      /*uniqueID*/
	      ctx[6]));
	      set_style(div1, "font-size",
	      /*fontSize*/
	      ctx[4] + "px");
	      attr_dev(div1, "id", div1_id_value = "group-".concat(
	      /*uniqueID*/
	      ctx[6]));
	      add_location(div1, file$h, 60, 4, 1587);
	      attr_dev(div2, "class", "s s--multi svelte-ao2ii4");
	      add_location(div2, file$h, 59, 0, 1558);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div2, anchor);
	      append_dev(div2, div1);
	      append_dev(div1, div0);
	      append_dev(div0, t0);
	      append_dev(div1, t1);

	      for (var _i2 = 0; _i2 < each_blocks.length; _i2 += 1) {
	        each_blocks[_i2].m(div1, null);
	      }
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*label*/
	      2) set_data_dev(t0,
	      /*label*/
	      ctx[1]);

	      if (dirty &
	      /*options, uniqueID, value*/
	      73) {
	        each_value =
	        /*options*/
	        ctx[3];
	        validate_each_argument(each_value);

	        var _i3;

	        for (_i3 = 0; _i3 < each_value.length; _i3 += 1) {
	          var child_ctx = get_each_context$3(ctx, each_value, _i3);

	          if (each_blocks[_i3]) {
	            each_blocks[_i3].p(child_ctx, dirty);
	          } else {
	            each_blocks[_i3] = create_each_block$3(child_ctx);

	            each_blocks[_i3].c();

	            each_blocks[_i3].m(div1, null);
	          }
	        }

	        for (; _i3 < each_blocks.length; _i3 += 1) {
	          each_blocks[_i3].d(1);
	        }

	        each_blocks.length = each_value.length;
	      }

	      if (dirty &
	      /*fontSize*/
	      16) {
	        set_style(div1, "font-size",
	        /*fontSize*/
	        ctx[4] + "px");
	      }
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div2);
	      destroy_each(each_blocks, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_else_block.name,
	    type: "else",
	    source: "(59:0) {:else}",
	    ctx: ctx
	  });
	  return block;
	} // (49:29) 


	function create_if_block_1$3(ctx) {
	  var div;
	  var span;
	  var t0;
	  var span_id_value;
	  var t1;
	  var button;
	  var button_aria_labelledby_value;
	  var mounted;
	  var dispose;
	  var block = {
	    c: function create() {
	      div = element("div");
	      span = element("span");
	      t0 = text(
	      /*label*/
	      ctx[1]);
	      t1 = space();
	      button = element("button");
	      attr_dev(span, "id", span_id_value = "switch-".concat(
	      /*uniqueID*/
	      ctx[6]));
	      attr_dev(span, "class", "svelte-ao2ii4");
	      add_location(span, file$h, 50, 4, 1338);
	      attr_dev(button, "role", "switch");
	      attr_dev(button, "aria-checked",
	      /*checked*/
	      ctx[5]);
	      attr_dev(button, "aria-labelledby", button_aria_labelledby_value = "switch-".concat(
	      /*uniqueID*/
	      ctx[6]));
	      attr_dev(button, "class", "svelte-ao2ii4");
	      add_location(button, file$h, 51, 4, 1389);
	      attr_dev(div, "class", "s s--slider svelte-ao2ii4");
	      set_style(div, "font-size",
	      /*fontSize*/
	      ctx[4] + "px");
	      add_location(div, file$h, 49, 0, 1277);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div, anchor);
	      append_dev(div, span);
	      append_dev(span, t0);
	      append_dev(div, t1);
	      append_dev(div, button);

	      if (!mounted) {
	        dispose = listen_dev(button, "click",
	        /*handleClick*/
	        ctx[7], false, false, false);
	        mounted = true;
	      }
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*label*/
	      2) set_data_dev(t0,
	      /*label*/
	      ctx[1]);

	      if (dirty &
	      /*checked*/
	      32) {
	        attr_dev(button, "aria-checked",
	        /*checked*/
	        ctx[5]);
	      }

	      if (dirty &
	      /*fontSize*/
	      16) {
	        set_style(div, "font-size",
	        /*fontSize*/
	        ctx[4] + "px");
	      }
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div);
	      mounted = false;
	      dispose();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_1$3.name,
	    type: "if",
	    source: "(49:29) ",
	    ctx: ctx
	  });
	  return block;
	} // (37:0) {#if design == 'inner'}


	function create_if_block$8(ctx) {
	  var div;
	  var span0;
	  var t0;
	  var span0_id_value;
	  var t1;
	  var button;
	  var span1;
	  var t3;
	  var span2;
	  var button_aria_labelledby_value;
	  var mounted;
	  var dispose;
	  var block = {
	    c: function create() {
	      div = element("div");
	      span0 = element("span");
	      t0 = text(
	      /*label*/
	      ctx[1]);
	      t1 = space();
	      button = element("button");
	      span1 = element("span");
	      span1.textContent = "on";
	      t3 = space();
	      span2 = element("span");
	      span2.textContent = "off";
	      attr_dev(span0, "id", span0_id_value = "switch-".concat(
	      /*uniqueID*/
	      ctx[6]));
	      attr_dev(span0, "class", "svelte-ao2ii4");
	      add_location(span0, file$h, 38, 4, 978);
	      attr_dev(span1, "class", "svelte-ao2ii4");
	      add_location(span1, file$h, 44, 12, 1181);
	      attr_dev(span2, "class", "svelte-ao2ii4");
	      add_location(span2, file$h, 45, 12, 1209);
	      attr_dev(button, "role", "switch");
	      attr_dev(button, "aria-checked",
	      /*checked*/
	      ctx[5]);
	      attr_dev(button, "aria-labelledby", button_aria_labelledby_value = "switch-".concat(
	      /*uniqueID*/
	      ctx[6]));
	      attr_dev(button, "class", "svelte-ao2ii4");
	      add_location(button, file$h, 39, 4, 1029);
	      attr_dev(div, "class", "s s--inner svelte-ao2ii4");
	      add_location(div, file$h, 37, 0, 949);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div, anchor);
	      append_dev(div, span0);
	      append_dev(span0, t0);
	      append_dev(div, t1);
	      append_dev(div, button);
	      append_dev(button, span1);
	      append_dev(button, t3);
	      append_dev(button, span2);

	      if (!mounted) {
	        dispose = listen_dev(button, "click",
	        /*handleClick*/
	        ctx[7], false, false, false);
	        mounted = true;
	      }
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*label*/
	      2) set_data_dev(t0,
	      /*label*/
	      ctx[1]);

	      if (dirty &
	      /*checked*/
	      32) {
	        attr_dev(button, "aria-checked",
	        /*checked*/
	        ctx[5]);
	      }
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div);
	      mounted = false;
	      dispose();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$8.name,
	    type: "if",
	    source: "(37:0) {#if design == 'inner'}",
	    ctx: ctx
	  });
	  return block;
	} // (67:8) {#each options as option}


	function create_each_block$3(ctx) {
	  var input;
	  var input_id_value;
	  var input_value_value;
	  var t0;
	  var label_1;
	  var t1_value =
	  /*option*/
	  ctx[11] + "";
	  var t1;
	  var t2;
	  var label_1_for_value;
	  var mounted;
	  var dispose;
	  var block = {
	    c: function create() {
	      input = element("input");
	      t0 = space();
	      label_1 = element("label");
	      t1 = text(t1_value);
	      t2 = space();
	      attr_dev(input, "type", "radio");
	      attr_dev(input, "id", input_id_value = "".concat(
	      /*option*/
	      ctx[11], "-").concat(
	      /*uniqueID*/
	      ctx[6]));
	      input.__value = input_value_value =
	      /*option*/
	      ctx[11];
	      input.value = input.__value;
	      attr_dev(input, "class", "svelte-ao2ii4");
	      /*$$binding_groups*/

	      ctx[9][0].push(input);
	      add_location(input, file$h, 67, 12, 1859);
	      attr_dev(label_1, "for", label_1_for_value = "".concat(
	      /*option*/
	      ctx[11], "-").concat(
	      /*uniqueID*/
	      ctx[6]));
	      attr_dev(label_1, "class", "svelte-ao2ii4");
	      add_location(label_1, file$h, 68, 12, 1955);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, input, anchor);
	      input.checked = input.__value ===
	      /*value*/
	      ctx[0];
	      insert_dev(target, t0, anchor);
	      insert_dev(target, label_1, anchor);
	      append_dev(label_1, t1);
	      append_dev(label_1, t2);

	      if (!mounted) {
	        dispose = listen_dev(input, "change",
	        /*input_change_handler*/
	        ctx[8]);
	        mounted = true;
	      }
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*options*/
	      8 && input_id_value !== (input_id_value = "".concat(
	      /*option*/
	      ctx[11], "-").concat(
	      /*uniqueID*/
	      ctx[6]))) {
	        attr_dev(input, "id", input_id_value);
	      }

	      if (dirty &
	      /*options*/
	      8 && input_value_value !== (input_value_value =
	      /*option*/
	      ctx[11])) {
	        prop_dev(input, "__value", input_value_value);
	        input.value = input.__value;
	      }

	      if (dirty &
	      /*value*/
	      1) {
	        input.checked = input.__value ===
	        /*value*/
	        ctx[0];
	      }

	      if (dirty &
	      /*options*/
	      8 && t1_value !== (t1_value =
	      /*option*/
	      ctx[11] + "")) set_data_dev(t1, t1_value);

	      if (dirty &
	      /*options*/
	      8 && label_1_for_value !== (label_1_for_value = "".concat(
	      /*option*/
	      ctx[11], "-").concat(
	      /*uniqueID*/
	      ctx[6]))) {
	        attr_dev(label_1, "for", label_1_for_value);
	      }
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(input);
	      /*$$binding_groups*/

	      ctx[9][0].splice(
	      /*$$binding_groups*/
	      ctx[9][0].indexOf(input), 1);
	      if (detaching) detach_dev(t0);
	      if (detaching) detach_dev(label_1);
	      mounted = false;
	      dispose();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_each_block$3.name,
	    type: "each",
	    source: "(67:8) {#each options as option}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$i(ctx) {
	  var if_block_anchor;

	  function select_block_type(ctx, dirty) {
	    if (
	    /*design*/
	    ctx[2] == "inner") return create_if_block$8;
	    if (
	    /*design*/
	    ctx[2] == "slider") return create_if_block_1$3;
	    return create_else_block;
	  }

	  var current_block_type = select_block_type(ctx);
	  var if_block = current_block_type(ctx);
	  var block = {
	    c: function create() {
	      if_block.c();
	      if_block_anchor = empty();
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      if_block.m(target, anchor);
	      insert_dev(target, if_block_anchor, anchor);
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
	        if_block.p(ctx, dirty);
	      } else {
	        if_block.d(1);
	        if_block = current_block_type(ctx);

	        if (if_block) {
	          if_block.c();
	          if_block.m(if_block_anchor.parentNode, if_block_anchor);
	        }
	      }
	    },
	    i: noop,
	    o: noop,
	    d: function destroy(detaching) {
	      if_block.d(detaching);
	      if (detaching) detach_dev(if_block_anchor);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$i.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$i($$self, $$props, $$invalidate) {
	  var label = $$props.label;
	  var _$$props$design = $$props.design,
	      design = _$$props$design === void 0 ? "inner label" : _$$props$design;
	  var _$$props$options = $$props.options,
	      options = _$$props$options === void 0 ? [] : _$$props$options;
	  var _$$props$fontSize = $$props.fontSize,
	      fontSize = _$$props$fontSize === void 0 ? 16 : _$$props$fontSize;
	  var _$$props$value = $$props.value,
	      value = _$$props$value === void 0 ? "off" : _$$props$value;
	  var checked = false;
	  var uniqueID = Math.floor(Math.random() * 100);

	  function handleClick(event) {
	    var target = event.target;
	    var state = target.getAttribute("aria-checked");
	    $$invalidate(5, checked = state === "true" ? false : true);
	    $$invalidate(0, value = checked === true ? "on" : "off");
	  }

	  var slugify = function slugify() {
	    var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
	    return str.toLowerCase().replace(/ /g, "-").replace(/\./g, "");
	  };

	  var writable_props = ["label", "design", "options", "fontSize", "value"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Switch> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Switch", $$slots, []);
	  var $$binding_groups = [[]];

	  function input_change_handler() {
	    value = this.__value;
	    $$invalidate(0, value);
	  }

	  $$self.$$set = function ($$props) {
	    if ("label" in $$props) $$invalidate(1, label = $$props.label);
	    if ("design" in $$props) $$invalidate(2, design = $$props.design);
	    if ("options" in $$props) $$invalidate(3, options = $$props.options);
	    if ("fontSize" in $$props) $$invalidate(4, fontSize = $$props.fontSize);
	    if ("value" in $$props) $$invalidate(0, value = $$props.value);
	  };

	  $$self.$capture_state = function () {
	    return {
	      label: label,
	      design: design,
	      options: options,
	      fontSize: fontSize,
	      value: value,
	      checked: checked,
	      uniqueID: uniqueID,
	      handleClick: handleClick,
	      slugify: slugify
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("label" in $$props) $$invalidate(1, label = $$props.label);
	    if ("design" in $$props) $$invalidate(2, design = $$props.design);
	    if ("options" in $$props) $$invalidate(3, options = $$props.options);
	    if ("fontSize" in $$props) $$invalidate(4, fontSize = $$props.fontSize);
	    if ("value" in $$props) $$invalidate(0, value = $$props.value);
	    if ("checked" in $$props) $$invalidate(5, checked = $$props.checked);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [value, label, design, options, fontSize, checked, uniqueID, handleClick, input_change_handler, $$binding_groups];
	}

	var Switch = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(Switch, _SvelteComponentDev);

	  var _super = _createSuper(Switch);

	  function Switch(options) {
	    var _this;

	    _classCallCheck(this, Switch);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$i, create_fragment$i, safe_not_equal, {
	      label: 1,
	      design: 2,
	      options: 3,
	      fontSize: 4,
	      value: 0
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "Switch",
	      options: options,
	      id: create_fragment$i.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*label*/
	    ctx[1] === undefined && !("label" in props)) {
	      console.warn("<Switch> was created without expected prop 'label'");
	    }

	    return _this;
	  }

	  _createClass(Switch, [{
	    key: "label",
	    get: function get() {
	      throw new Error("<Switch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Switch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "design",
	    get: function get() {
	      throw new Error("<Switch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Switch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "options",
	    get: function get() {
	      throw new Error("<Switch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Switch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "fontSize",
	    get: function get() {
	      throw new Error("<Switch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Switch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "value",
	    get: function get() {
	      throw new Error("<Switch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Switch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return Switch;
	}(SvelteComponentDev);

	var file$i = "src/components/CheckboxSources.svelte"; // (23:4) <Checkbox id="checkboxpanel-checkbox-sourcesSwitch"               checked={$sourcesSwitch}               on:click={handleClick}              >

	function create_default_slot$4(ctx) {
	  var span;
	  var copytooltipable_action;
	  var mounted;
	  var dispose;
	  var block = {
	    c: function create() {
	      span = element("span");
	      span.textContent = "Show/Hide Sources";
	      attr_dev(span, "class", "svelte-1f42r7e");
	      add_location(span, file$i, 26, 6, 681);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, span, anchor);

	      if (!mounted) {
	        dispose = action_destroyer(copytooltipable_action = copytooltipable.call(null, span, {
	          content: "Toggles filter visibility.",
	          showClickMessage: false
	        }));
	        mounted = true;
	      }
	    },
	    p: noop,
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(span);
	      mounted = false;
	      dispose();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_default_slot$4.name,
	    type: "slot",
	    source: "(23:4) <Checkbox id=\\\"checkboxpanel-checkbox-sourcesSwitch\\\"               checked={$sourcesSwitch}               on:click={handleClick}              >",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$j(ctx) {
	  var ul;
	  var li;
	  var checkbox;
	  var current;
	  checkbox = new Checkbox({
	    props: {
	      id: "checkboxpanel-checkbox-sourcesSwitch",
	      checked:
	      /*$sourcesSwitch*/
	      ctx[0],
	      $$slots: {
	        default: [create_default_slot$4]
	      },
	      $$scope: {
	        ctx: ctx
	      }
	    },
	    $$inline: true
	  });
	  checkbox.$on("click",
	  /*handleClick*/
	  ctx[1]);
	  var block = {
	    c: function create() {
	      ul = element("ul");
	      li = element("li");
	      create_component(checkbox.$$.fragment);
	      attr_dev(li, "class", "svelte-1f42r7e");
	      add_location(li, file$i, 21, 2, 523);
	      attr_dev(ul, "class", "checkboxpanel-wrapper svelte-1f42r7e");
	      add_location(ul, file$i, 20, 0, 486);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, ul, anchor);
	      append_dev(ul, li);
	      mount_component(checkbox, li, null);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      var checkbox_changes = {};
	      if (dirty &
	      /*$sourcesSwitch*/
	      1) checkbox_changes.checked =
	      /*$sourcesSwitch*/
	      ctx[0];

	      if (dirty &
	      /*$$scope*/
	      4) {
	        checkbox_changes.$$scope = {
	          dirty: dirty,
	          ctx: ctx
	        };
	      }

	      checkbox.$set(checkbox_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(checkbox.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(checkbox.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(ul);
	      destroy_component(checkbox);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$j.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$j($$self, $$props, $$invalidate) {
	  var $sourcesSwitch;
	  validate_store(sourcesSwitch, "sourcesSwitch");
	  component_subscribe($$self, sourcesSwitch, function ($$value) {
	    return $$invalidate(0, $sourcesSwitch = $$value);
	  });

	  function handleClick() {
	    set_store_value(sourcesSwitch, $sourcesSwitch = !$sourcesSwitch);
	  }

	  var writable_props = [];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<CheckboxSources> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("CheckboxSources", $$slots, []);

	  $$self.$capture_state = function () {
	    return {
	      highlightPolarization: highlightPolarization,
	      highlightCib: highlightCib,
	      controlsFilter: controlsFilter,
	      sourcesSwitch: sourcesSwitch,
	      centroidSwitch: centroidSwitch,
	      polarizationFilter: polarizationFilter,
	      polarizationDef: polarizationDef,
	      polarizationScale: polarizationScale,
	      copytooltipable: copytooltipable,
	      Checkbox: Checkbox,
	      Slider: Slider,
	      handleClick: handleClick,
	      $sourcesSwitch: $sourcesSwitch
	    };
	  };

	  return [$sourcesSwitch, handleClick];
	}

	var CheckboxSources = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(CheckboxSources, _SvelteComponentDev);

	  var _super = _createSuper(CheckboxSources);

	  function CheckboxSources(options) {
	    var _this;

	    _classCallCheck(this, CheckboxSources);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$j, create_fragment$j, safe_not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "CheckboxSources",
	      options: options,
	      id: create_fragment$j.name
	    });
	    return _this;
	  }

	  return CheckboxSources;
	}(SvelteComponentDev);

	var console_1$3 = globals.console;
	var file$j = "src/components/Controls.svelte"; // (75:0) {#if (timePoints)}

	function create_if_block$9(ctx) {
	  var div4;
	  var div1;
	  var searchtext;
	  var t0;
	  var slider;
	  var t1;
	  var dropdown0;
	  var t2;
	  var dropdown1;
	  var t3;
	  var dropdown2;
	  var t4;
	  var button;
	  var t6;
	  var t7;
	  var div0;
	  var switch_1;
	  var updating_value;
	  var t8;
	  var p;
	  var t9;
	  var t10;
	  var t11;
	  var div2;
	  var checkboxpanel;
	  var t12;
	  var div3;
	  var checkboxsources;
	  var current;
	  var mounted;
	  var dispose;
	  searchtext = new SearchText({
	    props: {
	      searchString:
	      /*$textSearchFilter*/
	      ctx[2],
	      label: "Search"
	    },
	    $$inline: true
	  });
	  searchtext.$on("change",
	  /*change_handler*/
	  ctx[12]);
	  searchtext.$on("reset",
	  /*reset_handler*/
	  ctx[13]);
	  slider = new Slider({
	    props: {
	      value:
	      /*$attributionScoreFilter*/
	      ctx[3],
	      label: "Attribution Score",
	      min: attributionScoreDef[0],
	      max: attributionScoreDef[1],
	      showHandleLabels: false,
	      startColor:
	      /*$attributionScoreScale*/
	      ctx[4](attributionScoreDef[0]),
	      stopColor:
	      /*$attributionScoreScale*/
	      ctx[4](attributionScoreDef[1])
	    },
	    $$inline: true
	  });
	  slider.$on("changed",
	  /*changed_handler*/
	  ctx[14]);
	  dropdown0 = new Dropdown({
	    props: {
	      items: addCount(
	      /*$disinformantNationFilter*/
	      ctx[5], "disinformantNation",
	      /*timePoints*/
	      ctx[0]),
	      label: "Continent",
	      superior: true
	    },
	    $$inline: true
	  });
	  dropdown0.$on("itemsAdded",
	  /*itemsAdded_handler*/
	  ctx[15]);
	  dropdown0.$on("itemsRemoved",
	  /*itemsRemoved_handler*/
	  ctx[16]);
	  dropdown1 = new Dropdown({
	    props: {
	      items: addCount(
	      /*$dietFilter*/
	      ctx[6], "diet",
	      /*timePoints*/
	      ctx[0]),
	      label: "Diet"
	    },
	    $$inline: true
	  });
	  dropdown1.$on("itemsAdded",
	  /*itemsAdded_handler_1*/
	  ctx[17]);
	  dropdown1.$on("itemsRemoved",
	  /*itemsRemoved_handler_1*/
	  ctx[18]);
	  dropdown2 = new Dropdown({
	    props: {
	      items: addCount(
	      /*$timeperiodFilter*/
	      ctx[7], "periodEra",
	      /*timePoints*/
	      ctx[0]),
	      label: "Time Periods",
	      superior: true
	    },
	    $$inline: true
	  });
	  dropdown2.$on("itemsAdded",
	  /*itemsAdded_handler_2*/
	  ctx[19]);
	  dropdown2.$on("itemsRemoved",
	  /*itemsRemoved_handler_2*/
	  ctx[20]);
	  var if_block =
	  /*$fossilDatapoints*/
	  ctx[8] && create_if_block_1$4(ctx);

	  function switch_1_value_binding(value) {
	    /*switch_1_value_binding*/
	    ctx[22].call(null, value);
	  }

	  var switch_1_props = {
	    label: "Toggle Pangea",
	    design: "inner"
	  };

	  if (
	  /*$switchValueStore*/
	  ctx[9] !== void 0) {
	    switch_1_props.value =
	    /*$switchValueStore*/
	    ctx[9];
	  }

	  switch_1 = new Switch({
	    props: switch_1_props,
	    $$inline: true
	  });
	  binding_callbacks.push(function () {
	    return bind$1(switch_1, "value", switch_1_value_binding);
	  });
	  checkboxpanel = new CheckboxPanel({
	    $$inline: true
	  });
	  checkboxsources = new CheckboxSources({
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      div4 = element("div");
	      div1 = element("div");
	      create_component(searchtext.$$.fragment);
	      t0 = space();
	      create_component(slider.$$.fragment);
	      t1 = space();
	      create_component(dropdown0.$$.fragment);
	      t2 = space();
	      create_component(dropdown1.$$.fragment);
	      t3 = space();
	      create_component(dropdown2.$$.fragment);
	      t4 = space();
	      button = element("button");
	      button.textContent = "Reset";
	      t6 = space();
	      if (if_block) if_block.c();
	      t7 = space();
	      div0 = element("div");
	      create_component(switch_1.$$.fragment);
	      t8 = space();
	      p = element("p");
	      t9 = text("Pangea is ");
	      t10 = text(
	      /*$switchValueStore*/
	      ctx[9]);
	      t11 = space();
	      div2 = element("div");
	      create_component(checkboxpanel.$$.fragment);
	      t12 = space();
	      div3 = element("div");
	      create_component(checkboxsources.$$.fragment);
	      attr_dev(button, "class", "reset-filters svelte-8kbhwc");
	      add_location(button, file$j, 132, 7, 5011);
	      add_location(p, file$j, 149, 10, 5467);
	      attr_dev(div0, "class", "dropdown pangea-switch svelte-8kbhwc");
	      add_location(div0, file$j, 147, 8, 5331);
	      attr_dev(div1, "class", "controls svelte-8kbhwc");
	      toggle_class(div1, "hidden",
	      /*$controlsFilter*/
	      ctx[1]);
	      add_location(div1, file$j, 76, 4, 2060);
	      attr_dev(div2, "class", "checkbox-panel svelte-8kbhwc");
	      add_location(div2, file$j, 157, 4, 5571);
	      attr_dev(div3, "class", "checkbox-panel svelte-8kbhwc");
	      add_location(div3, file$j, 162, 4, 5663);
	      attr_dev(div4, "class", "controls-inner-wrapper svelte-8kbhwc");
	      add_location(div4, file$j, 75, 2, 2019);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div4, anchor);
	      append_dev(div4, div1);
	      mount_component(searchtext, div1, null);
	      append_dev(div1, t0);
	      mount_component(slider, div1, null);
	      append_dev(div1, t1);
	      mount_component(dropdown0, div1, null);
	      append_dev(div1, t2);
	      mount_component(dropdown1, div1, null);
	      append_dev(div1, t3);
	      mount_component(dropdown2, div1, null);
	      append_dev(div1, t4);
	      append_dev(div1, button);
	      append_dev(div1, t6);
	      if (if_block) if_block.m(div1, null);
	      append_dev(div1, t7);
	      append_dev(div1, div0);
	      mount_component(switch_1, div0, null);
	      append_dev(div0, t8);
	      append_dev(div0, p);
	      append_dev(p, t9);
	      append_dev(p, t10);
	      append_dev(div4, t11);
	      append_dev(div4, div2);
	      mount_component(checkboxpanel, div2, null);
	      append_dev(div4, t12);
	      append_dev(div4, div3);
	      mount_component(checkboxsources, div3, null);
	      current = true;

	      if (!mounted) {
	        dispose = listen_dev(button, "click",
	        /*click_handler*/
	        ctx[21], false, false, false);
	        mounted = true;
	      }
	    },
	    p: function update(ctx, dirty) {
	      var searchtext_changes = {};
	      if (dirty &
	      /*$textSearchFilter*/
	      4) searchtext_changes.searchString =
	      /*$textSearchFilter*/
	      ctx[2];
	      searchtext.$set(searchtext_changes);
	      var slider_changes = {};
	      if (dirty &
	      /*$attributionScoreFilter*/
	      8) slider_changes.value =
	      /*$attributionScoreFilter*/
	      ctx[3];
	      if (dirty &
	      /*$attributionScoreScale*/
	      16) slider_changes.startColor =
	      /*$attributionScoreScale*/
	      ctx[4](attributionScoreDef[0]);
	      if (dirty &
	      /*$attributionScoreScale*/
	      16) slider_changes.stopColor =
	      /*$attributionScoreScale*/
	      ctx[4](attributionScoreDef[1]);
	      slider.$set(slider_changes);
	      var dropdown0_changes = {};
	      if (dirty &
	      /*$disinformantNationFilter, timePoints*/
	      33) dropdown0_changes.items = addCount(
	      /*$disinformantNationFilter*/
	      ctx[5], "disinformantNation",
	      /*timePoints*/
	      ctx[0]);
	      dropdown0.$set(dropdown0_changes);
	      var dropdown1_changes = {};
	      if (dirty &
	      /*$dietFilter, timePoints*/
	      65) dropdown1_changes.items = addCount(
	      /*$dietFilter*/
	      ctx[6], "diet",
	      /*timePoints*/
	      ctx[0]);
	      dropdown1.$set(dropdown1_changes);
	      var dropdown2_changes = {};
	      if (dirty &
	      /*$timeperiodFilter, timePoints*/
	      129) dropdown2_changes.items = addCount(
	      /*$timeperiodFilter*/
	      ctx[7], "periodEra",
	      /*timePoints*/
	      ctx[0]);
	      dropdown2.$set(dropdown2_changes);

	      if (
	      /*$fossilDatapoints*/
	      ctx[8]) {
	        if (if_block) {
	          if_block.p(ctx, dirty);

	          if (dirty &
	          /*$fossilDatapoints*/
	          256) {
	            transition_in(if_block, 1);
	          }
	        } else {
	          if_block = create_if_block_1$4(ctx);
	          if_block.c();
	          transition_in(if_block, 1);
	          if_block.m(div1, t7);
	        }
	      } else if (if_block) {
	        group_outros();
	        transition_out(if_block, 1, 1, function () {
	          if_block = null;
	        });
	        check_outros();
	      }

	      var switch_1_changes = {};

	      if (!updating_value && dirty &
	      /*$switchValueStore*/
	      512) {
	        updating_value = true;
	        switch_1_changes.value =
	        /*$switchValueStore*/
	        ctx[9];
	        add_flush_callback(function () {
	          return updating_value = false;
	        });
	      }

	      switch_1.$set(switch_1_changes);
	      if (!current || dirty &
	      /*$switchValueStore*/
	      512) set_data_dev(t10,
	      /*$switchValueStore*/
	      ctx[9]);

	      if (dirty &
	      /*$controlsFilter*/
	      2) {
	        toggle_class(div1, "hidden",
	        /*$controlsFilter*/
	        ctx[1]);
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(searchtext.$$.fragment, local);
	      transition_in(slider.$$.fragment, local);
	      transition_in(dropdown0.$$.fragment, local);
	      transition_in(dropdown1.$$.fragment, local);
	      transition_in(dropdown2.$$.fragment, local);
	      transition_in(if_block);
	      transition_in(switch_1.$$.fragment, local);
	      transition_in(checkboxpanel.$$.fragment, local);
	      transition_in(checkboxsources.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(searchtext.$$.fragment, local);
	      transition_out(slider.$$.fragment, local);
	      transition_out(dropdown0.$$.fragment, local);
	      transition_out(dropdown1.$$.fragment, local);
	      transition_out(dropdown2.$$.fragment, local);
	      transition_out(if_block);
	      transition_out(switch_1.$$.fragment, local);
	      transition_out(checkboxpanel.$$.fragment, local);
	      transition_out(checkboxsources.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div4);
	      destroy_component(searchtext);
	      destroy_component(slider);
	      destroy_component(dropdown0);
	      destroy_component(dropdown1);
	      destroy_component(dropdown2);
	      if (if_block) if_block.d();
	      destroy_component(switch_1);
	      destroy_component(checkboxpanel);
	      destroy_component(checkboxsources);
	      mounted = false;
	      dispose();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$9.name,
	    type: "if",
	    source: "(75:0) {#if (timePoints)}",
	    ctx: ctx
	  });
	  return block;
	} // (141:8) {#if ($fossilDatapoints)}


	function create_if_block_1$4(ctx) {
	  var fossildropdown;
	  var current;
	  fossildropdown = new Fossildropdown({
	    props: {
	      items: fossilCount(
	      /*fossilFilter*/
	      ctx[10],
	      /*$fossilDatapoints*/
	      ctx[8]),
	      label: "Fossil Datapoints"
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(fossildropdown.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(fossildropdown, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var fossildropdown_changes = {};
	      if (dirty &
	      /*$fossilDatapoints*/
	      256) fossildropdown_changes.items = fossilCount(
	      /*fossilFilter*/
	      ctx[10],
	      /*$fossilDatapoints*/
	      ctx[8]);
	      fossildropdown.$set(fossildropdown_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(fossildropdown.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(fossildropdown.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(fossildropdown, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_1$4.name,
	    type: "if",
	    source: "(141:8) {#if ($fossilDatapoints)}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$k(ctx) {
	  var if_block_anchor;
	  var current;
	  var if_block =
	  /*timePoints*/
	  ctx[0] && create_if_block$9(ctx);
	  var block = {
	    c: function create() {
	      if (if_block) if_block.c();
	      if_block_anchor = empty();
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      if (if_block) if_block.m(target, anchor);
	      insert_dev(target, if_block_anchor, anchor);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (
	      /*timePoints*/
	      ctx[0]) {
	        if (if_block) {
	          if_block.p(ctx, dirty);

	          if (dirty &
	          /*timePoints*/
	          1) {
	            transition_in(if_block, 1);
	          }
	        } else {
	          if_block = create_if_block$9(ctx);
	          if_block.c();
	          transition_in(if_block, 1);
	          if_block.m(if_block_anchor.parentNode, if_block_anchor);
	        }
	      } else if (if_block) {
	        group_outros();
	        transition_out(if_block, 1, 1, function () {
	          if_block = null;
	        });
	        check_outros();
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(if_block);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(if_block);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (if_block) if_block.d(detaching);
	      if (detaching) detach_dev(if_block_anchor);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$k.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function addCount(filter, property, timePoints) {
	  return filter.map(function (d) {
	    return _objectSpread2(_objectSpread2({}, d), {}, {
	      count: timePoints.map(function (d) {
	        return d[property];
	      }).flat().filter(function (a) {
	        return a === d.id;
	      }).length,
	      liveCount: timePoints.filter(function (d) {
	        return d.show;
	      }).map(function (d) {
	        return d[property];
	      }).flat().filter(function (a) {
	        return a === d.id;
	      }).length
	    });
	  });
	}

	function fossilCount(filter, dataPoints) {
	  console.log(dataPoints);
	  console.log(filter);
	  return filter.map(function (d, i) {
	    return {
	      id: i,
	      title: filter[i],
	      //   added: 'true',
	      count: filter.length,
	      liveCount: dataPoints[d].length
	    };
	  });
	}

	function instance$k($$self, $$props, $$invalidate) {
	  var $highlightPolarization;
	  var $highlightCib;
	  var $originalTimeDomain;
	  var $timeScale;
	  var $controlsFilter;
	  var $textSearchFilter;
	  var $attributionScoreFilter;
	  var $attributionScoreScale;
	  var $disinformantNationFilter;
	  var $dietFilter;
	  var $timeperiodFilter;
	  var $fossilDatapoints;
	  var $switchValueStore;
	  validate_store(highlightPolarization, "highlightPolarization");
	  component_subscribe($$self, highlightPolarization, function ($$value) {
	    return $$invalidate(23, $highlightPolarization = $$value);
	  });
	  validate_store(highlightCib, "highlightCib");
	  component_subscribe($$self, highlightCib, function ($$value) {
	    return $$invalidate(24, $highlightCib = $$value);
	  });
	  validate_store(originalTimeDomain, "originalTimeDomain");
	  component_subscribe($$self, originalTimeDomain, function ($$value) {
	    return $$invalidate(25, $originalTimeDomain = $$value);
	  });
	  validate_store(timeScale, "timeScale");
	  component_subscribe($$self, timeScale, function ($$value) {
	    return $$invalidate(26, $timeScale = $$value);
	  });
	  validate_store(controlsFilter, "controlsFilter");
	  component_subscribe($$self, controlsFilter, function ($$value) {
	    return $$invalidate(1, $controlsFilter = $$value);
	  });
	  validate_store(textSearchFilter, "textSearchFilter");
	  component_subscribe($$self, textSearchFilter, function ($$value) {
	    return $$invalidate(2, $textSearchFilter = $$value);
	  });
	  validate_store(attributionScoreFilter, "attributionScoreFilter");
	  component_subscribe($$self, attributionScoreFilter, function ($$value) {
	    return $$invalidate(3, $attributionScoreFilter = $$value);
	  });
	  validate_store(attributionScoreScale, "attributionScoreScale");
	  component_subscribe($$self, attributionScoreScale, function ($$value) {
	    return $$invalidate(4, $attributionScoreScale = $$value);
	  });
	  validate_store(disinformantNationFilter, "disinformantNationFilter");
	  component_subscribe($$self, disinformantNationFilter, function ($$value) {
	    return $$invalidate(5, $disinformantNationFilter = $$value);
	  });
	  validate_store(dietFilter, "dietFilter");
	  component_subscribe($$self, dietFilter, function ($$value) {
	    return $$invalidate(6, $dietFilter = $$value);
	  });
	  validate_store(timeperiodFilter, "timeperiodFilter");
	  component_subscribe($$self, timeperiodFilter, function ($$value) {
	    return $$invalidate(7, $timeperiodFilter = $$value);
	  });
	  validate_store(fossilDatapoints, "fossilDatapoints");
	  component_subscribe($$self, fossilDatapoints, function ($$value) {
	    return $$invalidate(8, $fossilDatapoints = $$value);
	  });
	  validate_store(switchValueStore, "switchValueStore");
	  component_subscribe($$self, switchValueStore, function ($$value) {
	    return $$invalidate(9, $switchValueStore = $$value);
	  });
	  var timePoints = $$props.timePoints;
	  var fossilFilter = ["cretaceous", "jurassic", "triassic"];

	  function handleButtonClick() {
	    selectAllFilters();
	    contextData.unselectAll();
	    set_store_value(highlightPolarization, $highlightPolarization = false);
	    set_store_value(highlightCib, $highlightCib = false);

	    if ($originalTimeDomain) {
	      $timeScale.domain($originalTimeDomain);
	      timeScale.set($timeScale);
	      set_store_value(originalTimeDomain, $originalTimeDomain = null);
	    }
	  }

	  var writable_props = ["timePoints"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$3.warn("<Controls> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Controls", $$slots, []);

	  var change_handler = function change_handler(e) {
	    return set_store_value(textSearchFilter, $textSearchFilter = e.detail);
	  };

	  var reset_handler = function reset_handler() {
	    return textSearchFilter.reset();
	  };

	  var changed_handler = function changed_handler(e) {
	    return set_store_value(attributionScoreFilter, $attributionScoreFilter = e.detail);
	  };

	  var itemsAdded_handler = function itemsAdded_handler(e) {
	    return disinformantNationFilter.select(e.detail);
	  };

	  var itemsRemoved_handler = function itemsRemoved_handler(e) {
	    return disinformantNationFilter.unselect(e.detail);
	  };

	  var itemsAdded_handler_1 = function itemsAdded_handler_1(e) {
	    return dietFilter.select(e.detail);
	  };

	  var itemsRemoved_handler_1 = function itemsRemoved_handler_1(e) {
	    return dietFilter.unselect(e.detail);
	  };

	  var itemsAdded_handler_2 = function itemsAdded_handler_2(e) {
	    return timeperiodFilter.select(e.detail);
	  };

	  var itemsRemoved_handler_2 = function itemsRemoved_handler_2(e) {
	    return timeperiodFilter.unselect(e.detail);
	  };

	  var click_handler = function click_handler() {
	    return handleButtonClick();
	  };

	  function switch_1_value_binding(value) {
	    $switchValueStore = value;
	    switchValueStore.set($switchValueStore);
	  }

	  $$self.$$set = function ($$props) {
	    if ("timePoints" in $$props) $$invalidate(0, timePoints = $$props.timePoints);
	  };

	  $$self.$capture_state = function () {
	    return {
	      disinformantNationFilter: disinformantNationFilter,
	      platformFilter: platformFilter,
	      methodFilter: methodFilter,
	      timeperiodFilter: timeperiodFilter,
	      sourceFilter: sourceFilter$1,
	      sourceCategoryFilter: sourceCategoryFilter,
	      dietFilter: dietFilter,
	      attributionScoreFilter: attributionScoreFilter,
	      attributionScoreDef: attributionScoreDef,
	      textSearchFilter: textSearchFilter,
	      selectAllFilters: selectAllFilters,
	      contextData: contextData,
	      originalTimeDomain: originalTimeDomain,
	      highlightPolarization: highlightPolarization,
	      highlightCib: highlightCib,
	      controlsFilter: controlsFilter,
	      timeScale: timeScale,
	      attributionScoreScale: attributionScoreScale,
	      select: select,
	      fossilDatapoints: fossilDatapoints,
	      switchValueStore: switchValueStore,
	      Dropdown: Dropdown,
	      Fossildropdown: Fossildropdown,
	      Slider: Slider,
	      SearchText: SearchText,
	      CheckboxPanel: CheckboxPanel,
	      Share: Share,
	      Switch: Switch,
	      CheckboxSources: CheckboxSources,
	      timePoints: timePoints,
	      addCount: addCount,
	      fossilFilter: fossilFilter,
	      fossilCount: fossilCount,
	      handleButtonClick: handleButtonClick,
	      $highlightPolarization: $highlightPolarization,
	      $highlightCib: $highlightCib,
	      $originalTimeDomain: $originalTimeDomain,
	      $timeScale: $timeScale,
	      $controlsFilter: $controlsFilter,
	      $textSearchFilter: $textSearchFilter,
	      $attributionScoreFilter: $attributionScoreFilter,
	      $attributionScoreScale: $attributionScoreScale,
	      $disinformantNationFilter: $disinformantNationFilter,
	      $dietFilter: $dietFilter,
	      $timeperiodFilter: $timeperiodFilter,
	      $fossilDatapoints: $fossilDatapoints,
	      $switchValueStore: $switchValueStore
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("timePoints" in $$props) $$invalidate(0, timePoints = $$props.timePoints);
	    if ("fossilFilter" in $$props) $$invalidate(10, fossilFilter = $$props.fossilFilter);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [timePoints, $controlsFilter, $textSearchFilter, $attributionScoreFilter, $attributionScoreScale, $disinformantNationFilter, $dietFilter, $timeperiodFilter, $fossilDatapoints, $switchValueStore, fossilFilter, handleButtonClick, change_handler, reset_handler, changed_handler, itemsAdded_handler, itemsRemoved_handler, itemsAdded_handler_1, itemsRemoved_handler_1, itemsAdded_handler_2, itemsRemoved_handler_2, click_handler, switch_1_value_binding];
	}

	var Controls = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(Controls, _SvelteComponentDev);

	  var _super = _createSuper(Controls);

	  function Controls(options) {
	    var _this;

	    _classCallCheck(this, Controls);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$k, create_fragment$k, safe_not_equal, {
	      timePoints: 0
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "Controls",
	      options: options,
	      id: create_fragment$k.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*timePoints*/
	    ctx[0] === undefined && !("timePoints" in props)) {
	      console_1$3.warn("<Controls> was created without expected prop 'timePoints'");
	    }

	    return _this;
	  }

	  _createClass(Controls, [{
	    key: "timePoints",
	    get: function get() {
	      throw new Error("<Controls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Controls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return Controls;
	}(SvelteComponentDev);

	var file$k = "src/components/Defs.svelte";

	function create_fragment$l(ctx) {
	  var defs;
	  var radialGradient0;
	  var stop0;
	  var stop1;
	  var radialGradient1;
	  var stop2;
	  var stop3;
	  var linearGradient0;
	  var stop4;
	  var stop5;
	  var stop5_offset_value;
	  var stop6;
	  var linearGradient1;
	  var stop7;
	  var stop8;
	  var stop9;
	  var stop10;
	  var marker;
	  var path;
	  var filter0;
	  var feImage0;
	  var filter1;
	  var feImage1;
	  var filter2;
	  var feImage2;
	  var filter3;
	  var feImage3;
	  var filter4;
	  var feImage4;
	  var filter5;
	  var feImage5;
	  var filter6;
	  var feImage6;
	  var filter7;
	  var feImage7;
	  var filter8;
	  var feImage8;
	  var filter9;
	  var feImage9;
	  var filter10;
	  var feImage10;
	  var filter11;
	  var feImage11;
	  var filter12;
	  var feImage12;
	  var filter13;
	  var feImage13;
	  var filter14;
	  var feImage14;
	  var filter15;
	  var feImage15;
	  var filter16;
	  var feImage16;
	  var filter17;
	  var feImage17;
	  var filter18;
	  var feImage18;
	  var block = {
	    c: function create() {
	      defs = svg_element("defs");
	      radialGradient0 = svg_element("radialGradient");
	      stop0 = svg_element("stop");
	      stop1 = svg_element("stop");
	      radialGradient1 = svg_element("radialGradient");
	      stop2 = svg_element("stop");
	      stop3 = svg_element("stop");
	      linearGradient0 = svg_element("linearGradient");
	      stop4 = svg_element("stop");
	      stop5 = svg_element("stop");
	      stop6 = svg_element("stop");
	      linearGradient1 = svg_element("linearGradient");
	      stop7 = svg_element("stop");
	      stop8 = svg_element("stop");
	      stop9 = svg_element("stop");
	      stop10 = svg_element("stop");
	      marker = svg_element("marker");
	      path = svg_element("path");
	      filter0 = svg_element("filter");
	      feImage0 = svg_element("feImage");
	      filter1 = svg_element("filter");
	      feImage1 = svg_element("feImage");
	      filter2 = svg_element("filter");
	      feImage2 = svg_element("feImage");
	      filter3 = svg_element("filter");
	      feImage3 = svg_element("feImage");
	      filter4 = svg_element("filter");
	      feImage4 = svg_element("feImage");
	      filter5 = svg_element("filter");
	      feImage5 = svg_element("feImage");
	      filter6 = svg_element("filter");
	      feImage6 = svg_element("feImage");
	      filter7 = svg_element("filter");
	      feImage7 = svg_element("feImage");
	      filter8 = svg_element("filter");
	      feImage8 = svg_element("feImage");
	      filter9 = svg_element("filter");
	      feImage9 = svg_element("feImage");
	      filter10 = svg_element("filter");
	      feImage10 = svg_element("feImage");
	      filter11 = svg_element("filter");
	      feImage11 = svg_element("feImage");
	      filter12 = svg_element("filter");
	      feImage12 = svg_element("feImage");
	      filter13 = svg_element("filter");
	      feImage13 = svg_element("feImage");
	      filter14 = svg_element("filter");
	      feImage14 = svg_element("feImage");
	      filter15 = svg_element("filter");
	      feImage15 = svg_element("feImage");
	      filter16 = svg_element("filter");
	      feImage16 = svg_element("feImage");
	      filter17 = svg_element("filter");
	      feImage17 = svg_element("feImage");
	      filter18 = svg_element("filter");
	      feImage18 = svg_element("feImage");
	      attr_dev(stop0, "offset", "40%");
	      set_style(stop0, "stop-color", "var(--bg)");
	      attr_dev(stop0, "stop-opacity", "0.7");
	      add_location(stop0, file$k, 7, 4, 183);
	      attr_dev(stop1, "offset", "100%");
	      set_style(stop1, "stop-color", "var(--bg)");
	      attr_dev(stop1, "stop-opacity", "0");
	      add_location(stop1, file$k, 8, 4, 259);
	      attr_dev(radialGradient0, "cx", "50%");
	      attr_dev(radialGradient0, "cy", "-30%");
	      attr_dev(radialGradient0, "r", "75%");
	      attr_dev(radialGradient0, "id", "radial-gradient");
	      add_location(radialGradient0, file$k, 6, 2, 114);
	      attr_dev(stop2, "offset", "40%");
	      set_style(stop2, "stop-color", "var(--preGreen)");
	      attr_dev(stop2, "stop-opacity", "0.7");
	      add_location(stop2, file$k, 12, 4, 428);
	      attr_dev(stop3, "offset", "100%");
	      set_style(stop3, "stop-color", "var(--preGreen)");
	      attr_dev(stop3, "stop-opacity", "0");
	      add_location(stop3, file$k, 13, 4, 510);
	      attr_dev(radialGradient1, "cx", "50%");
	      attr_dev(radialGradient1, "cy", "-30%");
	      attr_dev(radialGradient1, "r", "75%");
	      attr_dev(radialGradient1, "id", "green-radial-gradient");
	      add_location(radialGradient1, file$k, 11, 2, 353);
	      attr_dev(stop4, "offset", "0");
	      set_style(stop4, "stop-color", "var(--bg)");
	      set_style(stop4, "stop-opacity", "1");
	      add_location(stop4, file$k, 17, 4, 676);
	      attr_dev(stop5, "offset", stop5_offset_value = 1 / 1.1);
	      set_style(stop5, "stop-color", "var(--bg)");
	      set_style(stop5, "stop-opacity", "1");
	      add_location(stop5, file$k, 18, 4, 748);
	      attr_dev(stop6, "offset", "1");
	      set_style(stop6, "stop-color", "var(--bg)");
	      set_style(stop6, "stop-opacity", "0");
	      add_location(stop6, file$k, 19, 4, 826);
	      attr_dev(linearGradient0, "id", "bg-gradient");
	      attr_dev(linearGradient0, "x1", "0");
	      attr_dev(linearGradient0, "y1", "0");
	      attr_dev(linearGradient0, "x2", "0");
	      attr_dev(linearGradient0, "y2", "1");
	      add_location(linearGradient0, file$k, 16, 2, 610);
	      attr_dev(stop7, "offset", "0");
	      set_style(stop7, "stop-color", "var(--bg)");
	      add_location(stop7, file$k, 23, 4, 989);
	      attr_dev(stop8, "offset", "0.05");
	      set_style(stop8, "stop-color", "var(--dfrlab-gray)");
	      add_location(stop8, file$k, 24, 4, 1044);
	      attr_dev(stop9, "offset", "0.95");
	      set_style(stop9, "stop-color", "var(--dfrlab-gray)");
	      add_location(stop9, file$k, 25, 4, 1111);
	      attr_dev(stop10, "offset", "1");
	      set_style(stop10, "stop-color", "var(--bg)");
	      add_location(stop10, file$k, 26, 4, 1178);
	      attr_dev(linearGradient1, "id", "timeline-gradient");
	      attr_dev(linearGradient1, "x1", "0");
	      attr_dev(linearGradient1, "y1", "0");
	      attr_dev(linearGradient1, "x2", "1");
	      attr_dev(linearGradient1, "y2", "0");
	      add_location(linearGradient1, file$k, 22, 2, 917);
	      attr_dev(path, "d", "M 0 0 L 10 5 L 0 10 z");
	      add_location(path, file$k, 38, 4, 1443);
	      attr_dev(marker, "id", "arrow");
	      attr_dev(marker, "viewBox", "0 0 10 10");
	      attr_dev(marker, "refX", "5");
	      attr_dev(marker, "refY", "5");
	      attr_dev(marker, "markerWidth", "6");
	      attr_dev(marker, "markerHeight", "6");
	      attr_dev(marker, "orient", "auto-start-reverse");
	      set_style(marker, "fill", "var(--text-darkgray)");
	      add_location(marker, file$k, 29, 2, 1252);
	      xlink_attr(feImage0, "xlink:href", "/images/mammoth.svg");
	      add_location(feImage0, file$k, 46, 4, 1795);
	      attr_dev(filter0, "id", "mammoth_image");
	      attr_dev(filter0, "x", "0%");
	      attr_dev(filter0, "y", "0%");
	      attr_dev(filter0, "width", "100%");
	      attr_dev(filter0, "height", "100%");
	      add_location(filter0, file$k, 45, 0, 1722);
	      xlink_attr(feImage1, "xlink:href", "/images/raptor.svg");
	      add_location(feImage1, file$k, 50, 2, 1920);
	      attr_dev(filter1, "id", "raptor_image");
	      attr_dev(filter1, "x", "0%");
	      attr_dev(filter1, "y", "0%");
	      attr_dev(filter1, "width", "100%");
	      attr_dev(filter1, "height", "100%");
	      add_location(filter1, file$k, 49, 0, 1850);
	      xlink_attr(feImage2, "xlink:href", "/images/herbivore.svg");
	      add_location(feImage2, file$k, 54, 2, 2047);
	      attr_dev(filter2, "id", "herbivore_image");
	      attr_dev(filter2, "x", "0%");
	      attr_dev(filter2, "y", "0%");
	      attr_dev(filter2, "width", "100%");
	      attr_dev(filter2, "height", "100%");
	      add_location(filter2, file$k, 53, 0, 1974);
	      xlink_attr(feImage3, "xlink:href", "/images/spinosaur.jpg");
	      add_location(feImage3, file$k, 58, 2, 2179);
	      attr_dev(filter3, "id", "spinosaurus_image");
	      attr_dev(filter3, "x", "0%");
	      attr_dev(filter3, "y", "0%");
	      attr_dev(filter3, "width", "100%");
	      attr_dev(filter3, "height", "100%");
	      add_location(filter3, file$k, 57, 0, 2104);
	      xlink_attr(feImage4, "xlink:href", "/images/tyrannoskull.jpg");
	      add_location(feImage4, file$k, 62, 2, 2312);
	      attr_dev(filter4, "id", "tyrannoskull_image");
	      attr_dev(filter4, "x", "0%");
	      attr_dev(filter4, "y", "0%");
	      attr_dev(filter4, "width", "100%");
	      attr_dev(filter4, "height", "100%");
	      add_location(filter4, file$k, 61, 0, 2236);
	      xlink_attr(feImage5, "xlink:href", "/images/trexskull.jpeg");
	      add_location(feImage5, file$k, 66, 2, 2445);
	      attr_dev(filter5, "id", "trexskull_image");
	      attr_dev(filter5, "x", "0%");
	      attr_dev(filter5, "y", "0%");
	      attr_dev(filter5, "width", "100%");
	      attr_dev(filter5, "height", "100%");
	      add_location(filter5, file$k, 65, 0, 2372);
	      xlink_attr(feImage6, "xlink:href", "/images/aquatic.svg");
	      add_location(feImage6, file$k, 70, 2, 2574);
	      attr_dev(filter6, "id", "aquatic_image");
	      attr_dev(filter6, "x", "0%");
	      attr_dev(filter6, "y", "0%");
	      attr_dev(filter6, "width", "100%");
	      attr_dev(filter6, "height", "100%");
	      add_location(filter6, file$k, 69, 0, 2503);
	      xlink_attr(feImage7, "xlink:href", "/images/pterodactyl.svg");
	      add_location(feImage7, file$k, 74, 2, 2704);
	      attr_dev(filter7, "id", "pterodactyl_image");
	      attr_dev(filter7, "x", "0%");
	      attr_dev(filter7, "y", "0%");
	      attr_dev(filter7, "width", "100%");
	      attr_dev(filter7, "height", "100%");
	      add_location(filter7, file$k, 73, 0, 2629);
	      xlink_attr(feImage8, "xlink:href", "/images/stegosaurus.svg");
	      add_location(feImage8, file$k, 78, 2, 2838);
	      attr_dev(filter8, "id", "stegosaurus_image");
	      attr_dev(filter8, "x", "0%");
	      attr_dev(filter8, "y", "0%");
	      attr_dev(filter8, "width", "100%");
	      attr_dev(filter8, "height", "100%");
	      add_location(filter8, file$k, 77, 0, 2763);
	      xlink_attr(feImage9, "xlink:href", "/images/stegosaurus2.svg");
	      add_location(feImage9, file$k, 82, 2, 2973);
	      attr_dev(filter9, "id", "stegosaurus2_image");
	      attr_dev(filter9, "x", "0%");
	      attr_dev(filter9, "y", "0%");
	      attr_dev(filter9, "width", "100%");
	      attr_dev(filter9, "height", "100%");
	      add_location(filter9, file$k, 81, 0, 2897);
	      xlink_attr(feImage10, "xlink:href", "/images/lizard.svg");
	      add_location(feImage10, file$k, 86, 2, 3103);
	      attr_dev(filter10, "id", "lizard_image");
	      attr_dev(filter10, "x", "0%");
	      attr_dev(filter10, "y", "0%");
	      attr_dev(filter10, "width", "100%");
	      attr_dev(filter10, "height", "100%");
	      add_location(filter10, file$k, 85, 0, 3033);
	      xlink_attr(feImage11, "xlink:href", "/images/smallraptor.svg");
	      add_location(feImage11, file$k, 90, 2, 3232);
	      attr_dev(filter11, "id", "smallraptor_image");
	      attr_dev(filter11, "x", "0%");
	      attr_dev(filter11, "y", "0%");
	      attr_dev(filter11, "width", "100%");
	      attr_dev(filter11, "height", "100%");
	      add_location(filter11, file$k, 89, 0, 3157);
	      xlink_attr(feImage12, "xlink:href", "/images/seaskeleton.svg");
	      add_location(feImage12, file$k, 94, 2, 3366);
	      attr_dev(filter12, "id", "seaskeleton_image");
	      attr_dev(filter12, "x", "0%");
	      attr_dev(filter12, "y", "0%");
	      attr_dev(filter12, "width", "100%");
	      attr_dev(filter12, "height", "100%");
	      add_location(filter12, file$k, 93, 0, 3291);
	      xlink_attr(feImage13, "xlink:href", "/images/armored.svg");
	      add_location(feImage13, file$k, 98, 2, 3496);
	      attr_dev(filter13, "id", "armored_image");
	      attr_dev(filter13, "x", "0%");
	      attr_dev(filter13, "y", "0%");
	      attr_dev(filter13, "width", "100%");
	      attr_dev(filter13, "height", "100%");
	      add_location(filter13, file$k, 97, 0, 3425);
	      xlink_attr(feImage14, "xlink:href", "/images/tyrannosaurskeleton.svg");
	      add_location(feImage14, file$k, 102, 2, 3634);
	      attr_dev(filter14, "id", "tyrannosaurskeleton_image");
	      attr_dev(filter14, "x", "0%");
	      attr_dev(filter14, "y", "0%");
	      attr_dev(filter14, "width", "100%");
	      attr_dev(filter14, "height", "100%");
	      add_location(filter14, file$k, 101, 0, 3551);
	      xlink_attr(feImage15, "xlink:href", "/images/triceratops.svg");
	      add_location(feImage15, file$k, 106, 2, 3776);
	      attr_dev(filter15, "id", "triceratops_image");
	      attr_dev(filter15, "x", "0%");
	      attr_dev(filter15, "y", "0%");
	      attr_dev(filter15, "width", "100%");
	      attr_dev(filter15, "height", "100%");
	      add_location(filter15, file$k, 105, 0, 3701);
	      xlink_attr(feImage16, "xlink:href", "/images/talons.svg");
	      add_location(feImage16, file$k, 110, 2, 3905);
	      attr_dev(filter16, "id", "talons_image");
	      attr_dev(filter16, "x", "0%");
	      attr_dev(filter16, "y", "0%");
	      attr_dev(filter16, "width", "100%");
	      attr_dev(filter16, "height", "100%");
	      add_location(filter16, file$k, 109, 0, 3835);
	      xlink_attr(feImage17, "xlink:href", "/images/basilosaurus.svg");
	      add_location(feImage17, file$k, 114, 2, 4035);
	      attr_dev(filter17, "id", "basilosaurus_image");
	      attr_dev(filter17, "x", "0%");
	      attr_dev(filter17, "y", "0%");
	      attr_dev(filter17, "width", "100%");
	      attr_dev(filter17, "height", "100%");
	      add_location(filter17, file$k, 113, 0, 3959);
	      xlink_attr(feImage18, "xlink:href", "/images/duckbilled.svg");
	      add_location(feImage18, file$k, 118, 2, 4169);
	      attr_dev(filter18, "id", "duckbilled_image");
	      attr_dev(filter18, "x", "0%");
	      attr_dev(filter18, "y", "0%");
	      attr_dev(filter18, "width", "100%");
	      attr_dev(filter18, "height", "100%");
	      add_location(filter18, file$k, 117, 0, 4095);
	      add_location(defs, file$k, 5, 0, 105);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, defs, anchor);
	      append_dev(defs, radialGradient0);
	      append_dev(radialGradient0, stop0);
	      append_dev(radialGradient0, stop1);
	      append_dev(defs, radialGradient1);
	      append_dev(radialGradient1, stop2);
	      append_dev(radialGradient1, stop3);
	      append_dev(defs, linearGradient0);
	      append_dev(linearGradient0, stop4);
	      append_dev(linearGradient0, stop5);
	      append_dev(linearGradient0, stop6);
	      append_dev(defs, linearGradient1);
	      append_dev(linearGradient1, stop7);
	      append_dev(linearGradient1, stop8);
	      append_dev(linearGradient1, stop9);
	      append_dev(linearGradient1, stop10);
	      append_dev(defs, marker);
	      append_dev(marker, path);
	      append_dev(defs, filter0);
	      append_dev(filter0, feImage0);
	      append_dev(defs, filter1);
	      append_dev(filter1, feImage1);
	      append_dev(defs, filter2);
	      append_dev(filter2, feImage2);
	      append_dev(defs, filter3);
	      append_dev(filter3, feImage3);
	      append_dev(defs, filter4);
	      append_dev(filter4, feImage4);
	      append_dev(defs, filter5);
	      append_dev(filter5, feImage5);
	      append_dev(defs, filter6);
	      append_dev(filter6, feImage6);
	      append_dev(defs, filter7);
	      append_dev(filter7, feImage7);
	      append_dev(defs, filter8);
	      append_dev(filter8, feImage8);
	      append_dev(defs, filter9);
	      append_dev(filter9, feImage9);
	      append_dev(defs, filter10);
	      append_dev(filter10, feImage10);
	      append_dev(defs, filter11);
	      append_dev(filter11, feImage11);
	      append_dev(defs, filter12);
	      append_dev(filter12, feImage12);
	      append_dev(defs, filter13);
	      append_dev(filter13, feImage13);
	      append_dev(defs, filter14);
	      append_dev(filter14, feImage14);
	      append_dev(defs, filter15);
	      append_dev(filter15, feImage15);
	      append_dev(defs, filter16);
	      append_dev(filter16, feImage16);
	      append_dev(defs, filter17);
	      append_dev(filter17, feImage17);
	      append_dev(defs, filter18);
	      append_dev(filter18, feImage18);
	    },
	    p: noop,
	    i: noop,
	    o: noop,
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(defs);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$l.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$l($$self, $$props, $$invalidate) {
	  var writable_props = [];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Defs> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Defs", $$slots, []);

	  $$self.$capture_state = function () {
	    return {
	      width: width,
	      panelHeight: panelHeight
	    };
	  };

	  return [];
	}

	var Defs = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(Defs, _SvelteComponentDev);

	  var _super = _createSuper(Defs);

	  function Defs(options) {
	    var _this;

	    _classCallCheck(this, Defs);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$l, create_fragment$l, safe_not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "Defs",
	      options: options,
	      id: create_fragment$l.name
	    });
	    return _this;
	  }

	  return Defs;
	}(SvelteComponentDev);

	function brushable(node) {
	  var x;
	  var startX;
	  var width;

	  function handleMousedown(event) {
	    event.preventDefault();
	    x = startX = event.clientX;
	    node.dispatchEvent(new CustomEvent('brushstart', {
	      detail: {
	        x: x
	      }
	    }));
	    node.classList.add('brushed');
	    window.addEventListener('mousemove', handleMousemove);
	    window.addEventListener('mouseup', handleMouseup);
	  }

	  function handleMousemove(event) {
	    width = Math.abs(event.clientX - startX);
	    if (event.clientX < startX) x = event.clientX;
	    node.dispatchEvent(new CustomEvent('brush', {
	      detail: {
	        x: x,
	        width: width
	      }
	    }));
	  }

	  function handleMouseup() {
	    var x1 = x;
	    var x2 = x + width;
	    node.dispatchEvent(new CustomEvent('brushend', {
	      detail: {
	        x1: x1,
	        width: width,
	        x2: x2
	      }
	    }));
	    node.classList.remove('brushed');
	    window.removeEventListener('mousemove', handleMousemove);
	    window.removeEventListener('mouseup', handleMouseup);
	  }

	  node.addEventListener('mousedown', handleMousedown);
	  return {
	    destroy: function destroy() {
	      node.removeEventListener('mousedown', handleMousedown);
	    }
	  };
	}

	var file$l = "src/components/Brush.svelte"; // (106:0) {#if ($originalTimeDomain)}

	function create_if_block$a(ctx) {
	  var g;
	  var rect;
	  var rect_width_value;
	  var text_1;
	  var t;
	  var g_transform_value;
	  var mounted;
	  var dispose;
	  var block = {
	    c: function create() {
	      g = svg_element("g");
	      rect = svg_element("rect");
	      text_1 = svg_element("text");
	      t = text("Reset time scale");
	      attr_dev(rect, "x", "-3");
	      attr_dev(rect, "y", "-15");
	      attr_dev(rect, "width", rect_width_value =
	      /*resetText*/
	      ctx[5] ?
	      /*resetText*/
	      ctx[5].getComputedTextLength() + 6 : 0);
	      attr_dev(rect, "height", "20");
	      attr_dev(rect, "rx", "3");
	      attr_dev(rect, "ry", "3");
	      attr_dev(rect, "class", "svelte-16ldr5n");
	      add_location(rect, file$l, 109, 4, 2798);
	      attr_dev(text_1, "class", "disable-select svelte-16ldr5n");
	      add_location(text_1, file$l, 115, 4, 2969);
	      attr_dev(g, "class", "reset-brush svelte-16ldr5n");
	      attr_dev(g, "transform", g_transform_value = "translate(" + (
	      /*$timeScale*/
	      ctx[7].range()[0] -
	      /*$margin*/
	      ctx[8].left / 1.5) + " " + (
	      /*$panelHeight*/
	      ctx[9] + 50) + ")");
	      add_location(g, file$l, 106, 2, 2638);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, g, anchor);
	      append_dev(g, rect);
	      append_dev(g, text_1);
	      append_dev(text_1, t);
	      /*text_1_binding*/

	      ctx[16](text_1);

	      if (!mounted) {
	        dispose = listen_dev(g, "click",
	        /*handleResetButtonClick*/
	        ctx[15], false, false, false);
	        mounted = true;
	      }
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*resetText*/
	      32 && rect_width_value !== (rect_width_value =
	      /*resetText*/
	      ctx[5] ?
	      /*resetText*/
	      ctx[5].getComputedTextLength() + 6 : 0)) {
	        attr_dev(rect, "width", rect_width_value);
	      }

	      if (dirty &
	      /*$timeScale, $margin, $panelHeight*/
	      896 && g_transform_value !== (g_transform_value = "translate(" + (
	      /*$timeScale*/
	      ctx[7].range()[0] -
	      /*$margin*/
	      ctx[8].left / 1.5) + " " + (
	      /*$panelHeight*/
	      ctx[9] + 50) + ")")) {
	        attr_dev(g, "transform", g_transform_value);
	      }
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(g);
	      /*text_1_binding*/

	      ctx[16](null);
	      mounted = false;
	      dispose();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$a.name,
	    type: "if",
	    source: "(106:0) {#if ($originalTimeDomain)}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$m(ctx) {
	  var g;
	  var rect0;
	  var rect0_y_value;
	  var rect0_height_value;
	  var rect1;
	  var rect1_y_value;
	  var brushable_action;
	  var t;
	  var if_block_anchor;
	  var mounted;
	  var dispose;
	  var if_block =
	  /*$originalTimeDomain*/
	  ctx[10] && create_if_block$a(ctx);
	  var block = {
	    c: function create() {
	      g = svg_element("g");
	      rect0 = svg_element("rect");
	      rect1 = svg_element("rect");
	      t = space();
	      if (if_block) if_block.c();
	      if_block_anchor = empty();
	      attr_dev(rect0, "class", "brush-area svelte-16ldr5n");
	      attr_dev(rect0, "x",
	      /*x*/
	      ctx[0]);
	      attr_dev(rect0, "y", rect0_y_value =
	      /*$panelHeight*/
	      ctx[9] - 40);
	      attr_dev(rect0, "width",
	      /*width*/
	      ctx[2]);
	      attr_dev(rect0, "height", rect0_height_value = 80);
	      attr_dev(rect0, "rx", "3");
	      attr_dev(rect0, "ry", "3");
	      toggle_class(rect0, "invisible",
	      /*invisible*/
	      ctx[6]);
	      add_location(rect0, file$l, 87, 2, 2168);
	      attr_dev(rect1, "class", "brush-catcher svelte-16ldr5n");
	      attr_dev(rect1, "x",
	      /*fx*/
	      ctx[1]);
	      attr_dev(rect1, "y", rect1_y_value =
	      /*$panelHeight*/
	      ctx[9] - 40);
	      attr_dev(rect1, "width",
	      /*fWidth*/
	      ctx[3]);
	      attr_dev(rect1, "height",
	      /*fHeight*/
	      ctx[4]);
	      add_location(rect1, file$l, 95, 2, 2343);
	      attr_dev(g, "class", "brush disable-select");
	      add_location(g, file$l, 86, 0, 2133);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, g, anchor);
	      append_dev(g, rect0);
	      append_dev(g, rect1);
	      insert_dev(target, t, anchor);
	      if (if_block) if_block.m(target, anchor);
	      insert_dev(target, if_block_anchor, anchor);

	      if (!mounted) {
	        dispose = [listen_dev(window, "keyup",
	        /*handleKeyUp*/
	        ctx[14], false, false, false), action_destroyer(brushable_action = brushable.call(null, rect1)), listen_dev(rect1, "brushstart",
	        /*handleBrushStart*/
	        ctx[11], false, false, false), listen_dev(rect1, "brush",
	        /*handleBrush*/
	        ctx[12], false, false, false), listen_dev(rect1, "brushend",
	        /*handleBrushEnd*/
	        ctx[13], false, false, false)];
	        mounted = true;
	      }
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (dirty &
	      /*x*/
	      1) {
	        attr_dev(rect0, "x",
	        /*x*/
	        ctx[0]);
	      }

	      if (dirty &
	      /*$panelHeight*/
	      512 && rect0_y_value !== (rect0_y_value =
	      /*$panelHeight*/
	      ctx[9] - 40)) {
	        attr_dev(rect0, "y", rect0_y_value);
	      }

	      if (dirty &
	      /*width*/
	      4) {
	        attr_dev(rect0, "width",
	        /*width*/
	        ctx[2]);
	      }

	      if (dirty &
	      /*invisible*/
	      64) {
	        toggle_class(rect0, "invisible",
	        /*invisible*/
	        ctx[6]);
	      }

	      if (dirty &
	      /*fx*/
	      2) {
	        attr_dev(rect1, "x",
	        /*fx*/
	        ctx[1]);
	      }

	      if (dirty &
	      /*$panelHeight*/
	      512 && rect1_y_value !== (rect1_y_value =
	      /*$panelHeight*/
	      ctx[9] - 40)) {
	        attr_dev(rect1, "y", rect1_y_value);
	      }

	      if (dirty &
	      /*fWidth*/
	      8) {
	        attr_dev(rect1, "width",
	        /*fWidth*/
	        ctx[3]);
	      }

	      if (dirty &
	      /*fHeight*/
	      16) {
	        attr_dev(rect1, "height",
	        /*fHeight*/
	        ctx[4]);
	      }

	      if (
	      /*$originalTimeDomain*/
	      ctx[10]) {
	        if (if_block) {
	          if_block.p(ctx, dirty);
	        } else {
	          if_block = create_if_block$a(ctx);
	          if_block.c();
	          if_block.m(if_block_anchor.parentNode, if_block_anchor);
	        }
	      } else if (if_block) {
	        if_block.d(1);
	        if_block = null;
	      }
	    },
	    i: noop,
	    o: noop,
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(g);
	      if (detaching) detach_dev(t);
	      if (if_block) if_block.d(detaching);
	      if (detaching) detach_dev(if_block_anchor);
	      mounted = false;
	      run_all(dispose);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$m.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$m($$self, $$props, $$invalidate) {
	  var $timeScale;
	  var $margin;
	  var $panelHeight;
	  var $originalTimeDomain;
	  validate_store(timeScale, "timeScale");
	  component_subscribe($$self, timeScale, function ($$value) {
	    return $$invalidate(7, $timeScale = $$value);
	  });
	  validate_store(margin, "margin");
	  component_subscribe($$self, margin, function ($$value) {
	    return $$invalidate(8, $margin = $$value);
	  });
	  validate_store(panelHeight, "panelHeight");
	  component_subscribe($$self, panelHeight, function ($$value) {
	    return $$invalidate(9, $panelHeight = $$value);
	  });
	  validate_store(originalTimeDomain, "originalTimeDomain");
	  component_subscribe($$self, originalTimeDomain, function ($$value) {
	    return $$invalidate(10, $originalTimeDomain = $$value);
	  });
	  var x = 0;
	  var fx = 0;
	  var fy = 0;
	  var width = 0;
	  var fWidth = 0;
	  var fHeight = 0;
	  var resetText;
	  var invisible = true;

	  function resetBrush() {
	    $$invalidate(0, x = $$invalidate(1, fx = $timeScale.range()[0]));
	    fy = $margin.top;
	    $$invalidate(2, width = $$invalidate(3, fWidth = $timeScale.range()[1] - $timeScale.range()[0]));
	    $$invalidate(4, fHeight = ($panelHeight - $margin.top) * 1.05);
	  }

	  function resetTimeDomain() {
	    if ($originalTimeDomain) {
	      $timeScale.domain($originalTimeDomain);
	      set_store_value(originalTimeDomain, $originalTimeDomain = null);
	      timeScale.set($timeScale);
	    }
	  }

	  function handleBrushStart(e) {
	    $$invalidate(6, invisible = false);
	    $$invalidate(2, width = 0);
	  }

	  function handleBrush(e) {
	    $$invalidate(2, width = e.detail.width);
	    $$invalidate(0, x = e.detail.x);
	  }

	  function handleBrushEnd(e) {
	    $$invalidate(6, invisible = true);
	    var _e$detail = e.detail,
	        x1 = _e$detail.x1,
	        x2 = _e$detail.x2;
	    if (!x1 || !x2 || isNaN(x1) || isNaN(x2) || Math.abs(x2 - x1) < 10) return;
	    if (!$originalTimeDomain) set_store_value(originalTimeDomain, $originalTimeDomain = _toConsumableArray($timeScale.domain()));
	    $timeScale.domain([$timeScale.invert(x1), $timeScale.invert(x2)]);
	    timeScale.set($timeScale);
	    resetBrush();
	  }

	  function handleKeyUp(e) {
	    if (e.keyCode === 27) {
	      resetTimeDomain();
	      return;
	    }

	    if ($originalTimeDomain !== null && (e.keyCode === 37 || e.keyCode == 39)) {
	      var prevDomain = _toConsumableArray($timeScale.domain());

	      var diff = Math.floor(0.25 * (prevDomain[1] - prevDomain[0]));

	      if (e.keyCode === 37) {
	        $timeScale.domain([new Date(prevDomain[0] - diff), new Date(prevDomain[1] - diff)]);
	      } else if (e.keyCode === 39) {
	        $timeScale.domain([new Date(prevDomain[0] - -diff), new Date(prevDomain[1] - -diff)]);
	      }

	      timeScale.set($timeScale);
	    }
	  }

	  function handleResetButtonClick() {
	    resetTimeDomain();
	  }

	  onMount(function () {
	    resetBrush();
	  });
	  var writable_props = [];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Brush> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Brush", $$slots, []);

	  function text_1_binding($$value) {
	    binding_callbacks[$$value ? "unshift" : "push"](function () {
	      resetText = $$value;
	      $$invalidate(5, resetText);
	    });
	  }

	  $$self.$capture_state = function () {
	    return {
	      onMount: onMount,
	      timeScale: timeScale,
	      panelHeight: panelHeight,
	      margin: margin,
	      brushable: brushable,
	      originalTimeDomain: originalTimeDomain,
	      x: x,
	      fx: fx,
	      fy: fy,
	      width: width,
	      fWidth: fWidth,
	      fHeight: fHeight,
	      resetText: resetText,
	      invisible: invisible,
	      resetBrush: resetBrush,
	      resetTimeDomain: resetTimeDomain,
	      handleBrushStart: handleBrushStart,
	      handleBrush: handleBrush,
	      handleBrushEnd: handleBrushEnd,
	      handleKeyUp: handleKeyUp,
	      handleResetButtonClick: handleResetButtonClick,
	      $timeScale: $timeScale,
	      $margin: $margin,
	      $panelHeight: $panelHeight,
	      $originalTimeDomain: $originalTimeDomain
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("x" in $$props) $$invalidate(0, x = $$props.x);
	    if ("fx" in $$props) $$invalidate(1, fx = $$props.fx);
	    if ("fy" in $$props) fy = $$props.fy;
	    if ("width" in $$props) $$invalidate(2, width = $$props.width);
	    if ("fWidth" in $$props) $$invalidate(3, fWidth = $$props.fWidth);
	    if ("fHeight" in $$props) $$invalidate(4, fHeight = $$props.fHeight);
	    if ("resetText" in $$props) $$invalidate(5, resetText = $$props.resetText);
	    if ("invisible" in $$props) $$invalidate(6, invisible = $$props.invisible);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [x, fx, width, fWidth, fHeight, resetText, invisible, $timeScale, $margin, $panelHeight, $originalTimeDomain, handleBrushStart, handleBrush, handleBrushEnd, handleKeyUp, handleResetButtonClick, text_1_binding];
	}

	var Brush = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(Brush, _SvelteComponentDev);

	  var _super = _createSuper(Brush);

	  function Brush(options) {
	    var _this;

	    _classCallCheck(this, Brush);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$m, create_fragment$m, safe_not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "Brush",
	      options: options,
	      id: create_fragment$m.name
	    });
	    return _this;
	  }

	  return Brush;
	}(SvelteComponentDev);

	var bloomDuration = 200;
	var growDuration = 700;
	var jitterFactor = 10;

	var console_1$4 = globals.console;
	var file$m = "src/components/ShinyCircle.svelte";

	function get_each_context$4(ctx, list, i) {
	  var child_ctx = ctx.slice();
	  child_ctx[6] = list[i].id;
	  child_ctx[7] = list[i].className;
	  child_ctx[8] = list[i].r;
	  return child_ctx;
	} // (43:2) {#each sortedRadii as {id, className, r}


	function create_each_block$4(key_1, ctx) {
	  var circle;
	  var circle_class_value;
	  var circle_r_value;
	  var block = {
	    key: key_1,
	    first: null,
	    c: function create() {
	      circle = svg_element("circle");
	      attr_dev(circle, "class", circle_class_value = "" + (null_to_empty(
	      /*className*/
	      ctx[7]) + " svelte-edirwi"));
	      attr_dev(circle, "cx", "0");
	      attr_dev(circle, "cy", "0");
	      attr_dev(circle, "r", circle_r_value =
	      /*r*/
	      ctx[8]);
	      add_location(circle, file$m, 43, 4, 1198);
	      this.first = circle;
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, circle, anchor);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*sortedRadii*/
	      16 && circle_class_value !== (circle_class_value = "" + (null_to_empty(
	      /*className*/
	      ctx[7]) + " svelte-edirwi"))) {
	        attr_dev(circle, "class", circle_class_value);
	      }

	      if (dirty &
	      /*sortedRadii*/
	      16 && circle_r_value !== (circle_r_value =
	      /*r*/
	      ctx[8])) {
	        attr_dev(circle, "r", circle_r_value);
	      }
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(circle);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_each_block$4.name,
	    type: "each",
	    source: "(43:2) {#each sortedRadii as {id, className, r}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$n(ctx) {
	  var g;
	  var each_blocks = [];
	  var each_1_lookup = new Map();
	  var g_transform_value;
	  var g_intro;
	  var g_outro;
	  var current;
	  var each_value =
	  /*sortedRadii*/
	  ctx[4];
	  validate_each_argument(each_value);

	  var get_key = function get_key(ctx) {
	    return (
	      /*id*/
	      ctx[6]
	    );
	  };

	  validate_each_keys(ctx, each_value, get_each_context$4, get_key);

	  for (var i = 0; i < each_value.length; i += 1) {
	    var child_ctx = get_each_context$4(ctx, each_value, i);
	    var key = get_key(child_ctx);
	    each_1_lookup.set(key, each_blocks[i] = create_each_block$4(key, child_ctx));
	  }

	  var block = {
	    c: function create() {
	      g = svg_element("g");

	      for (var _i = 0; _i < each_blocks.length; _i += 1) {
	        each_blocks[_i].c();
	      }

	      attr_dev(g, "class", "shiny-circle svelte-edirwi");
	      attr_dev(g, "transform", g_transform_value = "translate(" +
	      /*tweenedPos*/
	      ctx[1].x + " " +
	      /*tweenedPos*/
	      ctx[1].fy + ")");
	      toggle_class(g, "selected",
	      /*selected*/
	      ctx[2] ||
	      /*hovered*/
	      ctx[3]);
	      add_location(g, file$m, 37, 0, 845);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, g, anchor);

	      for (var _i2 = 0; _i2 < each_blocks.length; _i2 += 1) {
	        each_blocks[_i2].m(g, null);
	      }

	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (dirty &
	      /*sortedRadii*/
	      16) {
	        var _each_value =
	        /*sortedRadii*/
	        ctx[4];
	        validate_each_argument(_each_value);
	        validate_each_keys(ctx, _each_value, get_each_context$4, get_key);
	        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, _each_value, each_1_lookup, g, destroy_block, create_each_block$4, null, get_each_context$4);
	      }

	      if (!current || dirty &
	      /*tweenedPos*/
	      2 && g_transform_value !== (g_transform_value = "translate(" +
	      /*tweenedPos*/
	      ctx[1].x + " " +
	      /*tweenedPos*/
	      ctx[1].fy + ")")) {
	        attr_dev(g, "transform", g_transform_value);
	      }

	      if (dirty &
	      /*selected, hovered*/
	      12) {
	        toggle_class(g, "selected",
	        /*selected*/
	        ctx[2] ||
	        /*hovered*/
	        ctx[3]);
	      }
	    },
	    i: function intro(local) {
	      if (current) return;

	      if (local) {
	        add_render_callback(function () {
	          if (g_outro) g_outro.end(1);
	          if (!g_intro) g_intro = create_in_transition(g, fade, {
	            duration: bloomDuration,
	            delay: growDuration +
	            /*timePoint*/
	            ctx[0].id * jitterFactor
	          });
	          g_intro.start();
	        });
	      }

	      current = true;
	    },
	    o: function outro(local) {
	      if (g_intro) g_intro.invalidate();

	      if (local) {
	        g_outro = create_out_transition(g, fade, {
	          duration: bloomDuration,
	          delay:
	          /*timePoint*/
	          ctx[0].id * jitterFactor
	        });
	      }

	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(g);

	      for (var _i3 = 0; _i3 < each_blocks.length; _i3 += 1) {
	        each_blocks[_i3].d();
	      }

	      if (detaching && g_outro) g_outro.end();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$n.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$n($$self, $$props, $$invalidate) {
	  var timePoint = $$props.timePoint;
	  var tweenedPos = $$props.tweenedPos;
	  var _$$props$selected = $$props.selected,
	      selected = _$$props$selected === void 0 ? false : _$$props$selected;
	  var _$$props$hovered = $$props.hovered,
	      hovered = _$$props$hovered === void 0 ? false : _$$props$hovered;
	  var sortedRadii = [];
	  console.log(timePoint);
	  var writable_props = ["timePoint", "tweenedPos", "selected", "hovered"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$4.warn("<ShinyCircle> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("ShinyCircle", $$slots, []);

	  $$self.$$set = function ($$props) {
	    if ("timePoint" in $$props) $$invalidate(0, timePoint = $$props.timePoint);
	    if ("tweenedPos" in $$props) $$invalidate(1, tweenedPos = $$props.tweenedPos);
	    if ("selected" in $$props) $$invalidate(2, selected = $$props.selected);
	    if ("hovered" in $$props) $$invalidate(3, hovered = $$props.hovered);
	  };

	  $$self.$capture_state = function () {
	    return {
	      fade: fade,
	      bloomDuration: bloomDuration,
	      growDuration: growDuration,
	      jitterFactor: jitterFactor,
	      sortConsistently: sortConsistently,
	      timePoint: timePoint,
	      tweenedPos: tweenedPos,
	      selected: selected,
	      hovered: hovered,
	      sortedRadii: sortedRadii,
	      sizeFactor: sizeFactor
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("timePoint" in $$props) $$invalidate(0, timePoint = $$props.timePoint);
	    if ("tweenedPos" in $$props) $$invalidate(1, tweenedPos = $$props.tweenedPos);
	    if ("selected" in $$props) $$invalidate(2, selected = $$props.selected);
	    if ("hovered" in $$props) $$invalidate(3, hovered = $$props.hovered);
	    if ("sortedRadii" in $$props) $$invalidate(4, sortedRadii = $$props.sortedRadii);
	    if ("sizeFactor" in $$props) $$invalidate(5, sizeFactor = $$props.sizeFactor);
	  };

	  var sizeFactor;

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  $$self.$$.update = function () {
	    if ($$self.$$.dirty &
	    /*timePoint, sizeFactor*/
	    33) {
	       if (timePoint) $$invalidate(4, sortedRadii = [{
	        id: 2,
	        className: "reddit",
	        r: timePoint.size * 0.1 + timePoint.size * 0.3 + timePoint.size * 0.85
	      }, {
	        id: 1,
	        className: "twitter",
	        r: timePoint.size * 0.3 + timePoint.size * 0.85
	      }, {
	        id: 0,
	        className: "facebook",
	        r: timePoint.size * 0.85
	      }].map(function (d) {
	        return _objectSpread2(_objectSpread2({}, d), {}, {
	          r: d.r * sizeFactor
	        });
	      }));
	    }
	  };

	   $$invalidate(5, sizeFactor = 1);

	  return [timePoint, tweenedPos, selected, hovered, sortedRadii];
	}

	var ShinyCircle = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(ShinyCircle, _SvelteComponentDev);

	  var _super = _createSuper(ShinyCircle);

	  function ShinyCircle(options) {
	    var _this;

	    _classCallCheck(this, ShinyCircle);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$n, create_fragment$n, safe_not_equal, {
	      timePoint: 0,
	      tweenedPos: 1,
	      selected: 2,
	      hovered: 3
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "ShinyCircle",
	      options: options,
	      id: create_fragment$n.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*timePoint*/
	    ctx[0] === undefined && !("timePoint" in props)) {
	      console_1$4.warn("<ShinyCircle> was created without expected prop 'timePoint'");
	    }

	    if (
	    /*tweenedPos*/
	    ctx[1] === undefined && !("tweenedPos" in props)) {
	      console_1$4.warn("<ShinyCircle> was created without expected prop 'tweenedPos'");
	    }

	    return _this;
	  }

	  _createClass(ShinyCircle, [{
	    key: "timePoint",
	    get: function get() {
	      throw new Error("<ShinyCircle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<ShinyCircle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "tweenedPos",
	    get: function get() {
	      throw new Error("<ShinyCircle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<ShinyCircle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "selected",
	    get: function get() {
	      throw new Error("<ShinyCircle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<ShinyCircle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "hovered",
	    get: function get() {
	      throw new Error("<ShinyCircle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<ShinyCircle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return ShinyCircle;
	}(SvelteComponentDev);

	var _createClass$1 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _templateObject = _taggedTemplateLiteral$1(['', ''], ['', '']);

	function _taggedTemplateLiteral$1(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

	function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @class TemplateTag
	 * @classdesc Consumes a pipeline of composable transformer plugins and produces a template tag.
	 */
	var TemplateTag = function () {
	  /**
	   * constructs a template tag
	   * @constructs TemplateTag
	   * @param  {...Object} [...transformers] - an array or arguments list of transformers
	   * @return {Function}                    - a template tag
	   */
	  function TemplateTag() {
	    var _this = this;

	    for (var _len = arguments.length, transformers = Array(_len), _key = 0; _key < _len; _key++) {
	      transformers[_key] = arguments[_key];
	    }

	    _classCallCheck$1(this, TemplateTag);

	    this.tag = function (strings) {
	      for (var _len2 = arguments.length, expressions = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	        expressions[_key2 - 1] = arguments[_key2];
	      }

	      if (typeof strings === 'function') {
	        // if the first argument passed is a function, assume it is a template tag and return
	        // an intermediary tag that processes the template using the aforementioned tag, passing the
	        // result to our tag
	        return _this.interimTag.bind(_this, strings);
	      }

	      if (typeof strings === 'string') {
	        // if the first argument passed is a string, just transform it
	        return _this.transformEndResult(strings);
	      }

	      // else, return a transformed end result of processing the template with our tag
	      strings = strings.map(_this.transformString.bind(_this));
	      return _this.transformEndResult(strings.reduce(_this.processSubstitutions.bind(_this, expressions)));
	    };

	    // if first argument is an array, extrude it as a list of transformers
	    if (transformers.length > 0 && Array.isArray(transformers[0])) {
	      transformers = transformers[0];
	    }

	    // if any transformers are functions, this means they are not initiated - automatically initiate them
	    this.transformers = transformers.map(function (transformer) {
	      return typeof transformer === 'function' ? transformer() : transformer;
	    });

	    // return an ES2015 template tag
	    return this.tag;
	  }

	  /**
	   * Applies all transformers to a template literal tagged with this method.
	   * If a function is passed as the first argument, assumes the function is a template tag
	   * and applies it to the template, returning a template tag.
	   * @param  {(Function|String|Array<String>)} strings        - Either a template tag or an array containing template strings separated by identifier
	   * @param  {...*}                            ...expressions - Optional list of substitution values.
	   * @return {(String|Function)}                              - Either an intermediary tag function or the results of processing the template.
	   */


	  _createClass$1(TemplateTag, [{
	    key: 'interimTag',


	    /**
	     * An intermediary template tag that receives a template tag and passes the result of calling the template with the received
	     * template tag to our own template tag.
	     * @param  {Function}        nextTag          - the received template tag
	     * @param  {Array<String>}   template         - the template to process
	     * @param  {...*}            ...substitutions - `substitutions` is an array of all substitutions in the template
	     * @return {*}                                - the final processed value
	     */
	    value: function interimTag(previousTag, template) {
	      for (var _len3 = arguments.length, substitutions = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
	        substitutions[_key3 - 2] = arguments[_key3];
	      }

	      return this.tag(_templateObject, previousTag.apply(undefined, [template].concat(substitutions)));
	    }

	    /**
	     * Performs bulk processing on the tagged template, transforming each substitution and then
	     * concatenating the resulting values into a string.
	     * @param  {Array<*>} substitutions - an array of all remaining substitutions present in this template
	     * @param  {String}   resultSoFar   - this iteration's result string so far
	     * @param  {String}   remainingPart - the template chunk after the current substitution
	     * @return {String}                 - the result of joining this iteration's processed substitution with the result
	     */

	  }, {
	    key: 'processSubstitutions',
	    value: function processSubstitutions(substitutions, resultSoFar, remainingPart) {
	      var substitution = this.transformSubstitution(substitutions.shift(), resultSoFar);
	      return ''.concat(resultSoFar, substitution, remainingPart);
	    }

	    /**
	     * Iterate through each transformer, applying the transformer's `onString` method to the template
	     * strings before all substitutions are processed.
	     * @param {String}  str - The input string
	     * @return {String}     - The final results of processing each transformer
	     */

	  }, {
	    key: 'transformString',
	    value: function transformString(str) {
	      var cb = function cb(res, transform) {
	        return transform.onString ? transform.onString(res) : res;
	      };
	      return this.transformers.reduce(cb, str);
	    }

	    /**
	     * When a substitution is encountered, iterates through each transformer and applies the transformer's
	     * `onSubstitution` method to the substitution.
	     * @param  {*}      substitution - The current substitution
	     * @param  {String} resultSoFar  - The result up to and excluding this substitution.
	     * @return {*}                   - The final result of applying all substitution transformations.
	     */

	  }, {
	    key: 'transformSubstitution',
	    value: function transformSubstitution(substitution, resultSoFar) {
	      var cb = function cb(res, transform) {
	        return transform.onSubstitution ? transform.onSubstitution(res, resultSoFar) : res;
	      };
	      return this.transformers.reduce(cb, substitution);
	    }

	    /**
	     * Iterates through each transformer, applying the transformer's `onEndResult` method to the
	     * template literal after all substitutions have finished processing.
	     * @param  {String} endResult - The processed template, just before it is returned from the tag
	     * @return {String}           - The final results of processing each transformer
	     */

	  }, {
	    key: 'transformEndResult',
	    value: function transformEndResult(endResult) {
	      var cb = function cb(res, transform) {
	        return transform.onEndResult ? transform.onEndResult(res) : res;
	      };
	      return this.transformers.reduce(cb, endResult);
	    }
	  }]);

	  return TemplateTag;
	}();

	/**
	 * TemplateTag transformer that trims whitespace on the end result of a tagged template
	 * @param  {String} side = '' - The side of the string to trim. Can be 'start' or 'end' (alternatively 'left' or 'right')
	 * @return {Object}           - a TemplateTag transformer
	 */
	var trimResultTransformer = function trimResultTransformer() {
	  var side = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	  return {
	    onEndResult: function onEndResult(endResult) {
	      if (side === '') {
	        return endResult.trim();
	      }

	      side = side.toLowerCase();

	      if (side === 'start' || side === 'left') {
	        return endResult.replace(/^\s*/, '');
	      }

	      if (side === 'end' || side === 'right') {
	        return endResult.replace(/\s*$/, '');
	      }

	      throw new Error('Side not supported: ' + side);
	    }
	  };
	};

	function _toConsumableArray$1(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	/**
	 * strips indentation from a template literal
	 * @param  {String} type = 'initial' - whether to remove all indentation or just leading indentation. can be 'all' or 'initial'
	 * @return {Object}                  - a TemplateTag transformer
	 */
	var stripIndentTransformer = function stripIndentTransformer() {
	  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'initial';
	  return {
	    onEndResult: function onEndResult(endResult) {
	      if (type === 'initial') {
	        // remove the shortest leading indentation from each line
	        var match = endResult.match(/^[^\S\n]*(?=\S)/gm);
	        var indent = match && Math.min.apply(Math, _toConsumableArray$1(match.map(function (el) {
	          return el.length;
	        })));
	        if (indent) {
	          var regexp = new RegExp('^.{' + indent + '}', 'gm');
	          return endResult.replace(regexp, '');
	        }
	        return endResult;
	      }
	      if (type === 'all') {
	        // remove all indentation from each line
	        return endResult.replace(/^[^\S\n]+/gm, '');
	      }
	      throw new Error('Unknown type: ' + type);
	    }
	  };
	};

	/**
	 * Replaces tabs, newlines and spaces with the chosen value when they occur in sequences
	 * @param  {(String|RegExp)} replaceWhat - the value or pattern that should be replaced
	 * @param  {*}               replaceWith - the replacement value
	 * @return {Object}                      - a TemplateTag transformer
	 */
	var replaceResultTransformer = function replaceResultTransformer(replaceWhat, replaceWith) {
	  return {
	    onEndResult: function onEndResult(endResult) {
	      if (replaceWhat == null || replaceWith == null) {
	        throw new Error('replaceResultTransformer requires at least 2 arguments.');
	      }
	      return endResult.replace(replaceWhat, replaceWith);
	    }
	  };
	};

	var replaceSubstitutionTransformer = function replaceSubstitutionTransformer(replaceWhat, replaceWith) {
	  return {
	    onSubstitution: function onSubstitution(substitution, resultSoFar) {
	      if (replaceWhat == null || replaceWith == null) {
	        throw new Error('replaceSubstitutionTransformer requires at least 2 arguments.');
	      }

	      // Do not touch if null or undefined
	      if (substitution == null) {
	        return substitution;
	      } else {
	        return substitution.toString().replace(replaceWhat, replaceWith);
	      }
	    }
	  };
	};

	var defaults = {
	  separator: '',
	  conjunction: '',
	  serial: false
	};

	/**
	 * Converts an array substitution to a string containing a list
	 * @param  {String} [opts.separator = ''] - the character that separates each item
	 * @param  {String} [opts.conjunction = '']  - replace the last separator with this
	 * @param  {Boolean} [opts.serial = false] - include the separator before the conjunction? (Oxford comma use-case)
	 *
	 * @return {Object}                     - a TemplateTag transformer
	 */
	var inlineArrayTransformer = function inlineArrayTransformer() {
	  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaults;
	  return {
	    onSubstitution: function onSubstitution(substitution, resultSoFar) {
	      // only operate on arrays
	      if (Array.isArray(substitution)) {
	        var arrayLength = substitution.length;
	        var separator = opts.separator;
	        var conjunction = opts.conjunction;
	        var serial = opts.serial;
	        // join each item in the array into a string where each item is separated by separator
	        // be sure to maintain indentation
	        var indent = resultSoFar.match(/(\n?[^\S\n]+)$/);
	        if (indent) {
	          substitution = substitution.join(separator + indent[1]);
	        } else {
	          substitution = substitution.join(separator + ' ');
	        }
	        // if conjunction is set, replace the last separator with conjunction, but only if there is more than one substitution
	        if (conjunction && arrayLength > 1) {
	          var separatorIndex = substitution.lastIndexOf(separator);
	          substitution = substitution.slice(0, separatorIndex) + (serial ? separator : '') + ' ' + conjunction + substitution.slice(separatorIndex + 1);
	        }
	      }
	      return substitution;
	    }
	  };
	};

	var splitStringTransformer = function splitStringTransformer(splitBy) {
	  return {
	    onSubstitution: function onSubstitution(substitution, resultSoFar) {
	      if (splitBy != null && typeof splitBy === 'string') {
	        if (typeof substitution === 'string' && substitution.includes(splitBy)) {
	          substitution = substitution.split(splitBy);
	        }
	      } else {
	        throw new Error('You need to specify a string character to split by.');
	      }
	      return substitution;
	    }
	  };
	};

	var isValidValue = function isValidValue(x) {
	  return x != null && !Number.isNaN(x) && typeof x !== 'boolean';
	};

	var removeNonPrintingValuesTransformer = function removeNonPrintingValuesTransformer() {
	  return {
	    onSubstitution: function onSubstitution(substitution) {
	      if (Array.isArray(substitution)) {
	        return substitution.filter(isValidValue);
	      }
	      if (isValidValue(substitution)) {
	        return substitution;
	      }
	      return '';
	    }
	  };
	};

	var commaLists = new TemplateTag(inlineArrayTransformer({ separator: ',' }), stripIndentTransformer, trimResultTransformer);

	var commaListsAnd = new TemplateTag(inlineArrayTransformer({ separator: ',', conjunction: 'and' }), stripIndentTransformer, trimResultTransformer);

	var commaListsOr = new TemplateTag(inlineArrayTransformer({ separator: ',', conjunction: 'or' }), stripIndentTransformer, trimResultTransformer);

	var html$1 = new TemplateTag(splitStringTransformer('\n'), removeNonPrintingValuesTransformer, inlineArrayTransformer, stripIndentTransformer, trimResultTransformer);

	var safeHtml = new TemplateTag(splitStringTransformer('\n'), inlineArrayTransformer, stripIndentTransformer, trimResultTransformer, replaceSubstitutionTransformer(/&/g, '&amp;'), replaceSubstitutionTransformer(/</g, '&lt;'), replaceSubstitutionTransformer(/>/g, '&gt;'), replaceSubstitutionTransformer(/"/g, '&quot;'), replaceSubstitutionTransformer(/'/g, '&#x27;'), replaceSubstitutionTransformer(/`/g, '&#x60;'));

	var oneLine = new TemplateTag(replaceResultTransformer(/(?:\n(?:\s*))+/g, ' '), trimResultTransformer);

	var oneLineTrim = new TemplateTag(replaceResultTransformer(/(?:\n\s*)/g, ''), trimResultTransformer);

	var oneLineCommaLists = new TemplateTag(inlineArrayTransformer({ separator: ',' }), replaceResultTransformer(/(?:\s+)/g, ' '), trimResultTransformer);

	var oneLineCommaListsOr = new TemplateTag(inlineArrayTransformer({ separator: ',', conjunction: 'or' }), replaceResultTransformer(/(?:\s+)/g, ' '), trimResultTransformer);

	var oneLineCommaListsAnd = new TemplateTag(inlineArrayTransformer({ separator: ',', conjunction: 'and' }), replaceResultTransformer(/(?:\s+)/g, ' '), trimResultTransformer);

	var inlineLists = new TemplateTag(inlineArrayTransformer, stripIndentTransformer, trimResultTransformer);

	var oneLineInlineLists = new TemplateTag(inlineArrayTransformer, replaceResultTransformer(/(?:\s+)/g, ' '), trimResultTransformer);

	var stripIndent = new TemplateTag(stripIndentTransformer, trimResultTransformer);

	var stripIndents = new TemplateTag(stripIndentTransformer('all'), trimResultTransformer);

	var file$n = "src/components/EventTooltipCross.svelte";

	function create_fragment$o(ctx) {
	  var svg;
	  var path0;
	  var path0_d_value;
	  var path1;
	  var path1_d_value;
	  var svg_viewBox_value;
	  var svg_width_value;
	  var svg_height_value;
	  var block = {
	    c: function create() {
	      svg = svg_element("svg");
	      path0 = svg_element("path");
	      path1 = svg_element("path");
	      attr_dev(path0, "d", path0_d_value = "M" +
	      /*offset*/
	      ctx[1].left + " 0L" +
	      /*offset*/
	      ctx[1].left + " " +
	      /*offset*/
	      ctx[1].top * 2);
	      attr_dev(path0, "class", "svelte-8r0u9m");
	      add_location(path0, file$n, 19, 2, 489);
	      attr_dev(path1, "d", path1_d_value = "M0 " +
	      /*offset*/
	      ctx[1].top + "L" +
	      /*offset*/
	      ctx[1].left * 2 + " " +
	      /*offset*/
	      ctx[1].top);
	      attr_dev(path1, "class", "svelte-8r0u9m");
	      add_location(path1, file$n, 20, 2, 557);
	      attr_dev(svg, "viewBox", svg_viewBox_value = "0 0 " +
	      /*offset*/
	      ctx[1].left * 2 + " " +
	      /*offset*/
	      ctx[1].top * 2);
	      attr_dev(svg, "width", svg_width_value =
	      /*offset*/
	      ctx[1].left * 2);
	      attr_dev(svg, "height", svg_height_value =
	      /*offset*/
	      ctx[1].top * 2);
	      set_style(svg, "left", (
	      /*side*/
	      ctx[2] === "right" ? 0 :
	      /*tWidth*/
	      ctx[0] - 2 *
	      /*offset*/
	      ctx[1].left) + "px");
	      attr_dev(svg, "class", "svelte-8r0u9m");
	      add_location(svg, file$n, 15, 0, 302);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, svg, anchor);
	      append_dev(svg, path0);
	      append_dev(svg, path1);
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (dirty &
	      /*offset*/
	      2 && path0_d_value !== (path0_d_value = "M" +
	      /*offset*/
	      ctx[1].left + " 0L" +
	      /*offset*/
	      ctx[1].left + " " +
	      /*offset*/
	      ctx[1].top * 2)) {
	        attr_dev(path0, "d", path0_d_value);
	      }

	      if (dirty &
	      /*offset*/
	      2 && path1_d_value !== (path1_d_value = "M0 " +
	      /*offset*/
	      ctx[1].top + "L" +
	      /*offset*/
	      ctx[1].left * 2 + " " +
	      /*offset*/
	      ctx[1].top)) {
	        attr_dev(path1, "d", path1_d_value);
	      }

	      if (dirty &
	      /*offset*/
	      2 && svg_viewBox_value !== (svg_viewBox_value = "0 0 " +
	      /*offset*/
	      ctx[1].left * 2 + " " +
	      /*offset*/
	      ctx[1].top * 2)) {
	        attr_dev(svg, "viewBox", svg_viewBox_value);
	      }

	      if (dirty &
	      /*offset*/
	      2 && svg_width_value !== (svg_width_value =
	      /*offset*/
	      ctx[1].left * 2)) {
	        attr_dev(svg, "width", svg_width_value);
	      }

	      if (dirty &
	      /*offset*/
	      2 && svg_height_value !== (svg_height_value =
	      /*offset*/
	      ctx[1].top * 2)) {
	        attr_dev(svg, "height", svg_height_value);
	      }

	      if (dirty &
	      /*side, tWidth, offset*/
	      7) {
	        set_style(svg, "left", (
	        /*side*/
	        ctx[2] === "right" ? 0 :
	        /*tWidth*/
	        ctx[0] - 2 *
	        /*offset*/
	        ctx[1].left) + "px");
	      }
	    },
	    i: noop,
	    o: noop,
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(svg);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$o.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$o($$self, $$props, $$invalidate) {
	  var _$$props$tWidth = $$props.tWidth,
	      tWidth = _$$props$tWidth === void 0 ? 0 : _$$props$tWidth;
	  var _$$props$offset = $$props.offset,
	      offset = _$$props$offset === void 0 ? {
	    top: 10,
	    right: 10,
	    bottom: 10,
	    left: 10
	  } : _$$props$offset;
	  var _$$props$side = $$props.side,
	      side = _$$props$side === void 0 ? "left" : _$$props$side;
	  var writable_props = ["tWidth", "offset", "side"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<EventTooltipCross> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("EventTooltipCross", $$slots, []);

	  $$self.$$set = function ($$props) {
	    if ("tWidth" in $$props) $$invalidate(0, tWidth = $$props.tWidth);
	    if ("offset" in $$props) $$invalidate(1, offset = $$props.offset);
	    if ("side" in $$props) $$invalidate(2, side = $$props.side);
	  };

	  $$self.$capture_state = function () {
	    return {
	      draw: draw,
	      oneLineTrim: oneLineTrim,
	      tWidth: tWidth,
	      offset: offset,
	      side: side
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("tWidth" in $$props) $$invalidate(0, tWidth = $$props.tWidth);
	    if ("offset" in $$props) $$invalidate(1, offset = $$props.offset);
	    if ("side" in $$props) $$invalidate(2, side = $$props.side);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [tWidth, offset, side];
	}

	var EventTooltipCross = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(EventTooltipCross, _SvelteComponentDev);

	  var _super = _createSuper(EventTooltipCross);

	  function EventTooltipCross(options) {
	    var _this;

	    _classCallCheck(this, EventTooltipCross);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$o, create_fragment$o, safe_not_equal, {
	      tWidth: 0,
	      offset: 1,
	      side: 2
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "EventTooltipCross",
	      options: options,
	      id: create_fragment$o.name
	    });
	    return _this;
	  }

	  _createClass(EventTooltipCross, [{
	    key: "tWidth",
	    get: function get() {
	      throw new Error("<EventTooltipCross>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<EventTooltipCross>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "offset",
	    get: function get() {
	      throw new Error("<EventTooltipCross>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<EventTooltipCross>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "side",
	    get: function get() {
	      throw new Error("<EventTooltipCross>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<EventTooltipCross>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return EventTooltipCross;
	}(SvelteComponentDev);

	var console_1$5 = globals.console;
	var file$o = "src/components/EventTooltip.svelte";

	function get_each_context$5(ctx, list, i) {
	  var child_ctx = ctx.slice();
	  child_ctx[27] = list[i];
	  child_ctx[29] = i;
	  return child_ctx;
	} // (122:0) {#if (showTooltip)}


	function create_if_block$b(ctx) {
	  var div16;
	  var eventtooltipcross;
	  var t0;
	  var div0;
	  var t1;
	  var div1;
	  var t2;
	  var div15;
	  var div14;
	  var div10;
	  var h2;
	  var t3_value =
	  /*$tooltip*/
	  ctx[10].tp.name + "";
	  var t3;
	  var t4;
	  var div8;
	  var section0;
	  var div2;
	  var span0;
	  var strong0;
	  var t6;
	  var t7_value =
	  /*$tooltip*/
	  ctx[10].tp.size + "";
	  var t7;
	  var t8;
	  var t9;
	  var div3;
	  var span1;
	  var strong1;
	  var t11;
	  var t12_value =
	  /*$tooltip*/
	  ctx[10].tp.weight + "";
	  var t12;
	  var t13;
	  var t14;
	  var div4;
	  var span2;
	  var strong2;
	  var t16;
	  var t17_value =
	  /*$tooltip*/
	  ctx[10].tp.testDate + "";
	  var t17;
	  var t18;
	  var t19;
	  var div5;
	  var span3;
	  var strong3;
	  var t21;
	  var t22_value =
	  /*$tooltip*/
	  ctx[10].tp.testDate + "";
	  var t22;
	  var t23;
	  var t24;
	  var div6;
	  var span4;
	  var strong4;
	  var t26;
	  var t27_value =
	  /*$tooltip*/
	  ctx[10].tp.diet + "";
	  var t27;
	  var t28;
	  var div7;
	  var span5;
	  var strong5;
	  var t30;
	  var t31_value =
	  /*$tooltip*/
	  ctx[10].tp.disinformantNation + "";
	  var t31;
	  var t32;
	  var section1;
	  var span6;
	  var t34;
	  var span7;
	  var t36;
	  var span8;
	  var t38;
	  var span9;
	  var t40;
	  var span10;
	  var t42;
	  var div9;
	  var img;
	  var img_src_value;
	  var img_alt_value;
	  var t43;
	  var t44;
	  var div11;
	  var t45;
	  var a0;
	  var t46_value =
	  /*$tooltip*/
	  ctx[10].tp.name + "";
	  var t46;
	  var a0_href_value;
	  var t47;
	  var div12;
	  var h30;
	  var t49;
	  var p;
	  var t51;
	  var div13;
	  var h31;
	  var t53;
	  var a1;
	  var div15_resize_listener;
	  var div16_resize_listener;
	  var div16_transition;
	  var current;
	  var mounted;
	  var dispose;
	  eventtooltipcross = new EventTooltipCross({
	    props: {
	      tWidth:
	      /*tWidth*/
	      ctx[1],
	      offset:
	      /*offset*/
	      ctx[11],
	      side:
	      /*side*/
	      ctx[3]
	    },
	    $$inline: true
	  });
	  var if_block =
	  /*$tooltip*/
	  ctx[10].tp.tooltipContent && create_if_block_1$5(ctx);
	  var block = {
	    c: function create() {
	      div16 = element("div");
	      create_component(eventtooltipcross.$$.fragment);
	      t0 = space();
	      div0 = element("div");
	      t1 = space();
	      div1 = element("div");
	      t2 = space();
	      div15 = element("div");
	      div14 = element("div");
	      div10 = element("div");
	      h2 = element("h2");
	      t3 = text(t3_value);
	      t4 = space();
	      div8 = element("div");
	      section0 = element("section");
	      div2 = element("div");
	      span0 = element("span");
	      strong0 = element("strong");
	      strong0.textContent = "Length:";
	      t6 = space();
	      t7 = text(t7_value);
	      t8 = text(" ft");
	      t9 = space();
	      div3 = element("div");
	      span1 = element("span");
	      strong1 = element("strong");
	      strong1.textContent = "Weight:";
	      t11 = space();
	      t12 = text(t12_value);
	      t13 = text(" lbs");
	      t14 = space();
	      div4 = element("div");
	      span2 = element("span");
	      strong2 = element("strong");
	      strong2.textContent = "Earliest Date:";
	      t16 = space();
	      t17 = text(t17_value);
	      t18 = text(" MYA");
	      t19 = space();
	      div5 = element("div");
	      span3 = element("span");
	      strong3 = element("strong");
	      strong3.textContent = "Latest Date:";
	      t21 = space();
	      t22 = text(t22_value);
	      t23 = text(" MYA");
	      t24 = space();
	      div6 = element("div");
	      span4 = element("span");
	      strong4 = element("strong");
	      strong4.textContent = "Diet:";
	      t26 = space();
	      t27 = text(t27_value);
	      t28 = space();
	      div7 = element("div");
	      span5 = element("span");
	      strong5 = element("strong");
	      strong5.textContent = "Regions:";
	      t30 = space();
	      t31 = text(t31_value);
	      t32 = space();
	      section1 = element("section");
	      span6 = element("span");
	      span6.textContent = "Cretaceous";
	      t34 = space();
	      span7 = element("span");
	      span7.textContent = "Jurassic";
	      t36 = space();
	      span8 = element("span");
	      span8.textContent = "Triassic";
	      t38 = space();
	      span9 = element("span");
	      span9.textContent = "Paleogene";
	      t40 = space();
	      span10 = element("span");
	      span10.textContent = "Neogene";
	      t42 = space();
	      div9 = element("div");
	      img = element("img");
	      t43 = space();
	      if (if_block) if_block.c();
	      t44 = space();
	      div11 = element("div");
	      t45 = text("Wiki Link:\n          ");
	      a0 = element("a");
	      t46 = text(t46_value);
	      t47 = space();
	      div12 = element("div");
	      h30 = element("h3");
	      h30.textContent = "Description";
	      t49 = space();
	      p = element("p");
	      p.textContent = "short description here";
	      t51 = space();
	      div13 = element("div");
	      h31 = element("h3");
	      h31.textContent = "Link";
	      t53 = space();
	      a1 = element("a");
	      a1.textContent = "wikipedia link";
	      attr_dev(div0, "class", "mouse-catcher");
	      set_style(div0, "width",
	      /*tWidth*/
	      ctx[1] + "px");
	      set_style(div0, "height", Math.max(10, Math.abs(
	      /*contentTop*/
	      ctx[6]) -
	      /*$tooltip*/
	      ctx[10].tp.rSizeTot + 25) + "px");
	      set_style(div0, "position", "absolute");
	      set_style(div0, "top",
	      /*contentTop*/
	      ctx[6] - 10 + "px");
	      add_location(div0, file$o, 129, 4, 4100);
	      attr_dev(div1, "class", "mouse-catcher");
	      set_style(div1, "width",
	      /*tWidth*/
	      ctx[1] + "px");
	      set_style(div1, "height", Math.abs(
	      /*tHeight*/
	      ctx[2] - Math.abs(
	      /*contentTop*/
	      ctx[6])) + "px");
	      set_style(div1, "position", "absolute");
	      set_style(div1, "top",
	      /*$tooltip*/
	      ctx[10].tp.rSizeTot + 5 + "px");
	      add_location(div1, file$o, 134, 4, 4348);
	      attr_dev(h2, "class", "svelte-1143ogu");
	      add_location(h2, file$o, 147, 10, 4893);
	      add_location(strong0, file$o, 156, 44, 5050);
	      add_location(span0, file$o, 156, 38, 5044);
	      attr_dev(div2, "class", "stats-item svelte-1143ogu");
	      add_location(div2, file$o, 156, 14, 5020);
	      add_location(strong1, file$o, 157, 44, 5154);
	      add_location(span1, file$o, 157, 38, 5148);
	      attr_dev(div3, "class", "stats-item svelte-1143ogu");
	      add_location(div3, file$o, 157, 14, 5124);
	      add_location(strong2, file$o, 158, 44, 5261);
	      add_location(span2, file$o, 158, 38, 5255);
	      attr_dev(div4, "class", "stats-item svelte-1143ogu");
	      add_location(div4, file$o, 158, 14, 5231);
	      add_location(strong3, file$o, 159, 44, 5377);
	      add_location(span3, file$o, 159, 38, 5371);
	      attr_dev(div5, "class", "stats-item svelte-1143ogu");
	      add_location(div5, file$o, 159, 14, 5347);
	      add_location(strong4, file$o, 160, 44, 5491);
	      add_location(span4, file$o, 160, 38, 5485);
	      attr_dev(div6, "class", "stats-item svelte-1143ogu");
	      add_location(div6, file$o, 160, 14, 5461);
	      add_location(strong5, file$o, 161, 44, 5590);
	      add_location(span5, file$o, 161, 38, 5584);
	      attr_dev(div7, "class", "stats-item svelte-1143ogu");
	      add_location(div7, file$o, 161, 14, 5560);
	      attr_dev(section0, "class", "dino-stats svelte-1143ogu");
	      add_location(section0, file$o, 153, 12, 4971);
	      attr_dev(div8, "class", "title-top svelte-1143ogu");
	      add_location(div8, file$o, 148, 10, 4931);
	      attr_dev(span6, "class", "tag-label Cretaceous svelte-1143ogu");
	      add_location(span6, file$o, 171, 10, 5850);
	      attr_dev(span7, "class", "tag-label Jurassic svelte-1143ogu");
	      add_location(span7, file$o, 172, 10, 5916);
	      attr_dev(span8, "class", "tag-label Triassic svelte-1143ogu");
	      add_location(span8, file$o, 173, 10, 5978);
	      attr_dev(span9, "class", "tag-label Paleogene svelte-1143ogu");
	      add_location(span9, file$o, 174, 10, 6040);
	      attr_dev(span10, "class", "tag-label Neogene svelte-1143ogu");
	      add_location(span10, file$o, 175, 10, 6104);
	      attr_dev(section1, "class", "era-labels svelte-1143ogu");
	      add_location(section1, file$o, 170, 10, 5811);
	      if (img.src !== (img_src_value = "" + (images + removeSpace(
	      /*$tooltip*/
	      ctx[10].tp.name.toLowerCase()) + ".jpg"))) attr_dev(img, "src", img_src_value);
	      attr_dev(img, "alt", img_alt_value =
	      /*$tooltip*/
	      ctx[10].tp.shortTitle);
	      attr_dev(img, "class", "svelte-1143ogu");
	      add_location(img, file$o, 181, 12, 6220);
	      attr_dev(div9, "class", "image svelte-1143ogu");
	      add_location(div9, file$o, 180, 10, 6188);
	      attr_dev(div10, "class", "title title-bg svelte-1143ogu");
	      add_location(div10, file$o, 146, 8, 4854);
	      attr_dev(a0, "href", a0_href_value =
	      /*$tooltip*/
	      ctx[10].tp.wikiURL);
	      attr_dev(a0, "target", "_blank");
	      attr_dev(a0, "class", "no-float svelte-1143ogu");
	      add_location(a0, file$o, 225, 10, 7446);
	      attr_dev(div11, "class", "link svelte-1143ogu");
	      add_location(div11, file$o, 223, 8, 7396);
	      attr_dev(h30, "class", "svelte-1143ogu");
	      add_location(h30, file$o, 230, 10, 7595);
	      attr_dev(p, "class", "svelte-1143ogu");
	      add_location(p, file$o, 231, 10, 7626);
	      attr_dev(div12, "class", "description svelte-1143ogu");
	      add_location(div12, file$o, 229, 8, 7559);
	      attr_dev(h31, "class", "svelte-1143ogu");
	      add_location(h31, file$o, 291, 10, 10172);
	      attr_dev(a1, "href", "http://www.wikipedia.org");
	      attr_dev(a1, "target", "_blank");
	      attr_dev(a1, "class", "no-float svelte-1143ogu");
	      add_location(a1, file$o, 292, 10, 10196);
	      attr_dev(div13, "class", "link svelte-1143ogu");
	      add_location(div13, file$o, 290, 8, 10143);
	      attr_dev(div14, "class", "scroll-wrapper svelte-1143ogu");
	      add_location(div14, file$o, 143, 6, 4768);
	      attr_dev(div15, "class", "content svelte-1143ogu");
	      set_style(div15, "top",
	      /*contentTop*/
	      ctx[6] + "px");
	      set_style(div15, "margin", "0px " + (
	      /*$tooltip*/
	      ctx[10].tp.rSizeTot / 3 +
	      /*offset*/
	      ctx[11].left) + "px");
	      add_render_callback(function () {
	        return (
	          /*div15_elementresize_handler*/
	          ctx[16].call(div15)
	        );
	      });
	      add_location(div15, file$o, 139, 4, 4583);
	      attr_dev(div16, "class", "tooltip svelte-1143ogu");
	      set_style(div16, "left",
	      /*left*/
	      ctx[4] + "px");
	      set_style(div16, "top",
	      /*top*/
	      ctx[5] + "px");
	      add_render_callback(function () {
	        return (
	          /*div16_elementresize_handler*/
	          ctx[17].call(div16)
	        );
	      });
	      add_location(div16, file$o, 122, 2, 3836);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div16, anchor);
	      mount_component(eventtooltipcross, div16, null);
	      append_dev(div16, t0);
	      append_dev(div16, div0);
	      append_dev(div16, t1);
	      append_dev(div16, div1);
	      append_dev(div16, t2);
	      append_dev(div16, div15);
	      append_dev(div15, div14);
	      append_dev(div14, div10);
	      append_dev(div10, h2);
	      append_dev(h2, t3);
	      append_dev(div10, t4);
	      append_dev(div10, div8);
	      append_dev(div8, section0);
	      append_dev(section0, div2);
	      append_dev(div2, span0);
	      append_dev(span0, strong0);
	      append_dev(span0, t6);
	      append_dev(span0, t7);
	      append_dev(span0, t8);
	      append_dev(section0, t9);
	      append_dev(section0, div3);
	      append_dev(div3, span1);
	      append_dev(span1, strong1);
	      append_dev(span1, t11);
	      append_dev(span1, t12);
	      append_dev(span1, t13);
	      append_dev(section0, t14);
	      append_dev(section0, div4);
	      append_dev(div4, span2);
	      append_dev(span2, strong2);
	      append_dev(span2, t16);
	      append_dev(span2, t17);
	      append_dev(span2, t18);
	      append_dev(section0, t19);
	      append_dev(section0, div5);
	      append_dev(div5, span3);
	      append_dev(span3, strong3);
	      append_dev(span3, t21);
	      append_dev(span3, t22);
	      append_dev(span3, t23);
	      append_dev(section0, t24);
	      append_dev(section0, div6);
	      append_dev(div6, span4);
	      append_dev(span4, strong4);
	      append_dev(span4, t26);
	      append_dev(span4, t27);
	      append_dev(section0, t28);
	      append_dev(section0, div7);
	      append_dev(div7, span5);
	      append_dev(span5, strong5);
	      append_dev(span5, t30);
	      append_dev(span5, t31);
	      append_dev(div10, t32);
	      append_dev(div10, section1);
	      append_dev(section1, span6);
	      append_dev(section1, t34);
	      append_dev(section1, span7);
	      append_dev(section1, t36);
	      append_dev(section1, span8);
	      append_dev(section1, t38);
	      append_dev(section1, span9);
	      append_dev(section1, t40);
	      append_dev(section1, span10);
	      append_dev(div10, t42);
	      append_dev(div10, div9);
	      append_dev(div9, img);
	      append_dev(div14, t43);
	      if (if_block) if_block.m(div14, null);
	      append_dev(div14, t44);
	      append_dev(div14, div11);
	      append_dev(div11, t45);
	      append_dev(div11, a0);
	      append_dev(a0, t46);
	      append_dev(div14, t47);
	      append_dev(div14, div12);
	      append_dev(div12, h30);
	      append_dev(div12, t49);
	      append_dev(div12, p);
	      append_dev(div14, t51);
	      append_dev(div14, div13);
	      append_dev(div13, h31);
	      append_dev(div13, t53);
	      append_dev(div13, a1);
	      /*div14_binding*/

	      ctx[14](div14);
	      /*div15_binding*/

	      ctx[15](div15);
	      div15_resize_listener = add_resize_listener(div15,
	      /*div15_elementresize_handler*/
	      ctx[16].bind(div15));
	      div16_resize_listener = add_resize_listener(div16,
	      /*div16_elementresize_handler*/
	      ctx[17].bind(div16));
	      current = true;

	      if (!mounted) {
	        dispose = [listen_dev(div16, "click", stop_propagation(
	        /*click_handler*/
	        ctx[12]), false, false, true), listen_dev(div16, "mouseover", stop_propagation(
	        /*mouseover_handler*/
	        ctx[13]), false, false, true)];
	        mounted = true;
	      }
	    },
	    p: function update(ctx, dirty) {
	      var eventtooltipcross_changes = {};
	      if (dirty &
	      /*tWidth*/
	      2) eventtooltipcross_changes.tWidth =
	      /*tWidth*/
	      ctx[1];
	      if (dirty &
	      /*side*/
	      8) eventtooltipcross_changes.side =
	      /*side*/
	      ctx[3];
	      eventtooltipcross.$set(eventtooltipcross_changes);

	      if (!current || dirty &
	      /*tWidth*/
	      2) {
	        set_style(div0, "width",
	        /*tWidth*/
	        ctx[1] + "px");
	      }

	      if (!current || dirty &
	      /*contentTop, $tooltip*/
	      1088) {
	        set_style(div0, "height", Math.max(10, Math.abs(
	        /*contentTop*/
	        ctx[6]) -
	        /*$tooltip*/
	        ctx[10].tp.rSizeTot + 25) + "px");
	      }

	      if (!current || dirty &
	      /*contentTop*/
	      64) {
	        set_style(div0, "top",
	        /*contentTop*/
	        ctx[6] - 10 + "px");
	      }

	      if (!current || dirty &
	      /*tWidth*/
	      2) {
	        set_style(div1, "width",
	        /*tWidth*/
	        ctx[1] + "px");
	      }

	      if (!current || dirty &
	      /*tHeight, contentTop*/
	      68) {
	        set_style(div1, "height", Math.abs(
	        /*tHeight*/
	        ctx[2] - Math.abs(
	        /*contentTop*/
	        ctx[6])) + "px");
	      }

	      if (!current || dirty &
	      /*$tooltip*/
	      1024) {
	        set_style(div1, "top",
	        /*$tooltip*/
	        ctx[10].tp.rSizeTot + 5 + "px");
	      }

	      if ((!current || dirty &
	      /*$tooltip*/
	      1024) && t3_value !== (t3_value =
	      /*$tooltip*/
	      ctx[10].tp.name + "")) set_data_dev(t3, t3_value);
	      if ((!current || dirty &
	      /*$tooltip*/
	      1024) && t7_value !== (t7_value =
	      /*$tooltip*/
	      ctx[10].tp.size + "")) set_data_dev(t7, t7_value);
	      if ((!current || dirty &
	      /*$tooltip*/
	      1024) && t12_value !== (t12_value =
	      /*$tooltip*/
	      ctx[10].tp.weight + "")) set_data_dev(t12, t12_value);
	      if ((!current || dirty &
	      /*$tooltip*/
	      1024) && t17_value !== (t17_value =
	      /*$tooltip*/
	      ctx[10].tp.testDate + "")) set_data_dev(t17, t17_value);
	      if ((!current || dirty &
	      /*$tooltip*/
	      1024) && t22_value !== (t22_value =
	      /*$tooltip*/
	      ctx[10].tp.testDate + "")) set_data_dev(t22, t22_value);
	      if ((!current || dirty &
	      /*$tooltip*/
	      1024) && t27_value !== (t27_value =
	      /*$tooltip*/
	      ctx[10].tp.diet + "")) set_data_dev(t27, t27_value);
	      if ((!current || dirty &
	      /*$tooltip*/
	      1024) && t31_value !== (t31_value =
	      /*$tooltip*/
	      ctx[10].tp.disinformantNation + "")) set_data_dev(t31, t31_value);

	      if (!current || dirty &
	      /*$tooltip*/
	      1024 && img.src !== (img_src_value = "" + (images + removeSpace(
	      /*$tooltip*/
	      ctx[10].tp.name.toLowerCase()) + ".jpg"))) {
	        attr_dev(img, "src", img_src_value);
	      }

	      if (!current || dirty &
	      /*$tooltip*/
	      1024 && img_alt_value !== (img_alt_value =
	      /*$tooltip*/
	      ctx[10].tp.shortTitle)) {
	        attr_dev(img, "alt", img_alt_value);
	      }

	      if (
	      /*$tooltip*/
	      ctx[10].tp.tooltipContent) {
	        if (if_block) {
	          if_block.p(ctx, dirty);
	        } else {
	          if_block = create_if_block_1$5(ctx);
	          if_block.c();
	          if_block.m(div14, t44);
	        }
	      } else if (if_block) {
	        if_block.d(1);
	        if_block = null;
	      }

	      if ((!current || dirty &
	      /*$tooltip*/
	      1024) && t46_value !== (t46_value =
	      /*$tooltip*/
	      ctx[10].tp.name + "")) set_data_dev(t46, t46_value);

	      if (!current || dirty &
	      /*$tooltip*/
	      1024 && a0_href_value !== (a0_href_value =
	      /*$tooltip*/
	      ctx[10].tp.wikiURL)) {
	        attr_dev(a0, "href", a0_href_value);
	      }

	      if (!current || dirty &
	      /*contentTop*/
	      64) {
	        set_style(div15, "top",
	        /*contentTop*/
	        ctx[6] + "px");
	      }

	      if (!current || dirty &
	      /*$tooltip*/
	      1024) {
	        set_style(div15, "margin", "0px " + (
	        /*$tooltip*/
	        ctx[10].tp.rSizeTot / 3 +
	        /*offset*/
	        ctx[11].left) + "px");
	      }

	      if (!current || dirty &
	      /*left*/
	      16) {
	        set_style(div16, "left",
	        /*left*/
	        ctx[4] + "px");
	      }

	      if (!current || dirty &
	      /*top*/
	      32) {
	        set_style(div16, "top",
	        /*top*/
	        ctx[5] + "px");
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(eventtooltipcross.$$.fragment, local);
	      add_render_callback(function () {
	        if (!div16_transition) div16_transition = create_bidirectional_transition(div16, fade, {
	          duration: 200
	        }, true);
	        div16_transition.run(1);
	      });
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(eventtooltipcross.$$.fragment, local);
	      if (!div16_transition) div16_transition = create_bidirectional_transition(div16, fade, {
	        duration: 200
	      }, false);
	      div16_transition.run(0);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div16);
	      destroy_component(eventtooltipcross);
	      if (if_block) if_block.d();
	      /*div14_binding*/

	      ctx[14](null);
	      /*div15_binding*/

	      ctx[15](null);
	      div15_resize_listener();
	      div16_resize_listener();
	      if (detaching && div16_transition) div16_transition.end();
	      mounted = false;
	      run_all(dispose);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$b.name,
	    type: "if",
	    source: "(122:0) {#if (showTooltip)}",
	    ctx: ctx
	  });
	  return block;
	} // (189:8) {#if ($tooltip.tp.tooltipContent)}


	function create_if_block_1$5(ctx) {
	  var div;
	  var t0;
	  var p;
	  var t1_value =
	  /*paragraphs*/
	  ctx[8][0] + "";
	  var t1;
	  var t2;
	  var t3;
	  var if_block0 =
	  /*$tooltip*/
	  ctx[10].tp.periodEra && create_if_block_4$2(ctx);
	  var each_value =
	  /*paragraphs*/
	  ctx[8];
	  validate_each_argument(each_value);
	  var each_blocks = [];

	  for (var i = 0; i < each_value.length; i += 1) {
	    each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
	  }

	  var if_block1 =
	  /*$tooltip*/
	  ctx[10].tp.extraImage === "yes" && create_if_block_2$3(ctx);
	  var block = {
	    c: function create() {
	      div = element("div");
	      if (if_block0) if_block0.c();
	      t0 = space();
	      p = element("p");
	      t1 = text(t1_value);
	      t2 = space();

	      for (var _i = 0; _i < each_blocks.length; _i += 1) {
	        each_blocks[_i].c();
	      }

	      t3 = space();
	      if (if_block1) if_block1.c();
	      attr_dev(p, "class", "svelte-1143ogu");
	      add_location(p, file$o, 201, 10, 6780);
	      attr_dev(div, "class", "description svelte-1143ogu");
	      add_location(div, file$o, 189, 8, 6408);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div, anchor);
	      if (if_block0) if_block0.m(div, null);
	      append_dev(div, t0);
	      append_dev(div, p);
	      append_dev(p, t1);
	      append_dev(div, t2);

	      for (var _i2 = 0; _i2 < each_blocks.length; _i2 += 1) {
	        each_blocks[_i2].m(div, null);
	      }

	      append_dev(div, t3);
	      if (if_block1) if_block1.m(div, null);
	    },
	    p: function update(ctx, dirty) {
	      if (
	      /*$tooltip*/
	      ctx[10].tp.periodEra) {
	        if (if_block0) {
	          if_block0.p(ctx, dirty);
	        } else {
	          if_block0 = create_if_block_4$2(ctx);
	          if_block0.c();
	          if_block0.m(div, t0);
	        }
	      } else if (if_block0) {
	        if_block0.d(1);
	        if_block0 = null;
	      }

	      if (dirty &
	      /*paragraphs*/
	      256 && t1_value !== (t1_value =
	      /*paragraphs*/
	      ctx[8][0] + "")) set_data_dev(t1, t1_value);

	      if (dirty &
	      /*paragraphs, images, removeSpace, $tooltip*/
	      1280) {
	        each_value =
	        /*paragraphs*/
	        ctx[8];
	        validate_each_argument(each_value);

	        var _i3;

	        for (_i3 = 0; _i3 < each_value.length; _i3 += 1) {
	          var child_ctx = get_each_context$5(ctx, each_value, _i3);

	          if (each_blocks[_i3]) {
	            each_blocks[_i3].p(child_ctx, dirty);
	          } else {
	            each_blocks[_i3] = create_each_block$5(child_ctx);

	            each_blocks[_i3].c();

	            each_blocks[_i3].m(div, t3);
	          }
	        }

	        for (; _i3 < each_blocks.length; _i3 += 1) {
	          each_blocks[_i3].d(1);
	        }

	        each_blocks.length = each_value.length;
	      }

	      if (
	      /*$tooltip*/
	      ctx[10].tp.extraImage === "yes") {
	        if (if_block1) {
	          if_block1.p(ctx, dirty);
	        } else {
	          if_block1 = create_if_block_2$3(ctx);
	          if_block1.c();
	          if_block1.m(div, null);
	        }
	      } else if (if_block1) {
	        if_block1.d(1);
	        if_block1 = null;
	      }
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div);
	      if (if_block0) if_block0.d();
	      destroy_each(each_blocks, detaching);
	      if (if_block1) if_block1.d();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_1$5.name,
	    type: "if",
	    source: "(189:8) {#if ($tooltip.tp.tooltipContent)}",
	    ctx: ctx
	  });
	  return block;
	} // (195:10) {#if ($tooltip.tp.periodEra)}


	function create_if_block_4$2(ctx) {
	  var div;
	  var img;
	  var img_src_value;
	  var img_alt_value;
	  var t0;
	  var p;
	  var t1_value =
	  /*$tooltip*/
	  ctx[10].tp.imageCredit + "";
	  var t1;
	  var block = {
	    c: function create() {
	      div = element("div");
	      img = element("img");
	      t0 = space();
	      p = element("p");
	      t1 = text(t1_value);
	      attr_dev(img, "class", "image svelte-1143ogu");
	      if (img.src !== (img_src_value = "" + (images +
	      /*$tooltip*/
	      ctx[10].tp.periodEra + ".jpg"))) attr_dev(img, "src", img_src_value);
	      attr_dev(img, "alt", img_alt_value =
	      /*$tooltip*/
	      ctx[10].tp.shortTitle);
	      add_location(img, file$o, 196, 12, 6523);
	      attr_dev(p, "class", "svelte-1143ogu");
	      add_location(p, file$o, 197, 12, 6628);
	      attr_dev(div, "class", "tt-image svelte-1143ogu");
	      add_location(div, file$o, 195, 10, 6488);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div, anchor);
	      append_dev(div, img);
	      append_dev(div, t0);
	      append_dev(div, p);
	      append_dev(p, t1);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*$tooltip*/
	      1024 && img.src !== (img_src_value = "" + (images +
	      /*$tooltip*/
	      ctx[10].tp.periodEra + ".jpg"))) {
	        attr_dev(img, "src", img_src_value);
	      }

	      if (dirty &
	      /*$tooltip*/
	      1024 && img_alt_value !== (img_alt_value =
	      /*$tooltip*/
	      ctx[10].tp.shortTitle)) {
	        attr_dev(img, "alt", img_alt_value);
	      }

	      if (dirty &
	      /*$tooltip*/
	      1024 && t1_value !== (t1_value =
	      /*$tooltip*/
	      ctx[10].tp.imageCredit + "")) set_data_dev(t1, t1_value);
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_4$2.name,
	    type: "if",
	    source: "(195:10) {#if ($tooltip.tp.periodEra)}",
	    ctx: ctx
	  });
	  return block;
	} // (207:14) {#if i > 0}


	function create_if_block_3$3(ctx) {
	  var div;
	  var img;
	  var img_src_value;
	  var img_alt_value;
	  var t0;
	  var p;
	  var t1_value =
	  /*paragraph*/
	  ctx[27] + "";
	  var t1;
	  var block = {
	    c: function create() {
	      div = element("div");
	      img = element("img");
	      t0 = space();
	      p = element("p");
	      t1 = text(t1_value);
	      if (img.src !== (img_src_value = "" + (images + removeSpace(
	      /*$tooltip*/
	      ctx[10].tp.name.toLowerCase()) +
	      /*i*/
	      ctx[29] + ".jpg"))) attr_dev(img, "src", img_src_value);
	      attr_dev(img, "alt", img_alt_value =
	      /*$tooltip*/
	      ctx[10].tp.shortTitle);
	      attr_dev(img, "class", "svelte-1143ogu");
	      add_location(img, file$o, 208, 16, 6930);
	      attr_dev(div, "class", "image svelte-1143ogu");
	      add_location(div, file$o, 207, 14, 6894);
	      attr_dev(p, "class", "svelte-1143ogu");
	      add_location(p, file$o, 210, 16, 7071);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div, anchor);
	      append_dev(div, img);
	      insert_dev(target, t0, anchor);
	      insert_dev(target, p, anchor);
	      append_dev(p, t1);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*$tooltip*/
	      1024 && img.src !== (img_src_value = "" + (images + removeSpace(
	      /*$tooltip*/
	      ctx[10].tp.name.toLowerCase()) +
	      /*i*/
	      ctx[29] + ".jpg"))) {
	        attr_dev(img, "src", img_src_value);
	      }

	      if (dirty &
	      /*$tooltip*/
	      1024 && img_alt_value !== (img_alt_value =
	      /*$tooltip*/
	      ctx[10].tp.shortTitle)) {
	        attr_dev(img, "alt", img_alt_value);
	      }

	      if (dirty &
	      /*paragraphs*/
	      256 && t1_value !== (t1_value =
	      /*paragraph*/
	      ctx[27] + "")) set_data_dev(t1, t1_value);
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div);
	      if (detaching) detach_dev(t0);
	      if (detaching) detach_dev(p);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_3$3.name,
	    type: "if",
	    source: "(207:14) {#if i > 0}",
	    ctx: ctx
	  });
	  return block;
	} // (206:12) {#each paragraphs as paragraph, i}


	function create_each_block$5(ctx) {
	  var if_block_anchor;
	  var if_block =
	  /*i*/
	  ctx[29] > 0 && create_if_block_3$3(ctx);
	  var block = {
	    c: function create() {
	      if (if_block) if_block.c();
	      if_block_anchor = empty();
	    },
	    m: function mount(target, anchor) {
	      if (if_block) if_block.m(target, anchor);
	      insert_dev(target, if_block_anchor, anchor);
	    },
	    p: function update(ctx, dirty) {
	      if (
	      /*i*/
	      ctx[29] > 0) if_block.p(ctx, dirty);
	    },
	    d: function destroy(detaching) {
	      if (if_block) if_block.d(detaching);
	      if (detaching) detach_dev(if_block_anchor);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_each_block$5.name,
	    type: "each",
	    source: "(206:12) {#each paragraphs as paragraph, i}",
	    ctx: ctx
	  });
	  return block;
	} // (214:12) {#if ($tooltip.tp.extraImage === 'yes')}


	function create_if_block_2$3(ctx) {
	  var div;
	  var img;
	  var img_src_value;
	  var img_alt_value;
	  var block = {
	    c: function create() {
	      div = element("div");
	      img = element("img");
	      if (img.src !== (img_src_value = "" + (images +
	      /*$tooltip*/
	      ctx[10].tp.name.toLowerCase() + "3.jpg"))) attr_dev(img, "src", img_src_value);
	      attr_dev(img, "alt", img_alt_value =
	      /*$tooltip*/
	      ctx[10].tp.shortTitle);
	      attr_dev(img, "class", "svelte-1143ogu");
	      add_location(img, file$o, 215, 14, 7229);
	      attr_dev(div, "class", "image svelte-1143ogu");
	      add_location(div, file$o, 214, 12, 7195);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div, anchor);
	      append_dev(div, img);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*$tooltip*/
	      1024 && img.src !== (img_src_value = "" + (images +
	      /*$tooltip*/
	      ctx[10].tp.name.toLowerCase() + "3.jpg"))) {
	        attr_dev(img, "src", img_src_value);
	      }

	      if (dirty &
	      /*$tooltip*/
	      1024 && img_alt_value !== (img_alt_value =
	      /*$tooltip*/
	      ctx[10].tp.shortTitle)) {
	        attr_dev(img, "alt", img_alt_value);
	      }
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_2$3.name,
	    type: "if",
	    source: "(214:12) {#if ($tooltip.tp.extraImage === 'yes')}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$p(ctx) {
	  var if_block_anchor;
	  var current;
	  var if_block =
	  /*showTooltip*/
	  ctx[9] && create_if_block$b(ctx);
	  var block = {
	    c: function create() {
	      if (if_block) if_block.c();
	      if_block_anchor = empty();
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      if (if_block) if_block.m(target, anchor);
	      insert_dev(target, if_block_anchor, anchor);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (
	      /*showTooltip*/
	      ctx[9]) {
	        if (if_block) {
	          if_block.p(ctx, dirty);

	          if (dirty &
	          /*showTooltip*/
	          512) {
	            transition_in(if_block, 1);
	          }
	        } else {
	          if_block = create_if_block$b(ctx);
	          if_block.c();
	          transition_in(if_block, 1);
	          if_block.m(if_block_anchor.parentNode, if_block_anchor);
	        }
	      } else if (if_block) {
	        group_outros();
	        transition_out(if_block, 1, 1, function () {
	          if_block = null;
	        });
	        check_outros();
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(if_block);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(if_block);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (if_block) if_block.d(detaching);
	      if (detaching) detach_dev(if_block_anchor);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$p.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function removeSpace(str) {
	  return str.replace(/\s/g, "");
	}

	function instance$p($$self, $$props, $$invalidate) {
	  var $textSearchFilter;
	  var $width;
	  var $tooltip;
	  var $controlsHeight;
	  validate_store(textSearchFilter, "textSearchFilter");
	  component_subscribe($$self, textSearchFilter, function ($$value) {
	    return $$invalidate(19, $textSearchFilter = $$value);
	  });
	  validate_store(width, "width");
	  component_subscribe($$self, width, function ($$value) {
	    return $$invalidate(20, $width = $$value);
	  });
	  validate_store(tooltip, "tooltip");
	  component_subscribe($$self, tooltip, function ($$value) {
	    return $$invalidate(10, $tooltip = $$value);
	  });
	  validate_store(controlsHeight, "controlsHeight");
	  component_subscribe($$self, controlsHeight, function ($$value) {
	    return $$invalidate(21, $controlsHeight = $$value);
	  });
	  var offset = {
	    top: 10,
	    right: 10,
	    bottom: 10,
	    left: 10
	  };
	  var contentOffset = -20;
	  var attributionTf = timeFormat("%B %d, %Y");
	  var activityTf = timeFormat("%B %Y");
	  var elem;
	  var tWidth, tHeight;
	  var side;
	  var left, top, contentTop;
	  var scrollWrapper;
	  var paragraphs;
	  var scoreQuestionsExpanded = false;

	  function handleLiClick(type, item) {
	    selectAllFilters();

	    switch (type) {
	      case "platform":
	        platformFilter.selectOne(item);
	        break;

	      case "method":
	        methodFilter.selectOne(item);
	        break;

	      case "source":
	        sourceFilter$1.selectOne(item);
	        break;

	      case "sourceCategory":
	        sourceCategoryFilter.selectOne(item);
	        break;

	      case "tag":
	        tagFilter.selectOne(item);
	        break;
	    }
	  }

	  function highlight(s) {
	    if (!$textSearchFilter || $textSearchFilter === "") return s;
	    return s.replace(new RegExp($textSearchFilter.toLowerCase().split(" or ").join("|"), "gi"), function (match) {
	      return "<span class=\"highlighted\">".concat(match, "</span>");
	    });
	  }

	  var writable_props = [];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$5.warn("<EventTooltip> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("EventTooltip", $$slots, []);

	  function click_handler(event) {
	    bubble($$self, event);
	  }

	  function mouseover_handler(event) {
	    bubble($$self, event);
	  }

	  function div14_binding($$value) {
	    binding_callbacks[$$value ? "unshift" : "push"](function () {
	      scrollWrapper = $$value;
	      $$invalidate(7, scrollWrapper);
	    });
	  }

	  function div15_binding($$value) {
	    binding_callbacks[$$value ? "unshift" : "push"](function () {
	      elem = $$value;
	      $$invalidate(0, elem);
	    });
	  }

	  function div15_elementresize_handler() {
	    tHeight = this.clientHeight;
	    $$invalidate(2, tHeight);
	  }

	  function div16_elementresize_handler() {
	    tWidth = this.clientWidth;
	    $$invalidate(1, tWidth);
	  }

	  $$self.$capture_state = function () {
	    return {
	      afterUpdate: afterUpdate,
	      width: width,
	      panelHeight: panelHeight,
	      controlsHeight: controlsHeight,
	      tooltip: tooltip,
	      fade: fade,
	      slide: slide,
	      timeFormat: timeFormat,
	      extractHostname: extractHostname,
	      platformFilter: platformFilter,
	      methodFilter: methodFilter,
	      timeperiodFilter: timeperiodFilter,
	      sourceFilter: sourceFilter$1,
	      sourceCategoryFilter: sourceCategoryFilter,
	      tagFilter: tagFilter,
	      textSearchFilter: textSearchFilter,
	      highlightPolarization: highlightPolarization,
	      selectAllFilters: selectAllFilters,
	      images: images,
	      EventTooltipCross: EventTooltipCross,
	      Share: Share,
	      offset: offset,
	      contentOffset: contentOffset,
	      attributionTf: attributionTf,
	      activityTf: activityTf,
	      elem: elem,
	      tWidth: tWidth,
	      tHeight: tHeight,
	      side: side,
	      left: left,
	      top: top,
	      contentTop: contentTop,
	      scrollWrapper: scrollWrapper,
	      paragraphs: paragraphs,
	      scoreQuestionsExpanded: scoreQuestionsExpanded,
	      handleLiClick: handleLiClick,
	      highlight: highlight,
	      removeSpace: removeSpace,
	      $textSearchFilter: $textSearchFilter,
	      showTooltip: showTooltip,
	      $width: $width,
	      $tooltip: $tooltip,
	      $controlsHeight: $controlsHeight
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("elem" in $$props) $$invalidate(0, elem = $$props.elem);
	    if ("tWidth" in $$props) $$invalidate(1, tWidth = $$props.tWidth);
	    if ("tHeight" in $$props) $$invalidate(2, tHeight = $$props.tHeight);
	    if ("side" in $$props) $$invalidate(3, side = $$props.side);
	    if ("left" in $$props) $$invalidate(4, left = $$props.left);
	    if ("top" in $$props) $$invalidate(5, top = $$props.top);
	    if ("contentTop" in $$props) $$invalidate(6, contentTop = $$props.contentTop);
	    if ("scrollWrapper" in $$props) $$invalidate(7, scrollWrapper = $$props.scrollWrapper);
	    if ("paragraphs" in $$props) $$invalidate(8, paragraphs = $$props.paragraphs);
	    if ("scoreQuestionsExpanded" in $$props) scoreQuestionsExpanded = $$props.scoreQuestionsExpanded;
	    if ("showTooltip" in $$props) $$invalidate(9, showTooltip = $$props.showTooltip);
	  };

	  var showTooltip;

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  $$self.$$.update = function () {
	    if ($$self.$$.dirty &
	    /*$tooltip*/
	    1024) {
	       $$invalidate(9, showTooltip = $tooltip && $tooltip.tp && $tooltip.tp.show);
	    }

	    if ($$self.$$.dirty &
	    /*showTooltip, $width, $tooltip, contentTop, tHeight, $controlsHeight, side, tWidth, scrollWrapper, paragraphs*/
	    3147726) {
	       if (showTooltip) {
	        scoreQuestionsExpanded = false;
	        $$invalidate(3, side = $width - $tooltip.tp.x < $width / 2 ? "left" : "right");
	        $$invalidate(5, top = $tooltip.tp.fy - offset.top); // adjust for the difference between mouse hover point and balloon center

	        var balloonPos = $tooltip.e.pageY; // the regular tooltip offset to the balloon

	        $$invalidate(6, contentTop = contentOffset); // if the tooltip hits the lower page boundary

	        if (balloonPos + contentTop + tHeight - window.pageYOffset > window.innerHeight) {
	          // console.log('lower')
	          $$invalidate(6, contentTop -= balloonPos + tHeight - window.pageYOffset - window.innerHeight);
	        } // if the tooltip hits the upper page boundary


	        if (balloonPos + contentTop - window.pageYOffset < $controlsHeight) {
	          // console.log('upper')
	          $$invalidate(6, contentTop -= balloonPos + contentTop - window.pageYOffset - $controlsHeight - 50);
	        } // // if the tooltip hits the uper border of the SVG


	        if ($tooltip.tp.fy + contentTop < $controlsHeight) {
	          // console.log('border')
	          $$invalidate(6, contentTop -= $tooltip.tp.fy + contentTop - $controlsHeight);
	        }

	        if (side === "left") {
	          $$invalidate(4, left = $tooltip.tp.x - tWidth + offset.left);
	        } else if (side === "right") {
	          $$invalidate(4, left = $tooltip.tp.x - offset.left);
	        }

	        if (scrollWrapper) scrollWrapper.scrollTo(0, 0); // translate tooltip content to html

	        var tooltipText = $tooltip.tp.tooltipContent;
	        $$invalidate(8, paragraphs = tooltipText.split("<p>"));
	        var numberOfParagraphs = paragraphs.length;
	        console.log(paragraphs[0], paragraphs[1], paragraphs[2]);
	        console.log(numberOfParagraphs);
	      }
	    }
	  };

	  return [elem, tWidth, tHeight, side, left, top, contentTop, scrollWrapper, paragraphs, showTooltip, $tooltip, offset, click_handler, mouseover_handler, div14_binding, div15_binding, div15_elementresize_handler, div16_elementresize_handler];
	}

	var EventTooltip = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(EventTooltip, _SvelteComponentDev);

	  var _super = _createSuper(EventTooltip);

	  function EventTooltip(options) {
	    var _this;

	    _classCallCheck(this, EventTooltip);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$p, create_fragment$p, safe_not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "EventTooltip",
	      options: options,
	      id: create_fragment$p.name
	    });
	    return _this;
	  }

	  return EventTooltip;
	}(SvelteComponentDev);

	var file$p = "src/components/Balloon.svelte"; // (40:2) {#if (timePoint.recentlyAdded)}

	function create_if_block$c(ctx) {
	  var circle;
	  var circle_r_value;
	  var block = {
	    c: function create() {
	      circle = svg_element("circle");
	      attr_dev(circle, "class", "glow svelte-1sqtyh4");
	      attr_dev(circle, "cx", "0");
	      attr_dev(circle, "cy", "0");
	      attr_dev(circle, "r", circle_r_value =
	      /*timePoint*/
	      ctx[0].size);
	      add_location(circle, file$p, 40, 4, 1201);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, circle, anchor);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*timePoint*/
	      1 && circle_r_value !== (circle_r_value =
	      /*timePoint*/
	      ctx[0].size)) {
	        attr_dev(circle, "r", circle_r_value);
	      }
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(circle);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$c.name,
	    type: "if",
	    source: "(40:2) {#if (timePoint.recentlyAdded)}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$q(ctx) {
	  var g;
	  var circle;
	  var circle_r_value;
	  var circle_filter_value;
	  var g_transform_value;
	  var g_intro;
	  var g_outro;
	  var current;
	  var mounted;
	  var dispose;
	  var if_block =
	  /*timePoint*/
	  ctx[0].recentlyAdded && create_if_block$c(ctx);
	  var block = {
	    c: function create() {
	      g = svg_element("g");
	      if (if_block) if_block.c();
	      circle = svg_element("circle");
	      attr_dev(circle, "class", "balloon-main svelte-1sqtyh4");
	      attr_dev(circle, "cx", "0");
	      attr_dev(circle, "cy", "0");
	      attr_dev(circle, "r", circle_r_value = setRadius(
	      /*timePoint*/
	      ctx[0].size) * 1.55);
	      attr_dev(circle, "filter", circle_filter_value = "url(#" +
	      /*timePoint*/
	      ctx[0].image_location + "_image)");
	      add_location(circle, file$p, 47, 2, 1328);
	      attr_dev(g, "class", "balloon svelte-1sqtyh4");
	      attr_dev(g, "transform", g_transform_value = "translate(" +
	      /*tweenedPos*/
	      ctx[1].x + " " +
	      /*tweenedPos*/
	      ctx[1].fy + ")");
	      toggle_class(g, "selected",
	      /*selected*/
	      ctx[2]);
	      add_location(g, file$p, 32, 0, 793);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, g, anchor);
	      if (if_block) if_block.m(g, null);
	      append_dev(g, circle);
	      current = true;

	      if (!mounted) {
	        dispose = [listen_dev(g, "mouseover", stop_propagation(
	        /*handleMouseOver*/
	        ctx[3]), false, false, true), listen_dev(g, "click", stop_propagation(
	        /*handleMouseClick*/
	        ctx[4]), false, false, true)];
	        mounted = true;
	      }
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (
	      /*timePoint*/
	      ctx[0].recentlyAdded) {
	        if (if_block) {
	          if_block.p(ctx, dirty);
	        } else {
	          if_block = create_if_block$c(ctx);
	          if_block.c();
	          if_block.m(g, circle);
	        }
	      } else if (if_block) {
	        if_block.d(1);
	        if_block = null;
	      }

	      if (!current || dirty &
	      /*timePoint*/
	      1 && circle_r_value !== (circle_r_value = setRadius(
	      /*timePoint*/
	      ctx[0].size) * 1.55)) {
	        attr_dev(circle, "r", circle_r_value);
	      }

	      if (!current || dirty &
	      /*timePoint*/
	      1 && circle_filter_value !== (circle_filter_value = "url(#" +
	      /*timePoint*/
	      ctx[0].image_location + "_image)")) {
	        attr_dev(circle, "filter", circle_filter_value);
	      }

	      if (!current || dirty &
	      /*tweenedPos*/
	      2 && g_transform_value !== (g_transform_value = "translate(" +
	      /*tweenedPos*/
	      ctx[1].x + " " +
	      /*tweenedPos*/
	      ctx[1].fy + ")")) {
	        attr_dev(g, "transform", g_transform_value);
	      }

	      if (dirty &
	      /*selected*/
	      4) {
	        toggle_class(g, "selected",
	        /*selected*/
	        ctx[2]);
	      }
	    },
	    i: function intro(local) {
	      if (current) return;

	      if (local) {
	        add_render_callback(function () {
	          if (g_outro) g_outro.end(1);
	          if (!g_intro) g_intro = create_in_transition(g, fade, {
	            duration: bloomDuration,
	            delay: growDuration +
	            /*timePoint*/
	            ctx[0].id * jitterFactor
	          });
	          g_intro.start();
	        });
	      }

	      current = true;
	    },
	    o: function outro(local) {
	      if (g_intro) g_intro.invalidate();

	      if (local) {
	        g_outro = create_out_transition(g, fade, {
	          duration: bloomDuration,
	          delay:
	          /*timePoint*/
	          ctx[0].id * jitterFactor
	        });
	      }

	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(g);
	      if (if_block) if_block.d();
	      if (detaching && g_outro) g_outro.end();
	      mounted = false;
	      run_all(dispose);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$q.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function setRadius(size) {
	  return Math.max(size, 15);
	}

	function instance$q($$self, $$props, $$invalidate) {
	  var timePoint = $$props.timePoint;
	  var tweenedPos = $$props.tweenedPos;
	  var _$$props$selected = $$props.selected,
	      selected = _$$props$selected === void 0 ? false : _$$props$selected;
	  var dispatch = createEventDispatcher();

	  function handleMouseOver(e) {
	    if (e.buttons === 1) return;
	    dispatch("mouseover", {
	      id: timePoint.id,
	      tp: timePoint,
	      e: e
	    });
	  }

	  function handleMouseClick(e) {
	    dispatch("click", {
	      id: timePoint.id,
	      tp: timePoint,
	      e: e
	    });
	  }

	  var writable_props = ["timePoint", "tweenedPos", "selected"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Balloon> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Balloon", $$slots, []);

	  $$self.$$set = function ($$props) {
	    if ("timePoint" in $$props) $$invalidate(0, timePoint = $$props.timePoint);
	    if ("tweenedPos" in $$props) $$invalidate(1, tweenedPos = $$props.tweenedPos);
	    if ("selected" in $$props) $$invalidate(2, selected = $$props.selected);
	  };

	  $$self.$capture_state = function () {
	    return {
	      fade: fade,
	      width: width,
	      bloomDuration: bloomDuration,
	      growDuration: growDuration,
	      jitterFactor: jitterFactor,
	      createEventDispatcher: createEventDispatcher,
	      EventTooltip: EventTooltip,
	      timePoint: timePoint,
	      tweenedPos: tweenedPos,
	      selected: selected,
	      setRadius: setRadius,
	      dispatch: dispatch,
	      handleMouseOver: handleMouseOver,
	      handleMouseClick: handleMouseClick
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("timePoint" in $$props) $$invalidate(0, timePoint = $$props.timePoint);
	    if ("tweenedPos" in $$props) $$invalidate(1, tweenedPos = $$props.tweenedPos);
	    if ("selected" in $$props) $$invalidate(2, selected = $$props.selected);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [timePoint, tweenedPos, selected, handleMouseOver, handleMouseClick];
	}

	var Balloon = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(Balloon, _SvelteComponentDev);

	  var _super = _createSuper(Balloon);

	  function Balloon(options) {
	    var _this;

	    _classCallCheck(this, Balloon);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$q, create_fragment$q, safe_not_equal, {
	      timePoint: 0,
	      tweenedPos: 1,
	      selected: 2
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "Balloon",
	      options: options,
	      id: create_fragment$q.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*timePoint*/
	    ctx[0] === undefined && !("timePoint" in props)) {
	      console.warn("<Balloon> was created without expected prop 'timePoint'");
	    }

	    if (
	    /*tweenedPos*/
	    ctx[1] === undefined && !("tweenedPos" in props)) {
	      console.warn("<Balloon> was created without expected prop 'tweenedPos'");
	    }

	    return _this;
	  }

	  _createClass(Balloon, [{
	    key: "timePoint",
	    get: function get() {
	      throw new Error("<Balloon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Balloon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "tweenedPos",
	    get: function get() {
	      throw new Error("<Balloon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Balloon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "selected",
	    get: function get() {
	      throw new Error("<Balloon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Balloon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return Balloon;
	}(SvelteComponentDev);

	function is_date(obj) {
	  return Object.prototype.toString.call(obj) === '[object Date]';
	}

	function get_interpolator(a, b) {
	  if (a === b || a !== a) return function () {
	    return a;
	  };

	  var type = _typeof(a);

	  if (type !== _typeof(b) || Array.isArray(a) !== Array.isArray(b)) {
	    throw new Error('Cannot interpolate values of different type');
	  }

	  if (Array.isArray(a)) {
	    var arr = b.map(function (bi, i) {
	      return get_interpolator(a[i], bi);
	    });
	    return function (t) {
	      return arr.map(function (fn) {
	        return fn(t);
	      });
	    };
	  }

	  if (type === 'object') {
	    if (!a || !b) throw new Error('Object cannot be null');

	    if (is_date(a) && is_date(b)) {
	      a = a.getTime();
	      b = b.getTime();
	      var delta = b - a;
	      return function (t) {
	        return new Date(a + t * delta);
	      };
	    }

	    var keys = Object.keys(b);
	    var interpolators = {};
	    keys.forEach(function (key) {
	      interpolators[key] = get_interpolator(a[key], b[key]);
	    });
	    return function (t) {
	      var result = {};
	      keys.forEach(function (key) {
	        result[key] = interpolators[key](t);
	      });
	      return result;
	    };
	  }

	  if (type === 'number') {
	    var _delta = b - a;

	    return function (t) {
	      return a + t * _delta;
	    };
	  }

	  throw new Error("Cannot interpolate ".concat(type, " values"));
	}

	function tweened(value) {
	  var defaults = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var store = writable(value);
	  var task;
	  var target_value = value;

	  function set(new_value, opts) {
	    if (value == null) {
	      store.set(value = new_value);
	      return Promise.resolve();
	    }

	    target_value = new_value;
	    var previous_task = task;
	    var started = false;

	    var _assign = assign(assign({}, defaults), opts),
	        _assign$delay = _assign.delay,
	        delay = _assign$delay === void 0 ? 0 : _assign$delay,
	        _assign$duration = _assign.duration,
	        duration = _assign$duration === void 0 ? 400 : _assign$duration,
	        _assign$easing = _assign.easing,
	        easing = _assign$easing === void 0 ? identity : _assign$easing,
	        _assign$interpolate = _assign.interpolate,
	        interpolate = _assign$interpolate === void 0 ? get_interpolator : _assign$interpolate;

	    if (duration === 0) {
	      if (previous_task) {
	        previous_task.abort();
	        previous_task = null;
	      }

	      store.set(value = target_value);
	      return Promise.resolve();
	    }

	    var start = now() + delay;
	    var fn;
	    task = loop(function (now) {
	      if (now < start) return true;

	      if (!started) {
	        fn = interpolate(value, new_value);
	        if (typeof duration === 'function') duration = duration(value, new_value);
	        started = true;
	      }

	      if (previous_task) {
	        previous_task.abort();
	        previous_task = null;
	      }

	      var elapsed = now - start;

	      if (elapsed > duration) {
	        store.set(value = new_value);
	        return false;
	      } // @ts-ignore


	      store.set(value = fn(easing(elapsed / duration)));
	      return true;
	    });
	    return task.promise;
	  }

	  return {
	    set: set,
	    update: function update(fn, opts) {
	      return set(fn(target_value, value), opts);
	    },
	    subscribe: store.subscribe
	  };
	}

	var createTweenedPos = function createTweenedPos() {
	  return tweened(undefined, {
	    delay: 0,
	    duration: 800,
	    easing: cubicInOut$1
	  });
	};

	var file$q = "src/components/Event.svelte"; // (16:0) {#if (timePoint.show)}

	function create_if_block$d(ctx) {
	  var g;
	  var t;
	  var shinycircle;
	  var balloon;
	  var current;
	  shinycircle = new ShinyCircle({
	    props: {
	      timePoint:
	      /*timePoint*/
	      ctx[0],
	      tweenedPos:
	      /*$tweenedPos*/
	      ctx[3],
	      selected:
	      /*selected*/
	      ctx[1],
	      hovered:
	      /*hovered*/
	      ctx[2]
	    },
	    $$inline: true
	  });
	  balloon = new Balloon({
	    props: {
	      timePoint:
	      /*timePoint*/
	      ctx[0],
	      tweenedPos:
	      /*$tweenedPos*/
	      ctx[3],
	      selected:
	      /*selected*/
	      ctx[1]
	    },
	    $$inline: true
	  });
	  balloon.$on("mouseover",
	  /*mouseover_handler*/
	  ctx[5]);
	  balloon.$on("click",
	  /*click_handler*/
	  ctx[6]);
	  var block = {
	    c: function create() {
	      g = svg_element("g");
	      t = text("export let hovered = false;\n    ");
	      create_component(shinycircle.$$.fragment);
	      create_component(balloon.$$.fragment);
	      attr_dev(g, "class", "event");
	      add_location(g, file$q, 16, 2, 421);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, g, anchor);
	      append_dev(g, t);
	      mount_component(shinycircle, g, null);
	      mount_component(balloon, g, null);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var shinycircle_changes = {};
	      if (dirty &
	      /*timePoint*/
	      1) shinycircle_changes.timePoint =
	      /*timePoint*/
	      ctx[0];
	      if (dirty &
	      /*$tweenedPos*/
	      8) shinycircle_changes.tweenedPos =
	      /*$tweenedPos*/
	      ctx[3];
	      if (dirty &
	      /*selected*/
	      2) shinycircle_changes.selected =
	      /*selected*/
	      ctx[1];
	      if (dirty &
	      /*hovered*/
	      4) shinycircle_changes.hovered =
	      /*hovered*/
	      ctx[2];
	      shinycircle.$set(shinycircle_changes);
	      var balloon_changes = {};
	      if (dirty &
	      /*timePoint*/
	      1) balloon_changes.timePoint =
	      /*timePoint*/
	      ctx[0];
	      if (dirty &
	      /*$tweenedPos*/
	      8) balloon_changes.tweenedPos =
	      /*$tweenedPos*/
	      ctx[3];
	      if (dirty &
	      /*selected*/
	      2) balloon_changes.selected =
	      /*selected*/
	      ctx[1];
	      balloon.$set(balloon_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(shinycircle.$$.fragment, local);
	      transition_in(balloon.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(shinycircle.$$.fragment, local);
	      transition_out(balloon.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(g);
	      destroy_component(shinycircle);
	      destroy_component(balloon);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$d.name,
	    type: "if",
	    source: "(16:0) {#if (timePoint.show)}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$r(ctx) {
	  var if_block_anchor;
	  var current;
	  var if_block =
	  /*timePoint*/
	  ctx[0].show && create_if_block$d(ctx);
	  var block = {
	    c: function create() {
	      if (if_block) if_block.c();
	      if_block_anchor = empty();
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      if (if_block) if_block.m(target, anchor);
	      insert_dev(target, if_block_anchor, anchor);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (
	      /*timePoint*/
	      ctx[0].show) {
	        if (if_block) {
	          if_block.p(ctx, dirty);

	          if (dirty &
	          /*timePoint*/
	          1) {
	            transition_in(if_block, 1);
	          }
	        } else {
	          if_block = create_if_block$d(ctx);
	          if_block.c();
	          transition_in(if_block, 1);
	          if_block.m(if_block_anchor.parentNode, if_block_anchor);
	        }
	      } else if (if_block) {
	        group_outros();
	        transition_out(if_block, 1, 1, function () {
	          if_block = null;
	        });
	        check_outros();
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(if_block);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(if_block);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (if_block) if_block.d(detaching);
	      if (detaching) detach_dev(if_block_anchor);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$r.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$r($$self, $$props, $$invalidate) {
	  var $tweenedPos;
	  var timePoint = $$props.timePoint;
	  var _$$props$selected = $$props.selected,
	      selected = _$$props$selected === void 0 ? false : _$$props$selected;
	  var _$$props$hovered = $$props.hovered,
	      hovered = _$$props$hovered === void 0 ? false : _$$props$hovered;
	  var tweenedPos = createTweenedPos();
	  validate_store(tweenedPos, "tweenedPos");
	  component_subscribe($$self, tweenedPos, function (value) {
	    return $$invalidate(3, $tweenedPos = value);
	  });
	  var writable_props = ["timePoint", "selected", "hovered"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Event> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Event", $$slots, []);

	  function mouseover_handler(event) {
	    bubble($$self, event);
	  }

	  function click_handler(event) {
	    bubble($$self, event);
	  }

	  $$self.$$set = function ($$props) {
	    if ("timePoint" in $$props) $$invalidate(0, timePoint = $$props.timePoint);
	    if ("selected" in $$props) $$invalidate(1, selected = $$props.selected);
	    if ("hovered" in $$props) $$invalidate(2, hovered = $$props.hovered);
	  };

	  $$self.$capture_state = function () {
	    return {
	      ShinyCircle: ShinyCircle,
	      Balloon: Balloon,
	      createTweenedPos: createTweenedPos,
	      timePoint: timePoint,
	      selected: selected,
	      hovered: hovered,
	      tweenedPos: tweenedPos,
	      $tweenedPos: $tweenedPos
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("timePoint" in $$props) $$invalidate(0, timePoint = $$props.timePoint);
	    if ("selected" in $$props) $$invalidate(1, selected = $$props.selected);
	    if ("hovered" in $$props) $$invalidate(2, hovered = $$props.hovered);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  $$self.$$.update = function () {
	    if ($$self.$$.dirty &
	    /*timePoint*/
	    1) {
	       set_store_value(tweenedPos, $tweenedPos = {
	        x: timePoint.x,
	        fy: timePoint.fy
	      });
	    }
	  };

	  return [timePoint, selected, hovered, $tweenedPos, tweenedPos, mouseover_handler, click_handler];
	}

	var Event = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(Event, _SvelteComponentDev);

	  var _super = _createSuper(Event);

	  function Event(options) {
	    var _this;

	    _classCallCheck(this, Event);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$r, create_fragment$r, safe_not_equal, {
	      timePoint: 0,
	      selected: 1,
	      hovered: 2
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "Event",
	      options: options,
	      id: create_fragment$r.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*timePoint*/
	    ctx[0] === undefined && !("timePoint" in props)) {
	      console.warn("<Event> was created without expected prop 'timePoint'");
	    }

	    return _this;
	  }

	  _createClass(Event, [{
	    key: "timePoint",
	    get: function get() {
	      throw new Error("<Event>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Event>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "selected",
	    get: function get() {
	      throw new Error("<Event>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Event>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "hovered",
	    get: function get() {
	      throw new Error("<Event>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Event>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return Event;
	}(SvelteComponentDev);

	var file$r = "src/components/Events.svelte";

	function get_each_context$6(ctx, list, i) {
	  var child_ctx = ctx.slice();
	  child_ctx[5] = list[i];
	  return child_ctx;
	} // (23:2) {#each timePoints as timePoint (timePoint.id)}


	function create_each_block$6(key_1, ctx) {
	  var first;
	  var event;
	  var current;
	  event = new Event({
	    props: {
	      timePoint:
	      /*timePoint*/
	      ctx[5],
	      selected:
	      /*$selected*/
	      ctx[2] &&
	      /*$selected*/
	      ctx[2].map(func$2).includes(
	      /*timePoint*/
	      ctx[5].id),
	      hovered:
	      /*$hovered*/
	      ctx[1] &&
	      /*$hovered*/
	      ctx[1].id ===
	      /*timePoint*/
	      ctx[5].id
	    },
	    $$inline: true
	  });
	  event.$on("click",
	  /*handleEventClick*/
	  ctx[4]);
	  event.$on("mouseover",
	  /*handleEventMouseover*/
	  ctx[3]);
	  var block = {
	    key: key_1,
	    first: null,
	    c: function create() {
	      first = empty();
	      create_component(event.$$.fragment);
	      this.first = first;
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, first, anchor);
	      mount_component(event, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var event_changes = {};
	      if (dirty &
	      /*timePoints*/
	      1) event_changes.timePoint =
	      /*timePoint*/
	      ctx[5];
	      if (dirty &
	      /*$selected, timePoints*/
	      5) event_changes.selected =
	      /*$selected*/
	      ctx[2] &&
	      /*$selected*/
	      ctx[2].map(func$2).includes(
	      /*timePoint*/
	      ctx[5].id);
	      if (dirty &
	      /*$hovered, timePoints*/
	      3) event_changes.hovered =
	      /*$hovered*/
	      ctx[1] &&
	      /*$hovered*/
	      ctx[1].id ===
	      /*timePoint*/
	      ctx[5].id;
	      event.$set(event_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(event.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(event.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(first);
	      destroy_component(event, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_each_block$6.name,
	    type: "each",
	    source: "(23:2) {#each timePoints as timePoint (timePoint.id)}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$s(ctx) {
	  var g;
	  var each_blocks = [];
	  var each_1_lookup = new Map();
	  var current;
	  var each_value =
	  /*timePoints*/
	  ctx[0];
	  validate_each_argument(each_value);

	  var get_key = function get_key(ctx) {
	    return (
	      /*timePoint*/
	      ctx[5].id
	    );
	  };

	  validate_each_keys(ctx, each_value, get_each_context$6, get_key);

	  for (var i = 0; i < each_value.length; i += 1) {
	    var child_ctx = get_each_context$6(ctx, each_value, i);
	    var key = get_key(child_ctx);
	    each_1_lookup.set(key, each_blocks[i] = create_each_block$6(key, child_ctx));
	  }

	  var block = {
	    c: function create() {
	      g = svg_element("g");

	      for (var _i = 0; _i < each_blocks.length; _i += 1) {
	        each_blocks[_i].c();
	      }

	      attr_dev(g, "class", "events svelte-1u6vgbw");
	      add_location(g, file$r, 21, 0, 455);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, g, anchor);

	      for (var _i2 = 0; _i2 < each_blocks.length; _i2 += 1) {
	        each_blocks[_i2].m(g, null);
	      }

	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (dirty &
	      /*timePoints, $selected, $hovered, handleEventClick, handleEventMouseover*/
	      31) {
	        var _each_value =
	        /*timePoints*/
	        ctx[0];
	        validate_each_argument(_each_value);
	        group_outros();
	        validate_each_keys(ctx, _each_value, get_each_context$6, get_key);
	        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, _each_value, each_1_lookup, g, outro_and_destroy_block, create_each_block$6, null, get_each_context$6);
	        check_outros();
	      }
	    },
	    i: function intro(local) {
	      if (current) return;

	      for (var _i3 = 0; _i3 < each_value.length; _i3 += 1) {
	        transition_in(each_blocks[_i3]);
	      }

	      current = true;
	    },
	    o: function outro(local) {
	      for (var _i4 = 0; _i4 < each_blocks.length; _i4 += 1) {
	        transition_out(each_blocks[_i4]);
	      }

	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(g);

	      for (var _i5 = 0; _i5 < each_blocks.length; _i5 += 1) {
	        each_blocks[_i5].d();
	      }
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$s.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	var func$2 = function func(d) {
	  return d.id;
	};

	function instance$s($$self, $$props, $$invalidate) {
	  var $hovered;
	  var $selected;
	  validate_store(hovered, "hovered");
	  component_subscribe($$self, hovered, function ($$value) {
	    return $$invalidate(1, $hovered = $$value);
	  });
	  validate_store(selected, "selected");
	  component_subscribe($$self, selected, function ($$value) {
	    return $$invalidate(2, $selected = $$value);
	  });
	  var _$$props$timePoints = $$props.timePoints,
	      timePoints = _$$props$timePoints === void 0 ? [] : _$$props$timePoints;

	  function handleEventMouseover(event) {
	    set_store_value(hovered, $hovered = event.detail);
	  }

	  function handleEventClick(event) {
	    var obj = event.detail;

	    if ($selected.map(function (d) {
	      return d.id;
	    }).includes(obj.id)) {
	      selected.remove(obj);
	    } else {
	      selected.add(obj);
	    }
	  }

	  var writable_props = ["timePoints"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Events> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Events", $$slots, []);

	  $$self.$$set = function ($$props) {
	    if ("timePoints" in $$props) $$invalidate(0, timePoints = $$props.timePoints);
	  };

	  $$self.$capture_state = function () {
	    return {
	      Event: Event,
	      hovered: hovered,
	      selected: selected,
	      timePoints: timePoints,
	      handleEventMouseover: handleEventMouseover,
	      handleEventClick: handleEventClick,
	      $hovered: $hovered,
	      $selected: $selected
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("timePoints" in $$props) $$invalidate(0, timePoints = $$props.timePoints);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [timePoints, $hovered, $selected, handleEventMouseover, handleEventClick];
	}

	var Events = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(Events, _SvelteComponentDev);

	  var _super = _createSuper(Events);

	  function Events(options) {
	    var _this;

	    _classCallCheck(this, Events);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$s, create_fragment$s, safe_not_equal, {
	      timePoints: 0
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "Events",
	      options: options,
	      id: create_fragment$s.name
	    });
	    return _this;
	  }

	  _createClass(Events, [{
	    key: "timePoints",
	    get: function get() {
	      throw new Error("<Events>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Events>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return Events;
	}(SvelteComponentDev);

	var hovered$1 = writable(null);
	var tooltip$1 = derived(hovered$1, function ($hovered) {
	  return $hovered;
	});

	function _templateObject3() {
	  var data = _taggedTemplateLiteral(["M0 0\n          C", " 0,\n           ", " ", ",\n           ", " ", "\n          L", " ", "\n          C", " ", ",\n           ", " 0,\n           ", " 0\n          C", " 0,\n           ", " ", ",\n           ", " ", "\n          L", " ", "\n          C", " ", ",\n           ", " 0,\n           0 0\n          Z"]);

	  _templateObject3 = function _templateObject3() {
	    return data;
	  };

	  return data;
	}

	function _templateObject2() {
	  var data = _taggedTemplateLiteral(["\n          C", " ", ",\n           ", " ", ",\n           ", " ", ""]);

	  _templateObject2 = function _templateObject2() {
	    return data;
	  };

	  return data;
	}

	function _templateObject$1() {
	  var data = _taggedTemplateLiteral(["\n          M", " ", "\n          C", " ", ",\n           ", " ", ",\n           ", " ", ""]);

	  _templateObject$1 = function _templateObject() {
	    return data;
	  };

	  return data;
	}

	var lineGenerator = d3line().curve(curveBasis); // a simple curved line with two endpoints

	var curvyLine = function curvyLine(x1, y1, x2, y2) {
	  return oneLineTrim(_templateObject$1(), x1, y1, x1, (y2 - y1) / 2 + y1, x2, (y2 - y1) / 2 + y1, x2, y2);
	}; // a double curved line with three handle points (used for the source links)

	var curvyDoubleLine = function curvyDoubleLine(x1, y1, x2, y2, x3, y3, shift, yOffset) {
	  if (!x1 || !y1) return curvyLine(x2, y2, x3, y3);
	  var yMulti = x1 < x2 ? -1 : 1;
	  var lineData = [[x1, y1], [x1 + shift, y1 - yOffset / 2], [x1 + shift * 2, y1 - yOffset - shift * yMulti], [x1 + shift * 2, y1 - 2 * yOffset - shift * 2 * yMulti], [x2, Math.max(y1 - 2 * yOffset - shift * 2 * yMulti, y2)], [x2, Math.max(y1 - 3 * yOffset - shift * 2 * yMulti, y2)], [x2, y2]];
	  return lineGenerator(lineData) + oneLineTrim(_templateObject2(), x2, (y3 - y2) / 2 + y2, x3, (y3 - y2) / 2 + y2, x3, y3);
	}; // a soft straight line with diminishing end points (used for the timeline)

	var gentleLine = function gentleLine(width, xOffset, yOffset) {
	  return oneLineTrim(_templateObject3(), xOffset / 2, xOffset / 2, yOffset, xOffset, yOffset, width - xOffset, yOffset, width - xOffset / 2, yOffset, width - xOffset / 2, width, width - xOffset / 2, width - xOffset / 2, -yOffset, width - xOffset, -yOffset, xOffset, -yOffset, xOffset / 2, -yOffset, xOffset / 2);
	};

	var file$s = "src/components/SourceLink.svelte"; // (50:0) {#if (source.show)}

	function create_if_block$e(ctx) {
	  var g;
	  var path;
	  var path_d_value;
	  var path_stroke_value;
	  var path_stroke_width_value;
	  var path_intro;
	  var path_outro;
	  var current;
	  var block = {
	    c: function create() {
	      g = svg_element("g");
	      path = svg_element("path");
	      attr_dev(path, "d", path_d_value = curvyDoubleLine(
	      /*source*/
	      ctx[0].xCountry,
	      /*topMargin*/
	      ctx[9](
	      /*source*/
	      ctx[0].yCountry),
	      /*$tweenedPos*/
	      ctx[4]._x,
	      /*$tweenedPos*/
	      ctx[4]._y,
	      /*$tweenedPos*/
	      ctx[4].x,
	      /*$tweenedPos*/
	      ctx[4].fy +
	      /*source*/
	      ctx[0].rSizeTot - 10,
	      /*source*/
	      ctx[0].shift,
	      /*$mapHeight*/
	      ctx[6] / 15));
	      attr_dev(path, "stroke", path_stroke_value =
	      /*showPolarizationColor*/
	      ctx[3] ?
	      /*source*/
	      ctx[0].polarizationColor : usaBlue);
	      attr_dev(path, "stroke-width", path_stroke_width_value =
	      /*$minDim*/
	      ctx[7] / 200);
	      attr_dev(path, "class", "svelte-11qfvcx");
	      add_location(path, file$s, 53, 4, 1465);
	      attr_dev(g, "class", "source-link svelte-11qfvcx");
	      set_style(g, "opacity",
	      /*opacity*/
	      ctx[5]);
	      set_style(g, "transition", "all 700ms ease");
	      toggle_class(g, "selected",
	      /*selected*/
	      ctx[1] ||
	      /*hovered*/
	      ctx[2]);
	      add_location(g, file$s, 50, 2, 1334);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, g, anchor);
	      append_dev(g, path);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      if (!current || dirty &
	      /*source, $tweenedPos, $mapHeight*/
	      81 && path_d_value !== (path_d_value = curvyDoubleLine(
	      /*source*/
	      ctx[0].xCountry,
	      /*topMargin*/
	      ctx[9](
	      /*source*/
	      ctx[0].yCountry),
	      /*$tweenedPos*/
	      ctx[4]._x,
	      /*$tweenedPos*/
	      ctx[4]._y,
	      /*$tweenedPos*/
	      ctx[4].x,
	      /*$tweenedPos*/
	      ctx[4].fy +
	      /*source*/
	      ctx[0].rSizeTot - 10,
	      /*source*/
	      ctx[0].shift,
	      /*$mapHeight*/
	      ctx[6] / 15))) {
	        attr_dev(path, "d", path_d_value);
	      }

	      if (!current || dirty &
	      /*showPolarizationColor, source*/
	      9 && path_stroke_value !== (path_stroke_value =
	      /*showPolarizationColor*/
	      ctx[3] ?
	      /*source*/
	      ctx[0].polarizationColor : usaBlue)) {
	        attr_dev(path, "stroke", path_stroke_value);
	      }

	      if (!current || dirty &
	      /*$minDim*/
	      128 && path_stroke_width_value !== (path_stroke_width_value =
	      /*$minDim*/
	      ctx[7] / 200)) {
	        attr_dev(path, "stroke-width", path_stroke_width_value);
	      }

	      if (!current || dirty &
	      /*opacity*/
	      32) {
	        set_style(g, "opacity",
	        /*opacity*/
	        ctx[5]);
	      }

	      if (dirty &
	      /*selected, hovered*/
	      6) {
	        toggle_class(g, "selected",
	        /*selected*/
	        ctx[1] ||
	        /*hovered*/
	        ctx[2]);
	      }
	    },
	    i: function intro(local) {
	      if (current) return;

	      if (local) {
	        add_render_callback(function () {
	          if (path_outro) path_outro.end(1);
	          if (!path_intro) path_intro = create_in_transition(path, draw, {
	            duration: growDuration,
	            delay:
	            /*source*/
	            ctx[0].id * jitterFactor,
	            easing: identity
	          });
	          path_intro.start();
	        });
	      }

	      current = true;
	    },
	    o: function outro(local) {
	      if (path_intro) path_intro.invalidate();

	      if (local) {
	        path_outro = create_out_transition(path, draw, {
	          duration: growDuration,
	          delay: bloomDuration +
	          /*source*/
	          ctx[0].id * jitterFactor,
	          easing: identity
	        });
	      }

	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(g);
	      if (detaching && path_outro) path_outro.end();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$e.name,
	    type: "if",
	    source: "(50:0) {#if (source.show)}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$t(ctx) {
	  var if_block_anchor;
	  var if_block =
	  /*source*/
	  ctx[0].show && create_if_block$e(ctx);
	  var block = {
	    c: function create() {
	      if (if_block) if_block.c();
	      if_block_anchor = empty();
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      if (if_block) if_block.m(target, anchor);
	      insert_dev(target, if_block_anchor, anchor);
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (
	      /*source*/
	      ctx[0].show) {
	        if (if_block) {
	          if_block.p(ctx, dirty);

	          if (dirty &
	          /*source*/
	          1) {
	            transition_in(if_block, 1);
	          }
	        } else {
	          if_block = create_if_block$e(ctx);
	          if_block.c();
	          transition_in(if_block, 1);
	          if_block.m(if_block_anchor.parentNode, if_block_anchor);
	        }
	      } else if (if_block) {
	        group_outros();
	        transition_out(if_block, 1, 1, function () {
	          if_block = null;
	        });
	        check_outros();
	      }
	    },
	    i: function intro(local) {
	      transition_in(if_block);
	    },
	    o: function outro(local) {
	      transition_out(if_block);
	    },
	    d: function destroy(detaching) {
	      if (if_block) if_block.d(detaching);
	      if (detaching) detach_dev(if_block_anchor);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$t.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$t($$self, $$props, $$invalidate) {
	  var $tweenedPos;
	  var $mapHeight;
	  var $minDim;
	  validate_store(mapHeight, "mapHeight");
	  component_subscribe($$self, mapHeight, function ($$value) {
	    return $$invalidate(6, $mapHeight = $$value);
	  });
	  validate_store(minDim, "minDim");
	  component_subscribe($$self, minDim, function ($$value) {
	    return $$invalidate(7, $minDim = $$value);
	  });
	  var source = $$props.source;
	  var _$$props$selected = $$props.selected,
	      selected = _$$props$selected === void 0 ? "unselected" : _$$props$selected;
	  var _$$props$hovered = $$props.hovered,
	      hovered = _$$props$hovered === void 0 ? "unselected" : _$$props$hovered;
	  var _$$props$extraFaint = $$props.extraFaint,
	      extraFaint = _$$props$extraFaint === void 0 ? false : _$$props$extraFaint;
	  var _$$props$showPolariza = $$props.showPolarizationColor,
	      showPolarizationColor = _$$props$showPolariza === void 0 ? false : _$$props$showPolariza;
	  var tweenedPos = createTweenedPos();
	  validate_store(tweenedPos, "tweenedPos");
	  component_subscribe($$self, tweenedPos, function (value) {
	    return $$invalidate(4, $tweenedPos = value);
	  });

	  function topMargin(point) {
	    if (source.disNation === "Eurasia") {
	      point = point + 100;
	    }

	    return point;
	  }

	  function setOpacity(selected, hovered, extraFaint) {
	    if (extraFaint) return 0.2 / 3 / 2;
	    var opacity = 0.15 / source.disinformantNation.length;

	    if (selected === "selected" || hovered === "selected") {
	      opacity = 0.95;
	      return opacity;
	    }

	    if (selected === "background" || hovered === "background") opacity = 0.2 / source.disinformantNation.length;
	    return opacity;
	  }

	  var writable_props = ["source", "selected", "hovered", "extraFaint", "showPolarizationColor"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<SourceLink> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("SourceLink", $$slots, []);

	  $$self.$$set = function ($$props) {
	    if ("source" in $$props) $$invalidate(0, source = $$props.source);
	    if ("selected" in $$props) $$invalidate(1, selected = $$props.selected);
	    if ("hovered" in $$props) $$invalidate(2, hovered = $$props.hovered);
	    if ("extraFaint" in $$props) $$invalidate(10, extraFaint = $$props.extraFaint);
	    if ("showPolarizationColor" in $$props) $$invalidate(3, showPolarizationColor = $$props.showPolarizationColor);
	  };

	  $$self.$capture_state = function () {
	    return {
	      draw: draw,
	      mapHeight: mapHeight,
	      minDim: minDim,
	      linear: identity,
	      growDuration: growDuration,
	      bloomDuration: bloomDuration,
	      jitterFactor: jitterFactor,
	      curvyDoubleLine: curvyDoubleLine,
	      createTweenedPos: createTweenedPos,
	      usaBlue: usaBlue,
	      source: source,
	      selected: selected,
	      hovered: hovered,
	      extraFaint: extraFaint,
	      showPolarizationColor: showPolarizationColor,
	      tweenedPos: tweenedPos,
	      topMargin: topMargin,
	      setOpacity: setOpacity,
	      $tweenedPos: $tweenedPos,
	      opacity: opacity,
	      $mapHeight: $mapHeight,
	      $minDim: $minDim
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("source" in $$props) $$invalidate(0, source = $$props.source);
	    if ("selected" in $$props) $$invalidate(1, selected = $$props.selected);
	    if ("hovered" in $$props) $$invalidate(2, hovered = $$props.hovered);
	    if ("extraFaint" in $$props) $$invalidate(10, extraFaint = $$props.extraFaint);
	    if ("showPolarizationColor" in $$props) $$invalidate(3, showPolarizationColor = $$props.showPolarizationColor);
	    if ("opacity" in $$props) $$invalidate(5, opacity = $$props.opacity);
	  };

	  var opacity;

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  $$self.$$.update = function () {
	    if ($$self.$$.dirty &
	    /*source*/
	    1) {
	       set_store_value(tweenedPos, $tweenedPos = {
	        x: source.x,
	        fy: source.fy,
	        _x: source._x,
	        _y: source._y
	      });
	    }

	    if ($$self.$$.dirty &
	    /*selected, hovered, extraFaint*/
	    1030) {
	       $$invalidate(5, opacity = setOpacity(selected, hovered, extraFaint));
	    }
	  };

	  return [source, selected, hovered, showPolarizationColor, $tweenedPos, opacity, $mapHeight, $minDim, tweenedPos, topMargin, extraFaint];
	}

	var SourceLink = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(SourceLink, _SvelteComponentDev);

	  var _super = _createSuper(SourceLink);

	  function SourceLink(options) {
	    var _this;

	    _classCallCheck(this, SourceLink);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$t, create_fragment$t, safe_not_equal, {
	      source: 0,
	      selected: 1,
	      hovered: 2,
	      extraFaint: 10,
	      showPolarizationColor: 3
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "SourceLink",
	      options: options,
	      id: create_fragment$t.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*source*/
	    ctx[0] === undefined && !("source" in props)) {
	      console.warn("<SourceLink> was created without expected prop 'source'");
	    }

	    return _this;
	  }

	  _createClass(SourceLink, [{
	    key: "source",
	    get: function get() {
	      throw new Error("<SourceLink>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<SourceLink>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "selected",
	    get: function get() {
	      throw new Error("<SourceLink>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<SourceLink>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "hovered",
	    get: function get() {
	      throw new Error("<SourceLink>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<SourceLink>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "extraFaint",
	    get: function get() {
	      throw new Error("<SourceLink>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<SourceLink>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "showPolarizationColor",
	    get: function get() {
	      throw new Error("<SourceLink>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<SourceLink>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return SourceLink;
	}(SvelteComponentDev);

	var console_1$6 = globals.console;
	var file$t = "src/components/Centroid.svelte"; // (54:2) {#if (centroid.length > 0)}

	function create_if_block$f(ctx) {
	  var g;
	  var text_1;
	  var t_value =
	  /*centroid*/
	  ctx[0].filter(func$3).length + "";
	  var t;
	  var g_transform_value;
	  var block = {
	    c: function create() {
	      g = svg_element("g");
	      text_1 = svg_element("text");
	      t = text(t_value);
	      set_style(text_1, "transition", "opacity " + growDuration + "ms ease");
	      attr_dev(text_1, "class", "svelte-5cofbe");
	      add_location(text_1, file$t, 55, 6, 1765);
	      attr_dev(g, "class", "centroid-label svelte-5cofbe");
	      attr_dev(g, "transform", g_transform_value = "translate(" +
	      /*centroid*/
	      ctx[0][0].xCountry + " " + (
	      /*topMargin*/
	      ctx[7](
	      /*centroid*/
	      ctx[0][0].yCountry) + 5) + ")");
	      add_location(g, file$t, 54, 6, 1648);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, g, anchor);
	      append_dev(g, text_1);
	      append_dev(text_1, t);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*centroid*/
	      1 && t_value !== (t_value =
	      /*centroid*/
	      ctx[0].filter(func$3).length + "")) set_data_dev(t, t_value);

	      if (dirty &
	      /*centroid*/
	      1 && g_transform_value !== (g_transform_value = "translate(" +
	      /*centroid*/
	      ctx[0][0].xCountry + " " + (
	      /*topMargin*/
	      ctx[7](
	      /*centroid*/
	      ctx[0][0].yCountry) + 5) + ")")) {
	        attr_dev(g, "transform", g_transform_value);
	      }
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(g);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$f.name,
	    type: "if",
	    source: "(54:2) {#if (centroid.length > 0)}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$u(ctx) {
	  var g1;
	  var circle;
	  var circle_cx_value;
	  var circle_cy_value;
	  var circle_r_value;
	  var g0;
	  var text_1;
	  var t;
	  var g0_transform_value;
	  var mounted;
	  var dispose;
	  var if_block =
	  /*centroid*/
	  ctx[0].length > 0 && create_if_block$f(ctx);
	  var block = {
	    c: function create() {
	      g1 = svg_element("g");
	      circle = svg_element("circle");
	      g0 = svg_element("g");
	      text_1 = svg_element("text");
	      t = text(
	      /*country*/
	      ctx[1]);
	      if (if_block) if_block.c();
	      attr_dev(circle, "class", "centroid-fg svelte-5cofbe");
	      set_style(circle, "transition", "stroke-opacity " + growDuration + "ms ease");
	      attr_dev(circle, "cx", circle_cx_value =
	      /*$tweenedPos*/
	      ctx[3].x);
	      attr_dev(circle, "cy", circle_cy_value =
	      /*topMargin*/
	      ctx[7](
	      /*$tweenedPos*/
	      ctx[3].fy));
	      attr_dev(circle, "r", circle_r_value =
	      /*$centroidScale*/
	      ctx[4](10));
	      add_location(circle, file$t, 40, 9, 1106);
	      set_style(text_1, "transition", "opacity " + growDuration + "ms ease");
	      attr_dev(text_1, "class", "svelte-5cofbe");
	      add_location(text_1, file$t, 49, 5, 1491);
	      attr_dev(g0, "class", "centroid-name-label");
	      attr_dev(g0, "transform", g0_transform_value = "translate(" + (
	      /*centroid*/
	      ctx[0][0].xCountry -
	      /*country*/
	      ctx[1].length * 4) + " " + (
	      /*topMargin*/
	      ctx[7](
	      /*centroid*/
	      ctx[0][0].yCountry) + 30) + ")");
	      add_location(g0, file$t, 48, 2, 1346);
	      attr_dev(g1, "class", "centroid svelte-5cofbe");
	      toggle_class(g1, "selected",
	      /*selected*/
	      ctx[2]);
	      add_location(g1, file$t, 34, 0, 876);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, g1, anchor);
	      append_dev(g1, circle);
	      append_dev(g1, g0);
	      append_dev(g0, text_1);
	      append_dev(text_1, t);
	      if (if_block) if_block.m(g1, null);

	      if (!mounted) {
	        dispose = [listen_dev(g1, "click", stop_propagation(
	        /*click_handler*/
	        ctx[8]), false, false, true), listen_dev(g1, "mouseover", stop_propagation(
	        /*mouseover_handler*/
	        ctx[9]), false, false, true)];
	        mounted = true;
	      }
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (dirty &
	      /*$tweenedPos*/
	      8 && circle_cx_value !== (circle_cx_value =
	      /*$tweenedPos*/
	      ctx[3].x)) {
	        attr_dev(circle, "cx", circle_cx_value);
	      }

	      if (dirty &
	      /*$tweenedPos*/
	      8 && circle_cy_value !== (circle_cy_value =
	      /*topMargin*/
	      ctx[7](
	      /*$tweenedPos*/
	      ctx[3].fy))) {
	        attr_dev(circle, "cy", circle_cy_value);
	      }

	      if (dirty &
	      /*$centroidScale*/
	      16 && circle_r_value !== (circle_r_value =
	      /*$centroidScale*/
	      ctx[4](10))) {
	        attr_dev(circle, "r", circle_r_value);
	      }

	      if (dirty &
	      /*country*/
	      2) set_data_dev(t,
	      /*country*/
	      ctx[1]);

	      if (dirty &
	      /*centroid, country*/
	      3 && g0_transform_value !== (g0_transform_value = "translate(" + (
	      /*centroid*/
	      ctx[0][0].xCountry -
	      /*country*/
	      ctx[1].length * 4) + " " + (
	      /*topMargin*/
	      ctx[7](
	      /*centroid*/
	      ctx[0][0].yCountry) + 30) + ")")) {
	        attr_dev(g0, "transform", g0_transform_value);
	      }

	      if (
	      /*centroid*/
	      ctx[0].length > 0) {
	        if (if_block) {
	          if_block.p(ctx, dirty);
	        } else {
	          if_block = create_if_block$f(ctx);
	          if_block.c();
	          if_block.m(g1, null);
	        }
	      } else if (if_block) {
	        if_block.d(1);
	        if_block = null;
	      }

	      if (dirty &
	      /*selected*/
	      4) {
	        toggle_class(g1, "selected",
	        /*selected*/
	        ctx[2]);
	      }
	    },
	    i: noop,
	    o: noop,
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(g1);
	      if (if_block) if_block.d();
	      mounted = false;
	      run_all(dispose);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$u.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	var func$3 = function func(c) {
	  return c.show;
	};

	function instance$u($$self, $$props, $$invalidate) {
	  var $tweenedPos;
	  var $centroidScale;
	  validate_store(centroidScale, "centroidScale");
	  component_subscribe($$self, centroidScale, function ($$value) {
	    return $$invalidate(4, $centroidScale = $$value);
	  });
	  var centroid = $$props.centroid;
	  var country = $$props.country;
	  var _$$props$selected = $$props.selected,
	      selected = _$$props$selected === void 0 ? false : _$$props$selected;
	  var tweenedPos = createTweenedPos();
	  validate_store(tweenedPos, "tweenedPos");
	  component_subscribe($$self, tweenedPos, function (value) {
	    return $$invalidate(3, $tweenedPos = value);
	  });
	  var dispatch = createEventDispatcher();
	  console.log("centroid: ", centroid);
	  console.log("tweenedPos: ", centroid[0].xCountry);

	  function topMargin(point) {
	    if (centroid[0].disNation === "Eurasia") {
	      point = point + 100;
	    }

	    return point;
	  }

	  var writable_props = ["centroid", "country", "selected"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$6.warn("<Centroid> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Centroid", $$slots, []);

	  var click_handler = function click_handler(e) {
	    return dispatch("click", {
	      id: country,
	      c: centroid,
	      e: e
	    });
	  };

	  var mouseover_handler = function mouseover_handler(e) {
	    return dispatch("mouseover", {
	      id: country,
	      c: centroid,
	      e: e
	    });
	  };

	  $$self.$$set = function ($$props) {
	    if ("centroid" in $$props) $$invalidate(0, centroid = $$props.centroid);
	    if ("country" in $$props) $$invalidate(1, country = $$props.country);
	    if ("selected" in $$props) $$invalidate(2, selected = $$props.selected);
	  };

	  $$self.$capture_state = function () {
	    return {
	      centroidScale: centroidScale,
	      bloomDuration: bloomDuration,
	      growDuration: growDuration,
	      jitterFactor: jitterFactor,
	      haveOverlap: haveOverlap,
	      createEventDispatcher: createEventDispatcher,
	      fade: fade,
	      createTweenedPos: createTweenedPos,
	      centroid: centroid,
	      country: country,
	      selected: selected,
	      tweenedPos: tweenedPos,
	      dispatch: dispatch,
	      topMargin: topMargin,
	      $tweenedPos: $tweenedPos,
	      $centroidScale: $centroidScale
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("centroid" in $$props) $$invalidate(0, centroid = $$props.centroid);
	    if ("country" in $$props) $$invalidate(1, country = $$props.country);
	    if ("selected" in $$props) $$invalidate(2, selected = $$props.selected);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  $$self.$$.update = function () {
	    if ($$self.$$.dirty &
	    /*centroid*/
	    1) {
	       set_store_value(tweenedPos, $tweenedPos = {
	        x: centroid[0].xCountry,
	        fy: centroid[0].yCountry
	      });
	    }
	  };

	  return [centroid, country, selected, $tweenedPos, $centroidScale, tweenedPos, dispatch, topMargin, click_handler, mouseover_handler];
	}

	var Centroid = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(Centroid, _SvelteComponentDev);

	  var _super = _createSuper(Centroid);

	  function Centroid(options) {
	    var _this;

	    _classCallCheck(this, Centroid);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$u, create_fragment$u, safe_not_equal, {
	      centroid: 0,
	      country: 1,
	      selected: 2
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "Centroid",
	      options: options,
	      id: create_fragment$u.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*centroid*/
	    ctx[0] === undefined && !("centroid" in props)) {
	      console_1$6.warn("<Centroid> was created without expected prop 'centroid'");
	    }

	    if (
	    /*country*/
	    ctx[1] === undefined && !("country" in props)) {
	      console_1$6.warn("<Centroid> was created without expected prop 'country'");
	    }

	    return _this;
	  }

	  _createClass(Centroid, [{
	    key: "centroid",
	    get: function get() {
	      throw new Error("<Centroid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Centroid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "country",
	    get: function get() {
	      throw new Error("<Centroid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Centroid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "selected",
	    get: function get() {
	      throw new Error("<Centroid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Centroid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return Centroid;
	}(SvelteComponentDev);

	var file$u = "src/components/Sources.svelte";

	function get_each_context$7(ctx, list, i) {
	  var child_ctx = ctx.slice();
	  child_ctx[21] = list[i][0];
	  child_ctx[22] = list[i][1];
	  return child_ctx;
	}

	function get_each_context_1$1(ctx, list, i) {
	  var child_ctx = ctx.slice();
	  child_ctx[25] = list[i];
	  return child_ctx;
	} // (117:2) {#each sources as source (source.idNation)}


	function create_each_block_1$1(key_1, ctx) {
	  var first;
	  var sourcelink;
	  var current;
	  sourcelink = new SourceLink({
	    props: {
	      source:
	      /*source*/
	      ctx[25],
	      selected:
	      /*$eSelected*/
	      ctx[4] &&
	      /*$eSelected*/
	      ctx[4].map(func$4).includes(
	      /*source*/
	      ctx[25].id) ? "selected" :
	      /*$eSelected*/
	      ctx[4] &&
	      /*$eSelected*/
	      ctx[4].length > 0 ? "background" : "unselected",
	      hovered:
	      /*$eHovered*/
	      ctx[5] &&
	      /*$eHovered*/
	      ctx[5].id ===
	      /*source*/
	      ctx[25].id ? "selected" :
	      /*$eHovered*/
	      ctx[5] ? "background" : "unselected",
	      extraFaint:
	      /*source*/
	      ctx[25].outOfTimeRange,
	      showPolarizationColor:
	      /*$highlightPolarization*/
	      ctx[6]
	    },
	    $$inline: true
	  });
	  var block = {
	    key: key_1,
	    first: null,
	    c: function create() {
	      first = empty();
	      create_component(sourcelink.$$.fragment);
	      this.first = first;
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, first, anchor);
	      mount_component(sourcelink, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var sourcelink_changes = {};
	      if (dirty &
	      /*sources*/
	      2) sourcelink_changes.source =
	      /*source*/
	      ctx[25];
	      if (dirty &
	      /*$eSelected, sources*/
	      18) sourcelink_changes.selected =
	      /*$eSelected*/
	      ctx[4] &&
	      /*$eSelected*/
	      ctx[4].map(func$4).includes(
	      /*source*/
	      ctx[25].id) ? "selected" :
	      /*$eSelected*/
	      ctx[4] &&
	      /*$eSelected*/
	      ctx[4].length > 0 ? "background" : "unselected";
	      if (dirty &
	      /*$eHovered, sources*/
	      34) sourcelink_changes.hovered =
	      /*$eHovered*/
	      ctx[5] &&
	      /*$eHovered*/
	      ctx[5].id ===
	      /*source*/
	      ctx[25].id ? "selected" :
	      /*$eHovered*/
	      ctx[5] ? "background" : "unselected";
	      if (dirty &
	      /*sources*/
	      2) sourcelink_changes.extraFaint =
	      /*source*/
	      ctx[25].outOfTimeRange;
	      if (dirty &
	      /*$highlightPolarization*/
	      64) sourcelink_changes.showPolarizationColor =
	      /*$highlightPolarization*/
	      ctx[6];
	      sourcelink.$set(sourcelink_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(sourcelink.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(sourcelink.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(first);
	      destroy_component(sourcelink, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_each_block_1$1.name,
	    type: "each",
	    source: "(117:2) {#each sources as source (source.idNation)}",
	    ctx: ctx
	  });
	  return block;
	} // (132:2) {#each centroids as [country, centroid]}


	function create_each_block$7(ctx) {
	  var centroid;
	  var current;
	  centroid = new Centroid({
	    props: {
	      centroid:
	      /*centroid*/
	      ctx[22],
	      country:
	      /*country*/
	      ctx[21],
	      selected:
	      /*$disinformantNationFilter*/
	      ctx[0].filter(func_1).map(func_2$2).includes(
	      /*country*/
	      ctx[21])
	    },
	    $$inline: true
	  });
	  centroid.$on("click",
	  /*handleCentroidClick*/
	  ctx[8]);
	  centroid.$on("mouseover",
	  /*handleCentroidMouseover*/
	  ctx[9]);
	  var block = {
	    c: function create() {
	      create_component(centroid.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(centroid, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var centroid_changes = {};
	      if (dirty &
	      /*centroids*/
	      4) centroid_changes.centroid =
	      /*centroid*/
	      ctx[22];
	      if (dirty &
	      /*centroids*/
	      4) centroid_changes.country =
	      /*country*/
	      ctx[21];
	      if (dirty &
	      /*$disinformantNationFilter, centroids*/
	      5) centroid_changes.selected =
	      /*$disinformantNationFilter*/
	      ctx[0].filter(func_1).map(func_2$2).includes(
	      /*country*/
	      ctx[21]);
	      centroid.$set(centroid_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(centroid.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(centroid.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(centroid, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_each_block$7.name,
	    type: "each",
	    source: "(132:2) {#each centroids as [country, centroid]}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$v(ctx) {
	  var t;
	  var g;
	  var each_blocks_1 = [];
	  var each0_lookup = new Map();
	  var each0_anchor;
	  var current;
	  var mounted;
	  var dispose;
	  var each_value_1 =
	  /*sources*/
	  ctx[1];
	  validate_each_argument(each_value_1);

	  var get_key = function get_key(ctx) {
	    return (
	      /*source*/
	      ctx[25].idNation
	    );
	  };

	  validate_each_keys(ctx, each_value_1, get_each_context_1$1, get_key);

	  for (var i = 0; i < each_value_1.length; i += 1) {
	    var child_ctx = get_each_context_1$1(ctx, each_value_1, i);
	    var key = get_key(child_ctx);
	    each0_lookup.set(key, each_blocks_1[i] = create_each_block_1$1(key, child_ctx));
	  }

	  var each_value =
	  /*centroids*/
	  ctx[2];
	  validate_each_argument(each_value);
	  var each_blocks = [];

	  for (var _i = 0; _i < each_value.length; _i += 1) {
	    each_blocks[_i] = create_each_block$7(get_each_context$7(ctx, each_value, _i));
	  }

	  var out = function out(i) {
	    return transition_out(each_blocks[i], 1, 1, function () {
	      each_blocks[i] = null;
	    });
	  };

	  var block = {
	    c: function create() {
	      t = space();
	      g = svg_element("g");

	      for (var _i2 = 0; _i2 < each_blocks_1.length; _i2 += 1) {
	        each_blocks_1[_i2].c();
	      }

	      each0_anchor = empty();

	      for (var _i3 = 0; _i3 < each_blocks.length; _i3 += 1) {
	        each_blocks[_i3].c();
	      }

	      attr_dev(g, "class", "centroids-sources svelte-146fsv2");
	      toggle_class(g, "hidden",
	      /*$sourcesSwitch*/
	      ctx[3]);
	      add_location(g, file$u, 115, 0, 3594);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, t, anchor);
	      insert_dev(target, g, anchor);

	      for (var _i4 = 0; _i4 < each_blocks_1.length; _i4 += 1) {
	        each_blocks_1[_i4].m(g, null);
	      }

	      append_dev(g, each0_anchor);

	      for (var _i5 = 0; _i5 < each_blocks.length; _i5 += 1) {
	        each_blocks[_i5].m(g, null);
	      }

	      current = true;

	      if (!mounted) {
	        dispose = listen_dev(document.body, "mouseover",
	        /*handleBodyMouseover*/
	        ctx[7], false, false, false);
	        mounted = true;
	      }
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (dirty &
	      /*sources, $eSelected, $eHovered, $highlightPolarization*/
	      114) {
	        var _each_value_ =
	        /*sources*/
	        ctx[1];
	        validate_each_argument(_each_value_);
	        group_outros();
	        validate_each_keys(ctx, _each_value_, get_each_context_1$1, get_key);
	        each_blocks_1 = update_keyed_each(each_blocks_1, dirty, get_key, 1, ctx, _each_value_, each0_lookup, g, outro_and_destroy_block, create_each_block_1$1, each0_anchor, get_each_context_1$1);
	        check_outros();
	      }

	      if (dirty &
	      /*centroids, $disinformantNationFilter, handleCentroidClick, handleCentroidMouseover*/
	      773) {
	        each_value =
	        /*centroids*/
	        ctx[2];
	        validate_each_argument(each_value);

	        var _i6;

	        for (_i6 = 0; _i6 < each_value.length; _i6 += 1) {
	          var _child_ctx = get_each_context$7(ctx, each_value, _i6);

	          if (each_blocks[_i6]) {
	            each_blocks[_i6].p(_child_ctx, dirty);

	            transition_in(each_blocks[_i6], 1);
	          } else {
	            each_blocks[_i6] = create_each_block$7(_child_ctx);

	            each_blocks[_i6].c();

	            transition_in(each_blocks[_i6], 1);

	            each_blocks[_i6].m(g, null);
	          }
	        }

	        group_outros();

	        for (_i6 = each_value.length; _i6 < each_blocks.length; _i6 += 1) {
	          out(_i6);
	        }

	        check_outros();
	      }

	      if (dirty &
	      /*$sourcesSwitch*/
	      8) {
	        toggle_class(g, "hidden",
	        /*$sourcesSwitch*/
	        ctx[3]);
	      }
	    },
	    i: function intro(local) {
	      if (current) return;

	      for (var _i7 = 0; _i7 < each_value_1.length; _i7 += 1) {
	        transition_in(each_blocks_1[_i7]);
	      }

	      for (var _i8 = 0; _i8 < each_value.length; _i8 += 1) {
	        transition_in(each_blocks[_i8]);
	      }

	      current = true;
	    },
	    o: function outro(local) {
	      for (var _i9 = 0; _i9 < each_blocks_1.length; _i9 += 1) {
	        transition_out(each_blocks_1[_i9]);
	      }

	      each_blocks = each_blocks.filter(Boolean);

	      for (var _i10 = 0; _i10 < each_blocks.length; _i10 += 1) {
	        transition_out(each_blocks[_i10]);
	      }

	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(t);
	      if (detaching) detach_dev(g);

	      for (var _i11 = 0; _i11 < each_blocks_1.length; _i11 += 1) {
	        each_blocks_1[_i11].d();
	      }

	      destroy_each(each_blocks, detaching);
	      mounted = false;
	      dispose();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$v.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	var func$4 = function func(d) {
	  return d.id;
	};

	var func_1 = function func_1(d) {
	  return d.selected;
	};

	var func_2$2 = function func_2(d) {
	  return d.id;
	};

	function instance$v($$self, $$props, $$invalidate) {
	  var $cHovered;
	  var $disinformantNationFilter;
	  var $countries;
	  var $switchValueStore;
	  var $geoPath;
	  var $pangeaRegions;
	  var $panelHeight;
	  var $sourcesSwitch;
	  var $eSelected;
	  var $eHovered;
	  var $highlightPolarization;
	  validate_store(hovered$1, "cHovered");
	  component_subscribe($$self, hovered$1, function ($$value) {
	    return $$invalidate(13, $cHovered = $$value);
	  });
	  validate_store(disinformantNationFilter, "disinformantNationFilter");
	  component_subscribe($$self, disinformantNationFilter, function ($$value) {
	    return $$invalidate(0, $disinformantNationFilter = $$value);
	  });
	  validate_store(countries, "countries");
	  component_subscribe($$self, countries, function ($$value) {
	    return $$invalidate(15, $countries = $$value);
	  });
	  validate_store(switchValueStore, "switchValueStore");
	  component_subscribe($$self, switchValueStore, function ($$value) {
	    return $$invalidate(16, $switchValueStore = $$value);
	  });
	  validate_store(geoPath, "geoPath");
	  component_subscribe($$self, geoPath, function ($$value) {
	    return $$invalidate(17, $geoPath = $$value);
	  });
	  validate_store(pangeaRegions, "pangeaRegions");
	  component_subscribe($$self, pangeaRegions, function ($$value) {
	    return $$invalidate(18, $pangeaRegions = $$value);
	  });
	  validate_store(panelHeight, "panelHeight");
	  component_subscribe($$self, panelHeight, function ($$value) {
	    return $$invalidate(19, $panelHeight = $$value);
	  });
	  validate_store(sourcesSwitch, "sourcesSwitch");
	  component_subscribe($$self, sourcesSwitch, function ($$value) {
	    return $$invalidate(3, $sourcesSwitch = $$value);
	  });
	  validate_store(selected, "eSelected");
	  component_subscribe($$self, selected, function ($$value) {
	    return $$invalidate(4, $eSelected = $$value);
	  });
	  validate_store(hovered, "eHovered");
	  component_subscribe($$self, hovered, function ($$value) {
	    return $$invalidate(5, $eHovered = $$value);
	  });
	  validate_store(highlightPolarization, "highlightPolarization");
	  component_subscribe($$self, highlightPolarization, function ($$value) {
	    return $$invalidate(6, $highlightPolarization = $$value);
	  });
	  var timePoints = $$props.timePoints;
	  var disNationNumberLeft = 0;
	  var disNationNumberRight = 0;

	  function handleMapClick() {
	    disinformantNationFilter.selectAll();
	  }

	  function handleBodyMouseover() {
	    set_store_value(hovered$1, $cHovered = null);
	  }

	  function handleCentroidClick(event) {
	    var obj = event.detail;

	    if ($disinformantNationFilter.filter(function (d) {
	      return d.selected;
	    }).length === $disinformantNationFilter.length) {
	      selectAllFilters();
	      disinformantNationFilter.selectOne(obj.id);
	    } else if ($disinformantNationFilter.filter(function (d) {
	      return d.selected;
	    }).map(function (d) {
	      return d.id;
	    }).includes(obj.id)) {
	      selectAllFilters();
	    } else {
	      selectAllFilters();
	      disinformantNationFilter.selectOne(obj.id);
	    }
	  }

	  function handleCentroidMouseover(event) {
	    set_store_value(hovered$1, $cHovered = event.detail);
	  }

	  var writable_props = ["timePoints"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Sources> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Sources", $$slots, []);

	  $$self.$$set = function ($$props) {
	    if ("timePoints" in $$props) $$invalidate(10, timePoints = $$props.timePoints);
	  };

	  $$self.$capture_state = function () {
	    return {
	      panelHeight: panelHeight,
	      width: width,
	      mapHeight: mapHeight,
	      countries: countries,
	      pangeaRegions: pangeaRegions,
	      geoPath: geoPath,
	      switchValueStore: switchValueStore,
	      group: group,
	      sortConsistently: sortConsistently,
	      eHovered: hovered,
	      eSelected: selected,
	      cHovered: hovered$1,
	      disinformantNationFilter: disinformantNationFilter,
	      selectAllFilters: selectAllFilters,
	      unselectAllFilters: unselectAllFilters,
	      highlightPolarization: highlightPolarization,
	      sourcesSwitch: sourcesSwitch,
	      centroidSwitch: centroidSwitch,
	      SourceLink: SourceLink,
	      Centroid: Centroid,
	      timePoints: timePoints,
	      disNationNumberLeft: disNationNumberLeft,
	      disNationNumberRight: disNationNumberRight,
	      handleMapClick: handleMapClick,
	      handleBodyMouseover: handleBodyMouseover,
	      handleCentroidClick: handleCentroidClick,
	      handleCentroidMouseover: handleCentroidMouseover,
	      $cHovered: $cHovered,
	      $disinformantNationFilter: $disinformantNationFilter,
	      countryNames: countryNames,
	      $countries: $countries,
	      sources: sources,
	      $switchValueStore: $switchValueStore,
	      $geoPath: $geoPath,
	      $pangeaRegions: $pangeaRegions,
	      $panelHeight: $panelHeight,
	      centroids: centroids,
	      $sourcesSwitch: $sourcesSwitch,
	      $eSelected: $eSelected,
	      $eHovered: $eHovered,
	      $highlightPolarization: $highlightPolarization
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("timePoints" in $$props) $$invalidate(10, timePoints = $$props.timePoints);
	    if ("disNationNumberLeft" in $$props) disNationNumberLeft = $$props.disNationNumberLeft;
	    if ("disNationNumberRight" in $$props) disNationNumberRight = $$props.disNationNumberRight;
	    if ("countryNames" in $$props) $$invalidate(14, countryNames = $$props.countryNames);
	    if ("sources" in $$props) $$invalidate(1, sources = $$props.sources);
	    if ("centroids" in $$props) $$invalidate(2, centroids = $$props.centroids);
	  };

	  var countryNames;
	  var sources;
	  var centroids;

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  $$self.$$.update = function () {
	    if ($$self.$$.dirty &
	    /*$countries*/
	    32768) {
	       $$invalidate(14, countryNames = $countries.map(function (d) {
	        return d.properties.name;
	      }));
	    }

	    if ($$self.$$.dirty &
	    /*timePoints, countryNames, $switchValueStore, $geoPath, $pangeaRegions, $countries, $panelHeight, disNationNumberRight, disNationNumberLeft*/
	    1039360) {
	       $$invalidate(1, sources = timePoints.map(function (d) {
	        return d.disinformantNation.map(function (disNation, i) {
	          var coords = [];
	          var nativeCountry = false;

	          if (countryNames.includes(disNation)) {
	            if ($switchValueStore === "on") {
	              coords = $geoPath.centroid($pangeaRegions.find(function (country) {
	                return country.properties.name === disNation;
	              }));
	            } else {
	              coords = $geoPath.centroid($countries.find(function (country) {
	                return country.properties.name === disNation;
	              }));

	              if (disNation === "North America") {
	                coords = [$geoPath.centroid($countries.find(function (country) {
	                  return country.properties.name === "Mexico";
	                }))[0], $geoPath.centroid($countries.find(function (country) {
	                  return country.properties.name === "Spain";
	                }))[1]];
	              }

	              if (disNation === "Antarctica") {
	                coords[1] = coords[1] - 100;
	              }
	            }

	            nativeCountry = true;
	          }

	          return _objectSpread2(_objectSpread2({}, d), {}, {
	            idNation: [d.id, i].join(""),
	            xCountry: coords[0],
	            yCountry: coords[1] + $panelHeight,
	            disNation: disNation,
	            nativeCountry: nativeCountry
	          });
	        });
	      }).flat().sort(function (a, b) {
	        return sortConsistently(a, b, "disNation", "_x");
	      }).map(function (d, i, arr) {
	        var shift = 0;

	        if (arr[i - 1] && arr[i - 1].disNation === d.disNation) {
	          shift = d.xCountry < d._x ? disNationNumberRight += 1 : disNationNumberLeft -= 1;
	        } else {
	          disNationNumberRight = disNationNumberLeft = 0;
	        }

	        return _objectSpread2(_objectSpread2({}, d), {}, {
	          shift: shift
	        });
	      }).map(function (d, _, arr) {
	        var minDisNationShift = Math.min.apply(Math, _toConsumableArray(arr.filter(function (a) {
	          return a.disNation === d.disNation;
	        }).map(function (a) {
	          return a.shift;
	        })));
	        return _objectSpread2(_objectSpread2({}, d), {}, {
	          shift: d.shift <= 0 ? -1 - (d.shift + Math.abs(minDisNationShift)) : d.shift
	        });
	      }));
	    }

	    if ($$self.$$.dirty &
	    /*sources*/
	    2) {
	       $$invalidate(2, centroids = _toConsumableArray(group(sources.filter(function (s) {
	        return s.nativeCountry;
	      }), function (s) {
	        return s.disNation;
	      })));
	    }
	  };

	  return [$disinformantNationFilter, sources, centroids, $sourcesSwitch, $eSelected, $eHovered, $highlightPolarization, handleBodyMouseover, handleCentroidClick, handleCentroidMouseover, timePoints];
	}

	var Sources = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(Sources, _SvelteComponentDev);

	  var _super = _createSuper(Sources);

	  function Sources(options) {
	    var _this;

	    _classCallCheck(this, Sources);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$v, create_fragment$v, safe_not_equal, {
	      timePoints: 10
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "Sources",
	      options: options,
	      id: create_fragment$v.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*timePoints*/
	    ctx[10] === undefined && !("timePoints" in props)) {
	      console.warn("<Sources> was created without expected prop 'timePoints'");
	    }

	    return _this;
	  }

	  _createClass(Sources, [{
	    key: "timePoints",
	    get: function get() {
	      throw new Error("<Sources>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Sources>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return Sources;
	}(SvelteComponentDev);

	var parseDate$2 = timeParse('%m/%d/%Y');

	var loadSpots = /*#__PURE__*/function () {
	  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	    var data;
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            _context.next = 2;
	            return csv$1(spotData, function (d, i) {
	              return {
	                id: i,
	                name: d.event_name,
	                date: d.date,
	                endDate: d.endDate,
	                description: d.description
	              };
	            });

	          case 2:
	            data = _context.sent;
	            return _context.abrupt("return", data);

	          case 4:
	          case "end":
	            return _context.stop();
	        }
	      }
	    }, _callee);
	  }));

	  return function loadSpots() {
	    return _ref.apply(this, arguments);
	  };
	}();

	var file$v = "src/components/SpotTooltip.svelte";

	function create_fragment$w(ctx) {
	  var div1;
	  var div0;
	  var p0;
	  var t0_value =
	  /*data*/
	  ctx[0].date + "";
	  var t0;
	  var t1;
	  var t2_value =
	  /*data*/
	  ctx[0].endDate + "";
	  var t2;
	  var t3;
	  var t4;
	  var h2;
	  var t5_value =
	  /*data*/
	  ctx[0].name + "";
	  var t5;
	  var t6;
	  var img;
	  var img_src_value;
	  var t7;
	  var p1;
	  var t8_value =
	  /*data*/
	  ctx[0].description + "";
	  var t8;
	  var div1_resize_listener;
	  var div1_transition;
	  var current;
	  var block = {
	    c: function create() {
	      div1 = element("div");
	      div0 = element("div");
	      p0 = element("p");
	      t0 = text(t0_value);
	      t1 = text(" - ");
	      t2 = text(t2_value);
	      t3 = text(" Million Years Ago");
	      t4 = space();
	      h2 = element("h2");
	      t5 = text(t5_value);
	      t6 = space();
	      img = element("img");
	      t7 = space();
	      p1 = element("p");
	      t8 = text(t8_value);
	      attr_dev(p0, "class", "date svelte-t89rcg");
	      add_location(p0, file$v, 35, 4, 732);
	      attr_dev(h2, "class", "name svelte-t89rcg");
	      add_location(h2, file$v, 38, 4, 815);
	      if (img.src !== (img_src_value = "images/" +
	      /*data*/
	      ctx[0].name + ".jpg")) attr_dev(img, "src", img_src_value);
	      attr_dev(img, "alt", "timeline era");
	      add_location(img, file$v, 41, 4, 865);
	      attr_dev(p1, "class", " description svelte-t89rcg");
	      add_location(p1, file$v, 42, 4, 925);
	      attr_dev(div0, "class", "content svelte-t89rcg");
	      add_location(div0, file$v, 34, 2, 706);
	      attr_dev(div1, "class", "spot-tooltip svelte-t89rcg");
	      set_style(div1, "left",
	      /*left*/
	      ctx[3] + "px");
	      set_style(div1, "top",
	      /*y*/
	      ctx[1] + "px");
	      set_style(div1, "width", maxWidth$1 + "px");
	      add_render_callback(function () {
	        return (
	          /*div1_elementresize_handler*/
	          ctx[5].call(div1)
	        );
	      });
	      add_location(div1, file$v, 30, 0, 546);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div1, anchor);
	      append_dev(div1, div0);
	      append_dev(div0, p0);
	      append_dev(p0, t0);
	      append_dev(p0, t1);
	      append_dev(p0, t2);
	      append_dev(p0, t3);
	      append_dev(div0, t4);
	      append_dev(div0, h2);
	      append_dev(h2, t5);
	      append_dev(div0, t6);
	      append_dev(div0, img);
	      append_dev(div0, t7);
	      append_dev(div0, p1);
	      append_dev(p1, t8);
	      div1_resize_listener = add_resize_listener(div1,
	      /*div1_elementresize_handler*/
	      ctx[5].bind(div1));
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if ((!current || dirty &
	      /*data*/
	      1) && t0_value !== (t0_value =
	      /*data*/
	      ctx[0].date + "")) set_data_dev(t0, t0_value);
	      if ((!current || dirty &
	      /*data*/
	      1) && t2_value !== (t2_value =
	      /*data*/
	      ctx[0].endDate + "")) set_data_dev(t2, t2_value);
	      if ((!current || dirty &
	      /*data*/
	      1) && t5_value !== (t5_value =
	      /*data*/
	      ctx[0].name + "")) set_data_dev(t5, t5_value);

	      if (!current || dirty &
	      /*data*/
	      1 && img.src !== (img_src_value = "images/" +
	      /*data*/
	      ctx[0].name + ".jpg")) {
	        attr_dev(img, "src", img_src_value);
	      }

	      if ((!current || dirty &
	      /*data*/
	      1) && t8_value !== (t8_value =
	      /*data*/
	      ctx[0].description + "")) set_data_dev(t8, t8_value);

	      if (!current || dirty &
	      /*left*/
	      8) {
	        set_style(div1, "left",
	        /*left*/
	        ctx[3] + "px");
	      }

	      if (!current || dirty &
	      /*y*/
	      2) {
	        set_style(div1, "top",
	        /*y*/
	        ctx[1] + "px");
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      add_render_callback(function () {
	        if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {
	          duration: 200
	        }, true);
	        div1_transition.run(1);
	      });
	      current = true;
	    },
	    o: function outro(local) {
	      if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {
	        duration: 200
	      }, false);
	      div1_transition.run(0);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div1);
	      div1_resize_listener();
	      if (detaching && div1_transition) div1_transition.end();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$w.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	var maxWidth$1 = 300;
	var margin$2 = 10;

	function instance$w($$self, $$props, $$invalidate) {
	  var data = $$props.data;
	  var _$$props$x = $$props.x,
	      x = _$$props$x === void 0 ? 0 : _$$props$x;
	  var _$$props$y = $$props.y,
	      y = _$$props$y === void 0 ? 0 : _$$props$y;
	  var tf = timeFormat("%B %d, %Y");
	  var width = maxWidth$1;
	  var left = 0;
	  var writable_props = ["data", "x", "y"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<SpotTooltip> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("SpotTooltip", $$slots, []);

	  function div1_elementresize_handler() {
	    width = this.clientWidth;
	    $$invalidate(2, width);
	  }

	  $$self.$$set = function ($$props) {
	    if ("data" in $$props) $$invalidate(0, data = $$props.data);
	    if ("x" in $$props) $$invalidate(4, x = $$props.x);
	    if ("y" in $$props) $$invalidate(1, y = $$props.y);
	  };

	  $$self.$capture_state = function () {
	    return {
	      fade: fade,
	      timeFormat: timeFormat,
	      data: data,
	      x: x,
	      y: y,
	      tf: tf,
	      maxWidth: maxWidth$1,
	      margin: margin$2,
	      width: width,
	      left: left
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("data" in $$props) $$invalidate(0, data = $$props.data);
	    if ("x" in $$props) $$invalidate(4, x = $$props.x);
	    if ("y" in $$props) $$invalidate(1, y = $$props.y);
	    if ("width" in $$props) $$invalidate(2, width = $$props.width);
	    if ("left" in $$props) $$invalidate(3, left = $$props.left);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  $$self.$$.update = function () {
	    if ($$self.$$.dirty &
	    /*x, width*/
	    20) {
	       {
	        if (x - width / 2 < 0) {
	          $$invalidate(3, left = margin$2);
	        } else {
	          $$invalidate(3, left = x - width / 2);
	        }

	        if (x + width - document.body.offsetWidth > 0) {
	          $$invalidate(3, left = document.body.offsetWidth - width - margin$2);
	        }
	      }
	    }
	  };

	  return [data, y, width, left, x, div1_elementresize_handler];
	}

	var SpotTooltip = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(SpotTooltip, _SvelteComponentDev);

	  var _super = _createSuper(SpotTooltip);

	  function SpotTooltip(options) {
	    var _this;

	    _classCallCheck(this, SpotTooltip);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$w, create_fragment$w, safe_not_equal, {
	      data: 0,
	      x: 4,
	      y: 1
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "SpotTooltip",
	      options: options,
	      id: create_fragment$w.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*data*/
	    ctx[0] === undefined && !("data" in props)) {
	      console.warn("<SpotTooltip> was created without expected prop 'data'");
	    }

	    return _this;
	  }

	  _createClass(SpotTooltip, [{
	    key: "data",
	    get: function get() {
	      throw new Error("<SpotTooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<SpotTooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "x",
	    get: function get() {
	      throw new Error("<SpotTooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<SpotTooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "y",
	    get: function get() {
	      throw new Error("<SpotTooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<SpotTooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return SpotTooltip;
	}(SvelteComponentDev);

	function spottooltipable(node, _ref) {
	  var data = _ref.data,
	      target = _ref.target,
	      top = _ref.top;
	  var component;

	  function handleMouseleave(e) {
	    component.$destroy();
	    node.removeEventListener('mouseleave', handleMouseleave);
	  }

	  function handleMouseenter(e) {
	    if (!target) return;

	    var _node$getBoundingClie = node.getBoundingClientRect(),
	        left = _node$getBoundingClie.left;

	    component = new SpotTooltip({
	      target: target,
	      props: {
	        data: data,
	        x: left,
	        y: top
	      },
	      intro: true
	    });
	    node.addEventListener('mouseleave', handleMouseleave);
	  }

	  node.addEventListener('mouseenter', handleMouseenter);
	  return {
	    destroy: function destroy() {
	      node.removeEventListener('mouseenter', handleMouseenter);
	    }
	  };
	}

	var console_1$7 = globals.console;
	var file$w = "src/components/TimelineSpot.svelte"; // (90:18) {#if (spot.name === 'Jurassic' || spot.name === 'Triassic'|| spot.name === 'Cretaceous') }

	function create_if_block$g(ctx) {
	  var path;
	  var path_d_value;
	  var block = {
	    c: function create() {
	      path = svg_element("path");
	      attr_dev(path, "d", path_d_value = "M" + (
	      /*timeScaleText*/
	      ctx[1] ?
	      /*timeScaleText*/
	      ctx[1].getComputedTextLength() + 2 * offset : 0) + " 0l" + lineLength + " 0");
	      attr_dev(path, "marker-end", "url(#arrow)");
	      attr_dev(path, "class", "svelte-thtvro");
	      add_location(path, file$w, 90, 12, 2259);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, path, anchor);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*timeScaleText*/
	      2 && path_d_value !== (path_d_value = "M" + (
	      /*timeScaleText*/
	      ctx[1] ?
	      /*timeScaleText*/
	      ctx[1].getComputedTextLength() + 2 * offset : 0) + " 0l" + lineLength + " 0")) {
	        attr_dev(path, "d", path_d_value);
	      }
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(path);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$g.name,
	    type: "if",
	    source: "(90:18) {#if (spot.name === 'Jurassic' || spot.name === 'Triassic'|| spot.name === 'Cretaceous') }",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$x(ctx) {
	  var g2;
	  var g1;
	  var g0;
	  var rect;
	  var rect_width_value;
	  var rect_class_value;
	  var text0;
	  var t0;
	  var text1;
	  var t1;
	  var g0_transform_value;
	  var spottooltipable_action;
	  var mounted;
	  var dispose;
	  var if_block = (
	  /*spot*/
	  ctx[0].name === "Jurassic" ||
	  /*spot*/
	  ctx[0].name === "Triassic" ||
	  /*spot*/
	  ctx[0].name === "Cretaceous") && create_if_block$g(ctx);
	  var block = {
	    c: function create() {
	      g2 = svg_element("g");
	      g1 = svg_element("g");
	      g0 = svg_element("g");
	      rect = svg_element("rect");
	      text0 = svg_element("text");
	      t0 = text(
	      /*displayName*/
	      ctx[2]);
	      text1 = svg_element("text");
	      t1 = text(
	      /*displayName*/
	      ctx[2]);
	      if (if_block) if_block.c();
	      attr_dev(rect, "x", "0");
	      attr_dev(rect, "y", "-20");
	      attr_dev(rect, "width", rect_width_value =
	      /*$x2*/
	      ctx[4] -
	      /*$x*/
	      ctx[3]);
	      attr_dev(rect, "height", "40");
	      attr_dev(rect, "rx", "5");
	      attr_dev(rect, "class", rect_class_value = "" + (null_to_empty(
	      /*spotName*/
	      ctx[9]) + " svelte-thtvro"));
	      add_location(rect, file$w, 79, 12, 1767);
	      attr_dev(text0, "class", "bg svelte-thtvro");
	      attr_dev(text0, "dx", offset);
	      attr_dev(text0, "dy", "4");
	      add_location(text0, file$w, 83, 12, 1923);
	      attr_dev(text1, "dx", offset);
	      attr_dev(text1, "dy", "4");
	      attr_dev(text1, "class", "svelte-thtvro");
	      add_location(text1, file$w, 86, 12, 2029);
	      attr_dev(g0, "class", "spot time-scale-label svelte-thtvro");
	      attr_dev(g0, "transform", g0_transform_value = "translate(" +
	      /*$x*/
	      ctx[3] + " -20)");
	      add_location(g0, file$w, 73, 0, 1570);
	      attr_dev(g1, "class", "time-scale svelte-thtvro");
	      add_location(g1, file$w, 72, 2, 1547);
	      attr_dev(g2, "class", "labels");
	      add_location(g2, file$w, 71, 0, 1526);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, g2, anchor);
	      append_dev(g2, g1);
	      append_dev(g1, g0);
	      append_dev(g0, rect);
	      append_dev(g0, text0);
	      append_dev(text0, t0);
	      append_dev(g0, text1);
	      append_dev(text1, t1);
	      /*text1_binding*/

	      ctx[11](text1);
	      if (if_block) if_block.m(g0, null);

	      if (!mounted) {
	        dispose = [listen_dev(g0, "click",
	        /*testSetScale*/
	        ctx[10], false, false, false), action_destroyer(spottooltipable_action = spottooltipable.call(null, g0, {
	          data:
	          /*spot*/
	          ctx[0],
	          target:
	          /*$drawWrapper*/
	          ctx[5],
	          top:
	          /*$panelHeight*/
	          ctx[6] + 20
	        }))];
	        mounted = true;
	      }
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (dirty &
	      /*$x2, $x*/
	      24 && rect_width_value !== (rect_width_value =
	      /*$x2*/
	      ctx[4] -
	      /*$x*/
	      ctx[3])) {
	        attr_dev(rect, "width", rect_width_value);
	      }

	      if (dirty &
	      /*displayName*/
	      4) set_data_dev(t0,
	      /*displayName*/
	      ctx[2]);
	      if (dirty &
	      /*displayName*/
	      4) set_data_dev(t1,
	      /*displayName*/
	      ctx[2]);

	      if (
	      /*spot*/
	      ctx[0].name === "Jurassic" ||
	      /*spot*/
	      ctx[0].name === "Triassic" ||
	      /*spot*/
	      ctx[0].name === "Cretaceous") {
	        if (if_block) {
	          if_block.p(ctx, dirty);
	        } else {
	          if_block = create_if_block$g(ctx);
	          if_block.c();
	          if_block.m(g0, null);
	        }
	      } else if (if_block) {
	        if_block.d(1);
	        if_block = null;
	      }

	      if (dirty &
	      /*$x*/
	      8 && g0_transform_value !== (g0_transform_value = "translate(" +
	      /*$x*/
	      ctx[3] + " -20)")) {
	        attr_dev(g0, "transform", g0_transform_value);
	      }

	      if (spottooltipable_action && is_function(spottooltipable_action.update) && dirty &
	      /*spot, $drawWrapper, $panelHeight*/
	      97) spottooltipable_action.update.call(null, {
	        data:
	        /*spot*/
	        ctx[0],
	        target:
	        /*$drawWrapper*/
	        ctx[5],
	        top:
	        /*$panelHeight*/
	        ctx[6] + 20
	      });
	    },
	    i: noop,
	    o: noop,
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(g2);
	      /*text1_binding*/

	      ctx[11](null);
	      if (if_block) if_block.d();
	      mounted = false;
	      run_all(dispose);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$x.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	var lineLength = 35;
	var offset = 5;

	function instance$x($$self, $$props, $$invalidate) {
	  var $x;
	  var $timeScale;
	  var $x2;
	  var $originalTimeDomain;
	  var $drawWrapper;
	  var $panelHeight;
	  validate_store(timeScale, "timeScale");
	  component_subscribe($$self, timeScale, function ($$value) {
	    return $$invalidate(12, $timeScale = $$value);
	  });
	  validate_store(originalTimeDomain, "originalTimeDomain");
	  component_subscribe($$self, originalTimeDomain, function ($$value) {
	    return $$invalidate(13, $originalTimeDomain = $$value);
	  });
	  validate_store(drawWrapper, "drawWrapper");
	  component_subscribe($$self, drawWrapper, function ($$value) {
	    return $$invalidate(5, $drawWrapper = $$value);
	  });
	  validate_store(panelHeight, "panelHeight");
	  component_subscribe($$self, panelHeight, function ($$value) {
	    return $$invalidate(6, $panelHeight = $$value);
	  });
	  var spot = $$props.spot;
	  var x = createTweenedPos();
	  validate_store(x, "x");
	  component_subscribe($$self, x, function (value) {
	    return $$invalidate(3, $x = value);
	  });
	  var x2 = createTweenedPos();
	  validate_store(x2, "x2");
	  component_subscribe($$self, x2, function (value) {
	    return $$invalidate(4, $x2 = value);
	  });
	  var yScaleText, mapScaleText, timeScaleText;
	  var spotName = spot.name;
	  var displayName;

	  if (spotName === "Neogene") {
	    displayName = "Ng";
	  } else {
	    displayName = spotName;
	  }

	  function testSetScale(e) {
	    console.log(e);
	    console.log(e.path[0].classList[0]);
	    if (!$originalTimeDomain) set_store_value(originalTimeDomain, $originalTimeDomain = _toConsumableArray($timeScale.domain()));

	    if (e.path[0].classList[0] === "Neogene") {
	      $timeScale.domain([2, 23]);
	    }

	    if (e.path[0].classList[0] === "Paleogene") {
	      $timeScale.domain([23, 65]);
	    }

	    if (e.path[0].classList[0] === "Cretaceous") {
	      $timeScale.domain([65, 150]);
	    }

	    if (e.path[0].classList[0] === "Jurassic") {
	      $timeScale.domain([150, 210]);
	    }

	    if (e.path[0].classList[0] === "Triassic") {
	      $timeScale.domain([210, 310]);
	    }

	    timeScale.set($timeScale);
	  } //resetBrush();


	  var writable_props = ["spot"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$7.warn("<TimelineSpot> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("TimelineSpot", $$slots, []);

	  function text1_binding($$value) {
	    binding_callbacks[$$value ? "unshift" : "push"](function () {
	      timeScaleText = $$value;
	      $$invalidate(1, timeScaleText);
	    });
	  }

	  $$self.$$set = function ($$props) {
	    if ("spot" in $$props) $$invalidate(0, spot = $$props.spot);
	  };

	  $$self.$capture_state = function () {
	    return {
	      panelHeight: panelHeight,
	      timeScale: timeScale,
	      margin: margin,
	      spottooltipable: spottooltipable,
	      drawWrapper: drawWrapper,
	      createTweenedPos: createTweenedPos,
	      originalTimeDomain: originalTimeDomain,
	      spot: spot,
	      x: x,
	      x2: x2,
	      lineLength: lineLength,
	      offset: offset,
	      yScaleText: yScaleText,
	      mapScaleText: mapScaleText,
	      timeScaleText: timeScaleText,
	      spotName: spotName,
	      displayName: displayName,
	      testSetScale: testSetScale,
	      $x: $x,
	      $timeScale: $timeScale,
	      $x2: $x2,
	      $originalTimeDomain: $originalTimeDomain,
	      $drawWrapper: $drawWrapper,
	      $panelHeight: $panelHeight
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("spot" in $$props) $$invalidate(0, spot = $$props.spot);
	    if ("yScaleText" in $$props) yScaleText = $$props.yScaleText;
	    if ("mapScaleText" in $$props) mapScaleText = $$props.mapScaleText;
	    if ("timeScaleText" in $$props) $$invalidate(1, timeScaleText = $$props.timeScaleText);
	    if ("spotName" in $$props) $$invalidate(9, spotName = $$props.spotName);
	    if ("displayName" in $$props) $$invalidate(2, displayName = $$props.displayName);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  $$self.$$.update = function () {
	    if ($$self.$$.dirty &
	    /*$timeScale, spot*/
	    4097) {
	       set_store_value(x, $x = $timeScale(spot.date));
	    }

	    if ($$self.$$.dirty &
	    /*$timeScale, spot*/
	    4097) {
	       set_store_value(x2, $x2 = $timeScale(spot.endDate));
	    }
	  };

	  return [spot, timeScaleText, displayName, $x, $x2, $drawWrapper, $panelHeight, x, x2, spotName, testSetScale, text1_binding];
	}

	var TimelineSpot = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(TimelineSpot, _SvelteComponentDev);

	  var _super = _createSuper(TimelineSpot);

	  function TimelineSpot(options) {
	    var _this;

	    _classCallCheck(this, TimelineSpot);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$x, create_fragment$x, safe_not_equal, {
	      spot: 0
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "TimelineSpot",
	      options: options,
	      id: create_fragment$x.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*spot*/
	    ctx[0] === undefined && !("spot" in props)) {
	      console_1$7.warn("<TimelineSpot> was created without expected prop 'spot'");
	    }

	    return _this;
	  }

	  _createClass(TimelineSpot, [{
	    key: "spot",
	    get: function get() {
	      throw new Error("<TimelineSpot>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<TimelineSpot>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return TimelineSpot;
	}(SvelteComponentDev);

	var file$x = "src/components/TimelineSpots.svelte";

	function get_each_context$8(ctx, list, i) {
	  var child_ctx = ctx.slice();
	  child_ctx[2] = list[i];
	  return child_ctx;
	} // (18:4) {#each spots as spot (spot.id)}


	function create_each_block$8(key_1, ctx) {
	  var first;
	  var timelinespot;
	  var current;
	  timelinespot = new TimelineSpot({
	    props: {
	      spot:
	      /*spot*/
	      ctx[2]
	    },
	    $$inline: true
	  });
	  var block = {
	    key: key_1,
	    first: null,
	    c: function create() {
	      first = empty();
	      create_component(timelinespot.$$.fragment);
	      this.first = first;
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, first, anchor);
	      mount_component(timelinespot, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var timelinespot_changes = {};
	      if (dirty &
	      /*spots*/
	      1) timelinespot_changes.spot =
	      /*spot*/
	      ctx[2];
	      timelinespot.$set(timelinespot_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(timelinespot.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(timelinespot.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(first);
	      destroy_component(timelinespot, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_each_block$8.name,
	    type: "each",
	    source: "(18:4) {#each spots as spot (spot.id)}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$y(ctx) {
	  var g1;
	  var g0;
	  var each_blocks = [];
	  var each_1_lookup = new Map();
	  var g1_transform_value;
	  var current;
	  var each_value =
	  /*spots*/
	  ctx[0];
	  validate_each_argument(each_value);

	  var get_key = function get_key(ctx) {
	    return (
	      /*spot*/
	      ctx[2].id
	    );
	  };

	  validate_each_keys(ctx, each_value, get_each_context$8, get_key);

	  for (var i = 0; i < each_value.length; i += 1) {
	    var child_ctx = get_each_context$8(ctx, each_value, i);
	    var key = get_key(child_ctx);
	    each_1_lookup.set(key, each_blocks[i] = create_each_block$8(key, child_ctx));
	  }

	  var block = {
	    c: function create() {
	      g1 = svg_element("g");
	      g0 = svg_element("g");

	      for (var _i = 0; _i < each_blocks.length; _i += 1) {
	        each_blocks[_i].c();
	      }

	      attr_dev(g0, "class", "spots");
	      add_location(g0, file$x, 16, 2, 409);
	      attr_dev(g1, "class", "timeline-spots");
	      attr_dev(g1, "transform", g1_transform_value = "translate(0 " +
	      /*$panelHeight*/
	      ctx[1] + ")");
	      add_location(g1, file$x, 15, 0, 340);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, g1, anchor);
	      append_dev(g1, g0);

	      for (var _i2 = 0; _i2 < each_blocks.length; _i2 += 1) {
	        each_blocks[_i2].m(g0, null);
	      }

	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (dirty &
	      /*spots*/
	      1) {
	        var _each_value =
	        /*spots*/
	        ctx[0];
	        validate_each_argument(_each_value);
	        group_outros();
	        validate_each_keys(ctx, _each_value, get_each_context$8, get_key);
	        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, _each_value, each_1_lookup, g0, outro_and_destroy_block, create_each_block$8, null, get_each_context$8);
	        check_outros();
	      }

	      if (!current || dirty &
	      /*$panelHeight*/
	      2 && g1_transform_value !== (g1_transform_value = "translate(0 " +
	      /*$panelHeight*/
	      ctx[1] + ")")) {
	        attr_dev(g1, "transform", g1_transform_value);
	      }
	    },
	    i: function intro(local) {
	      if (current) return;

	      for (var _i3 = 0; _i3 < each_value.length; _i3 += 1) {
	        transition_in(each_blocks[_i3]);
	      }

	      current = true;
	    },
	    o: function outro(local) {
	      for (var _i4 = 0; _i4 < each_blocks.length; _i4 += 1) {
	        transition_out(each_blocks[_i4]);
	      }

	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(g1);

	      for (var _i5 = 0; _i5 < each_blocks.length; _i5 += 1) {
	        each_blocks[_i5].d();
	      }
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$y.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$y($$self, $$props, $$invalidate) {
	  var $panelHeight;
	  validate_store(panelHeight, "panelHeight");
	  component_subscribe($$self, panelHeight, function ($$value) {
	    return $$invalidate(1, $panelHeight = $$value);
	  });
	  var spots = [];
	  onMount( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            _context.t0 = $$invalidate;
	            _context.next = 3;
	            return loadSpots();

	          case 3:
	            _context.t1 = spots = _context.sent;
	            (0, _context.t0)(0, _context.t1);

	          case 5:
	          case "end":
	            return _context.stop();
	        }
	      }
	    }, _callee);
	  })));
	  var writable_props = [];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<TimelineSpots> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("TimelineSpots", $$slots, []);

	  $$self.$capture_state = function () {
	    return {
	      onMount: onMount,
	      panelHeight: panelHeight,
	      loadSpots: loadSpots,
	      TimelineSpot: TimelineSpot,
	      spots: spots,
	      $panelHeight: $panelHeight
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("spots" in $$props) $$invalidate(0, spots = $$props.spots);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [spots, $panelHeight];
	}

	var TimelineSpots = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(TimelineSpots, _SvelteComponentDev);

	  var _super = _createSuper(TimelineSpots);

	  function TimelineSpots(options) {
	    var _this;

	    _classCallCheck(this, TimelineSpots);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$y, create_fragment$y, safe_not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "TimelineSpots",
	      options: options,
	      id: create_fragment$y.name
	    });
	    return _this;
	  }

	  return TimelineSpots;
	}(SvelteComponentDev);

	var file$y = "src/components/Timeline.svelte";

	function create_fragment$z(ctx) {
	  var g;
	  var path;
	  var path_d_value;
	  var g_transform_value;
	  var t;
	  var timelinespots;
	  var current;
	  timelinespots = new TimelineSpots({
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      g = svg_element("g");
	      path = svg_element("path");
	      t = space();
	      create_component(timelinespots.$$.fragment);
	      attr_dev(path, "d", path_d_value = gentleLine(
	      /*$width*/
	      ctx[0],
	      /*xOffset*/
	      ctx[2],
	      /*yOffset*/
	      ctx[3]));
	      attr_dev(path, "class", "svelte-1g1f7w9");
	      add_location(path, file$y, 13, 2, 382);
	      attr_dev(g, "class", "timeline");
	      attr_dev(g, "transform", g_transform_value = "translate(0 " +
	      /*$panelHeight*/
	      ctx[1] + ")");
	      add_location(g, file$y, 12, 0, 319);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, g, anchor);
	      append_dev(g, path);
	      insert_dev(target, t, anchor);
	      mount_component(timelinespots, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (!current || dirty &
	      /*$width*/
	      1 && path_d_value !== (path_d_value = gentleLine(
	      /*$width*/
	      ctx[0],
	      /*xOffset*/
	      ctx[2],
	      /*yOffset*/
	      ctx[3]))) {
	        attr_dev(path, "d", path_d_value);
	      }

	      if (!current || dirty &
	      /*$panelHeight*/
	      2 && g_transform_value !== (g_transform_value = "translate(0 " +
	      /*$panelHeight*/
	      ctx[1] + ")")) {
	        attr_dev(g, "transform", g_transform_value);
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(timelinespots.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(timelinespots.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(g);
	      if (detaching) detach_dev(t);
	      destroy_component(timelinespots, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$z.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$z($$self, $$props, $$invalidate) {
	  var $width;
	  var $maxDim;
	  var $panelHeight;
	  validate_store(width, "width");
	  component_subscribe($$self, width, function ($$value) {
	    return $$invalidate(0, $width = $$value);
	  });
	  validate_store(maxDim, "maxDim");
	  component_subscribe($$self, maxDim, function ($$value) {
	    return $$invalidate(4, $maxDim = $$value);
	  });
	  validate_store(panelHeight, "panelHeight");
	  component_subscribe($$self, panelHeight, function ($$value) {
	    return $$invalidate(1, $panelHeight = $$value);
	  });
	  var xOffset = $width / 70;
	  var yOffset = $maxDim / 900;
	  var writable_props = [];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Timeline> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Timeline", $$slots, []);

	  $$self.$capture_state = function () {
	    return {
	      oneLineTrim: oneLineTrim,
	      width: width,
	      maxDim: maxDim,
	      panelHeight: panelHeight,
	      gentleLine: gentleLine,
	      TimelineSpots: TimelineSpots,
	      xOffset: xOffset,
	      yOffset: yOffset,
	      $width: $width,
	      $maxDim: $maxDim,
	      $panelHeight: $panelHeight
	    };
	  };

	  return [$width, $panelHeight, xOffset, yOffset];
	}

	var Timeline = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(Timeline, _SvelteComponentDev);

	  var _super = _createSuper(Timeline);

	  function Timeline(options) {
	    var _this;

	    _classCallCheck(this, Timeline);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$z, create_fragment$z, safe_not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "Timeline",
	      options: options,
	      id: create_fragment$z.name
	    });
	    return _this;
	  }

	  return Timeline;
	}(SvelteComponentDev);

	var file$z = "src/components/Legend.svelte";

	function get_each_context$9(ctx, list, i) {
	  var child_ctx = ctx.slice();
	  child_ctx[6] = list[i];
	  child_ctx[8] = i;
	  return child_ctx;
	} // (53:4) {#each rTicks as tick, i}


	function create_each_block$9(ctx) {
	  var line;
	  var line_y__value;
	  var line_x__value;
	  var line_y__value_1;
	  var text_1;
	  var t_value =
	  /*commaFormat*/
	  ctx[2](
	  /*tick*/
	  ctx[6]) + "";
	  var t;
	  var text_1_transform_value;
	  var circle;
	  var circle_cy_value;
	  var circle_r_value;
	  var block = {
	    c: function create() {
	      line = svg_element("line");
	      text_1 = svg_element("text");
	      t = text(t_value);
	      circle = svg_element("circle");
	      attr_dev(line, "x1", "0");
	      attr_dev(line, "y1", line_y__value =
	      /*rTicks*/
	      ctx[3][0] *
	      /*circleScale*/
	      ctx[4] - 2 * (
	      /*tick*/
	      ctx[6] *
	      /*circleScale*/
	      ctx[4]));
	      attr_dev(line, "x2", line_x__value =
	      /*rTicks*/
	      ctx[3][0] *
	      /*circleScale*/
	      ctx[4] + 15);
	      attr_dev(line, "y2", line_y__value_1 =
	      /*rTicks*/
	      ctx[3][0] *
	      /*circleScale*/
	      ctx[4] - 2 * (
	      /*tick*/
	      ctx[6] *
	      /*circleScale*/
	      ctx[4]));
	      attr_dev(line, "class", "svelte-1jr8m9r");
	      add_location(line, file$z, 53, 6, 1977);
	      attr_dev(text_1, "class", "tick svelte-1jr8m9r");
	      attr_dev(text_1, "transform", text_1_transform_value = "translate(" + (
	      /*rTicks*/
	      ctx[3][0] *
	      /*circleScale*/
	      ctx[4] + 18) + " " + (
	      /*rTicks*/
	      ctx[3][0] *
	      /*circleScale*/
	      ctx[4] - 2 * (
	      /*tick*/
	      ctx[6] *
	      /*circleScale*/
	      ctx[4])) + ")");
	      add_location(text_1, file$z, 57, 6, 2192);
	      attr_dev(circle, "cx", "0");
	      attr_dev(circle, "cy", circle_cy_value =
	      /*rTicks*/
	      ctx[3][0] *
	      /*circleScale*/
	      ctx[4] -
	      /*tick*/
	      ctx[6] *
	      /*circleScale*/
	      ctx[4]);
	      attr_dev(circle, "r", circle_r_value =
	      /*tick*/
	      ctx[6] *
	      /*circleScale*/
	      ctx[4]);
	      attr_dev(circle, "class", "svelte-1jr8m9r");
	      add_location(circle, file$z, 61, 6, 2383);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, line, anchor);
	      insert_dev(target, text_1, anchor);
	      append_dev(text_1, t);
	      insert_dev(target, circle, anchor);
	    },
	    p: noop,
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(line);
	      if (detaching) detach_dev(text_1);
	      if (detaching) detach_dev(circle);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_each_block$9.name,
	    type: "each",
	    source: "(53:4) {#each rTicks as tick, i}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$A(ctx) {
	  var g1;
	  var text_1;
	  var t;
	  var text_1_transform_value;
	  var g0;
	  var g0_transform_value;
	  var g1_transform_value;
	  var each_value =
	  /*rTicks*/
	  ctx[3];
	  validate_each_argument(each_value);
	  var each_blocks = [];

	  for (var i = 0; i < each_value.length; i += 1) {
	    each_blocks[i] = create_each_block$9(get_each_context$9(ctx, each_value, i));
	  }

	  var block = {
	    c: function create() {
	      g1 = svg_element("g");
	      text_1 = svg_element("text");
	      t = text("Size in feet\n  ");
	      g0 = svg_element("g");

	      for (var _i = 0; _i < each_blocks.length; _i += 1) {
	        each_blocks[_i].c();
	      }

	      attr_dev(text_1, "transform", text_1_transform_value = "translate(" + (-(
	      /*rTicks*/
	      ctx[3][0] *
	      /*circleScale*/
	      ctx[4]) - 20) + " " +
	      /*rTicks*/
	      ctx[3].slice(-1)[0] *
	      /*circleScale*/
	      ctx[4] + ") rotate(270)");
	      attr_dev(text_1, "dy", "4");
	      attr_dev(text_1, "class", "svelte-1jr8m9r");
	      add_location(text_1, file$z, 47, 2, 1683);
	      attr_dev(g0, "class", "total-r-scale svelte-1jr8m9r");
	      attr_dev(g0, "transform", g0_transform_value = "translate(0 " + -2 * (
	      /*rTicks*/
	      ctx[3].slice(-1)[0] *
	      /*circleScale*/
	      ctx[4]) + ")");
	      add_location(g0, file$z, 51, 2, 1846);
	      attr_dev(g1, "class", "legend");
	      attr_dev(g1, "transform", g1_transform_value = "translate(" + (
	      /*$width*/
	      ctx[0] -
	      /*rTicks*/
	      ctx[3][0] *
	      /*circleScale*/
	      ctx[4] - 65) + " " + (
	      /*$sizeTotalYScale*/
	      ctx[1].range()[1] - 20) + ")");
	      add_location(g1, file$z, 45, 0, 1557);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, g1, anchor);
	      append_dev(g1, text_1);
	      append_dev(text_1, t);
	      append_dev(g1, g0);

	      for (var _i2 = 0; _i2 < each_blocks.length; _i2 += 1) {
	        each_blocks[_i2].m(g0, null);
	      }
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (dirty &
	      /*rTicks, circleScale, commaFormat*/
	      28) {
	        each_value =
	        /*rTicks*/
	        ctx[3];
	        validate_each_argument(each_value);

	        var _i3;

	        for (_i3 = 0; _i3 < each_value.length; _i3 += 1) {
	          var child_ctx = get_each_context$9(ctx, each_value, _i3);

	          if (each_blocks[_i3]) {
	            each_blocks[_i3].p(child_ctx, dirty);
	          } else {
	            each_blocks[_i3] = create_each_block$9(child_ctx);

	            each_blocks[_i3].c();

	            each_blocks[_i3].m(g0, null);
	          }
	        }

	        for (; _i3 < each_blocks.length; _i3 += 1) {
	          each_blocks[_i3].d(1);
	        }

	        each_blocks.length = each_value.length;
	      }

	      if (dirty &
	      /*$width, $sizeTotalYScale*/
	      3 && g1_transform_value !== (g1_transform_value = "translate(" + (
	      /*$width*/
	      ctx[0] -
	      /*rTicks*/
	      ctx[3][0] *
	      /*circleScale*/
	      ctx[4] - 65) + " " + (
	      /*$sizeTotalYScale*/
	      ctx[1].range()[1] - 20) + ")")) {
	        attr_dev(g1, "transform", g1_transform_value);
	      }
	    },
	    i: noop,
	    o: noop,
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(g1);
	      destroy_each(each_blocks, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$A.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$A($$self, $$props, $$invalidate) {
	  var $width;
	  var $sizeTotalYScale;
	  validate_store(width, "width");
	  component_subscribe($$self, width, function ($$value) {
	    return $$invalidate(0, $width = $$value);
	  });
	  validate_store(sizeTotalYScale, "sizeTotalYScale");
	  component_subscribe($$self, sizeTotalYScale, function ($$value) {
	    return $$invalidate(1, $sizeTotalYScale = $$value);
	  });
	  var commaFormat = format(","); // const rTicks = [$sizeTotalYScale(115), $sizeTotalYScale(40), $sizeTotalYScale(20)];

	  var rTicks = [115, 50, 15];
	  var unscaled = [115, 40, 20];
	  var circleScale = 1.25;
	  var writable_props = [];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Legend> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Legend", $$slots, []);

	  $$self.$capture_state = function () {
	    return {
	      timeScale: timeScale,
	      sizeTotalYScale: sizeTotalYScale,
	      sizeTotalRScale: sizeTotalRScale,
	      sizeShareRScale: sizeShareRScale,
	      margin: margin,
	      width: width,
	      format: format,
	      commaFormat: commaFormat,
	      rTicks: rTicks,
	      unscaled: unscaled,
	      circleScale: circleScale,
	      $width: $width,
	      $sizeTotalYScale: $sizeTotalYScale
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("circleScale" in $$props) $$invalidate(4, circleScale = $$props.circleScale);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [$width, $sizeTotalYScale, commaFormat, rTicks, circleScale];
	}

	var Legend = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(Legend, _SvelteComponentDev);

	  var _super = _createSuper(Legend);

	  function Legend(options) {
	    var _this;

	    _classCallCheck(this, Legend);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$A, create_fragment$A, safe_not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "Legend",
	      options: options,
	      id: create_fragment$A.name
	    });
	    return _this;
	  }

	  return Legend;
	}(SvelteComponentDev);

	var file$A = "src/components/Labels.svelte";

	function get_each_context$a(ctx, list, i) {
	  var child_ctx = ctx.slice();
	  child_ctx[12] = list[i];
	  return child_ctx;
	}

	function get_each_context_1$2(ctx, list, i) {
	  var child_ctx = ctx.slice();
	  child_ctx[12] = list[i];
	  return child_ctx;
	} // (20:4) {#each $timeScale.ticks(8) as tick}


	function create_each_block_1$2(ctx) {
	  var g;
	  var circle;
	  var text0;
	  var t0_value =
	  /*tick*/
	  ctx[12] + "";
	  var t0;
	  var text1;
	  var t1_value =
	  /*tick*/
	  ctx[12] + "";
	  var t1;
	  var g_transform_value;
	  var block = {
	    c: function create() {
	      g = svg_element("g");
	      circle = svg_element("circle");
	      text0 = svg_element("text");
	      t0 = text(t0_value);
	      text1 = svg_element("text");
	      t1 = text(t1_value);
	      attr_dev(circle, "cx", "0");
	      attr_dev(circle, "cy", "-20");
	      attr_dev(circle, "r", "5");
	      attr_dev(circle, "class", "svelte-1ay65iw");
	      add_location(circle, file$A, 22, 8, 673);
	      attr_dev(text0, "class", "bg svelte-1ay65iw");
	      add_location(text0, file$A, 23, 8, 714);
	      attr_dev(text1, "class", "svelte-1ay65iw");
	      add_location(text1, file$A, 24, 8, 753);
	      attr_dev(g, "class", "tick");
	      attr_dev(g, "transform", g_transform_value = "translate(" +
	      /*$timeScale*/
	      ctx[4](
	      /*tick*/
	      ctx[12]) + " 20)");
	      add_location(g, file$A, 20, 6, 594);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, g, anchor);
	      append_dev(g, circle);
	      append_dev(g, text0);
	      append_dev(text0, t0);
	      append_dev(g, text1);
	      append_dev(text1, t1);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*$timeScale*/
	      16 && t0_value !== (t0_value =
	      /*tick*/
	      ctx[12] + "")) set_data_dev(t0, t0_value);
	      if (dirty &
	      /*$timeScale*/
	      16 && t1_value !== (t1_value =
	      /*tick*/
	      ctx[12] + "")) set_data_dev(t1, t1_value);

	      if (dirty &
	      /*$timeScale*/
	      16 && g_transform_value !== (g_transform_value = "translate(" +
	      /*$timeScale*/
	      ctx[4](
	      /*tick*/
	      ctx[12]) + " 20)")) {
	        attr_dev(g, "transform", g_transform_value);
	      }
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(g);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_each_block_1$2.name,
	    type: "each",
	    source: "(20:4) {#each $timeScale.ticks(8) as tick}",
	    ctx: ctx
	  });
	  return block;
	} // (49:4) {#each $sizeTotalYScale.ticks(4).slice(1) as tick}


	function create_each_block$a(ctx) {
	  var g;
	  var text_1;
	  var t_value =
	  /*commaFormat*/
	  ctx[7](
	  /*tick*/
	  ctx[12]) + "";
	  var t;
	  var g_transform_value;
	  var block = {
	    c: function create() {
	      g = svg_element("g");
	      text_1 = svg_element("text");
	      t = text(t_value);
	      attr_dev(text_1, "class", "svelte-1ay65iw");
	      add_location(text_1, file$A, 51, 8, 1841);
	      attr_dev(g, "class", "tick");
	      attr_dev(g, "transform", g_transform_value = "translate(0 " +
	      /*$sizeTotalYScale*/
	      ctx[3](
	      /*tick*/
	      ctx[12]) + ")");
	      add_location(g, file$A, 49, 6, 1756);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, g, anchor);
	      append_dev(g, text_1);
	      append_dev(text_1, t);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*$sizeTotalYScale*/
	      8 && t_value !== (t_value =
	      /*commaFormat*/
	      ctx[7](
	      /*tick*/
	      ctx[12]) + "")) set_data_dev(t, t_value);

	      if (dirty &
	      /*$sizeTotalYScale*/
	      8 && g_transform_value !== (g_transform_value = "translate(0 " +
	      /*$sizeTotalYScale*/
	      ctx[3](
	      /*tick*/
	      ctx[12]) + ")")) {
	        attr_dev(g, "transform", g_transform_value);
	      }
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(g);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_each_block$a.name,
	    type: "each",
	    source: "(49:4) {#each $sizeTotalYScale.ticks(4).slice(1) as tick}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$B(ctx) {
	  var g5;
	  var g1;
	  var g0;
	  var path0;
	  var path0_d_value;
	  var text0;
	  var t0;
	  var text0_dx_value;
	  var text1;
	  var t1;
	  var text1_dx_value;
	  var path1;
	  var path1_d_value;
	  var g0_transform_value;
	  var g1_transform_value;
	  var g2;
	  var g2_transform_value;
	  var g3;
	  var path2;
	  var path2_d_value;
	  var text2;
	  var t2;
	  var text2_dx_value;
	  var path3;
	  var path3_d_value;
	  var g3_transform_value;
	  var g4;
	  var path4;
	  var path4_d_value;
	  var text3;
	  var t3;
	  var text3_dx_value;
	  var path5;
	  var path5_d_value;
	  var g4_transform_value;
	  var each_value_1 =
	  /*$timeScale*/
	  ctx[4].ticks(8);
	  validate_each_argument(each_value_1);
	  var each_blocks_1 = [];

	  for (var i = 0; i < each_value_1.length; i += 1) {
	    each_blocks_1[i] = create_each_block_1$2(get_each_context_1$2(ctx, each_value_1, i));
	  }

	  var each_value =
	  /*$sizeTotalYScale*/
	  ctx[3].ticks(4).slice(1);
	  validate_each_argument(each_value);
	  var each_blocks = [];

	  for (var _i = 0; _i < each_value.length; _i += 1) {
	    each_blocks[_i] = create_each_block$a(get_each_context$a(ctx, each_value, _i));
	  }

	  var block = {
	    c: function create() {
	      g5 = svg_element("g");
	      g1 = svg_element("g");

	      for (var _i2 = 0; _i2 < each_blocks_1.length; _i2 += 1) {
	        each_blocks_1[_i2].c();
	      }

	      g0 = svg_element("g");
	      path0 = svg_element("path");
	      text0 = svg_element("text");
	      t0 = text("Millions of Years Ago");
	      text1 = svg_element("text");
	      t1 = text("Millions of Years Ago");
	      path1 = svg_element("path");
	      g2 = svg_element("g");

	      for (var _i3 = 0; _i3 < each_blocks.length; _i3 += 1) {
	        each_blocks[_i3].c();
	      }

	      g3 = svg_element("g");
	      path2 = svg_element("path");
	      text2 = svg_element("text");
	      t2 = text("Dinosaur Size in feet");
	      path3 = svg_element("path");
	      g4 = svg_element("g");
	      path4 = svg_element("path");
	      text3 = svg_element("text");
	      t3 = text("Dinosaur Locations");
	      path5 = svg_element("path");
	      attr_dev(path0, "d", path0_d_value = "M0 0l" + lineLength$1 + " 0");
	      attr_dev(path0, "class", "svelte-1ay65iw");
	      add_location(path0, file$A, 35, 6, 1138);
	      attr_dev(text0, "class", "bg svelte-1ay65iw");
	      attr_dev(text0, "dx", text0_dx_value = lineLength$1 + offset$1);
	      attr_dev(text0, "dy", "4");
	      add_location(text0, file$A, 36, 6, 1182);
	      attr_dev(text1, "dx", text1_dx_value = lineLength$1 + offset$1);
	      attr_dev(text1, "dy", "4");
	      attr_dev(text1, "class", "svelte-1ay65iw");
	      add_location(text1, file$A, 39, 6, 1290);
	      attr_dev(path1, "d", path1_d_value = "M" + (
	      /*timeScaleText*/
	      ctx[2] ?
	      /*timeScaleText*/
	      ctx[2].getComputedTextLength() + lineLength$1 + 2 * offset$1 : 0) + " 0l" + lineLength$1 + " 0");
	      attr_dev(path1, "marker-end", "url(#arrow)");
	      attr_dev(path1, "class", "svelte-1ay65iw");
	      add_location(path1, file$A, 42, 6, 1413);
	      attr_dev(g0, "class", "time-scale-label svelte-1ay65iw");
	      attr_dev(g0, "transform", g0_transform_value = "translate(" + (15 +
	      /*$timeScale*/
	      ctx[4].range()[0] -
	      /*$margin*/
	      ctx[5].left / 1.5) + " -15)");
	      add_location(g0, file$A, 34, 4, 1026);
	      attr_dev(g1, "class", "time-scale svelte-1ay65iw");
	      attr_dev(g1, "transform", g1_transform_value = "translate(0 " +
	      /*$sizeTotalYScale*/
	      ctx[3].range()[0] + ")");
	      add_location(g1, file$A, 17, 2, 465);
	      attr_dev(g2, "class", "y-scale-ticks svelte-1ay65iw");
	      attr_dev(g2, "transform", g2_transform_value = "translate(" + (15 +
	      /*$timeScale*/
	      ctx[4].range()[0] -
	      /*$margin*/
	      ctx[5].left / 1.5) + " 0)");
	      add_location(g2, file$A, 46, 2, 1589);
	      attr_dev(path2, "d", path2_d_value = "M0 0l0 " + -lineLength$1);
	      attr_dev(path2, "class", "svelte-1ay65iw");
	      add_location(path2, file$A, 57, 4, 2040);
	      attr_dev(text2, "transform", "rotate(270)");
	      attr_dev(text2, "dx", text2_dx_value = lineLength$1 + offset$1);
	      attr_dev(text2, "dy", "4");
	      attr_dev(text2, "class", "svelte-1ay65iw");
	      add_location(text2, file$A, 58, 4, 2083);
	      attr_dev(path3, "d", path3_d_value = "M0 " + (
	      /*yScaleText*/
	      ctx[0] ? -
	      /*yScaleText*/
	      ctx[0].getComputedTextLength() - lineLength$1 - 2 * offset$1 : 0) + "l0 " + -lineLength$1);
	      attr_dev(path3, "marker-end", "url(#arrow)");
	      attr_dev(path3, "class", "svelte-1ay65iw");
	      add_location(path3, file$A, 62, 4, 2231);
	      attr_dev(g3, "class", "y-scale svelte-1ay65iw");
	      attr_dev(g3, "transform", g3_transform_value = "translate(" + (
	      /*$timeScale*/
	      ctx[4].range()[0] -
	      /*$margin*/
	      ctx[5].left / 1.5) + " " + 0.95 *
	      /*$sizeTotalYScale*/
	      ctx[3].range()[0] + ")");
	      add_location(g3, file$A, 55, 2, 1906);
	      attr_dev(path4, "d", path4_d_value = "M0 0l0 " + lineLength$1);
	      attr_dev(path4, "class", "svelte-1ay65iw");
	      add_location(path4, file$A, 67, 4, 2513);
	      attr_dev(text3, "transform", "rotate(270)");
	      attr_dev(text3, "dx", text3_dx_value =
	      /*mapScaleText*/
	      ctx[1] ? -
	      /*mapScaleText*/
	      ctx[1].getComputedTextLength() - lineLength$1 - offset$1 : 0);
	      attr_dev(text3, "dy", "4");
	      attr_dev(text3, "class", "svelte-1ay65iw");
	      add_location(text3, file$A, 68, 4, 2555);
	      attr_dev(path5, "d", path5_d_value = "M0 " + (
	      /*mapScaleText*/
	      ctx[1] ?
	      /*mapScaleText*/
	      ctx[1].getComputedTextLength() + lineLength$1 + 2 * offset$1 : 0) + "l0 " + lineLength$1);
	      attr_dev(path5, "class", "svelte-1ay65iw");
	      add_location(path5, file$A, 72, 4, 2760);
	      attr_dev(g4, "class", "map-scale svelte-1ay65iw");
	      attr_dev(g4, "transform", g4_transform_value = "translate(" + (
	      /*$timeScale*/
	      ctx[4].range()[0] -
	      /*$margin*/
	      ctx[5].left / 1.5) + " " + 1.05 *
	      /*$panelHeight*/
	      ctx[6] + ")");
	      add_location(g4, file$A, 65, 2, 2392);
	      attr_dev(g5, "class", "labels disable-select");
	      add_location(g5, file$A, 16, 0, 429);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, g5, anchor);
	      append_dev(g5, g1);

	      for (var _i4 = 0; _i4 < each_blocks_1.length; _i4 += 1) {
	        each_blocks_1[_i4].m(g1, null);
	      }

	      append_dev(g1, g0);
	      append_dev(g0, path0);
	      append_dev(g0, text0);
	      append_dev(text0, t0);
	      append_dev(g0, text1);
	      append_dev(text1, t1);
	      /*text1_binding*/

	      ctx[8](text1);
	      append_dev(g0, path1);
	      append_dev(g5, g2);

	      for (var _i5 = 0; _i5 < each_blocks.length; _i5 += 1) {
	        each_blocks[_i5].m(g2, null);
	      }

	      append_dev(g5, g3);
	      append_dev(g3, path2);
	      append_dev(g3, text2);
	      append_dev(text2, t2);
	      /*text2_binding*/

	      ctx[9](text2);
	      append_dev(g3, path3);
	      append_dev(g5, g4);
	      append_dev(g4, path4);
	      append_dev(g4, text3);
	      append_dev(text3, t3);
	      /*text3_binding*/

	      ctx[10](text3);
	      append_dev(g4, path5);
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (dirty &
	      /*$timeScale*/
	      16) {
	        each_value_1 =
	        /*$timeScale*/
	        ctx[4].ticks(8);
	        validate_each_argument(each_value_1);

	        var _i6;

	        for (_i6 = 0; _i6 < each_value_1.length; _i6 += 1) {
	          var child_ctx = get_each_context_1$2(ctx, each_value_1, _i6);

	          if (each_blocks_1[_i6]) {
	            each_blocks_1[_i6].p(child_ctx, dirty);
	          } else {
	            each_blocks_1[_i6] = create_each_block_1$2(child_ctx);

	            each_blocks_1[_i6].c();

	            each_blocks_1[_i6].m(g1, g0);
	          }
	        }

	        for (; _i6 < each_blocks_1.length; _i6 += 1) {
	          each_blocks_1[_i6].d(1);
	        }

	        each_blocks_1.length = each_value_1.length;
	      }

	      if (dirty &
	      /*timeScaleText*/
	      4 && path1_d_value !== (path1_d_value = "M" + (
	      /*timeScaleText*/
	      ctx[2] ?
	      /*timeScaleText*/
	      ctx[2].getComputedTextLength() + lineLength$1 + 2 * offset$1 : 0) + " 0l" + lineLength$1 + " 0")) {
	        attr_dev(path1, "d", path1_d_value);
	      }

	      if (dirty &
	      /*$timeScale, $margin*/
	      48 && g0_transform_value !== (g0_transform_value = "translate(" + (15 +
	      /*$timeScale*/
	      ctx[4].range()[0] -
	      /*$margin*/
	      ctx[5].left / 1.5) + " -15)")) {
	        attr_dev(g0, "transform", g0_transform_value);
	      }

	      if (dirty &
	      /*$sizeTotalYScale*/
	      8 && g1_transform_value !== (g1_transform_value = "translate(0 " +
	      /*$sizeTotalYScale*/
	      ctx[3].range()[0] + ")")) {
	        attr_dev(g1, "transform", g1_transform_value);
	      }

	      if (dirty &
	      /*$sizeTotalYScale, commaFormat*/
	      136) {
	        each_value =
	        /*$sizeTotalYScale*/
	        ctx[3].ticks(4).slice(1);
	        validate_each_argument(each_value);

	        var _i7;

	        for (_i7 = 0; _i7 < each_value.length; _i7 += 1) {
	          var _child_ctx = get_each_context$a(ctx, each_value, _i7);

	          if (each_blocks[_i7]) {
	            each_blocks[_i7].p(_child_ctx, dirty);
	          } else {
	            each_blocks[_i7] = create_each_block$a(_child_ctx);

	            each_blocks[_i7].c();

	            each_blocks[_i7].m(g2, null);
	          }
	        }

	        for (; _i7 < each_blocks.length; _i7 += 1) {
	          each_blocks[_i7].d(1);
	        }

	        each_blocks.length = each_value.length;
	      }

	      if (dirty &
	      /*$timeScale, $margin*/
	      48 && g2_transform_value !== (g2_transform_value = "translate(" + (15 +
	      /*$timeScale*/
	      ctx[4].range()[0] -
	      /*$margin*/
	      ctx[5].left / 1.5) + " 0)")) {
	        attr_dev(g2, "transform", g2_transform_value);
	      }

	      if (dirty &
	      /*yScaleText*/
	      1 && path3_d_value !== (path3_d_value = "M0 " + (
	      /*yScaleText*/
	      ctx[0] ? -
	      /*yScaleText*/
	      ctx[0].getComputedTextLength() - lineLength$1 - 2 * offset$1 : 0) + "l0 " + -lineLength$1)) {
	        attr_dev(path3, "d", path3_d_value);
	      }

	      if (dirty &
	      /*$timeScale, $margin, $sizeTotalYScale*/
	      56 && g3_transform_value !== (g3_transform_value = "translate(" + (
	      /*$timeScale*/
	      ctx[4].range()[0] -
	      /*$margin*/
	      ctx[5].left / 1.5) + " " + 0.95 *
	      /*$sizeTotalYScale*/
	      ctx[3].range()[0] + ")")) {
	        attr_dev(g3, "transform", g3_transform_value);
	      }

	      if (dirty &
	      /*mapScaleText*/
	      2 && text3_dx_value !== (text3_dx_value =
	      /*mapScaleText*/
	      ctx[1] ? -
	      /*mapScaleText*/
	      ctx[1].getComputedTextLength() - lineLength$1 - offset$1 : 0)) {
	        attr_dev(text3, "dx", text3_dx_value);
	      }

	      if (dirty &
	      /*mapScaleText*/
	      2 && path5_d_value !== (path5_d_value = "M0 " + (
	      /*mapScaleText*/
	      ctx[1] ?
	      /*mapScaleText*/
	      ctx[1].getComputedTextLength() + lineLength$1 + 2 * offset$1 : 0) + "l0 " + lineLength$1)) {
	        attr_dev(path5, "d", path5_d_value);
	      }

	      if (dirty &
	      /*$timeScale, $margin, $panelHeight*/
	      112 && g4_transform_value !== (g4_transform_value = "translate(" + (
	      /*$timeScale*/
	      ctx[4].range()[0] -
	      /*$margin*/
	      ctx[5].left / 1.5) + " " + 1.05 *
	      /*$panelHeight*/
	      ctx[6] + ")")) {
	        attr_dev(g4, "transform", g4_transform_value);
	      }
	    },
	    i: noop,
	    o: noop,
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(g5);
	      destroy_each(each_blocks_1, detaching);
	      /*text1_binding*/

	      ctx[8](null);
	      destroy_each(each_blocks, detaching);
	      /*text2_binding*/

	      ctx[9](null);
	      /*text3_binding*/

	      ctx[10](null);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$B.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	var lineLength$1 = 70;
	var offset$1 = 5;

	function instance$B($$self, $$props, $$invalidate) {
	  var $sizeTotalYScale;
	  var $timeScale;
	  var $margin;
	  var $panelHeight;
	  validate_store(sizeTotalYScale, "sizeTotalYScale");
	  component_subscribe($$self, sizeTotalYScale, function ($$value) {
	    return $$invalidate(3, $sizeTotalYScale = $$value);
	  });
	  validate_store(timeScale, "timeScale");
	  component_subscribe($$self, timeScale, function ($$value) {
	    return $$invalidate(4, $timeScale = $$value);
	  });
	  validate_store(margin, "margin");
	  component_subscribe($$self, margin, function ($$value) {
	    return $$invalidate(5, $margin = $$value);
	  });
	  validate_store(panelHeight, "panelHeight");
	  component_subscribe($$self, panelHeight, function ($$value) {
	    return $$invalidate(6, $panelHeight = $$value);
	  });
	  var commaFormat = format(",");
	  var tf = timeFormat("%b %d, %Y");
	  var yScaleText, mapScaleText, timeScaleText;
	  var writable_props = [];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Labels> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Labels", $$slots, []);

	  function text1_binding($$value) {
	    binding_callbacks[$$value ? "unshift" : "push"](function () {
	      timeScaleText = $$value;
	      $$invalidate(2, timeScaleText);
	    });
	  }

	  function text2_binding($$value) {
	    binding_callbacks[$$value ? "unshift" : "push"](function () {
	      yScaleText = $$value;
	      $$invalidate(0, yScaleText);
	    });
	  }

	  function text3_binding($$value) {
	    binding_callbacks[$$value ? "unshift" : "push"](function () {
	      mapScaleText = $$value;
	      $$invalidate(1, mapScaleText);
	    });
	  }

	  $$self.$capture_state = function () {
	    return {
	      timeScale: timeScale,
	      sizeTotalYScale: sizeTotalYScale,
	      margin: margin,
	      timeFormat: timeFormat,
	      format: format,
	      panelHeight: panelHeight,
	      lineLength: lineLength$1,
	      offset: offset$1,
	      commaFormat: commaFormat,
	      tf: tf,
	      yScaleText: yScaleText,
	      mapScaleText: mapScaleText,
	      timeScaleText: timeScaleText,
	      $sizeTotalYScale: $sizeTotalYScale,
	      $timeScale: $timeScale,
	      $margin: $margin,
	      $panelHeight: $panelHeight
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("yScaleText" in $$props) $$invalidate(0, yScaleText = $$props.yScaleText);
	    if ("mapScaleText" in $$props) $$invalidate(1, mapScaleText = $$props.mapScaleText);
	    if ("timeScaleText" in $$props) $$invalidate(2, timeScaleText = $$props.timeScaleText);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [yScaleText, mapScaleText, timeScaleText, $sizeTotalYScale, $timeScale, $margin, $panelHeight, commaFormat, text1_binding, text2_binding, text3_binding];
	}

	var Labels = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(Labels, _SvelteComponentDev);

	  var _super = _createSuper(Labels);

	  function Labels(options) {
	    var _this;

	    _classCallCheck(this, Labels);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$B, create_fragment$B, safe_not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "Labels",
	      options: options,
	      id: create_fragment$B.name
	    });
	    return _this;
	  }

	  return Labels;
	}(SvelteComponentDev);

	var file$B = "src/components/Svg.svelte";

	function create_fragment$C(ctx) {
	  var svg;
	  var defs;
	  var rect;
	  var rect_height_value;
	  var sources;
	  var events;
	  var labels;
	  var brush;
	  var timeline;
	  var legend;
	  var svg_viewBox_value;
	  var current;
	  var mounted;
	  var dispose;
	  defs = new Defs({
	    $$inline: true
	  });
	  sources = new Sources({
	    props: {
	      timePoints:
	      /*timePoints*/
	      ctx[0]
	    },
	    $$inline: true
	  });
	  events = new Events({
	    props: {
	      timePoints:
	      /*timePoints*/
	      ctx[0]
	    },
	    $$inline: true
	  });
	  labels = new Labels({
	    $$inline: true
	  });
	  brush = new Brush({
	    $$inline: true
	  });
	  timeline = new Timeline({
	    $$inline: true
	  });
	  legend = new Legend({
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      svg = svg_element("svg");
	      create_component(defs.$$.fragment);
	      rect = svg_element("rect");
	      create_component(sources.$$.fragment);
	      create_component(events.$$.fragment);
	      create_component(labels.$$.fragment);
	      create_component(brush.$$.fragment);
	      create_component(timeline.$$.fragment);
	      create_component(legend.$$.fragment);
	      attr_dev(rect, "x", "0");
	      attr_dev(rect, "y", "0");
	      attr_dev(rect, "width",
	      /*$width*/
	      ctx[1]);
	      attr_dev(rect, "height", rect_height_value =
	      /*$panelHeight*/
	      ctx[3] * 1.1);
	      attr_dev(rect, "class", "svelte-16hx6sq");
	      add_location(rect, file$B, 33, 2, 765);
	      attr_dev(svg, "viewBox", svg_viewBox_value = "0 0 " +
	      /*$width*/
	      ctx[1] + " " +
	      /*$height*/
	      ctx[2]);
	      attr_dev(svg, "width",
	      /*$width*/
	      ctx[1]);
	      attr_dev(svg, "height",
	      /*$height*/
	      ctx[2]);
	      attr_dev(svg, "class", "svelte-16hx6sq");
	      add_location(svg, file$B, 26, 0, 605);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, svg, anchor);
	      mount_component(defs, svg, null);
	      append_dev(svg, rect);
	      mount_component(sources, svg, null);
	      mount_component(events, svg, null);
	      mount_component(labels, svg, null);
	      mount_component(brush, svg, null);
	      mount_component(timeline, svg, null);
	      mount_component(legend, svg, null);
	      current = true;

	      if (!mounted) {
	        dispose = [listen_dev(svg, "mouseover",
	        /*handleMouseover*/
	        ctx[4], false, false, false), listen_dev(svg, "click",
	        /*handleClick*/
	        ctx[5], false, false, false)];
	        mounted = true;
	      }
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (!current || dirty &
	      /*$width*/
	      2) {
	        attr_dev(rect, "width",
	        /*$width*/
	        ctx[1]);
	      }

	      if (!current || dirty &
	      /*$panelHeight*/
	      8 && rect_height_value !== (rect_height_value =
	      /*$panelHeight*/
	      ctx[3] * 1.1)) {
	        attr_dev(rect, "height", rect_height_value);
	      }

	      var sources_changes = {};
	      if (dirty &
	      /*timePoints*/
	      1) sources_changes.timePoints =
	      /*timePoints*/
	      ctx[0];
	      sources.$set(sources_changes);
	      var events_changes = {};
	      if (dirty &
	      /*timePoints*/
	      1) events_changes.timePoints =
	      /*timePoints*/
	      ctx[0];
	      events.$set(events_changes);

	      if (!current || dirty &
	      /*$width, $height*/
	      6 && svg_viewBox_value !== (svg_viewBox_value = "0 0 " +
	      /*$width*/
	      ctx[1] + " " +
	      /*$height*/
	      ctx[2])) {
	        attr_dev(svg, "viewBox", svg_viewBox_value);
	      }

	      if (!current || dirty &
	      /*$width*/
	      2) {
	        attr_dev(svg, "width",
	        /*$width*/
	        ctx[1]);
	      }

	      if (!current || dirty &
	      /*$height*/
	      4) {
	        attr_dev(svg, "height",
	        /*$height*/
	        ctx[2]);
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(defs.$$.fragment, local);
	      transition_in(sources.$$.fragment, local);
	      transition_in(events.$$.fragment, local);
	      transition_in(labels.$$.fragment, local);
	      transition_in(brush.$$.fragment, local);
	      transition_in(timeline.$$.fragment, local);
	      transition_in(legend.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(defs.$$.fragment, local);
	      transition_out(sources.$$.fragment, local);
	      transition_out(events.$$.fragment, local);
	      transition_out(labels.$$.fragment, local);
	      transition_out(brush.$$.fragment, local);
	      transition_out(timeline.$$.fragment, local);
	      transition_out(legend.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(svg);
	      destroy_component(defs);
	      destroy_component(sources);
	      destroy_component(events);
	      destroy_component(labels);
	      destroy_component(brush);
	      destroy_component(timeline);
	      destroy_component(legend);
	      mounted = false;
	      run_all(dispose);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$C.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$C($$self, $$props, $$invalidate) {
	  var $hovered;
	  var $width;
	  var $height;
	  var $panelHeight;
	  validate_store(hovered, "hovered");
	  component_subscribe($$self, hovered, function ($$value) {
	    return $$invalidate(6, $hovered = $$value);
	  });
	  validate_store(width, "width");
	  component_subscribe($$self, width, function ($$value) {
	    return $$invalidate(1, $width = $$value);
	  });
	  validate_store(height, "height");
	  component_subscribe($$self, height, function ($$value) {
	    return $$invalidate(2, $height = $$value);
	  });
	  validate_store(panelHeight, "panelHeight");
	  component_subscribe($$self, panelHeight, function ($$value) {
	    return $$invalidate(3, $panelHeight = $$value);
	  });
	  var timePoints = $$props.timePoints;

	  function handleMouseover() {
	    set_store_value(hovered, $hovered = null);
	  }

	  function handleClick(event) {
	    selected.reset();
	  }

	  var writable_props = ["timePoints"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Svg> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Svg", $$slots, []);

	  $$self.$$set = function ($$props) {
	    if ("timePoints" in $$props) $$invalidate(0, timePoints = $$props.timePoints);
	  };

	  $$self.$capture_state = function () {
	    return {
	      width: width,
	      height: height,
	      panelHeight: panelHeight,
	      selected: selected,
	      hovered: hovered,
	      Defs: Defs,
	      Brush: Brush,
	      Events: Events,
	      Sources: Sources,
	      Timeline: Timeline,
	      Legend: Legend,
	      Labels: Labels,
	      timePoints: timePoints,
	      handleMouseover: handleMouseover,
	      handleClick: handleClick,
	      $hovered: $hovered,
	      $width: $width,
	      $height: $height,
	      $panelHeight: $panelHeight
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("timePoints" in $$props) $$invalidate(0, timePoints = $$props.timePoints);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [timePoints, $width, $height, $panelHeight, handleMouseover, handleClick];
	}

	var Svg$1 = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(Svg, _SvelteComponentDev);

	  var _super = _createSuper(Svg);

	  function Svg(options) {
	    var _this;

	    _classCallCheck(this, Svg);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$C, create_fragment$C, safe_not_equal, {
	      timePoints: 0
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "Svg",
	      options: options,
	      id: create_fragment$C.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*timePoints*/
	    ctx[0] === undefined && !("timePoints" in props)) {
	      console.warn("<Svg> was created without expected prop 'timePoints'");
	    }

	    return _this;
	  }

	  _createClass(Svg, [{
	    key: "timePoints",
	    get: function get() {
	      throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return Svg;
	}(SvelteComponentDev);

	var loadFossilSpots = /*#__PURE__*/function () {
	  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	    var data;
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            _context.next = 2;
	            return csv$1(fossilData, function (d, i) {
	              return {
	                id: i,
	                name: d.accepted_name,
	                x: d.lat,
	                y: d.lng
	              };
	            });

	          case 2:
	            data = _context.sent;
	            return _context.abrupt("return", data);

	          case 4:
	          case "end":
	            return _context.stop();
	        }
	      }
	    }, _callee);
	  }));

	  return function loadFossilSpots() {
	    return _ref.apply(this, arguments);
	  };
	}();

	var loadFossilSpots2 = /*#__PURE__*/function () {
	  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	    var data;
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            _context.next = 2;
	            return csv$1(fossilData2, function (d, i) {
	              return {
	                id: i,
	                name: d.accepted_name,
	                x: d.lat,
	                y: d.lng
	              };
	            });

	          case 2:
	            data = _context.sent;
	            return _context.abrupt("return", data);

	          case 4:
	          case "end":
	            return _context.stop();
	        }
	      }
	    }, _callee);
	  }));

	  return function loadFossilSpots2() {
	    return _ref.apply(this, arguments);
	  };
	}();

	var loadFossilSpots3 = /*#__PURE__*/function () {
	  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	    var data;
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            _context.next = 2;
	            return csv$1(fossilData3, function (d, i) {
	              return {
	                id: i,
	                name: d.accepted_name,
	                x: d.lat,
	                y: d.lng
	              };
	            });

	          case 2:
	            data = _context.sent;
	            return _context.abrupt("return", data);

	          case 4:
	          case "end":
	            return _context.stop();
	        }
	      }
	    }, _callee);
	  }));

	  return function loadFossilSpots3() {
	    return _ref.apply(this, arguments);
	  };
	}();

	var console_1$8 = globals.console;
	var file$C = "src/components/Canvas.svelte";

	function create_fragment$D(ctx) {
	  var div0;
	  var t;
	  var div2;
	  var canvas_1;
	  var div1;
	  var block = {
	    c: function create() {
	      div0 = element("div");
	      t = space();
	      div2 = element("div");
	      canvas_1 = element("canvas");
	      div1 = element("div");
	      attr_dev(div0, "class", "layer");
	      add_location(div0, file$C, 444, 0, 8931);
	      attr_dev(div1, "id", "points");
	      add_location(div1, file$C, 446, 30, 9002);
	      attr_dev(canvas_1, "class", "svelte-5592ys");
	      add_location(canvas_1, file$C, 446, 3, 8975);
	      attr_dev(div2, "id", "map");
	      add_location(div2, file$C, 445, 0, 8957);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div0, anchor);
	      insert_dev(target, t, anchor);
	      insert_dev(target, div2, anchor);
	      append_dev(div2, canvas_1);
	      append_dev(canvas_1, div1);
	      /*canvas_1_binding*/

	      ctx[1](canvas_1);
	    },
	    p: noop,
	    i: noop,
	    o: noop,
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div0);
	      if (detaching) detach_dev(t);
	      if (detaching) detach_dev(div2);
	      /*canvas_1_binding*/

	      ctx[1](null);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$D.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	var worldDataPath = "countries-50m.json";

	function instance$D($$self, $$props, $$invalidate) {
	  var $fossilDatapoints;
	  var $width;
	  var $height;
	  var $countries;
	  var $switchValueStore;
	  var $mapHeight;
	  var $projection;
	  var $scaleFactor;
	  var $panelHeight;
	  var $geoPath;
	  var $pangeaRegions;
	  validate_store(fossilDatapoints, "fossilDatapoints");
	  component_subscribe($$self, fossilDatapoints, function ($$value) {
	    return $$invalidate(8, $fossilDatapoints = $$value);
	  });
	  validate_store(width, "width");
	  component_subscribe($$self, width, function ($$value) {
	    return $$invalidate(9, $width = $$value);
	  });
	  validate_store(height, "height");
	  component_subscribe($$self, height, function ($$value) {
	    return $$invalidate(10, $height = $$value);
	  });
	  validate_store(countries, "countries");
	  component_subscribe($$self, countries, function ($$value) {
	    return $$invalidate(11, $countries = $$value);
	  });
	  validate_store(switchValueStore, "switchValueStore");
	  component_subscribe($$self, switchValueStore, function ($$value) {
	    return $$invalidate(12, $switchValueStore = $$value);
	  });
	  validate_store(mapHeight, "mapHeight");
	  component_subscribe($$self, mapHeight, function ($$value) {
	    return $$invalidate(13, $mapHeight = $$value);
	  });
	  validate_store(projection$1, "projection");
	  component_subscribe($$self, projection$1, function ($$value) {
	    return $$invalidate(14, $projection = $$value);
	  });
	  validate_store(scaleFactor, "scaleFactor");
	  component_subscribe($$self, scaleFactor, function ($$value) {
	    return $$invalidate(15, $scaleFactor = $$value);
	  });
	  validate_store(panelHeight, "panelHeight");
	  component_subscribe($$self, panelHeight, function ($$value) {
	    return $$invalidate(16, $panelHeight = $$value);
	  });
	  validate_store(geoPath, "geoPath");
	  component_subscribe($$self, geoPath, function ($$value) {
	    return $$invalidate(17, $geoPath = $$value);
	  });
	  validate_store(pangeaRegions, "pangeaRegions");
	  component_subscribe($$self, pangeaRegions, function ($$value) {
	    return $$invalidate(18, $pangeaRegions = $$value);
	  });
	  var canvas;
	  var worldFeature;
	  var worldjson;
	  var graticule$1;
	  var fossilSpots;
	  var fossilSpots2;
	  var fossilSpots3;
	  onMount( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	    var response, json, worldResponse;
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            _context.next = 2;
	            return fetch("geopangea.json");

	          case 2:
	            response = _context.sent;
	            _context.next = 5;
	            return response.json();

	          case 5:
	            json = _context.sent;
	            _context.next = 8;
	            return fetch(worldDataPath);

	          case 8:
	            worldResponse = _context.sent;
	            _context.t0 = $$invalidate;
	            _context.next = 12;
	            return worldResponse.json();

	          case 12:
	            _context.t1 = worldjson = _context.sent;
	            (0, _context.t0)(3, _context.t1);
	            //  console.log('worldjson: ', worldjson)
	            $$invalidate(2, worldFeature = feature(worldjson, worldjson.objects.countries)); //  console.log('worldFeature: ', worldFeature)
	            // This removes antartica from the world map
	            // worldFeature.features = worldFeature.features.filter((c) => c.properties.name !== 'Antarctica');
	            //  console.log(worldFeature.features );

	            _context.t2 = $$invalidate;
	            _context.next = 18;
	            return loadFossilSpots();

	          case 18:
	            _context.t3 = fossilSpots = _context.sent;
	            (0, _context.t2)(5, _context.t3);
	            _context.t4 = $$invalidate;
	            _context.next = 23;
	            return loadFossilSpots2();

	          case 23:
	            _context.t5 = fossilSpots2 = _context.sent;
	            (0, _context.t4)(6, _context.t5);
	            _context.t6 = $$invalidate;
	            _context.next = 28;
	            return loadFossilSpots3();

	          case 28:
	            _context.t7 = fossilSpots3 = _context.sent;
	            (0, _context.t6)(7, _context.t7);
	            // originalJurassicSpots = await loadFossilSpots();
	            // originalCretaceousSpots = await loadFossilSpots3();
	            // console.log(fossilSpots);
	            set_store_value(fossilDatapoints, $fossilDatapoints.jurassic = fossilSpots, $fossilDatapoints);
	            set_store_value(fossilDatapoints, $fossilDatapoints.originaljurassic = fossilSpots, $fossilDatapoints);
	            set_store_value(fossilDatapoints, $fossilDatapoints.triassic = fossilSpots2, $fossilDatapoints);
	            set_store_value(fossilDatapoints, $fossilDatapoints.originaltriassic = fossilSpots2, $fossilDatapoints);
	            set_store_value(fossilDatapoints, $fossilDatapoints.cretaceous = fossilSpots3, $fossilDatapoints);
	            set_store_value(fossilDatapoints, $fossilDatapoints.originalcretaceous = fossilSpots3, $fossilDatapoints);

	          case 36:
	          case "end":
	            return _context.stop();
	        }
	      }
	    }, _callee);
	  })));

	  function reDraw() {
	    var locations = select("#points");
	    var elements = locations.selectAll("points.arc"); // console.log('elements: ', elements)

	    elements.each(function (d, i) {
	      // console.log('element: ', elements[i])
	      var node = select(this); // console.log(d, node, i, this)

	      this.remove();
	    });
	  } // console.log("redrawing")


	  var writable_props = [];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$8.warn("<Canvas> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Canvas", $$slots, []);

	  function canvas_1_binding($$value) {
	    binding_callbacks[$$value ? "unshift" : "push"](function () {
	      canvas = $$value;
	      (((((((((((((((($$invalidate(0, canvas), $$invalidate(11, $countries)), $$invalidate(3, worldjson)), $$invalidate(5, fossilSpots)), $$invalidate(6, fossilSpots2)), $$invalidate(7, fossilSpots3)), $$invalidate(12, $switchValueStore)), $$invalidate(9, $width)), $$invalidate(13, $mapHeight)), $$invalidate(14, $projection)), $$invalidate(15, $scaleFactor)), $$invalidate(10, $height)), $$invalidate(16, $panelHeight)), $$invalidate(17, $geoPath)), $$invalidate(8, $fossilDatapoints)), $$invalidate(4, graticule$1)), $$invalidate(2, worldFeature)), $$invalidate(18, $pangeaRegions);
	    });
	  }

	  $$self.$capture_state = function () {
	    return {
	      width: width,
	      height: height,
	      panelHeight: panelHeight,
	      mapHeight: mapHeight,
	      bg: bg,
	      usaRed: usaRed,
	      usaLightRed: usaLightRed,
	      usaLightLightRed: usaLightLightRed,
	      preGreen: preGreen,
	      countries: countries,
	      pangeaRegions: pangeaRegions,
	      projection: projection$1,
	      geoPath: geoPath,
	      scaleFactor: scaleFactor,
	      timeScale: timeScale,
	      canvas: canvas,
	      select: select,
	      geoGraticule: graticule,
	      geoNaturalEarth1: geoNaturalEarth1,
	      geoMercator: geoMercator,
	      d3geoPath: d3geoPath,
	      onMount: onMount,
	      afterUpdate: afterUpdate,
	      feature: feature,
	      loadFossilSpots: loadFossilSpots,
	      loadFossilSpots2: loadFossilSpots2,
	      loadFossilSpots3: loadFossilSpots3,
	      worldFeature: worldFeature,
	      worldjson: worldjson,
	      graticule: graticule$1,
	      fossilSpots: fossilSpots,
	      fossilSpots2: fossilSpots2,
	      fossilSpots3: fossilSpots3,
	      fossilDatapoints: fossilDatapoints,
	      switchValueStore: switchValueStore,
	      worldDataPath: worldDataPath,
	      reDraw: reDraw,
	      $fossilDatapoints: $fossilDatapoints,
	      $width: $width,
	      $height: $height,
	      $countries: $countries,
	      $switchValueStore: $switchValueStore,
	      $mapHeight: $mapHeight,
	      $projection: $projection,
	      $scaleFactor: $scaleFactor,
	      $panelHeight: $panelHeight,
	      $geoPath: $geoPath,
	      $pangeaRegions: $pangeaRegions
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("canvas" in $$props) $$invalidate(0, canvas = $$props.canvas);
	    if ("worldFeature" in $$props) $$invalidate(2, worldFeature = $$props.worldFeature);
	    if ("worldjson" in $$props) $$invalidate(3, worldjson = $$props.worldjson);
	    if ("graticule" in $$props) $$invalidate(4, graticule$1 = $$props.graticule);
	    if ("fossilSpots" in $$props) $$invalidate(5, fossilSpots = $$props.fossilSpots);
	    if ("fossilSpots2" in $$props) $$invalidate(6, fossilSpots2 = $$props.fossilSpots2);
	    if ("fossilSpots3" in $$props) $$invalidate(7, fossilSpots3 = $$props.fossilSpots3);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  $$self.$$.update = function () {
	    if ($$self.$$.dirty &
	    /*$width, $height*/
	    1536) {
	      //to update the fossil locations on resize
	       if ($width || $height) {
	        reDraw();
	      }
	    }

	    if ($$self.$$.dirty &
	    /*canvas, $countries, worldjson, fossilSpots, fossilSpots2, fossilSpots3, $switchValueStore, $width, $mapHeight, $projection, $scaleFactor, $height, $panelHeight, $geoPath, $fossilDatapoints, graticule, worldFeature, $pangeaRegions*/
	    524285) {
	      /*
	      another way to redraw on updates
	      afterUpdate(() => {
	      // ...the DOM is now in sync with the data
	       reDraw(); 
	      });
	      */
	      // $: if (canvas && $countries.length > 0) {
	       if (canvas && $countries && pangeaRegions && worldjson && fossilSpots && fossilSpots2 && fossilSpots3 && fossilDatapoints && $switchValueStore) {
	        //  console.log('countries store', $countries)
	        //   console.log('fossilSpots: ', fossilSpots)
	        //  console.log($projection)
	        var geoNaturalEarth1projection = geoNaturalEarth1().scale(225 + $width / 25). // .scale($width / 1.3 / Math.PI)
	        //  .rotate([10, -15])
	        translate([$width / 2, $mapHeight / 2]);
	        var testProjection = geoMercator().scale($projection.scale()).translate($projection.translate());
	        var geoGenerator = d3geoPath().projection($projection).context(ctx);

	        $$invalidate(0, canvas.width = $scaleFactor * $width, canvas);
	        $$invalidate(0, canvas.height = $scaleFactor * $height, canvas);
	        $$invalidate(0, canvas.style.width = "".concat($width, "px"), canvas);
	        $$invalidate(0, canvas.style.height = "".concat($height, "px"), canvas);
	        var ctx = canvas.getContext("2d", {
	          alpha: false
	        });
	        ctx.scale($scaleFactor, $scaleFactor);
	        ctx.translate(0, $panelHeight);
	        ctx.strokeStyle = preGreen;
	        ctx.fillStyle = bg;
	        ctx.fillRect(0, -$panelHeight, $width, $height);
	        $geoPath.context(ctx); // console.log(projection)
	        // begin fossil adding code

	        var container = select("#container").style("width", width + "px").style("height", height + "px");
	        var base = select("#map");
	        var locations = select("#points");
	        var layer = select(".layer");
	        var info = base.append("div").attr("class", "info");

	        function createMap(dataset) {
	          var dataBinding = locations.selectAll("points.arc").data(dataset).enter().append("points").classed("arc", true).attr("x", function (d) {
	            return testProjection([d.y, d.x])[0];
	          }).attr("y", function (d) {
	            return testProjection([d.y, d.x])[1];
	          }).attr("radius", 4).attr("fillStyle", "#34B2C9");
	          drawCanvas();
	        }

	        function createTriassicMap(dataset) {
	          locations.selectAll("points.arc").data(dataset).enter().append("points").classed("arc", true).attr("x", function (d) {
	            return testProjection([d.y, d.x])[0];
	          }).attr("y", function (d) {
	            return testProjection([d.y, d.x])[1];
	          }).attr("radius", 5).attr("fillStyle", "#BD8CC3");
	          drawCanvas();
	        }

	        function createCretaceousMap(dataset) {
	          locations.selectAll("points.arc").data(dataset).enter().append("points").classed("arc", true).attr("x", function (d) {
	            return testProjection([d.y, d.x])[0];
	          }).attr("y", function (d) {
	            return testProjection([d.y, d.x])[1];
	          }).attr("radius", 3).attr("fillStyle", "#678F66");
	          drawCanvas();
	        }

	        function drawCanvas() {
	          var elements = locations.selectAll("points.arc");
	          elements.each(function (d, i) {
	            var node = select(this);
	            ctx.beginPath();
	            ctx.arc(node.attr("x"), node.attr("y"), node.attr("radius"), 0, 2 * Math.PI);
	            ctx.fillStyle = node.attr("fillStyle");
	            ctx.fill();
	            ctx.lineWidth = 0.5;
	            ctx.strokeStyle = "#fff";
	            ctx.stroke();
	            ctx.closePath();
	          });
	        }

	        createTriassicMap($fossilDatapoints.triassic);
	        createMap($fossilDatapoints.jurassic);
	        createCretaceousMap($fossilDatapoints.cretaceous);

	        function makeGraticules() {
	          var geoGenerator = d3geoPath().projection(geoNaturalEarth1projection).context(ctx); // Create and configure the graticule generator (one line every 20 degrees)

	          $$invalidate(4, graticule$1 = graticule());
	          ctx.beginPath(); //      ctx.globalAlpha = 0.45;

	          ctx.strokeStyle = "#ccc";
	          geoGenerator(graticule$1());
	          geoGenerator(graticule$1.outline());
	          ctx.stroke();
	          ctx.lineWidth = 2;
	          var outline = graticule$1.outline();
	          ctx.beginPath();
	          ctx.strokeStyle = "#000";
	          geoGenerator(outline);
	          ctx.stroke();
	        }

	        makeGraticules();

	        function worldMap() {
	          // Current World Map
	          ctx.save();
	          ctx.strokeStyle = "#000";
	          ctx.lineWidth = 1.5;
	          ctx.fillStyle = bg;
	          ctx.beginPath();
	          ctx.globalAlpha = 0.35; //  worldFeature.features = worldFeature.features.filter((d) => d.properties.name !== 'Antarctica');

	          worldFeature.features.forEach($geoPath);
	          ctx.stroke();
	          ctx.fill();
	          ctx.restore();
	        }

	        worldMap();

	        function pangeaMap() {
	          //Pangea map
	          ctx.strokeStyle = preGreen;
	          ctx.globalAlpha = 0.15;
	          ctx.lineWidth = 1;
	          ctx.beginPath();
	          $pangeaRegions.forEach($geoPath);
	          ctx.fillStyle = preGreen;
	          ctx.fill();
	          ctx.strokeStyle = "#000";
	          ctx.lineWidth = 1.5;
	          ctx.stroke();
	          setTimeout(function () {
	            var fadeEffect = setInterval(function () {
	              if (ctx.globalAlpha < 0.225) {
	                ctx.globalAlpha += 0.015;
	                ctx.beginPath();
	                $pangeaRegions.forEach($geoPath);
	                ctx.fillStyle = preGreen;
	                ctx.fill();
	                ctx.strokeStyle = "#000";
	                ctx.lineWidth = 1.5;
	                ctx.stroke();
	                console.log("draw?");
	              } else {
	                clearInterval(fadeEffect);
	              }
	            }, 80);
	          }, 1);
	        }

	        if ($switchValueStore === "on") {
	          pangeaMap();
	        }
	      }
	    }
	  };

	  return [canvas, canvas_1_binding];
	}

	var Canvas = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(Canvas, _SvelteComponentDev);

	  var _super = _createSuper(Canvas);

	  function Canvas(options) {
	    var _this;

	    _classCallCheck(this, Canvas);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$D, create_fragment$D, safe_not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "Canvas",
	      options: options,
	      id: create_fragment$D.name
	    });
	    return _this;
	  }

	  return Canvas;
	}(SvelteComponentDev);

	var file$D = "src/components/Info.svelte"; // (15:0) {#if (show && showCounter <= 2)}

	function create_if_block$h(ctx) {
	  var div1;
	  var div0;
	  var t1;
	  var p;
	  var t2;
	  var span;
	  var t4;
	  var div1_transition;
	  var current;
	  var mounted;
	  var dispose;
	  var block = {
	    c: function create() {
	      div1 = element("div");
	      div0 = element("div");
	      div0.textContent = "i";
	      t1 = space();
	      p = element("p");
	      t2 = text("Compare your selection in the ");
	      span = element("span");
	      span.textContent = "dataset view";
	      t4 = text(".");
	      attr_dev(div0, "class", "info-icon svelte-s9qzqk");
	      add_location(div0, file$D, 18, 4, 418);
	      attr_dev(span, "class", "pseudolink");
	      add_location(span, file$D, 19, 37, 486);
	      attr_dev(p, "class", "svelte-s9qzqk");
	      add_location(p, file$D, 19, 4, 453);
	      attr_dev(div1, "class", "info svelte-s9qzqk");
	      set_style(div1, "left",
	      /*x*/
	      ctx[0] + "px");
	      set_style(div1, "top",
	      /*y*/
	      ctx[1] + "px");
	      add_location(div1, file$D, 15, 2, 332);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div1, anchor);
	      append_dev(div1, div0);
	      append_dev(div1, t1);
	      append_dev(div1, p);
	      append_dev(p, t2);
	      append_dev(p, span);
	      append_dev(p, t4);
	      current = true;

	      if (!mounted) {
	        dispose = listen_dev(span, "click", self$1(
	        /*click_handler*/
	        ctx[5]), false, false, false);
	        mounted = true;
	      }
	    },
	    p: function update(ctx, dirty) {
	      if (!current || dirty &
	      /*x*/
	      1) {
	        set_style(div1, "left",
	        /*x*/
	        ctx[0] + "px");
	      }

	      if (!current || dirty &
	      /*y*/
	      2) {
	        set_style(div1, "top",
	        /*y*/
	        ctx[1] + "px");
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      add_render_callback(function () {
	        if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, true);
	        div1_transition.run(1);
	      });
	      current = true;
	    },
	    o: function outro(local) {
	      if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, false);
	      div1_transition.run(0);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div1);
	      if (detaching && div1_transition) div1_transition.end();
	      mounted = false;
	      dispose();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$h.name,
	    type: "if",
	    source: "(15:0) {#if (show && showCounter <= 2)}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$E(ctx) {
	  var if_block_anchor;
	  var current;
	  var if_block =
	  /*show*/
	  ctx[3] &&
	  /*showCounter*/
	  ctx[2] <= 2 && create_if_block$h(ctx);
	  var block = {
	    c: function create() {
	      if (if_block) if_block.c();
	      if_block_anchor = empty();
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      if (if_block) if_block.m(target, anchor);
	      insert_dev(target, if_block_anchor, anchor);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (
	      /*show*/
	      ctx[3] &&
	      /*showCounter*/
	      ctx[2] <= 2) {
	        if (if_block) {
	          if_block.p(ctx, dirty);

	          if (dirty &
	          /*show, showCounter*/
	          12) {
	            transition_in(if_block, 1);
	          }
	        } else {
	          if_block = create_if_block$h(ctx);
	          if_block.c();
	          transition_in(if_block, 1);
	          if_block.m(if_block_anchor.parentNode, if_block_anchor);
	        }
	      } else if (if_block) {
	        group_outros();
	        transition_out(if_block, 1, 1, function () {
	          if_block = null;
	        });
	        check_outros();
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(if_block);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(if_block);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (if_block) if_block.d(detaching);
	      if (detaching) detach_dev(if_block_anchor);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$E.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$E($$self, $$props, $$invalidate) {
	  var _$$props$selectedItem = $$props.selectedItems,
	      selectedItems = _$$props$selectedItem === void 0 ? [] : _$$props$selectedItem;
	  var _$$props$x = $$props.x,
	      x = _$$props$x === void 0 ? 0 : _$$props$x;
	  var _$$props$y = $$props.y,
	      y = _$$props$y === void 0 ? 0 : _$$props$y;
	  var showCounter = 0;
	  var writable_props = ["selectedItems", "x", "y"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Info> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Info", $$slots, []);

	  var click_handler = function click_handler() {
	    return document.querySelector("#table").scrollIntoView({
	      behavior: "auto"
	    });
	  };

	  $$self.$$set = function ($$props) {
	    if ("selectedItems" in $$props) $$invalidate(4, selectedItems = $$props.selectedItems);
	    if ("x" in $$props) $$invalidate(0, x = $$props.x);
	    if ("y" in $$props) $$invalidate(1, y = $$props.y);
	  };

	  $$self.$capture_state = function () {
	    return {
	      fade: fade,
	      selectedItems: selectedItems,
	      x: x,
	      y: y,
	      showCounter: showCounter,
	      show: show
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("selectedItems" in $$props) $$invalidate(4, selectedItems = $$props.selectedItems);
	    if ("x" in $$props) $$invalidate(0, x = $$props.x);
	    if ("y" in $$props) $$invalidate(1, y = $$props.y);
	    if ("showCounter" in $$props) $$invalidate(2, showCounter = $$props.showCounter);
	    if ("show" in $$props) $$invalidate(3, show = $$props.show);
	  };

	  var show;

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  $$self.$$.update = function () {
	    if ($$self.$$.dirty &
	    /*selectedItems*/
	    16) {
	       $$invalidate(3, show = selectedItems.length >= 2);
	    }

	    if ($$self.$$.dirty &
	    /*show, showCounter*/
	    12) {
	       if (show) $$invalidate(2, showCounter += 1);
	    }
	  };

	  return [x, y, showCounter, show, selectedItems, click_handler];
	}

	var Info = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(Info, _SvelteComponentDev);

	  var _super = _createSuper(Info);

	  function Info(options) {
	    var _this;

	    _classCallCheck(this, Info);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$E, create_fragment$E, safe_not_equal, {
	      selectedItems: 4,
	      x: 0,
	      y: 1
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "Info",
	      options: options,
	      id: create_fragment$E.name
	    });
	    return _this;
	  }

	  _createClass(Info, [{
	    key: "selectedItems",
	    get: function get() {
	      throw new Error("<Info>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Info>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "x",
	    get: function get() {
	      throw new Error("<Info>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Info>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "y",
	    get: function get() {
	      throw new Error("<Info>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Info>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return Info;
	}(SvelteComponentDev);

	var file$E = "src/components/CaseDensity.svelte";

	function create_fragment$F(ctx) {
	  var svg;
	  var defs;
	  var linearGradient;
	  var stop0;
	  var stop1;
	  var stop2;
	  var g;
	  var path;
	  var path_d_value;
	  var circle;
	  var circle_cx_value;
	  var circle_cy_value;
	  var svg_viewBox_value;
	  var block = {
	    c: function create() {
	      svg = svg_element("svg");
	      defs = svg_element("defs");
	      linearGradient = svg_element("linearGradient");
	      stop0 = svg_element("stop");
	      stop1 = svg_element("stop");
	      stop2 = svg_element("stop");
	      g = svg_element("g");
	      path = svg_element("path");
	      circle = svg_element("circle");
	      attr_dev(stop0, "offset", "0");
	      set_style(stop0, "stop-color", "var(--usa-lightlightblue)");
	      add_location(stop0, file$E, 45, 6, 1139);
	      attr_dev(stop1, "offset", "0.8");
	      set_style(stop1, "stop-color", "var(--usa-lightblue)");
	      add_location(stop1, file$E, 46, 6, 1212);
	      attr_dev(stop2, "offset", "1");
	      set_style(stop2, "stop-color", "var(--usa-lightblue)");
	      add_location(stop2, file$E, 47, 6, 1282);
	      attr_dev(linearGradient, "id", "density-gradient");
	      attr_dev(linearGradient, "x1", "0");
	      attr_dev(linearGradient, "y1", "0");
	      attr_dev(linearGradient, "x2", "1");
	      attr_dev(linearGradient, "y2", "0");
	      add_location(linearGradient, file$E, 44, 4, 1066);
	      add_location(defs, file$E, 43, 2, 1055);
	      attr_dev(path, "d", path_d_value =
	      /*line*/
	      ctx[3](
	      /*data*/
	      ctx[2]));
	      attr_dev(path, "class", "svelte-ltflmu");
	      add_location(path, file$E, 51, 4, 1399);
	      attr_dev(circle, "cx", circle_cx_value =
	      /*data*/
	      ctx[2][
	      /*data*/
	      ctx[2].length - 1][0]);
	      attr_dev(circle, "cy", circle_cy_value =
	      /*data*/
	      ctx[2][
	      /*data*/
	      ctx[2].length - 1][1]);
	      attr_dev(circle, "r", "5");
	      attr_dev(circle, "class", "svelte-ltflmu");
	      add_location(circle, file$E, 52, 4, 1432);
	      attr_dev(g, "class", "line svelte-ltflmu");
	      add_location(g, file$E, 50, 2, 1378);
	      attr_dev(svg, "viewBox", svg_viewBox_value = "0 0 " +
	      /*width*/
	      ctx[0] + " " +
	      /*height*/
	      ctx[1]);
	      attr_dev(svg, "width",
	      /*width*/
	      ctx[0]);
	      attr_dev(svg, "height",
	      /*height*/
	      ctx[1]);
	      add_location(svg, file$E, 40, 0, 976);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, svg, anchor);
	      append_dev(svg, defs);
	      append_dev(defs, linearGradient);
	      append_dev(linearGradient, stop0);
	      append_dev(linearGradient, stop1);
	      append_dev(linearGradient, stop2);
	      append_dev(svg, g);
	      append_dev(g, path);
	      append_dev(g, circle);
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (dirty &
	      /*data*/
	      4 && path_d_value !== (path_d_value =
	      /*line*/
	      ctx[3](
	      /*data*/
	      ctx[2]))) {
	        attr_dev(path, "d", path_d_value);
	      }

	      if (dirty &
	      /*data*/
	      4 && circle_cx_value !== (circle_cx_value =
	      /*data*/
	      ctx[2][
	      /*data*/
	      ctx[2].length - 1][0])) {
	        attr_dev(circle, "cx", circle_cx_value);
	      }

	      if (dirty &
	      /*data*/
	      4 && circle_cy_value !== (circle_cy_value =
	      /*data*/
	      ctx[2][
	      /*data*/
	      ctx[2].length - 1][1])) {
	        attr_dev(circle, "cy", circle_cy_value);
	      }

	      if (dirty &
	      /*width, height*/
	      3 && svg_viewBox_value !== (svg_viewBox_value = "0 0 " +
	      /*width*/
	      ctx[0] + " " +
	      /*height*/
	      ctx[1])) {
	        attr_dev(svg, "viewBox", svg_viewBox_value);
	      }

	      if (dirty &
	      /*width*/
	      1) {
	        attr_dev(svg, "width",
	        /*width*/
	        ctx[0]);
	      }

	      if (dirty &
	      /*height*/
	      2) {
	        attr_dev(svg, "height",
	        /*height*/
	        ctx[1]);
	      }
	    },
	    i: noop,
	    o: noop,
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(svg);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$F.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$F($$self, $$props, $$invalidate) {
	  var _$$props$width = $$props.width,
	      width = _$$props$width === void 0 ? 0 : _$$props$width;
	  var _$$props$height = $$props.height,
	      height = _$$props$height === void 0 ? 0 : _$$props$height;
	  var _$$props$dates = $$props.dates,
	      dates = _$$props$dates === void 0 ? [] : _$$props$dates;
	  var _$$props$minDate = $$props.minDate,
	      minDate = _$$props$minDate === void 0 ? 0 : _$$props$minDate;
	  var _$$props$maxDate = $$props.maxDate,
	      maxDate = _$$props$maxDate === void 0 ? 350 : _$$props$maxDate;
	  var margin = {
	    top: 10,
	    right: 6,
	    bottom: 10,
	    left: 6
	  };
	  var line = d3line().curve(curveBasis);
	  var writable_props = ["width", "height", "dates", "minDate", "maxDate"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<CaseDensity> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("CaseDensity", $$slots, []);

	  $$self.$$set = function ($$props) {
	    if ("width" in $$props) $$invalidate(0, width = $$props.width);
	    if ("height" in $$props) $$invalidate(1, height = $$props.height);
	    if ("dates" in $$props) $$invalidate(4, dates = $$props.dates);
	    if ("minDate" in $$props) $$invalidate(5, minDate = $$props.minDate);
	    if ("maxDate" in $$props) $$invalidate(6, maxDate = $$props.maxDate);
	  };

	  $$self.$capture_state = function () {
	    return {
	      scaleLinear: linear$1,
	      extent: extent,
	      d3line: d3line,
	      curveBasis: curveBasis,
	      kernelDensityEstimator: kernelDensityEstimator,
	      kernelEpanechnikov: kernelEpanechnikov,
	      width: width,
	      height: height,
	      dates: dates,
	      minDate: minDate,
	      maxDate: maxDate,
	      margin: margin,
	      line: line,
	      ms: ms,
	      xScale: xScale,
	      kde: kde,
	      density: density,
	      yScale: yScale,
	      data: data
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("width" in $$props) $$invalidate(0, width = $$props.width);
	    if ("height" in $$props) $$invalidate(1, height = $$props.height);
	    if ("dates" in $$props) $$invalidate(4, dates = $$props.dates);
	    if ("minDate" in $$props) $$invalidate(5, minDate = $$props.minDate);
	    if ("maxDate" in $$props) $$invalidate(6, maxDate = $$props.maxDate);
	    if ("ms" in $$props) $$invalidate(7, ms = $$props.ms);
	    if ("xScale" in $$props) $$invalidate(8, xScale = $$props.xScale);
	    if ("kde" in $$props) $$invalidate(9, kde = $$props.kde);
	    if ("density" in $$props) $$invalidate(10, density = $$props.density);
	    if ("yScale" in $$props) $$invalidate(11, yScale = $$props.yScale);
	    if ("data" in $$props) $$invalidate(2, data = $$props.data);
	  };

	  var ms;
	  var xScale;
	  var kde;
	  var density;
	  var yScale;
	  var data;

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  $$self.$$.update = function () {
	    if ($$self.$$.dirty &
	    /*dates, minDate*/
	    48) {
	       $$invalidate(7, ms = dates.map(function (d) {
	        return d - minDate;
	      }));
	    }

	    if ($$self.$$.dirty &
	    /*maxDate, minDate, width*/
	    97) {
	       $$invalidate(8, xScale = linear$1().domain([0, maxDate - minDate]).range([margin.left, width - margin.right]));
	    }

	    if ($$self.$$.dirty &
	    /*ms, xScale*/
	    384) {
	       $$invalidate(9, kde = kernelDensityEstimator(kernelEpanechnikov(Math.max.apply(Math, _toConsumableArray(ms)) / ms.length), xScale.ticks(ms.length)));
	    }

	    if ($$self.$$.dirty &
	    /*kde, ms*/
	    640) {
	       $$invalidate(10, density = kde(ms));
	    }

	    if ($$self.$$.dirty &
	    /*density, height*/
	    1026) {
	       $$invalidate(11, yScale = linear$1().domain(extent(density.map(function (d) {
	        return d[1];
	      }))).range([height - margin.bottom, margin.top]));
	    }

	    if ($$self.$$.dirty &
	    /*density, xScale, yScale*/
	    3328) {
	       $$invalidate(2, data = density.map(function (d) {
	        return [xScale(d[0]), yScale(d[1])];
	      }));
	    }
	  };

	  return [width, height, data, line, dates, minDate, maxDate];
	}

	var CaseDensity = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(CaseDensity, _SvelteComponentDev);

	  var _super = _createSuper(CaseDensity);

	  function CaseDensity(options) {
	    var _this;

	    _classCallCheck(this, CaseDensity);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$F, create_fragment$F, safe_not_equal, {
	      width: 0,
	      height: 1,
	      dates: 4,
	      minDate: 5,
	      maxDate: 6
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "CaseDensity",
	      options: options,
	      id: create_fragment$F.name
	    });
	    return _this;
	  }

	  _createClass(CaseDensity, [{
	    key: "width",
	    get: function get() {
	      throw new Error("<CaseDensity>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<CaseDensity>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "height",
	    get: function get() {
	      throw new Error("<CaseDensity>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<CaseDensity>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "dates",
	    get: function get() {
	      throw new Error("<CaseDensity>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<CaseDensity>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "minDate",
	    get: function get() {
	      throw new Error("<CaseDensity>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<CaseDensity>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "maxDate",
	    get: function get() {
	      throw new Error("<CaseDensity>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<CaseDensity>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return CaseDensity;
	}(SvelteComponentDev);

	var file$F = "src/components/CentroidTooltip.svelte";

	function get_each_context$b(ctx, list, i) {
	  var child_ctx = ctx.slice();
	  child_ctx[25] = list[i];
	  return child_ctx;
	}

	function get_each_context_1$3(ctx, list, i) {
	  var child_ctx = ctx.slice();
	  child_ctx[28] = list[i];
	  return child_ctx;
	}

	function get_each_context_2(ctx, list, i) {
	  var child_ctx = ctx.slice();
	  child_ctx[31] = list[i];
	  return child_ctx;
	} // (84:0) {#if ($tooltip)}


	function create_if_block$i(ctx) {
	  var div6;
	  var div5;
	  var div4;
	  var div0;
	  var h2;
	  var t0_value = lodash.uniq(
	  /*$tooltip*/
	  ctx[8].c.map(func$5)).join(" | ") + "";
	  var t0;
	  var t1;
	  var p;
	  var t2_value =
	  /*$tooltip*/
	  ctx[8].c.length + "";
	  var t2;
	  var t3;
	  var t4;
	  var t5;
	  var div1;
	  var h30;
	  var t7;
	  var ul0;
	  var each_blocks_2 = [];
	  var each0_lookup = new Map();
	  var t8;
	  var div2;
	  var h31;
	  var t10;
	  var ul1;
	  var each_blocks_1 = [];
	  var each1_lookup = new Map();
	  var t11;
	  var div3;
	  var h32;
	  var t12;
	  var t13_value = (
	  /*sourceCategories*/
	  ctx[7].length !== 1 ? "ies" : "y") + "";
	  var t13;
	  var t14;
	  var ul2;
	  var each_blocks = [];
	  var each2_lookup = new Map();
	  var div5_resize_listener;
	  var div6_resize_listener;
	  var div6_transition;
	  var current;
	  var mounted;
	  var dispose;
	  var if_block =
	  /*$tooltip*/
	  ctx[8].c.length > 1 && !
	  /*$originalTimeDomain*/
	  ctx[9] && create_if_block_1$6(ctx);
	  var each_value_2 =
	  /*platforms*/
	  ctx[5];
	  validate_each_argument(each_value_2);

	  var get_key = function get_key(ctx) {
	    return (
	      /*platform*/
	      ctx[31].id
	    );
	  };

	  validate_each_keys(ctx, each_value_2, get_each_context_2, get_key);

	  for (var i = 0; i < each_value_2.length; i += 1) {
	    var child_ctx = get_each_context_2(ctx, each_value_2, i);
	    var key = get_key(child_ctx);
	    each0_lookup.set(key, each_blocks_2[i] = create_each_block_2(key, child_ctx));
	  }

	  var each_value_1 =
	  /*methods*/
	  ctx[6];
	  validate_each_argument(each_value_1);

	  var get_key_1 = function get_key_1(ctx) {
	    return (
	      /*method*/
	      ctx[28].id
	    );
	  };

	  validate_each_keys(ctx, each_value_1, get_each_context_1$3, get_key_1);

	  for (var _i = 0; _i < each_value_1.length; _i += 1) {
	    var _child_ctx = get_each_context_1$3(ctx, each_value_1, _i);

	    var _key = get_key_1(_child_ctx);

	    each1_lookup.set(_key, each_blocks_1[_i] = create_each_block_1$3(_key, _child_ctx));
	  }

	  var each_value =
	  /*sourceCategories*/
	  ctx[7];
	  validate_each_argument(each_value);

	  var get_key_2 = function get_key_2(ctx) {
	    return (
	      /*sourceCategory*/
	      ctx[25].id
	    );
	  };

	  validate_each_keys(ctx, each_value, get_each_context$b, get_key_2);

	  for (var _i2 = 0; _i2 < each_value.length; _i2 += 1) {
	    var _child_ctx2 = get_each_context$b(ctx, each_value, _i2);

	    var _key2 = get_key_2(_child_ctx2);

	    each2_lookup.set(_key2, each_blocks[_i2] = create_each_block$b(_key2, _child_ctx2));
	  }

	  var block = {
	    c: function create() {
	      div6 = element("div");
	      div5 = element("div");
	      div4 = element("div");
	      div0 = element("div");
	      h2 = element("h2");
	      t0 = text(t0_value);
	      t1 = space();
	      p = element("p");
	      t2 = text(t2_value);
	      t3 = text(" Species");
	      t4 = space();
	      if (if_block) if_block.c();
	      t5 = space();
	      div1 = element("div");
	      h30 = element("h3");
	      h30.textContent = "Platforms used";
	      t7 = space();
	      ul0 = element("ul");

	      for (var _i3 = 0; _i3 < each_blocks_2.length; _i3 += 1) {
	        each_blocks_2[_i3].c();
	      }

	      t8 = space();
	      div2 = element("div");
	      h31 = element("h3");
	      h31.textContent = "Methods applied";
	      t10 = space();
	      ul1 = element("ul");

	      for (var _i4 = 0; _i4 < each_blocks_1.length; _i4 += 1) {
	        each_blocks_1[_i4].c();
	      }

	      t11 = space();
	      div3 = element("div");
	      h32 = element("h3");
	      t12 = text("Source categor");
	      t13 = text(t13_value);
	      t14 = space();
	      ul2 = element("ul");

	      for (var _i5 = 0; _i5 < each_blocks.length; _i5 += 1) {
	        each_blocks[_i5].c();
	      }

	      attr_dev(h2, "class", "svelte-djvhn0");
	      add_location(h2, file$F, 95, 10, 2872);
	      attr_dev(p, "class", "small no-break svelte-djvhn0");
	      add_location(p, file$F, 96, 10, 2946);
	      attr_dev(div0, "class", "title svelte-djvhn0");
	      add_location(div0, file$F, 94, 8, 2842);
	      attr_dev(h30, "class", "svelte-djvhn0");
	      add_location(h30, file$F, 110, 10, 3614);
	      attr_dev(ul0, "class", "svelte-djvhn0");
	      add_location(ul0, file$F, 111, 10, 3648);
	      attr_dev(div1, "class", "platforms-used svelte-djvhn0");
	      add_location(div1, file$F, 109, 8, 3575);
	      attr_dev(h31, "class", "svelte-djvhn0");
	      add_location(h31, file$F, 121, 10, 4020);
	      attr_dev(ul1, "class", "svelte-djvhn0");
	      add_location(ul1, file$F, 122, 10, 4055);
	      attr_dev(div2, "class", "methods-applied svelte-djvhn0");
	      add_location(div2, file$F, 120, 8, 3980);
	      attr_dev(h32, "class", "svelte-djvhn0");
	      add_location(h32, file$F, 132, 10, 4415);
	      attr_dev(ul2, "class", "svelte-djvhn0");
	      add_location(ul2, file$F, 133, 10, 4494);
	      attr_dev(div3, "class", "source-categories svelte-djvhn0");
	      add_location(div3, file$F, 131, 8, 4373);
	      attr_dev(div4, "class", "scroll-wrapper svelte-djvhn0");
	      add_location(div4, file$F, 93, 6, 2805);
	      attr_dev(div5, "class", "content svelte-djvhn0");
	      set_style(div5, "top",
	      /*contentTop*/
	      ctx[4] + "px");
	      add_render_callback(function () {
	        return (
	          /*div5_elementresize_handler*/
	          ctx[17].call(div5)
	        );
	      });
	      add_location(div5, file$F, 90, 4, 2702);
	      attr_dev(div6, "class", "tooltip svelte-djvhn0");
	      set_style(div6, "left",
	      /*left*/
	      ctx[2] + "px");
	      set_style(div6, "top",
	      /*top*/
	      ctx[3] + "px");
	      add_render_callback(function () {
	        return (
	          /*div6_elementresize_handler*/
	          ctx[18].call(div6)
	        );
	      });
	      add_location(div6, file$F, 84, 2, 2489);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div6, anchor);
	      append_dev(div6, div5);
	      append_dev(div5, div4);
	      append_dev(div4, div0);
	      append_dev(div0, h2);
	      append_dev(h2, t0);
	      append_dev(div0, t1);
	      append_dev(div0, p);
	      append_dev(p, t2);
	      append_dev(p, t3);
	      append_dev(div4, t4);
	      if (if_block) if_block.m(div4, null);
	      append_dev(div4, t5);
	      append_dev(div4, div1);
	      append_dev(div1, h30);
	      append_dev(div1, t7);
	      append_dev(div1, ul0);

	      for (var _i6 = 0; _i6 < each_blocks_2.length; _i6 += 1) {
	        each_blocks_2[_i6].m(ul0, null);
	      }

	      append_dev(div4, t8);
	      append_dev(div4, div2);
	      append_dev(div2, h31);
	      append_dev(div2, t10);
	      append_dev(div2, ul1);

	      for (var _i7 = 0; _i7 < each_blocks_1.length; _i7 += 1) {
	        each_blocks_1[_i7].m(ul1, null);
	      }

	      append_dev(div4, t11);
	      append_dev(div4, div3);
	      append_dev(div3, h32);
	      append_dev(h32, t12);
	      append_dev(h32, t13);
	      append_dev(div3, t14);
	      append_dev(div3, ul2);

	      for (var _i8 = 0; _i8 < each_blocks.length; _i8 += 1) {
	        each_blocks[_i8].m(ul2, null);
	      }

	      div5_resize_listener = add_resize_listener(div5,
	      /*div5_elementresize_handler*/
	      ctx[17].bind(div5));
	      div6_resize_listener = add_resize_listener(div6,
	      /*div6_elementresize_handler*/
	      ctx[18].bind(div6));
	      current = true;

	      if (!mounted) {
	        dispose = [listen_dev(div6, "click", stop_propagation(
	        /*click_handler*/
	        ctx[12]), false, false, true), listen_dev(div6, "mouseover", stop_propagation(
	        /*mouseover_handler*/
	        ctx[13]), false, false, true)];
	        mounted = true;
	      }
	    },
	    p: function update(ctx, dirty) {
	      if ((!current || dirty[0] &
	      /*$tooltip*/
	      256) && t0_value !== (t0_value = lodash.uniq(
	      /*$tooltip*/
	      ctx[8].c.map(func$5)).join(" | ") + "")) set_data_dev(t0, t0_value);
	      if ((!current || dirty[0] &
	      /*$tooltip*/
	      256) && t2_value !== (t2_value =
	      /*$tooltip*/
	      ctx[8].c.length + "")) set_data_dev(t2, t2_value);

	      if (
	      /*$tooltip*/
	      ctx[8].c.length > 1 && !
	      /*$originalTimeDomain*/
	      ctx[9]) {
	        if (if_block) {
	          if_block.p(ctx, dirty);

	          if (dirty[0] &
	          /*$tooltip, $originalTimeDomain*/
	          768) {
	            transition_in(if_block, 1);
	          }
	        } else {
	          if_block = create_if_block_1$6(ctx);
	          if_block.c();
	          transition_in(if_block, 1);
	          if_block.m(div4, t5);
	        }
	      } else if (if_block) {
	        group_outros();
	        transition_out(if_block, 1, 1, function () {
	          if_block = null;
	        });
	        check_outros();
	      }

	      if (dirty[0] &
	      /*handleLiClick, platforms*/
	      2080) {
	        var _each_value_ =
	        /*platforms*/
	        ctx[5];
	        validate_each_argument(_each_value_);
	        validate_each_keys(ctx, _each_value_, get_each_context_2, get_key);
	        each_blocks_2 = update_keyed_each(each_blocks_2, dirty, get_key, 1, ctx, _each_value_, each0_lookup, ul0, destroy_block, create_each_block_2, null, get_each_context_2);
	      }

	      if (dirty[0] &
	      /*handleLiClick, methods*/
	      2112) {
	        var _each_value_2 =
	        /*methods*/
	        ctx[6];
	        validate_each_argument(_each_value_2);
	        validate_each_keys(ctx, _each_value_2, get_each_context_1$3, get_key_1);
	        each_blocks_1 = update_keyed_each(each_blocks_1, dirty, get_key_1, 1, ctx, _each_value_2, each1_lookup, ul1, destroy_block, create_each_block_1$3, null, get_each_context_1$3);
	      }

	      if ((!current || dirty[0] &
	      /*sourceCategories*/
	      128) && t13_value !== (t13_value = (
	      /*sourceCategories*/
	      ctx[7].length !== 1 ? "ies" : "y") + "")) set_data_dev(t13, t13_value);

	      if (dirty[0] &
	      /*handleLiClick, sourceCategories*/
	      2176) {
	        var _each_value =
	        /*sourceCategories*/
	        ctx[7];
	        validate_each_argument(_each_value);
	        validate_each_keys(ctx, _each_value, get_each_context$b, get_key_2);
	        each_blocks = update_keyed_each(each_blocks, dirty, get_key_2, 1, ctx, _each_value, each2_lookup, ul2, destroy_block, create_each_block$b, null, get_each_context$b);
	      }

	      if (!current || dirty[0] &
	      /*contentTop*/
	      16) {
	        set_style(div5, "top",
	        /*contentTop*/
	        ctx[4] + "px");
	      }

	      if (!current || dirty[0] &
	      /*left*/
	      4) {
	        set_style(div6, "left",
	        /*left*/
	        ctx[2] + "px");
	      }

	      if (!current || dirty[0] &
	      /*top*/
	      8) {
	        set_style(div6, "top",
	        /*top*/
	        ctx[3] + "px");
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(if_block);
	      add_render_callback(function () {
	        if (!div6_transition) div6_transition = create_bidirectional_transition(div6, fade, {
	          duration: 200
	        }, true);
	        div6_transition.run(1);
	      });
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(if_block);
	      if (!div6_transition) div6_transition = create_bidirectional_transition(div6, fade, {
	        duration: 200
	      }, false);
	      div6_transition.run(0);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div6);
	      if (if_block) if_block.d();

	      for (var _i9 = 0; _i9 < each_blocks_2.length; _i9 += 1) {
	        each_blocks_2[_i9].d();
	      }

	      for (var _i10 = 0; _i10 < each_blocks_1.length; _i10 += 1) {
	        each_blocks_1[_i10].d();
	      }

	      for (var _i11 = 0; _i11 < each_blocks.length; _i11 += 1) {
	        each_blocks[_i11].d();
	      }

	      div5_resize_listener();
	      div6_resize_listener();
	      if (detaching && div6_transition) div6_transition.end();
	      mounted = false;
	      run_all(dispose);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$i.name,
	    type: "if",
	    source: "(84:0) {#if ($tooltip)}",
	    ctx: ctx
	  });
	  return block;
	} // (99:8) {#if ($tooltip.c.length > 1 && !$originalTimeDomain)}


	function create_if_block_1$6(ctx) {
	  var div;
	  var h3;
	  var t1;
	  var casedensity;
	  var t2;
	  var h6;
	  var current;
	  casedensity = new CaseDensity({
	    props: {
	      width: Math.max(0,
	      /*tWidth*/
	      ctx[0] -
	      /*offset*/
	      ctx[10].left -
	      /*offset*/
	      ctx[10].right - 2 * 16),
	      height: 50,
	      dates:
	      /*$tooltip*/
	      ctx[8].c.map(func_1$1),
	      minDate: 0,
	      maxDate: 350
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      div = element("div");
	      h3 = element("h3");
	      h3.textContent = "Species over time";
	      t1 = space();
	      create_component(casedensity.$$.fragment);
	      t2 = space();
	      h6 = element("h6");
	      h6.textContent = "(Not all prehistoric species, only those represented in the visualization)";
	      attr_dev(h3, "class", "svelte-djvhn0");
	      add_location(h3, file$F, 100, 12, 3138);
	      add_location(h6, file$F, 106, 12, 3452);
	      attr_dev(div, "class", "case-density-vs-time svelte-djvhn0");
	      add_location(div, file$F, 99, 10, 3091);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div, anchor);
	      append_dev(div, h3);
	      append_dev(div, t1);
	      mount_component(casedensity, div, null);
	      append_dev(div, t2);
	      append_dev(div, h6);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var casedensity_changes = {};
	      if (dirty[0] &
	      /*tWidth*/
	      1) casedensity_changes.width = Math.max(0,
	      /*tWidth*/
	      ctx[0] -
	      /*offset*/
	      ctx[10].left -
	      /*offset*/
	      ctx[10].right - 2 * 16);
	      if (dirty[0] &
	      /*$tooltip*/
	      256) casedensity_changes.dates =
	      /*$tooltip*/
	      ctx[8].c.map(func_1$1);
	      casedensity.$set(casedensity_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(casedensity.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(casedensity.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div);
	      destroy_component(casedensity);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_1$6.name,
	    type: "if",
	    source: "(99:8) {#if ($tooltip.c.length > 1 && !$originalTimeDomain)}",
	    ctx: ctx
	  });
	  return block;
	} // (113:12) {#each platforms as platform (platform.id)}


	function create_each_block_2(key_1, ctx) {
	  var li;
	  var t0_value =
	  /*platform*/
	  ctx[31].name + "";
	  var t0;
	  var t1;
	  var span;
	  var t2;
	  var t3_value =
	  /*platform*/
	  ctx[31].count + "";
	  var t3;
	  var t4;
	  var t5;
	  var mounted;
	  var dispose;

	  function click_handler_1() {
	    var _ctx;

	    for (var _len = arguments.length, args = new Array(_len), _key3 = 0; _key3 < _len; _key3++) {
	      args[_key3] = arguments[_key3];
	    }

	    return (
	      /*click_handler_1*/
	      (_ctx = ctx)[14].apply(_ctx, [
	      /*platform*/
	      ctx[31]].concat(args))
	    );
	  }

	  var block = {
	    key: key_1,
	    first: null,
	    c: function create() {
	      li = element("li");
	      t0 = text(t0_value);
	      t1 = space();
	      span = element("span");
	      t2 = text("(");
	      t3 = text(t3_value);
	      t4 = text(")");
	      t5 = space();
	      attr_dev(span, "class", "very-small svelte-djvhn0");
	      add_location(span, file$F, 115, 16, 3850);
	      attr_dev(li, "class", "svelte-djvhn0");
	      add_location(li, file$F, 113, 14, 3723);
	      this.first = li;
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, li, anchor);
	      append_dev(li, t0);
	      append_dev(li, t1);
	      append_dev(li, span);
	      append_dev(span, t2);
	      append_dev(span, t3);
	      append_dev(span, t4);
	      append_dev(li, t5);

	      if (!mounted) {
	        dispose = listen_dev(li, "click", stop_propagation(click_handler_1), false, false, true);
	        mounted = true;
	      }
	    },
	    p: function update(new_ctx, dirty) {
	      ctx = new_ctx;
	      if (dirty[0] &
	      /*platforms*/
	      32 && t0_value !== (t0_value =
	      /*platform*/
	      ctx[31].name + "")) set_data_dev(t0, t0_value);
	      if (dirty[0] &
	      /*platforms*/
	      32 && t3_value !== (t3_value =
	      /*platform*/
	      ctx[31].count + "")) set_data_dev(t3, t3_value);
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(li);
	      mounted = false;
	      dispose();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_each_block_2.name,
	    type: "each",
	    source: "(113:12) {#each platforms as platform (platform.id)}",
	    ctx: ctx
	  });
	  return block;
	} // (124:12) {#each methods as method (method.id)}


	function create_each_block_1$3(key_1, ctx) {
	  var li;
	  var t0_value =
	  /*method*/
	  ctx[28].name + "";
	  var t0;
	  var t1;
	  var span;
	  var t2;
	  var t3_value =
	  /*method*/
	  ctx[28].count + "";
	  var t3;
	  var t4;
	  var t5;
	  var mounted;
	  var dispose;

	  function click_handler_2() {
	    var _ctx2;

	    for (var _len2 = arguments.length, args = new Array(_len2), _key4 = 0; _key4 < _len2; _key4++) {
	      args[_key4] = arguments[_key4];
	    }

	    return (
	      /*click_handler_2*/
	      (_ctx2 = ctx)[15].apply(_ctx2, [
	      /*method*/
	      ctx[28]].concat(args))
	    );
	  }

	  var block = {
	    key: key_1,
	    first: null,
	    c: function create() {
	      li = element("li");
	      t0 = text(t0_value);
	      t1 = space();
	      span = element("span");
	      t2 = text("(");
	      t3 = text(t3_value);
	      t4 = text(")");
	      t5 = space();
	      attr_dev(span, "class", "very-small svelte-djvhn0");
	      add_location(span, file$F, 126, 16, 4245);
	      attr_dev(li, "class", "svelte-djvhn0");
	      add_location(li, file$F, 124, 14, 4124);
	      this.first = li;
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, li, anchor);
	      append_dev(li, t0);
	      append_dev(li, t1);
	      append_dev(li, span);
	      append_dev(span, t2);
	      append_dev(span, t3);
	      append_dev(span, t4);
	      append_dev(li, t5);

	      if (!mounted) {
	        dispose = listen_dev(li, "click", stop_propagation(click_handler_2), false, false, true);
	        mounted = true;
	      }
	    },
	    p: function update(new_ctx, dirty) {
	      ctx = new_ctx;
	      if (dirty[0] &
	      /*methods*/
	      64 && t0_value !== (t0_value =
	      /*method*/
	      ctx[28].name + "")) set_data_dev(t0, t0_value);
	      if (dirty[0] &
	      /*methods*/
	      64 && t3_value !== (t3_value =
	      /*method*/
	      ctx[28].count + "")) set_data_dev(t3, t3_value);
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(li);
	      mounted = false;
	      dispose();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_each_block_1$3.name,
	    type: "each",
	    source: "(124:12) {#each methods as method (method.id)}",
	    ctx: ctx
	  });
	  return block;
	} // (135:12) {#each sourceCategories as sourceCategory (sourceCategory.id)}


	function create_each_block$b(key_1, ctx) {
	  var li;
	  var t0_value =
	  /*sourceCategory*/
	  ctx[25].name + "";
	  var t0;
	  var t1;
	  var span;
	  var t2;
	  var t3_value =
	  /*sourceCategory*/
	  ctx[25].count + "";
	  var t3;
	  var t4;
	  var t5;
	  var mounted;
	  var dispose;

	  function click_handler_3() {
	    var _ctx3;

	    for (var _len3 = arguments.length, args = new Array(_len3), _key5 = 0; _key5 < _len3; _key5++) {
	      args[_key5] = arguments[_key5];
	    }

	    return (
	      /*click_handler_3*/
	      (_ctx3 = ctx)[16].apply(_ctx3, [
	      /*sourceCategory*/
	      ctx[25]].concat(args))
	    );
	  }

	  var block = {
	    key: key_1,
	    first: null,
	    c: function create() {
	      li = element("li");
	      t0 = text(t0_value);
	      t1 = space();
	      span = element("span");
	      t2 = text("(");
	      t3 = text(t3_value);
	      t4 = text(")");
	      t5 = space();
	      attr_dev(span, "class", "very-small svelte-djvhn0");
	      add_location(span, file$F, 137, 16, 4733);
	      attr_dev(li, "class", "svelte-djvhn0");
	      add_location(li, file$F, 135, 14, 4588);
	      this.first = li;
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, li, anchor);
	      append_dev(li, t0);
	      append_dev(li, t1);
	      append_dev(li, span);
	      append_dev(span, t2);
	      append_dev(span, t3);
	      append_dev(span, t4);
	      append_dev(li, t5);

	      if (!mounted) {
	        dispose = listen_dev(li, "click", stop_propagation(click_handler_3), false, false, true);
	        mounted = true;
	      }
	    },
	    p: function update(new_ctx, dirty) {
	      ctx = new_ctx;
	      if (dirty[0] &
	      /*sourceCategories*/
	      128 && t0_value !== (t0_value =
	      /*sourceCategory*/
	      ctx[25].name + "")) set_data_dev(t0, t0_value);
	      if (dirty[0] &
	      /*sourceCategories*/
	      128 && t3_value !== (t3_value =
	      /*sourceCategory*/
	      ctx[25].count + "")) set_data_dev(t3, t3_value);
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(li);
	      mounted = false;
	      dispose();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_each_block$b.name,
	    type: "each",
	    source: "(135:12) {#each sourceCategories as sourceCategory (sourceCategory.id)}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$G(ctx) {
	  var if_block_anchor;
	  var current;
	  var if_block =
	  /*$tooltip*/
	  ctx[8] && create_if_block$i(ctx);
	  var block = {
	    c: function create() {
	      if (if_block) if_block.c();
	      if_block_anchor = empty();
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      if (if_block) if_block.m(target, anchor);
	      insert_dev(target, if_block_anchor, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      if (
	      /*$tooltip*/
	      ctx[8]) {
	        if (if_block) {
	          if_block.p(ctx, dirty);

	          if (dirty[0] &
	          /*$tooltip*/
	          256) {
	            transition_in(if_block, 1);
	          }
	        } else {
	          if_block = create_if_block$i(ctx);
	          if_block.c();
	          transition_in(if_block, 1);
	          if_block.m(if_block_anchor.parentNode, if_block_anchor);
	        }
	      } else if (if_block) {
	        group_outros();
	        transition_out(if_block, 1, 1, function () {
	          if_block = null;
	        });
	        check_outros();
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(if_block);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(if_block);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (if_block) if_block.d(detaching);
	      if (detaching) detach_dev(if_block_anchor);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$G.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	var contentOffset = 100;
	var maximumDate = "10/30/0300";

	var func$5 = function func(d) {
	  return d.disNation;
	};

	var func_1$1 = function func_1(d) {
	  return d.testDate;
	};

	function instance$G($$self, $$props, $$invalidate) {
	  var $tooltip;
	  var $width;
	  var $originalTimeDomain;
	  validate_store(tooltip$1, "tooltip");
	  component_subscribe($$self, tooltip$1, function ($$value) {
	    return $$invalidate(8, $tooltip = $$value);
	  });
	  validate_store(width, "width");
	  component_subscribe($$self, width, function ($$value) {
	    return $$invalidate(20, $width = $$value);
	  });
	  validate_store(originalTimeDomain, "originalTimeDomain");
	  component_subscribe($$self, originalTimeDomain, function ($$value) {
	    return $$invalidate(9, $originalTimeDomain = $$value);
	  });
	  var parseDate = timeParse("%m/%d/%Y");
	  var offset = {
	    top: 10,
	    right: 10,
	    bottom: 10,
	    left: 10
	  };
	  var tf = timeFormat("%B %d, %Y");
	  var tWidth = 0;
	  var tHeight = 0;
	  var side;
	  var left, top, contentTop;
	  var platforms, methods, sourceCategories;

	  function handleLiClick(type, item) {
	    selectAllFilters();
	    disinformantNationFilter.selectOne($tooltip.c[0].disNation);

	    switch (type) {
	      case "platform":
	        platformFilter.selectOne(item);
	        break;

	      case "method":
	        methodFilter.selectOne(item);
	        break;

	      case "source":
	        sourceFilter.selectOne(item);
	        break;

	      case "sourceCategory":
	        sourceCategoryFilter.selectOne(item);
	        break;
	    }
	  }

	  function generateItemsArray(data, name) {
	    return _toConsumableArray(group(data.map(function (d) {
	      return d[name];
	    }).flat(), function (d) {
	      return d;
	    })).map(function (d, i) {
	      return {
	        id: i,
	        name: d[0],
	        count: d[1].length
	      };
	    }).sort(function (a, b) {
	      return sortConsistently(a, b, "count", "id");
	    });
	  }

	  var maxRange = parseDate(maximumDate);
	  var writable_props = [];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<CentroidTooltip> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("CentroidTooltip", $$slots, []);

	  function click_handler(event) {
	    bubble($$self, event);
	  }

	  function mouseover_handler(event) {
	    bubble($$self, event);
	  }

	  var click_handler_1 = function click_handler_1(platform) {
	    return handleLiClick("platform", platform.name);
	  };

	  var click_handler_2 = function click_handler_2(method) {
	    return handleLiClick("method", method.name);
	  };

	  var click_handler_3 = function click_handler_3(sourceCategory) {
	    return handleLiClick("sourceCategory", sourceCategory.name);
	  };

	  function div5_elementresize_handler() {
	    tHeight = this.clientHeight;
	    $$invalidate(1, tHeight);
	  }

	  function div6_elementresize_handler() {
	    tWidth = this.clientWidth;
	    $$invalidate(0, tWidth);
	  }

	  $$self.$capture_state = function () {
	    return {
	      fade: fade,
	      width: width,
	      tooltip: tooltip$1,
	      timeScale: timeScale,
	      sortConsistently: sortConsistently,
	      originalTimeDomain: originalTimeDomain,
	      disinformantNationFilter: disinformantNationFilter,
	      platformFilter: platformFilter,
	      methodFilter: methodFilter,
	      sourceCategoryFilter: sourceCategoryFilter,
	      selectAllFilters: selectAllFilters,
	      timeFormat: timeFormat,
	      group: group,
	      timeParse: timeParse,
	      uniq: lodash.uniq,
	      parseDate: parseDate,
	      CaseDensity: CaseDensity,
	      offset: offset,
	      contentOffset: contentOffset,
	      tf: tf,
	      tWidth: tWidth,
	      tHeight: tHeight,
	      side: side,
	      left: left,
	      top: top,
	      contentTop: contentTop,
	      platforms: platforms,
	      methods: methods,
	      sourceCategories: sourceCategories,
	      handleLiClick: handleLiClick,
	      generateItemsArray: generateItemsArray,
	      maximumDate: maximumDate,
	      maxRange: maxRange,
	      $tooltip: $tooltip,
	      $width: $width,
	      $originalTimeDomain: $originalTimeDomain
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("tWidth" in $$props) $$invalidate(0, tWidth = $$props.tWidth);
	    if ("tHeight" in $$props) $$invalidate(1, tHeight = $$props.tHeight);
	    if ("side" in $$props) $$invalidate(19, side = $$props.side);
	    if ("left" in $$props) $$invalidate(2, left = $$props.left);
	    if ("top" in $$props) $$invalidate(3, top = $$props.top);
	    if ("contentTop" in $$props) $$invalidate(4, contentTop = $$props.contentTop);
	    if ("platforms" in $$props) $$invalidate(5, platforms = $$props.platforms);
	    if ("methods" in $$props) $$invalidate(6, methods = $$props.methods);
	    if ("sourceCategories" in $$props) $$invalidate(7, sourceCategories = $$props.sourceCategories);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  $$self.$$.update = function () {
	    if ($$self.$$.dirty[0] &
	    /*$tooltip, $width, contentTop, tHeight, side, tWidth*/
	    1573139) {
	       if ($tooltip) {
	        $$invalidate(19, side = $width - $tooltip.c[0].xCountry < $width / 2 ? "left" : "right");
	        $$invalidate(3, top = $tooltip.c[0].yCountry - offset.top);
	        $$invalidate(4, contentTop = contentOffset - $tooltip.e.pageY + window.pageYOffset);

	        if (Math.abs(contentTop) > tHeight - offset.bottom) {
	          $$invalidate(4, contentTop = -tHeight - offset.bottom);
	        }

	        if (side === "left") {
	          $$invalidate(2, left = $tooltip.c[0].xCountry - tWidth - 2 * offset.left);
	        } else if (side === "right") {
	          $$invalidate(2, left = $tooltip.c[0].xCountry - offset.left);
	        }
	      }
	    }

	    if ($$self.$$.dirty[0] &
	    /*$tooltip*/
	    256) {
	       if ($tooltip) {
	        $$invalidate(5, platforms = generateItemsArray($tooltip.c, "platforms"));
	        $$invalidate(6, methods = generateItemsArray($tooltip.c, "methods"));
	        $$invalidate(7, sourceCategories = generateItemsArray($tooltip.c, "sourceCategory"));
	      }
	    }
	  };

	  return [tWidth, tHeight, left, top, contentTop, platforms, methods, sourceCategories, $tooltip, $originalTimeDomain, offset, handleLiClick, click_handler, mouseover_handler, click_handler_1, click_handler_2, click_handler_3, div5_elementresize_handler, div6_elementresize_handler];
	}

	var CentroidTooltip = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(CentroidTooltip, _SvelteComponentDev);

	  var _super = _createSuper(CentroidTooltip);

	  function CentroidTooltip(options) {
	    var _this;

	    _classCallCheck(this, CentroidTooltip);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$G, create_fragment$G, safe_not_equal, {}, [-1, -1]);
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "CentroidTooltip",
	      options: options,
	      id: create_fragment$G.name
	    });
	    return _this;
	  }

	  return CentroidTooltip;
	}(SvelteComponentDev);

	var file$G = "src/components/CreatedBy.svelte";

	function create_fragment$H(ctx) {
	  var div;
	  var a;
	  var block = {
	    c: function create() {
	      div = element("div");
	      a = element("a");
	      a.textContent = "Jeffrey Rice";
	      attr_dev(a, "href", "https://www.jeffreyrice.net");
	      attr_dev(a, "class", "svelte-nw6cnc");
	      add_location(a, file$G, 4, 0, 45);
	      attr_dev(div, "class", "created-by svelte-nw6cnc");
	      add_location(div, file$G, 3, 0, 20);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div, anchor);
	      append_dev(div, a);
	    },
	    p: noop,
	    i: noop,
	    o: noop,
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$H.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$H($$self, $$props) {
	  var writable_props = [];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<CreatedBy> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("CreatedBy", $$slots, []);
	  return [];
	}

	var CreatedBy = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(CreatedBy, _SvelteComponentDev);

	  var _super = _createSuper(CreatedBy);

	  function CreatedBy(options) {
	    var _this;

	    _classCallCheck(this, CreatedBy);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$H, create_fragment$H, safe_not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "CreatedBy",
	      options: options,
	      id: create_fragment$H.name
	    });
	    return _this;
	  }

	  return CreatedBy;
	}(SvelteComponentDev);

	function draggable(node) {
	  var isDown = false;
	  var startX;
	  var scrollLeft;

	  function handleMousedown(event) {
	    isDown = true;
	    startX = event.pageX - node.offsetLeft;
	    scrollLeft = node.scrollLeft;
	    window.addEventListener('mouseleave', handleMouseup);
	    window.addEventListener('mousemove', handleMousemove);
	    window.addEventListener('mouseup', handleMouseup);
	  }

	  function handleMouseup() {
	    isDown = false;
	    window.removeEventListener('mouseleave', handleMouseup);
	    window.removeEventListener('mousemove', handleMousemove);
	    window.removeEventListener('mouseup', handleMouseup);
	  }

	  function handleMousemove(event) {
	    if (!isDown) return;
	    event.preventDefault();
	    var x = event.pageX - node.offsetLeft;
	    var walk = (x - startX) * 3;
	    node.scrollLeft = scrollLeft - walk;
	  }

	  node.addEventListener('mousedown', handleMousedown);
	  return {
	    destroy: function destroy() {
	      node.removeEventListener('mousedown', handleMousedown);
	    }
	  };
	}

	var commaFormat = format(',');
	var columns = [{
	  property: 'source',
	  name: 'Source',
	  sortable: true,
	  classes: 'left',
	  minWidth: '100px',
	  format: function format(d) {
	    return d.join(', ');
	  }
	}, {
	  property: 'sourceNation',
	  name: 'Source Nation',
	  sortable: true,
	  classes: 'left',
	  minWidth: '100px'
	}, {
	  property: 'sourceCategory',
	  name: 'Source Category',
	  sortable: true,
	  classes: 'left',
	  minWidth: '100px',
	  format: function format(d) {
	    return d.join(', ');
	  }
	}, {
	  property: 'disinformant',
	  name: 'Disinformant',
	  sortable: true,
	  classes: 'left',
	  minWidth: '100px'
	}, {
	  property: 'disinformantNation',
	  name: 'Disinformant Nation',
	  sortable: true,
	  classes: 'left',
	  minWidth: '100px',
	  format: function format(d) {
	    return d.join(', ');
	  }
	}, {
	  property: 'disinformantAttribution',
	  name: 'Disinformant Attribution',
	  sortable: true,
	  classes: 'left',
	  minWidth: '100px'
	}, {
	  property: 'shortTitle',
	  name: 'Title',
	  sortable: true,
	  classes: 'left',
	  minWidth: '100px'
	}, {
	  property: 'shortDescription',
	  name: 'Description',
	  sortable: true,
	  classes: 'left',
	  minWidth: '500px'
	}, {
	  property: 'attributionUrl',
	  name: 'Link',
	  sortable: true,
	  classes: 'left',
	  hyperlink: true,
	  minWidth: '100px'
	}, {
	  property: 'openWeb',
	  name: 'Open Web',
	  sortable: true,
	  classes: 'left',
	  minWidth: '100px'
	}, {
	  property: 'socialMedia',
	  name: 'Social Media',
	  sortable: true,
	  classes: 'left',
	  minWidth: '100px'
	}, {
	  property: 'messagingPlatforms',
	  name: 'Messaging Platforms',
	  sortable: true,
	  classes: 'left',
	  minWidth: '100px'
	}, {
	  property: 'other',
	  name: 'Other',
	  sortable: true,
	  classes: 'left',
	  minWidth: '100px'
	}, {
	  property: 'startDate',
	  name: 'Start Date',
	  sortable: true,
	  format: timeFormat('%B %d, %Y'),
	  classes: 'left',
	  minWidth: '200px'
	}, {
	  property: 'endDate',
	  name: 'End Date',
	  sortable: true,
	  format: timeFormat('%B %d, %Y'),
	  classes: 'left',
	  minWidth: '200px'
	}, {
	  property: 'attributionDate',
	  name: 'Attribution Date',
	  sortable: true,
	  format: timeFormat('%B %d, %Y'),
	  classes: 'left',
	  minWidth: '200px'
	}, {
	  property: 'methods',
	  name: 'Methods',
	  sortable: true,
	  classes: 'left',
	  format: function format(d) {
	    return d.join(', ');
	  },
	  minWidth: '100px'
	}, {
	  property: 'smiFacebook',
	  name: 'Facebook Engagement',
	  sortable: true,
	  classes: 'right',
	  minWidth: '100px',
	  format: function format(d) {
	    return commaFormat(d);
	  }
	}, {
	  property: 'smiTwitter',
	  name: 'Twitter Engagement',
	  sortable: true,
	  classes: 'right',
	  minWidth: '100px',
	  format: function format(d) {
	    return commaFormat(d);
	  }
	}, {
	  property: 'smiReddit',
	  name: 'Reddit Engagement',
	  sortable: true,
	  classes: 'right',
	  minWidth: '100px',
	  format: function format(d) {
	    return commaFormat(d);
	  }
	}, {
	  property: 'smiTotal',
	  name: 'Total Engagement',
	  sortable: true,
	  classes: 'right',
	  minWidth: '100px',
	  format: function format(d) {
	    return commaFormat(d);
	  }
	}, {
	  property: 'attributionCredibilityScore',
	  name: 'Credibility Score',
	  sortable: true,
	  classes: 'right',
	  minWidth: '100px'
	}, {
	  property: 'attributionObjectivityScore',
	  name: 'Objectivity Score',
	  sortable: true,
	  classes: 'right',
	  minWidth: '100px'
	}, {
	  property: 'attributionEvidenceScore',
	  name: 'Evidence Score',
	  sortable: true,
	  classes: 'right',
	  minWidth: '100px'
	}, {
	  property: 'attributionTransparencyScore',
	  name: 'Transparency Score',
	  sortable: true,
	  classes: 'right',
	  minWidth: '100px'
	}, {
	  property: 'attributionScore',
	  name: 'Attribution Score',
	  sortable: true,
	  classes: 'right',
	  minWidth: '100px'
	}];

	var file$H = "src/components/Table.svelte";

	function get_each_context_1$4(ctx, list, i) {
	  var child_ctx = ctx.slice();
	  child_ctx[18] = list[i];
	  return child_ctx;
	}

	function get_each_context$c(ctx, list, i) {
	  var child_ctx = ctx.slice();
	  child_ctx[15] = list[i];
	  child_ctx[17] = i;
	  return child_ctx;
	}

	function get_each_context_2$1(ctx, list, i) {
	  var child_ctx = ctx.slice();
	  child_ctx[18] = list[i];
	  return child_ctx;
	} // (79:14) {#if (column.sortable)}


	function create_if_block_3$4(ctx) {
	  var svg;
	  var path;
	  var svg_class_value;
	  var mounted;
	  var dispose;

	  function click_handler_1() {
	    var _ctx;

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return (
	      /*click_handler_1*/
	      (_ctx = ctx)[8].apply(_ctx, [
	      /*column*/
	      ctx[18]].concat(args))
	    );
	  }

	  var block = {
	    c: function create() {
	      svg = svg_element("svg");
	      path = svg_element("path");
	      attr_dev(path, "d", "M0 0L15 0L7.5 10Z");
	      add_location(path, file$H, 84, 18, 2443);
	      attr_dev(svg, "viewBox", "0 0 15 10");
	      attr_dev(svg, "width", "12");
	      attr_dev(svg, "height", "8");
	      attr_dev(svg, "class", svg_class_value = "" + (null_to_empty(
	      /*column*/
	      ctx[18].sorted) + " svelte-10skzk9"));
	      add_location(svg, file$H, 79, 16, 2203);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, svg, anchor);
	      append_dev(svg, path);

	      if (!mounted) {
	        dispose = listen_dev(svg, "click", stop_propagation(click_handler_1), false, false, true);
	        mounted = true;
	      }
	    },
	    p: function update(new_ctx, dirty) {
	      ctx = new_ctx;

	      if (dirty &
	      /*columns*/
	      1 && svg_class_value !== (svg_class_value = "" + (null_to_empty(
	      /*column*/
	      ctx[18].sorted) + " svelte-10skzk9"))) {
	        attr_dev(svg, "class", svg_class_value);
	      }
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(svg);
	      mounted = false;
	      dispose();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_3$4.name,
	    type: "if",
	    source: "(79:14) {#if (column.sortable)}",
	    ctx: ctx
	  });
	  return block;
	} // (76:10) {#each columns as column (column.property)}


	function create_each_block_2$1(key_1, ctx) {
	  var th;
	  var t0_value =
	  /*column*/
	  ctx[18].name + "";
	  var t0;
	  var t1;
	  var t2;
	  var if_block =
	  /*column*/
	  ctx[18].sortable && create_if_block_3$4(ctx);
	  var block = {
	    key: key_1,
	    first: null,
	    c: function create() {
	      th = element("th");
	      t0 = text(t0_value);
	      t1 = space();
	      if (if_block) if_block.c();
	      t2 = space();
	      attr_dev(th, "class", "svelte-10skzk9");
	      add_location(th, file$H, 76, 12, 2116);
	      this.first = th;
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, th, anchor);
	      append_dev(th, t0);
	      append_dev(th, t1);
	      if (if_block) if_block.m(th, null);
	      append_dev(th, t2);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*columns*/
	      1 && t0_value !== (t0_value =
	      /*column*/
	      ctx[18].name + "")) set_data_dev(t0, t0_value);

	      if (
	      /*column*/
	      ctx[18].sortable) {
	        if (if_block) {
	          if_block.p(ctx, dirty);
	        } else {
	          if_block = create_if_block_3$4(ctx);
	          if_block.c();
	          if_block.m(th, t2);
	        }
	      } else if (if_block) {
	        if_block.d(1);
	        if_block = null;
	      }
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(th);
	      if (if_block) if_block.d();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_each_block_2$1.name,
	    type: "each",
	    source: "(76:10) {#each columns as column (column.property)}",
	    ctx: ctx
	  });
	  return block;
	} // (104:16) {:else}


	function create_else_block$1(ctx) {
	  var t_value =
	  /*row*/
	  ctx[15][
	  /*column*/
	  ctx[18].property] + "";
	  var t;
	  var block = {
	    c: function create() {
	      t = text(t_value);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, t, anchor);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*rows, columns*/
	      3 && t_value !== (t_value =
	      /*row*/
	      ctx[15][
	      /*column*/
	      ctx[18].property] + "")) set_data_dev(t, t_value);
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(t);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_else_block$1.name,
	    type: "else",
	    source: "(104:16) {:else}",
	    ctx: ctx
	  });
	  return block;
	} // (102:45) 


	function create_if_block_2$4(ctx) {
	  var a;
	  var t;
	  var a_href_value;
	  var block = {
	    c: function create() {
	      a = element("a");
	      t = text("Link");
	      attr_dev(a, "href", a_href_value =
	      /*row*/
	      ctx[15][
	      /*column*/
	      ctx[18].property]);
	      attr_dev(a, "target", "_blank");
	      add_location(a, file$H, 102, 18, 3297);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, a, anchor);
	      append_dev(a, t);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*rows, columns*/
	      3 && a_href_value !== (a_href_value =
	      /*row*/
	      ctx[15][
	      /*column*/
	      ctx[18].property])) {
	        attr_dev(a, "href", a_href_value);
	      }
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(a);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_2$4.name,
	    type: "if",
	    source: "(102:45) ",
	    ctx: ctx
	  });
	  return block;
	} // (100:42) 


	function create_if_block_1$7(ctx) {
	  var t_value =
	  /*column*/
	  ctx[18].format(
	  /*row*/
	  ctx[15][
	  /*column*/
	  ctx[18].property]) + "";
	  var t;
	  var block = {
	    c: function create() {
	      t = text(t_value);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, t, anchor);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*columns, rows*/
	      3 && t_value !== (t_value =
	      /*column*/
	      ctx[18].format(
	      /*row*/
	      ctx[15][
	      /*column*/
	      ctx[18].property]) + "")) set_data_dev(t, t_value);
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(t);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_1$7.name,
	    type: "if",
	    source: "(100:42) ",
	    ctx: ctx
	  });
	  return block;
	} // (98:16) {#if (row[column.property] === undefined || row[column.property] === null)}


	function create_if_block$j(ctx) {
	  var t_value = "" + "";
	  var t;
	  var block = {
	    c: function create() {
	      t = text(t_value);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, t, anchor);
	    },
	    p: noop,
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(t);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$j.name,
	    type: "if",
	    source: "(98:16) {#if (row[column.property] === undefined || row[column.property] === null)}",
	    ctx: ctx
	  });
	  return block;
	} // (96:12) {#each columns as column (column.property)}


	function create_each_block_1$4(key_1, ctx) {
	  var td;
	  var td_class_value;
	  var td_style_value;

	  function select_block_type(ctx, dirty) {
	    if (
	    /*row*/
	    ctx[15][
	    /*column*/
	    ctx[18].property] === undefined ||
	    /*row*/
	    ctx[15][
	    /*column*/
	    ctx[18].property] === null) return create_if_block$j;
	    if (
	    /*column*/
	    ctx[18].format) return create_if_block_1$7;
	    if (
	    /*column*/
	    ctx[18].hyperlink) return create_if_block_2$4;
	    return create_else_block$1;
	  }

	  var current_block_type = select_block_type(ctx);
	  var if_block = current_block_type(ctx);
	  var block = {
	    key: key_1,
	    first: null,
	    c: function create() {
	      td = element("td");
	      if_block.c();
	      attr_dev(td, "class", td_class_value = "" + (null_to_empty(
	      /*column*/
	      ctx[18].classes) + " svelte-10skzk9"));
	      attr_dev(td, "style", td_style_value =
	      /*column*/
	      ctx[18].minWidth ? "min-width: ".concat(
	      /*column*/
	      ctx[18].minWidth, ";") : "");
	      add_location(td, file$H, 96, 14, 2928);
	      this.first = td;
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, td, anchor);
	      if_block.m(td, null);
	    },
	    p: function update(ctx, dirty) {
	      if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
	        if_block.p(ctx, dirty);
	      } else {
	        if_block.d(1);
	        if_block = current_block_type(ctx);

	        if (if_block) {
	          if_block.c();
	          if_block.m(td, null);
	        }
	      }

	      if (dirty &
	      /*columns*/
	      1 && td_class_value !== (td_class_value = "" + (null_to_empty(
	      /*column*/
	      ctx[18].classes) + " svelte-10skzk9"))) {
	        attr_dev(td, "class", td_class_value);
	      }

	      if (dirty &
	      /*columns*/
	      1 && td_style_value !== (td_style_value =
	      /*column*/
	      ctx[18].minWidth ? "min-width: ".concat(
	      /*column*/
	      ctx[18].minWidth, ";") : "")) {
	        attr_dev(td, "style", td_style_value);
	      }
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(td);
	      if_block.d();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_each_block_1$4.name,
	    type: "each",
	    source: "(96:12) {#each columns as column (column.property)}",
	    ctx: ctx
	  });
	  return block;
	} // (93:8) {#each rows.filter((d) => d.search.indexOf(searchString.toUpperCase()) > -1) as row, i (row.id)}


	function create_each_block$c(key_1, ctx) {
	  var tr;
	  var each_blocks = [];
	  var each_1_lookup = new Map();
	  var t;
	  var each_value_1 =
	  /*columns*/
	  ctx[0];
	  validate_each_argument(each_value_1);

	  var get_key = function get_key(ctx) {
	    return (
	      /*column*/
	      ctx[18].property
	    );
	  };

	  validate_each_keys(ctx, each_value_1, get_each_context_1$4, get_key);

	  for (var i = 0; i < each_value_1.length; i += 1) {
	    var child_ctx = get_each_context_1$4(ctx, each_value_1, i);
	    var key = get_key(child_ctx);
	    each_1_lookup.set(key, each_blocks[i] = create_each_block_1$4(key, child_ctx));
	  }

	  var block = {
	    key: key_1,
	    first: null,
	    c: function create() {
	      tr = element("tr");

	      for (var _i = 0; _i < each_blocks.length; _i += 1) {
	        each_blocks[_i].c();
	      }

	      t = space();
	      attr_dev(tr, "class", "svelte-10skzk9");
	      toggle_class(tr, "darker", 1 -
	      /*i*/
	      ctx[17] % 2 === 0);
	      toggle_class(tr, "selected",
	      /*$selected*/
	      ctx[2].map(func_1$2).includes(
	      /*row*/
	      ctx[15].id));
	      add_location(tr, file$H, 93, 10, 2745);
	      this.first = tr;
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, tr, anchor);

	      for (var _i2 = 0; _i2 < each_blocks.length; _i2 += 1) {
	        each_blocks[_i2].m(tr, null);
	      }

	      append_dev(tr, t);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*columns, rows, searchString, undefined*/
	      11) {
	        var _each_value_ =
	        /*columns*/
	        ctx[0];
	        validate_each_argument(_each_value_);
	        validate_each_keys(ctx, _each_value_, get_each_context_1$4, get_key);
	        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, _each_value_, each_1_lookup, tr, destroy_block, create_each_block_1$4, t, get_each_context_1$4);
	      }

	      if (dirty &
	      /*rows, searchString*/
	      10) {
	        toggle_class(tr, "darker", 1 -
	        /*i*/
	        ctx[17] % 2 === 0);
	      }

	      if (dirty &
	      /*$selected, rows, searchString*/
	      14) {
	        toggle_class(tr, "selected",
	        /*$selected*/
	        ctx[2].map(func_1$2).includes(
	        /*row*/
	        ctx[15].id));
	      }
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(tr);

	      for (var _i3 = 0; _i3 < each_blocks.length; _i3 += 1) {
	        each_blocks[_i3].d();
	      }
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_each_block$c.name,
	    type: "each",
	    source: "(93:8) {#each rows.filter((d) => d.search.indexOf(searchString.toUpperCase()) > -1) as row, i (row.id)}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$I(ctx) {
	  var div2;
	  var div0;
	  var a;
	  var t1;
	  var div1;
	  var table;
	  var thead;
	  var tr;
	  var each_blocks_1 = [];
	  var each0_lookup = new Map();
	  var t2;
	  var tbody;
	  var each_blocks = [];
	  var each1_lookup = new Map();
	  var draggable_action;
	  var mounted;
	  var dispose;
	  var each_value_2 =
	  /*columns*/
	  ctx[0];
	  validate_each_argument(each_value_2);

	  var get_key = function get_key(ctx) {
	    return (
	      /*column*/
	      ctx[18].property
	    );
	  };

	  validate_each_keys(ctx, each_value_2, get_each_context_2$1, get_key);

	  for (var i = 0; i < each_value_2.length; i += 1) {
	    var child_ctx = get_each_context_2$1(ctx, each_value_2, i);
	    var key = get_key(child_ctx);
	    each0_lookup.set(key, each_blocks_1[i] = create_each_block_2$1(key, child_ctx));
	  }

	  var each_value =
	  /*rows*/
	  ctx[1].filter(
	  /*func*/
	  ctx[9]);
	  validate_each_argument(each_value);

	  var get_key_1 = function get_key_1(ctx) {
	    return (
	      /*row*/
	      ctx[15].id
	    );
	  };

	  validate_each_keys(ctx, each_value, get_each_context$c, get_key_1);

	  for (var _i4 = 0; _i4 < each_value.length; _i4 += 1) {
	    var _child_ctx = get_each_context$c(ctx, each_value, _i4);

	    var _key2 = get_key_1(_child_ctx);

	    each1_lookup.set(_key2, each_blocks[_i4] = create_each_block$c(_key2, _child_ctx));
	  }

	  var block = {
	    c: function create() {
	      div2 = element("div");
	      div0 = element("div");
	      a = element("a");
	      a.textContent = "Download full dataset";
	      t1 = space();
	      div1 = element("div");
	      table = element("table");
	      thead = element("thead");
	      tr = element("tr");

	      for (var _i5 = 0; _i5 < each_blocks_1.length; _i5 += 1) {
	        each_blocks_1[_i5].c();
	      }

	      t2 = space();
	      tbody = element("tbody");

	      for (var _i6 = 0; _i6 < each_blocks.length; _i6 += 1) {
	        each_blocks[_i6].c();
	      }

	      attr_dev(a, "href", "https://github.com/DFRLab/Interference2020-Data");
	      attr_dev(a, "target", "_blank");
	      add_location(a, file$H, 69, 4, 1797);
	      attr_dev(div0, "class", "table-header svelte-10skzk9");
	      add_location(div0, file$H, 68, 2, 1766);
	      attr_dev(tr, "class", "svelte-10skzk9");
	      add_location(tr, file$H, 74, 8, 2045);
	      attr_dev(thead, "class", "disable-select");
	      add_location(thead, file$H, 73, 6, 2006);
	      attr_dev(tbody, "class", "svelte-10skzk9");
	      add_location(tbody, file$H, 91, 6, 2593);
	      attr_dev(table, "cellspacing", "0");
	      attr_dev(table, "cellpadding", "0");
	      attr_dev(table, "class", "svelte-10skzk9");
	      add_location(table, file$H, 72, 4, 1960);
	      attr_dev(div1, "class", "inner-table-wrapper svelte-10skzk9");
	      add_location(div1, file$H, 71, 2, 1908);
	      attr_dev(div2, "id", "table");
	      attr_dev(div2, "class", "table-element svelte-10skzk9");
	      add_location(div2, file$H, 65, 0, 1690);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div2, anchor);
	      append_dev(div2, div0);
	      append_dev(div0, a);
	      append_dev(div2, t1);
	      append_dev(div2, div1);
	      append_dev(div1, table);
	      append_dev(table, thead);
	      append_dev(thead, tr);

	      for (var _i7 = 0; _i7 < each_blocks_1.length; _i7 += 1) {
	        each_blocks_1[_i7].m(tr, null);
	      }

	      append_dev(table, t2);
	      append_dev(table, tbody);

	      for (var _i8 = 0; _i8 < each_blocks.length; _i8 += 1) {
	        each_blocks[_i8].m(tbody, null);
	      }

	      if (!mounted) {
	        dispose = [listen_dev(tbody, "mousedown", stop_propagation(
	        /*mousedown_handler*/
	        ctx[7]), false, false, true), action_destroyer(draggable_action = draggable.call(null, div1)), listen_dev(div2, "click", stop_propagation(
	        /*click_handler*/
	        ctx[6]), false, false, true)];
	        mounted = true;
	      }
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (dirty &
	      /*columns, handleSorterClick*/
	      17) {
	        var _each_value_2 =
	        /*columns*/
	        ctx[0];
	        validate_each_argument(_each_value_2);
	        validate_each_keys(ctx, _each_value_2, get_each_context_2$1, get_key);
	        each_blocks_1 = update_keyed_each(each_blocks_1, dirty, get_key, 1, ctx, _each_value_2, each0_lookup, tr, destroy_block, create_each_block_2$1, null, get_each_context_2$1);
	      }

	      if (dirty &
	      /*rows, searchString, $selected, columns, undefined*/
	      15) {
	        var _each_value =
	        /*rows*/
	        ctx[1].filter(
	        /*func*/
	        ctx[9]);

	        validate_each_argument(_each_value);
	        validate_each_keys(ctx, _each_value, get_each_context$c, get_key_1);
	        each_blocks = update_keyed_each(each_blocks, dirty, get_key_1, 1, ctx, _each_value, each1_lookup, tbody, destroy_block, create_each_block$c, null, get_each_context$c);
	      }
	    },
	    i: noop,
	    o: noop,
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div2);

	      for (var _i9 = 0; _i9 < each_blocks_1.length; _i9 += 1) {
	        each_blocks_1[_i9].d();
	      }

	      for (var _i10 = 0; _i10 < each_blocks.length; _i10 += 1) {
	        each_blocks[_i10].d();
	      }

	      mounted = false;
	      run_all(dispose);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$I.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	var func_1$2 = function func_1(d) {
	  return d.id;
	};

	function instance$I($$self, $$props, $$invalidate) {
	  var $selected;
	  validate_store(selected, "selected");
	  component_subscribe($$self, selected, function ($$value) {
	    return $$invalidate(2, $selected = $$value);
	  });
	  var _$$props$timePoints = $$props.timePoints,
	      timePoints = _$$props$timePoints === void 0 ? [] : _$$props$timePoints;

	  var columns$1 = _toConsumableArray(columns);

	  var rows;
	  var searchString = "";

	  function getData(timePoints) {
	    resetSorters();
	    $$invalidate(1, rows = _toConsumableArray(timePoints).filter(function (d) {
	      return d.show;
	    }));
	  }

	  function sortRows(property, direction) {
	    rows.sort(function (a, b) {
	      return direction * sortConsistently(a, b, property, "id");
	    });
	  }

	  function resetSorters() {
	    $$invalidate(0, columns$1 = columns$1.map(function (d) {
	      return _objectSpread2(_objectSpread2({}, d), {}, {
	        sorted: "none"
	      });
	    }));
	  }

	  function handleSorterClick(property) {
	    columns$1.forEach(function (d) {
	      if (d.property !== property) d.sorted = "none";
	    });
	    var column = columns$1.find(function (d) {
	      return d.property === property;
	    });

	    if (column.sorted === "none") {
	      column.sorted = "descending";
	      sortRows(property, -1);
	    } else if (column.sorted === "descending") {
	      column.sorted = "ascending";
	      sortRows(property, 1);
	    } else if (column.sorted === "ascending") {
	      column.sorted = "none";
	      getData(timePoints);
	    }

	    $$invalidate(0, columns$1);
	  }

	  function getSortedSelectedRows(ids) {
	    var arr = [];
	    ids.reverse().forEach(function (id) {
	      arr.push(timePoints.find(function (d) {
	        return d.id === id;
	      }));
	    });
	    return arr;
	  }

	  function moveUp(ids) {
	    resetSorters();

	    if (ids.length > 0) {
	      $$invalidate(1, rows = [].concat(_toConsumableArray(getSortedSelectedRows(ids)), _toConsumableArray(rows.filter(function (d) {
	        return !ids.includes(d.id);
	      }))));
	    }
	  }

	  var writable_props = ["timePoints"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Table> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Table", $$slots, []);

	  function click_handler(event) {
	    bubble($$self, event);
	  }

	  function mousedown_handler(event) {
	    bubble($$self, event);
	  }

	  var click_handler_1 = function click_handler_1(column) {
	    return handleSorterClick(column.property);
	  };

	  var func = function func(d) {
	    return d.search.indexOf(searchString.toUpperCase()) > -1;
	  };

	  $$self.$$set = function ($$props) {
	    if ("timePoints" in $$props) $$invalidate(5, timePoints = $$props.timePoints);
	  };

	  $$self.$capture_state = function () {
	    return {
	      sortConsistently: sortConsistently,
	      draggable: draggable,
	      selected: selected,
	      inputColumns: columns,
	      timePoints: timePoints,
	      columns: columns$1,
	      rows: rows,
	      searchString: searchString,
	      getData: getData,
	      sortRows: sortRows,
	      resetSorters: resetSorters,
	      handleSorterClick: handleSorterClick,
	      getSortedSelectedRows: getSortedSelectedRows,
	      moveUp: moveUp,
	      $selected: $selected
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("timePoints" in $$props) $$invalidate(5, timePoints = $$props.timePoints);
	    if ("columns" in $$props) $$invalidate(0, columns$1 = $$props.columns);
	    if ("rows" in $$props) $$invalidate(1, rows = $$props.rows);
	    if ("searchString" in $$props) $$invalidate(3, searchString = $$props.searchString);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  $$self.$$.update = function () {
	    if ($$self.$$.dirty &
	    /*timePoints*/
	    32) {
	       getData(timePoints);
	    }

	    if ($$self.$$.dirty &
	    /*$selected, timePoints*/
	    36) {
	       if ($selected && timePoints) moveUp($selected.map(function (d) {
	        return d.id;
	      }));
	    }
	  };

	  return [columns$1, rows, $selected, searchString, handleSorterClick, timePoints, click_handler, mousedown_handler, click_handler_1, func];
	}

	var Table = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(Table, _SvelteComponentDev);

	  var _super = _createSuper(Table);

	  function Table(options) {
	    var _this;

	    _classCallCheck(this, Table);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$I, create_fragment$I, safe_not_equal, {
	      timePoints: 5
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "Table",
	      options: options,
	      id: create_fragment$I.name
	    });
	    return _this;
	  }

	  _createClass(Table, [{
	    key: "timePoints",
	    get: function get() {
	      throw new Error("<Table>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Table>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return Table;
	}(SvelteComponentDev);

	var console_1$9 = globals.console;
	var file$I = "src/components/Visualization.svelte"; // (215:2) {#if (!timePoints)}

	function create_if_block_1$8(ctx) {
	  var loadinginfo;
	  var current;
	  loadinginfo = new LoadingInfo({
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(loadinginfo.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(loadinginfo, target, anchor);
	      current = true;
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(loadinginfo.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(loadinginfo.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(loadinginfo, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_1$8.name,
	    type: "if",
	    source: "(215:2) {#if (!timePoints)}",
	    ctx: ctx
	  });
	  return block;
	} // (223:6) {#if (timePoints)}


	function create_if_block$k(ctx) {
	  var svg;
	  var t0;
	  var canvas;
	  var t1;
	  var info;
	  var t2;
	  var eventtooltip;
	  var t3;
	  var centroidtooltip;
	  var t4;
	  var createdby;
	  var current;
	  svg = new Svg$1({
	    props: {
	      timePoints:
	      /*timePoints*/
	      ctx[1]
	    },
	    $$inline: true
	  });
	  canvas = new Canvas({
	    $$inline: true
	  });
	  info = new Info({
	    props: {
	      selectedItems:
	      /*$selected*/
	      ctx[8],
	      x: 2 *
	      /*$timeScale*/
	      ctx[3].range()[0],
	      y:
	      /*$sizeTotalYScale*/
	      ctx[4].range()[1]
	    },
	    $$inline: true
	  });
	  eventtooltip = new EventTooltip({
	    $$inline: true
	  });
	  centroidtooltip = new CentroidTooltip({
	    $$inline: true
	  });
	  createdby = new CreatedBy({
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(svg.$$.fragment);
	      t0 = space();
	      create_component(canvas.$$.fragment);
	      t1 = space();
	      create_component(info.$$.fragment);
	      t2 = space();
	      create_component(eventtooltip.$$.fragment);
	      t3 = space();
	      create_component(centroidtooltip.$$.fragment);
	      t4 = space();
	      create_component(createdby.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(svg, target, anchor);
	      insert_dev(target, t0, anchor);
	      mount_component(canvas, target, anchor);
	      insert_dev(target, t1, anchor);
	      mount_component(info, target, anchor);
	      insert_dev(target, t2, anchor);
	      mount_component(eventtooltip, target, anchor);
	      insert_dev(target, t3, anchor);
	      mount_component(centroidtooltip, target, anchor);
	      insert_dev(target, t4, anchor);
	      mount_component(createdby, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var svg_changes = {};
	      if (dirty &
	      /*timePoints*/
	      2) svg_changes.timePoints =
	      /*timePoints*/
	      ctx[1];
	      svg.$set(svg_changes);
	      var info_changes = {};
	      if (dirty &
	      /*$selected*/
	      256) info_changes.selectedItems =
	      /*$selected*/
	      ctx[8];
	      if (dirty &
	      /*$timeScale*/
	      8) info_changes.x = 2 *
	      /*$timeScale*/
	      ctx[3].range()[0];
	      if (dirty &
	      /*$sizeTotalYScale*/
	      16) info_changes.y =
	      /*$sizeTotalYScale*/
	      ctx[4].range()[1];
	      info.$set(info_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(svg.$$.fragment, local);
	      transition_in(canvas.$$.fragment, local);
	      transition_in(info.$$.fragment, local);
	      transition_in(eventtooltip.$$.fragment, local);
	      transition_in(centroidtooltip.$$.fragment, local);
	      transition_in(createdby.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(svg.$$.fragment, local);
	      transition_out(canvas.$$.fragment, local);
	      transition_out(info.$$.fragment, local);
	      transition_out(eventtooltip.$$.fragment, local);
	      transition_out(centroidtooltip.$$.fragment, local);
	      transition_out(createdby.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(svg, detaching);
	      if (detaching) detach_dev(t0);
	      destroy_component(canvas, detaching);
	      if (detaching) detach_dev(t1);
	      destroy_component(info, detaching);
	      if (detaching) detach_dev(t2);
	      destroy_component(eventtooltip, detaching);
	      if (detaching) detach_dev(t3);
	      destroy_component(centroidtooltip, detaching);
	      if (detaching) detach_dev(t4);
	      destroy_component(createdby, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$k.name,
	    type: "if",
	    source: "(223:6) {#if (timePoints)}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$J(ctx) {
	  var totop;
	  var t0;
	  var topvisualcontent;
	  var t1;
	  var div4;
	  var t2;
	  var div2;
	  var div0;
	  var controls;
	  var div0_resize_listener;
	  var t3;
	  var div1;
	  var div1_resize_listener;
	  var t4;
	  var div3;
	  var table;
	  var div4_resize_listener;
	  var current;
	  totop = new ToTop({
	    $$inline: true
	  });
	  topvisualcontent = new TopVisualContent({
	    props: {
	      data:
	      /*data*/
	      ctx[0]
	    },
	    $$inline: true
	  });
	  var if_block0 = !
	  /*timePoints*/
	  ctx[1] && create_if_block_1$8(ctx);
	  controls = new Controls({
	    props: {
	      timePoints:
	      /*timePoints*/
	      ctx[1]
	    },
	    $$inline: true
	  });
	  var if_block1 =
	  /*timePoints*/
	  ctx[1] && create_if_block$k(ctx);
	  table = new Table({
	    props: {
	      timePoints:
	      /*timePoints*/
	      ctx[1]
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(totop.$$.fragment);
	      t0 = space();
	      create_component(topvisualcontent.$$.fragment);
	      t1 = space();
	      div4 = element("div");
	      if (if_block0) if_block0.c();
	      t2 = space();
	      div2 = element("div");
	      div0 = element("div");
	      create_component(controls.$$.fragment);
	      t3 = space();
	      div1 = element("div");
	      if (if_block1) if_block1.c();
	      t4 = space();
	      div3 = element("div");
	      create_component(table.$$.fragment);
	      attr_dev(div0, "class", "controls-wrapper svelte-1k0l8ja");
	      add_render_callback(function () {
	        return (
	          /*div0_elementresize_handler*/
	          ctx[9].call(div0)
	        );
	      });
	      add_location(div0, file$I, 218, 4, 7837);
	      attr_dev(div1, "class", "draw-wrapper svelte-1k0l8ja");
	      add_render_callback(function () {
	        return (
	          /*div1_elementresize_handler*/
	          ctx[11].call(div1)
	        );
	      });
	      add_location(div1, file$I, 221, 4, 7951);
	      attr_dev(div2, "class", "sticky-wrapper svelte-1k0l8ja");
	      add_location(div2, file$I, 217, 2, 7804);
	      attr_dev(div3, "class", "table-wrapper svelte-1k0l8ja");
	      add_location(div3, file$I, 234, 2, 8346);
	      attr_dev(div4, "id", "viz");
	      attr_dev(div4, "class", "visualization-wrapper svelte-1k0l8ja");
	      add_render_callback(function () {
	        return (
	          /*div4_elementresize_handler*/
	          ctx[12].call(div4)
	        );
	      });
	      add_location(div4, file$I, 213, 0, 7681);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      mount_component(totop, target, anchor);
	      insert_dev(target, t0, anchor);
	      mount_component(topvisualcontent, target, anchor);
	      insert_dev(target, t1, anchor);
	      insert_dev(target, div4, anchor);
	      if (if_block0) if_block0.m(div4, null);
	      append_dev(div4, t2);
	      append_dev(div4, div2);
	      append_dev(div2, div0);
	      mount_component(controls, div0, null);
	      div0_resize_listener = add_resize_listener(div0,
	      /*div0_elementresize_handler*/
	      ctx[9].bind(div0));
	      append_dev(div2, t3);
	      append_dev(div2, div1);
	      if (if_block1) if_block1.m(div1, null);
	      /*div1_binding*/

	      ctx[10](div1);
	      div1_resize_listener = add_resize_listener(div1,
	      /*div1_elementresize_handler*/
	      ctx[11].bind(div1));
	      append_dev(div4, t4);
	      append_dev(div4, div3);
	      mount_component(table, div3, null);
	      div4_resize_listener = add_resize_listener(div4,
	      /*div4_elementresize_handler*/
	      ctx[12].bind(div4));
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      var topvisualcontent_changes = {};
	      if (dirty &
	      /*data*/
	      1) topvisualcontent_changes.data =
	      /*data*/
	      ctx[0];
	      topvisualcontent.$set(topvisualcontent_changes);

	      if (!
	      /*timePoints*/
	      ctx[1]) {
	        if (if_block0) {
	          if (dirty &
	          /*timePoints*/
	          2) {
	            transition_in(if_block0, 1);
	          }
	        } else {
	          if_block0 = create_if_block_1$8(ctx);
	          if_block0.c();
	          transition_in(if_block0, 1);
	          if_block0.m(div4, t2);
	        }
	      } else if (if_block0) {
	        group_outros();
	        transition_out(if_block0, 1, 1, function () {
	          if_block0 = null;
	        });
	        check_outros();
	      }

	      var controls_changes = {};
	      if (dirty &
	      /*timePoints*/
	      2) controls_changes.timePoints =
	      /*timePoints*/
	      ctx[1];
	      controls.$set(controls_changes);

	      if (
	      /*timePoints*/
	      ctx[1]) {
	        if (if_block1) {
	          if_block1.p(ctx, dirty);

	          if (dirty &
	          /*timePoints*/
	          2) {
	            transition_in(if_block1, 1);
	          }
	        } else {
	          if_block1 = create_if_block$k(ctx);
	          if_block1.c();
	          transition_in(if_block1, 1);
	          if_block1.m(div1, null);
	        }
	      } else if (if_block1) {
	        group_outros();
	        transition_out(if_block1, 1, 1, function () {
	          if_block1 = null;
	        });
	        check_outros();
	      }

	      var table_changes = {};
	      if (dirty &
	      /*timePoints*/
	      2) table_changes.timePoints =
	      /*timePoints*/
	      ctx[1];
	      table.$set(table_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(totop.$$.fragment, local);
	      transition_in(topvisualcontent.$$.fragment, local);
	      transition_in(if_block0);
	      transition_in(controls.$$.fragment, local);
	      transition_in(if_block1);
	      transition_in(table.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(totop.$$.fragment, local);
	      transition_out(topvisualcontent.$$.fragment, local);
	      transition_out(if_block0);
	      transition_out(controls.$$.fragment, local);
	      transition_out(if_block1);
	      transition_out(table.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(totop, detaching);
	      if (detaching) detach_dev(t0);
	      destroy_component(topvisualcontent, detaching);
	      if (detaching) detach_dev(t1);
	      if (detaching) detach_dev(div4);
	      if (if_block0) if_block0.d();
	      destroy_component(controls);
	      div0_resize_listener();
	      if (if_block1) if_block1.d();
	      /*div1_binding*/

	      ctx[10](null);
	      div1_resize_listener();
	      destroy_component(table);
	      div4_resize_listener();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$J.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	var observeDays = 3;

	function instance$J($$self, $$props, $$invalidate) {
	  var $attributionScoreFilter;
	  var $polarizationFilter;
	  var $textSearchFilter;
	  var $caseIdFilter;
	  var $highlightPolarization;
	  var $highlightCib;
	  var $width;
	  var $minDim;
	  var $maxDim;
	  var $panelHeight;
	  var $margin;
	  var $timeScale;
	  var $sizeTotalYScale;
	  var $attributionScoreScale;
	  var $sizeTotalRScale;
	  var $originalTimeDomain;
	  var $disinformantNationFilter;
	  var $timeperiodFilter;
	  var $dietFilter;
	  var $controlsHeight;
	  var $drawWrapper;
	  var $height;
	  var $selected;
	  validate_store(attributionScoreFilter, "attributionScoreFilter");
	  component_subscribe($$self, attributionScoreFilter, function ($$value) {
	    return $$invalidate(13, $attributionScoreFilter = $$value);
	  });
	  validate_store(polarizationFilter, "polarizationFilter");
	  component_subscribe($$self, polarizationFilter, function ($$value) {
	    return $$invalidate(14, $polarizationFilter = $$value);
	  });
	  validate_store(textSearchFilter, "textSearchFilter");
	  component_subscribe($$self, textSearchFilter, function ($$value) {
	    return $$invalidate(15, $textSearchFilter = $$value);
	  });
	  validate_store(caseIdFilter, "caseIdFilter");
	  component_subscribe($$self, caseIdFilter, function ($$value) {
	    return $$invalidate(16, $caseIdFilter = $$value);
	  });
	  validate_store(highlightPolarization, "highlightPolarization");
	  component_subscribe($$self, highlightPolarization, function ($$value) {
	    return $$invalidate(17, $highlightPolarization = $$value);
	  });
	  validate_store(highlightCib, "highlightCib");
	  component_subscribe($$self, highlightCib, function ($$value) {
	    return $$invalidate(18, $highlightCib = $$value);
	  });
	  validate_store(width, "width");
	  component_subscribe($$self, width, function ($$value) {
	    return $$invalidate(2, $width = $$value);
	  });
	  validate_store(minDim, "minDim");
	  component_subscribe($$self, minDim, function ($$value) {
	    return $$invalidate(19, $minDim = $$value);
	  });
	  validate_store(maxDim, "maxDim");
	  component_subscribe($$self, maxDim, function ($$value) {
	    return $$invalidate(20, $maxDim = $$value);
	  });
	  validate_store(panelHeight, "panelHeight");
	  component_subscribe($$self, panelHeight, function ($$value) {
	    return $$invalidate(21, $panelHeight = $$value);
	  });
	  validate_store(margin, "margin");
	  component_subscribe($$self, margin, function ($$value) {
	    return $$invalidate(22, $margin = $$value);
	  });
	  validate_store(timeScale, "timeScale");
	  component_subscribe($$self, timeScale, function ($$value) {
	    return $$invalidate(3, $timeScale = $$value);
	  });
	  validate_store(sizeTotalYScale, "sizeTotalYScale");
	  component_subscribe($$self, sizeTotalYScale, function ($$value) {
	    return $$invalidate(4, $sizeTotalYScale = $$value);
	  });
	  validate_store(attributionScoreScale, "attributionScoreScale");
	  component_subscribe($$self, attributionScoreScale, function ($$value) {
	    return $$invalidate(23, $attributionScoreScale = $$value);
	  });
	  validate_store(sizeTotalRScale, "sizeTotalRScale");
	  component_subscribe($$self, sizeTotalRScale, function ($$value) {
	    return $$invalidate(24, $sizeTotalRScale = $$value);
	  });
	  validate_store(originalTimeDomain, "originalTimeDomain");
	  component_subscribe($$self, originalTimeDomain, function ($$value) {
	    return $$invalidate(25, $originalTimeDomain = $$value);
	  });
	  validate_store(disinformantNationFilter, "disinformantNationFilter");
	  component_subscribe($$self, disinformantNationFilter, function ($$value) {
	    return $$invalidate(26, $disinformantNationFilter = $$value);
	  });
	  validate_store(timeperiodFilter, "timeperiodFilter");
	  component_subscribe($$self, timeperiodFilter, function ($$value) {
	    return $$invalidate(27, $timeperiodFilter = $$value);
	  });
	  validate_store(dietFilter, "dietFilter");
	  component_subscribe($$self, dietFilter, function ($$value) {
	    return $$invalidate(28, $dietFilter = $$value);
	  });
	  validate_store(controlsHeight, "controlsHeight");
	  component_subscribe($$self, controlsHeight, function ($$value) {
	    return $$invalidate(5, $controlsHeight = $$value);
	  });
	  validate_store(drawWrapper, "drawWrapper");
	  component_subscribe($$self, drawWrapper, function ($$value) {
	    return $$invalidate(6, $drawWrapper = $$value);
	  });
	  validate_store(height, "height");
	  component_subscribe($$self, height, function ($$value) {
	    return $$invalidate(7, $height = $$value);
	  });
	  validate_store(selected, "selected");
	  component_subscribe($$self, selected, function ($$value) {
	    return $$invalidate(8, $selected = $$value);
	  });
	  var tf = timeFormat("%B %d, %Y");
	  var data, timePoints;
	  onMount( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
	    var urlFilters;
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            _context.t0 = $$invalidate;
	            _context.next = 3;
	            return loadData();

	          case 3:
	            _context.t1 = data = _context.sent.map(function (d) {
	              return _objectSpread2(_objectSpread2({}, d), {}, {
	                recentlyAdded: Math.ceil((new Date() - d.timestamp) / (1000 * 60 * 60 * 24)) <= observeDays,
	                search: [d.shortTitle, d.shortDescription, d.platforms, d.methods, d.sourceNation, d.source, d.sourceCategory, d.diet].flat().join("__").toLowerCase(),
	                show: false
	              });
	            });
	            (0, _context.t0)(0, _context.t1);
	            // load the map data
	            loadMapData();
	            loadPangeaData(); // setup filters

	            disinformantNationFilter.init(data, "disinformantNation");
	            platformFilter.init(data, "platforms");
	            methodFilter.init(data, "methods");
	            timeperiodFilter.init(data, "periodEra");
	            sourceFilter$1.init(data, "sourceFilter");
	            sourceCategoryFilter.init(data, "sourceCategory");
	            dietFilter.init(data, "diet");
	            tagFilter.init(data, "tags");
	            set_store_value(attributionScoreFilter, $attributionScoreFilter = attributionScoreDef);
	            set_store_value(polarizationFilter, $polarizationFilter = polarizationDef);
	            preloadImages(data); // apply filters from URL

	            if (window.location.hash.length > 1) {
	              urlFilters = parseUrl(window.location.hash);
	              disinformantNationFilter.applyBoolArray(urlFilters.disinformantNations);
	              platformFilter.applyBoolArray(urlFilters.platforms);
	              methodFilter.applyBoolArray(urlFilters.methods);
	              timeperiodFilter.applyBoolArray(urlFilters.methods);
	              sourceFilter$1.applyBoolArray(urlFilters.sources);
	              sourceCategoryFilter.applyBoolArray(urlFilters.sourceCategories);
	              dietFilter.applyBoolArray(urlFilters.diet);
	              tagFilter.applyBoolArray(urlFilters.tags);
	              contextData.applyBoolArray(urlFilters.contextData);
	              set_store_value(attributionScoreFilter, $attributionScoreFilter = urlFilters.attributionScores);
	              set_store_value(polarizationFilter, $polarizationFilter = urlFilters.polarization);
	              set_store_value(textSearchFilter, $textSearchFilter = urlFilters.textSearch);
	              set_store_value(caseIdFilter, $caseIdFilter = urlFilters.caseId);
	              set_store_value(highlightPolarization, $highlightPolarization = urlFilters.highlightPolarization);
	              set_store_value(highlightCib, $highlightCib = urlFilters.highlightCib);
	            }

	          case 19:
	          case "end":
	            return _context.stop();
	        }
	      }
	    }, _callee);
	  })));
	  var writable_props = [];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$9.warn("<Visualization> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Visualization", $$slots, []);

	  function div0_elementresize_handler() {
	    $controlsHeight = this.clientHeight;
	    controlsHeight.set($controlsHeight);
	  }

	  function div1_binding($$value) {
	    binding_callbacks[$$value ? "unshift" : "push"](function () {
	      $drawWrapper = $$value;
	      drawWrapper.set($drawWrapper);
	    });
	  }

	  function div1_elementresize_handler() {
	    $height = this.clientHeight;
	    height.set($height);
	  }

	  function div4_elementresize_handler() {
	    $width = this.clientWidth;
	    width.set($width);
	  }

	  $$self.$capture_state = function () {
	    return {
	      onMount: onMount,
	      loadData: loadData,
	      loadMapData: loadMapData,
	      loadPangeaData: loadPangeaData,
	      setScales: setScales,
	      width: width,
	      height: height,
	      panelHeight: panelHeight,
	      minDim: minDim,
	      maxDim: maxDim,
	      margin: margin,
	      controlsHeight: controlsHeight,
	      timeScale: timeScale,
	      sizeTotalYScale: sizeTotalYScale,
	      sizeTotalRScale: sizeTotalRScale,
	      sizeShareRScale: sizeShareRScale,
	      attributionScoreScale: attributionScoreScale,
	      polarizationScale: polarizationScale,
	      disinformantNationFilter: disinformantNationFilter,
	      platformFilter: platformFilter,
	      methodFilter: methodFilter,
	      timeperiodFilter: timeperiodFilter,
	      sourceFilter: sourceFilter$1,
	      sourceCategoryFilter: sourceCategoryFilter,
	      dietFilter: dietFilter,
	      attributionScoreFilter: attributionScoreFilter,
	      attributionScoreDef: attributionScoreDef,
	      textSearchFilter: textSearchFilter,
	      originalTimeDomain: originalTimeDomain,
	      contextData: contextData,
	      caseIdFilter: caseIdFilter,
	      tagFilter: tagFilter,
	      polarizationFilter: polarizationFilter,
	      polarizationDef: polarizationDef,
	      highlightPolarization: highlightPolarization,
	      highlightCib: highlightCib,
	      haveOverlap: haveOverlap,
	      withinRange: withinRange,
	      includesTextSearch: includesTextSearch,
	      isCaseId: isCaseId,
	      showPolarization: showPolarization,
	      showCib: showCib,
	      preloadImages: preloadImages,
	      selected: selected,
	      drawWrapper: drawWrapper,
	      uniq: lodash.uniq,
	      extent: extent,
	      forceSimulation: forceSimulation,
	      forceX: forceX,
	      forceY: forceY,
	      forceManyBody: forceManyBody,
	      forceCenter: forceCenter,
	      forceCollide: forceCollide,
	      timeFormat: timeFormat,
	      sortConsistently: sortConsistently,
	      parseUrl: parseUrl,
	      ToTop: ToTop,
	      TopVisualContent: TopVisualContent,
	      LoadingInfo: LoadingInfo,
	      Controls: Controls,
	      Svg: Svg$1,
	      Canvas: Canvas,
	      Info: Info,
	      EventTooltip: EventTooltip,
	      CentroidTooltip: CentroidTooltip,
	      CreatedBy: CreatedBy,
	      Table: Table,
	      tf: tf,
	      observeDays: observeDays,
	      data: data,
	      timePoints: timePoints,
	      $attributionScoreFilter: $attributionScoreFilter,
	      $polarizationFilter: $polarizationFilter,
	      $textSearchFilter: $textSearchFilter,
	      $caseIdFilter: $caseIdFilter,
	      $highlightPolarization: $highlightPolarization,
	      $highlightCib: $highlightCib,
	      $width: $width,
	      $minDim: $minDim,
	      $maxDim: $maxDim,
	      $panelHeight: $panelHeight,
	      $margin: $margin,
	      $timeScale: $timeScale,
	      $sizeTotalYScale: $sizeTotalYScale,
	      $attributionScoreScale: $attributionScoreScale,
	      $sizeTotalRScale: $sizeTotalRScale,
	      $originalTimeDomain: $originalTimeDomain,
	      $disinformantNationFilter: $disinformantNationFilter,
	      $timeperiodFilter: $timeperiodFilter,
	      $dietFilter: $dietFilter,
	      $controlsHeight: $controlsHeight,
	      $drawWrapper: $drawWrapper,
	      $height: $height,
	      $selected: $selected
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("data" in $$props) $$invalidate(0, data = $$props.data);
	    if ("timePoints" in $$props) $$invalidate(1, timePoints = $$props.timePoints);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  $$self.$$.update = function () {
	    if ($$self.$$.dirty &
	    /*data, $width, $minDim, $maxDim, $panelHeight, $margin*/
	    7864325) {
	      // set the scales
	       setScales(data, $width, $minDim, $maxDim, $panelHeight, $margin);
	    }

	    if ($$self.$$.dirty &
	    /*data, $timeScale, $sizeTotalYScale, $attributionScoreScale, $sizeTotalRScale, $originalTimeDomain, $margin, $width*/
	    62914589) {
	       if (data) {
	        // calculate scaled data points
	        var scaledData = data.map(function (d) {
	          return _objectSpread2(_objectSpread2({}, d), {}, {
	            _x: $timeScale(d.testDate),
	            _y: $sizeTotalYScale.range()[0],
	            color: $attributionScoreScale(d.attributionScore),
	            size: d.size,
	            rSizeTot: isNaN(d.size) || d.size === 0 ? $sizeTotalRScale.range()[0] : $sizeTotalRScale(d.size),
	            fy: d.sizePending ? Math.min($sizeTotalYScale.range()[0], $sizeTotalYScale.range()[0] - 2 * $sizeTotalRScale.range()[0] + (Math.random() - 0.5) * 20) : $sizeTotalYScale(Math.max(d.sizeTotal, 15))
	          });
	        }).sort(function (a, b) {
	          return sortConsistently(a, b, "size", "id");
	        });
	        console.log("scaled data: ", scaledData); // for some reason these definitions need to be in here and not in a gobal scope or module

	        var simulation = forceSimulation().force("x", forceX().x(function (d) {
	          return d._x;
	        }));
	        var simulationCharge = forceSimulation().force("x", forceX().x(function (d) {
	          return d._x;
	        })). //   .force('charge', forceManyBody().strength((d) => -(d.rSizeTot + 1) * 10).distanceMax(500).distanceMin(50));
	        //  .force('charge', forceManyBody().strength((d) => -(d.size + 10) * 95).distanceMax(450).distanceMin(200));
	        //   .force('charge', forceManyBody().strength((d) => -(d.size + 50) * 10).distanceMax(500).distanceMin(250));
	        force("charge", forceManyBody().strength(function (d) {
	          return -(d.rSizeTot + 1) * 10;
	        }).distanceMax(500).distanceMin(50));
	        simulation.nodes(scaledData).alpha(0.8).tick(300);
	        console.log(scaledData); // finally set the global timePoints variable

	        simulationCharge.nodes(scaledData).alpha(0.8).tick(300).on("end", function () {
	          $$invalidate(1, timePoints = scaledData.map(function (d) {
	            return _objectSpread2(_objectSpread2({}, d), {}, {
	              x: $originalTimeDomain ? d.x : Math.max($margin.left - Math.random() * $margin.left / 4, Math.min($width - $margin.right + (Math.random() + 2) * $margin.right / 4, d.x))
	            });
	          }));
	        });
	      }
	    }

	    if ($$self.$$.dirty &
	    /*timePoints, $disinformantNationFilter, $timeperiodFilter, $dietFilter, $textSearchFilter, $attributionScoreFilter, $polarizationFilter, $highlightPolarization, $caseIdFilter, $highlightCib*/
	    470278146) {
	      // translate filter values into show property state
	       if (timePoints) {
	        $$invalidate(1, timePoints = timePoints.map(function (d) {
	          return _objectSpread2(_objectSpread2({}, d), {}, {
	            show: haveOverlap($disinformantNationFilter, d.disinformantNation) && //      && haveOverlap($platformFilter, d.platforms)
	            //      && haveOverlap($methodFilter, d.methods)
	            haveOverlap($timeperiodFilter, d.periodEra) && //      && haveOverlap($sourceFilter, d.sourceFilter)
	            //      && haveOverlap($sourceCategoryFilter, d.sourceCategory)
	            haveOverlap($dietFilter, d.diet) && //      && haveOverlap($tagFilter, d.tags)
	            includesTextSearch($textSearchFilter, d.search) && withinRange($attributionScoreFilter, d.attributionScore) && withinRange($polarizationFilter, d.averagePolarization, !$highlightPolarization) && isCaseId($caseIdFilter, d.id) && showPolarization($highlightPolarization, d.polarization) && showCib($highlightCib, d.cib)
	          });
	        }));
	      }
	    }
	  };

	  return [data, timePoints, $width, $timeScale, $sizeTotalYScale, $controlsHeight, $drawWrapper, $height, $selected, div0_elementresize_handler, div1_binding, div1_elementresize_handler, div4_elementresize_handler];
	}

	var Visualization = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(Visualization, _SvelteComponentDev);

	  var _super = _createSuper(Visualization);

	  function Visualization(options) {
	    var _this;

	    _classCallCheck(this, Visualization);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$J, create_fragment$J, safe_not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "Visualization",
	      options: options,
	      id: create_fragment$J.name
	    });
	    return _this;
	  }

	  return Visualization;
	}(SvelteComponentDev);

	var file$J = "src/CookieBanner.svelte";

	function create_fragment$K(ctx) {
	  var div1;
	  var div0;
	  var p;
	  var t1;
	  var button0;
	  var t3;
	  var button1;
	  var t5;
	  var a;
	  var block = {
	    c: function create() {
	      div1 = element("div");
	      div0 = element("div");
	      p = element("p");
	      p.textContent = "This page wants to use cookies.";
	      t1 = space();
	      button0 = element("button");
	      button0.textContent = "Accept";
	      t3 = space();
	      button1 = element("button");
	      button1.textContent = "Reject";
	      t5 = space();
	      a = element("a");
	      a.textContent = "Privacy";
	      attr_dev(p, "class", "svelte-145zoq8");
	      add_location(p, file$J, 6, 4, 100);
	      attr_dev(button0, "id", "cookies-eu-accept");
	      attr_dev(button0, "class", "svelte-145zoq8");
	      add_location(button0, file$J, 7, 4, 143);
	      attr_dev(button1, "id", "cookies-eu-reject");
	      attr_dev(button1, "class", "svelte-145zoq8");
	      add_location(button1, file$J, 8, 4, 194);
	      attr_dev(a, "href", "https://www.atlanticcouncil.org/privacy-policy/");
	      attr_dev(a, "target", "_blank");
	      attr_dev(a, "class", "svelte-145zoq8");
	      add_location(a, file$J, 9, 4, 245);
	      attr_dev(div0, "class", "content svelte-145zoq8");
	      add_location(div0, file$J, 5, 2, 74);
	      attr_dev(div1, "id", "cookies-eu-banner");
	      attr_dev(div1, "class", "svelte-145zoq8");
	      add_location(div1, file$J, 4, 0, 43);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div1, anchor);
	      append_dev(div1, div0);
	      append_dev(div0, p);
	      append_dev(div0, t1);
	      append_dev(div0, button0);
	      append_dev(div0, t3);
	      append_dev(div0, button1);
	      append_dev(div0, t5);
	      append_dev(div0, a);
	    },
	    p: noop,
	    i: noop,
	    o: noop,
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div1);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$K.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$K($$self, $$props) {
	  var writable_props = [];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<CookieBanner> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("CookieBanner", $$slots, []);
	  return [];
	}

	var CookieBanner = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(CookieBanner, _SvelteComponentDev);

	  var _super = _createSuper(CookieBanner);

	  function CookieBanner(options) {
	    var _this;

	    _classCallCheck(this, CookieBanner);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$K, create_fragment$K, safe_not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "CookieBanner",
	      options: options,
	      id: create_fragment$K.name
	    });
	    return _this;
	  }

	  return CookieBanner;
	}(SvelteComponentDev);

	var console_1$a = globals.console;
	var file$K = "src/App.svelte"; // (19:2) {:else}

	function create_else_block$2(ctx) {
	  var visualization;
	  var current;
	  visualization = new Visualization({
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(visualization.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(visualization, target, anchor);
	      current = true;
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(visualization.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(visualization.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(visualization, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_else_block$2.name,
	    type: "else",
	    source: "(19:2) {:else}",
	    ctx: ctx
	  });
	  return block;
	} // (17:62) 


	function create_if_block_1$9(ctx) {
	  var catch_1;
	  var current;
	  catch_1 = new Catch({
	    props: {
	      content: "Please visit us with a modern browser."
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(catch_1.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(catch_1, target, anchor);
	      current = true;
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(catch_1.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(catch_1.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(catch_1, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_1$9.name,
	    type: "if",
	    source: "(17:62) ",
	    ctx: ctx
	  });
	  return block;
	} // (15:2) {#if (width < 600)}


	function create_if_block$l(ctx) {
	  var catch_1;
	  var current;
	  catch_1 = new Catch({
	    props: {
	      content: "Please visit us on a larger screen to explore the visualization or try turning your device."
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(catch_1.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(catch_1, target, anchor);
	      current = true;
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(catch_1.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(catch_1.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(catch_1, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$l.name,
	    type: "if",
	    source: "(15:2) {#if (width < 600)}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$L(ctx) {
	  var div;
	  var cookiebanner;
	  var t;
	  var show_if;
	  var current_block_type_index;
	  var if_block;
	  var div_resize_listener;
	  var current;
	  cookiebanner = new CookieBanner({
	    $$inline: true
	  });
	  var if_block_creators = [create_if_block$l, create_if_block_1$9, create_else_block$2];
	  var if_blocks = [];

	  function select_block_type(ctx, dirty) {
	    if (
	    /*width*/
	    ctx[0] < 600) return 0;
	    if (show_if == null) show_if = !!/MSIE|Trident/.test(window.navigator.userAgent);
	    if (show_if) return 1;
	    return 2;
	  }

	  current_block_type_index = select_block_type(ctx);
	  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	  var block = {
	    c: function create() {
	      div = element("div");
	      create_component(cookiebanner.$$.fragment);
	      t = space();
	      if_block.c();
	      attr_dev(div, "class", "app-wrapper svelte-dxcfwj");
	      add_render_callback(function () {
	        return (
	          /*div_elementresize_handler*/
	          ctx[1].call(div)
	        );
	      });
	      add_location(div, file$K, 12, 0, 322);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div, anchor);
	      mount_component(cookiebanner, div, null);
	      append_dev(div, t);
	      if_blocks[current_block_type_index].m(div, null);
	      div_resize_listener = add_resize_listener(div,
	      /*div_elementresize_handler*/
	      ctx[1].bind(div));
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = _slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      var previous_block_index = current_block_type_index;
	      current_block_type_index = select_block_type(ctx);

	      if (current_block_type_index !== previous_block_index) {
	        group_outros();
	        transition_out(if_blocks[previous_block_index], 1, 1, function () {
	          if_blocks[previous_block_index] = null;
	        });
	        check_outros();
	        if_block = if_blocks[current_block_type_index];

	        if (!if_block) {
	          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	          if_block.c();
	        }

	        transition_in(if_block, 1);
	        if_block.m(div, null);
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(cookiebanner.$$.fragment, local);
	      transition_in(if_block);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(cookiebanner.$$.fragment, local);
	      transition_out(if_block);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div);
	      destroy_component(cookiebanner);
	      if_blocks[current_block_type_index].d();
	      div_resize_listener();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$L.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$L($$self, $$props, $$invalidate) {
	  var width;
	  console.log("ð Fantastic! You are interested in our source code! Check it out â uncompiled:dino code");
	  var writable_props = [];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$a.warn("<App> was created with unknown prop '".concat(key, "'"));
	  });
	  var _$$props$$$slots = $$props.$$slots,
	      $$slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("App", $$slots, []);

	  function div_elementresize_handler() {
	    width = this.clientWidth;
	    $$invalidate(0, width);
	  }

	  $$self.$capture_state = function () {
	    return {
	      Catch: Catch,
	      Visualization: Visualization,
	      CookieBanner: CookieBanner,
	      width: width
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("width" in $$props) $$invalidate(0, width = $$props.width);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [width, div_elementresize_handler];
	}

	var App = /*#__PURE__*/function (_SvelteComponentDev) {
	  _inherits(App, _SvelteComponentDev);

	  var _super = _createSuper(App);

	  function App(options) {
	    var _this;

	    _classCallCheck(this, App);

	    _this = _super.call(this, options);
	    init(_assertThisInitialized(_this), options, instance$L, create_fragment$L, safe_not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: _assertThisInitialized(_this),
	      tagName: "App",
	      options: options,
	      id: create_fragment$L.name
	    });
	    return _this;
	  }

	  return App;
	}(SvelteComponentDev);

	var googleAnalytics = function googleAnalytics(gaID) {
	  window.dataLayer = window.dataLayer || [];

	  function gtag() {
	    dataLayer.push(arguments);
	  }

	  gtag('js', new Date());
	  gtag('config', gaID);
	  var script = document.createElement('script');
	  script.src = "https://www.googletagmanager.com/gtag/js?id=".concat(gaID);
	  document.body.appendChild(script);
	};

	var cookiesEuBanner_min = createCommonjsModule(function (module, exports) {
	/** Cookies EU banner v2.0.1 by Alex-D - alex-d.github.io/Cookies-EU-banner/ - MIT License */
	!function(e,t){module.exports=t();}(window,function(){var i,u=window.document;return (i=function(e,t,o,n){if(!(this instanceof i))return new i(e);this.cookieTimeout=33696e6,this.bots=/bot|crawler|spider|crawling/i,this.cookieName="hasConsent",this.trackingCookiesNames=["__utma","__utmb","__utmc","__utmt","__utmv","__utmz","_ga","_gat","_gid"],this.launchFunction=e,this.waitAccept=t||!1,this.useLocalStorage=o||!1,this.init();}).prototype={init:function(){var e=this.bots.test(navigator.userAgent),t=navigator.doNotTrack||navigator.msDoNotTrack||window.doNotTrack;return e||!(null==t||t&&"yes"!==t&&1!==t&&"1"!==t)||!1===this.hasConsent()?(this.removeBanner(0),!1):!0===this.hasConsent()?(this.launchFunction(),!0):(this.showBanner(),void(this.waitAccept||this.setConsent(!0)))},showBanner:function(){var e=this,t=u.getElementById.bind(u),o=t("cookies-eu-banner"),n=t("cookies-eu-reject"),i=t("cookies-eu-accept"),s=t("cookies-eu-more"),a=void 0===o.dataset.waitRemove?0:parseInt(o.dataset.waitRemove),c=this.addClickListener,r=e.removeBanner.bind(e,a);o.style.display="block",s&&c(s,function(){e.deleteCookie(e.cookieName);}),i&&c(i,function(){r(),e.setConsent(!0),e.launchFunction();}),n&&c(n,function(){r(),e.setConsent(!1),e.trackingCookiesNames.map(e.deleteCookie);});},setConsent:function(e){if(this.useLocalStorage)return localStorage.setItem(this.cookieName,e);this.setCookie(this.cookieName,e);},hasConsent:function(){function e(e){return -1<u.cookie.indexOf(t+"="+e)||localStorage.getItem(t)===e}var t=this.cookieName;return !!e("true")||!e("false")&&null},setCookie:function(e,t){var o=new Date;o.setTime(o.getTime()+this.cookieTimeout),u.cookie=e+"="+t+";expires="+o.toGMTString()+";path=/";},deleteCookie:function(e){var t=u.location.hostname.replace(/^www\./,""),o="; expires=Thu, 01-Jan-1970 00:00:01 GMT; path=/";u.cookie=e+"=; domain=."+t+o,u.cookie=e+"="+o;},addClickListener:function(e,t){if(e.attachEvent)return e.attachEvent("onclick",t);e.addEventListener("click",t);},removeBanner:function(e){setTimeout(function(){var e=u.getElementById("cookies-eu-banner");e&&e.parentNode&&e.parentNode.removeChild(e);},e);}},i});
	});

	var app = new App({
	  target: document.querySelector('#svelte-target')
	});
	new cookiesEuBanner_min(function () {
	  googleAnalytics('');
	}, true);

	return app;

}());
//# sourceMappingURL=bundle.js.map
